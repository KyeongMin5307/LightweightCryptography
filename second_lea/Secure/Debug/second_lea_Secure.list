
second_lea_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c005ab0  0c005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c005b00  0c005b00  0002e040  2**0
                  CONTENTS
  4 .ARM          00000000  0c005b00  0c005b00  0002e040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c005b00  0c005b00  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c005b00  0c005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c005b04  0c005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c005b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000032c  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000338  30000338  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005144  00000000  00000000  0002e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001181  00000000  00000000  000331fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000558  00000000  00000000  00034380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003eb  00000000  00000000  000348d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a13  00000000  00000000  00034cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007d89  00000000  00000000  0005c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb730  00000000  00000000  0006445f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001408  00000000  00000000  0015fb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00160f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c005a98 	.word	0x0c005a98

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c005a98 	.word	0x0c005a98

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <lea_set_key>:
	0x57e5c409, 0xafcb8812, 0x5f971025, 0xbf2e204a, 0x7e5c4095, 0xfcb8812a, 0xf9710255, 0xf2e204ab,
	0xe5c40957,	0xcb8812af, 0x9710255f, 0x2e204abf}
};

void lea_set_key_generic(LEA_KEY *key, const unsigned char *mk, unsigned int mk_len)
{
 c000290:	b480      	push	{r7}
 c000292:	b087      	sub	sp, #28
 c000294:	af00      	add	r7, sp, #0
 c000296:	60f8      	str	r0, [r7, #12]
 c000298:	60b9      	str	r1, [r7, #8]
 c00029a:	607a      	str	r2, [r7, #4]
	if(!key)
 c00029c:	68fb      	ldr	r3, [r7, #12]
 c00029e:	2b00      	cmp	r3, #0
 c0002a0:	f002 85ae 	beq.w	c002e00 <lea_set_key+0x2b70>
		return;
	else if(!mk)
 c0002a4:	68bb      	ldr	r3, [r7, #8]
 c0002a6:	2b00      	cmp	r3, #0
 c0002a8:	f002 85ac 	beq.w	c002e04 <lea_set_key+0x2b74>
		return;

	const unsigned int* _mk = (const unsigned int*)mk;
 c0002ac:	68bb      	ldr	r3, [r7, #8]
 c0002ae:	617b      	str	r3, [r7, #20]
	switch(mk_len)
 c0002b0:	687b      	ldr	r3, [r7, #4]
 c0002b2:	2b20      	cmp	r3, #32
 c0002b4:	f001 851c 	beq.w	c001cf0 <lea_set_key+0x1a60>
 c0002b8:	687b      	ldr	r3, [r7, #4]
 c0002ba:	2b20      	cmp	r3, #32
 c0002bc:	f202 85a4 	bhi.w	c002e08 <lea_set_key+0x2b78>
 c0002c0:	687b      	ldr	r3, [r7, #4]
 c0002c2:	2b10      	cmp	r3, #16
 c0002c4:	d005      	beq.n	c0002d2 <lea_set_key+0x42>
 c0002c6:	687b      	ldr	r3, [r7, #4]
 c0002c8:	2b18      	cmp	r3, #24
 c0002ca:	f000 8569 	beq.w	c000da0 <lea_set_key+0xb10>
		key->rk[191] = ROL(key->rk[183] + delta[7][ 4], 17);

		break;

	default:
			return;
 c0002ce:	f002 bd9b 	b.w	c002e08 <lea_set_key+0x2b78>
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0], 1);
 c0002d2:	697b      	ldr	r3, [r7, #20]
 c0002d4:	681b      	ldr	r3, [r3, #0]
 c0002d6:	4aac      	ldr	r2, [pc, #688]	; (c000588 <lea_set_key+0x2f8>)
 c0002d8:	4413      	add	r3, r2
 c0002da:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0002de:	68fb      	ldr	r3, [r7, #12]
 c0002e0:	601a      	str	r2, [r3, #0]
		key->rk[  6] = ROL(key->rk[  0] + delta[1][ 1], 1);
 c0002e2:	68fb      	ldr	r3, [r7, #12]
 c0002e4:	681b      	ldr	r3, [r3, #0]
 c0002e6:	4aa9      	ldr	r2, [pc, #676]	; (c00058c <lea_set_key+0x2fc>)
 c0002e8:	4413      	add	r3, r2
 c0002ea:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0002ee:	68fb      	ldr	r3, [r7, #12]
 c0002f0:	619a      	str	r2, [r3, #24]
		key->rk[ 12] = ROL(key->rk[  6] + delta[2][ 2], 1);
 c0002f2:	68fb      	ldr	r3, [r7, #12]
 c0002f4:	699b      	ldr	r3, [r3, #24]
 c0002f6:	4aa6      	ldr	r2, [pc, #664]	; (c000590 <lea_set_key+0x300>)
 c0002f8:	4413      	add	r3, r2
 c0002fa:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0002fe:	68fb      	ldr	r3, [r7, #12]
 c000300:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 18] = ROL(key->rk[ 12] + delta[3][ 3], 1);
 c000302:	68fb      	ldr	r3, [r7, #12]
 c000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c000306:	4aa3      	ldr	r2, [pc, #652]	; (c000594 <lea_set_key+0x304>)
 c000308:	4413      	add	r3, r2
 c00030a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00030e:	68fb      	ldr	r3, [r7, #12]
 c000310:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 24] = ROL(key->rk[ 18] + delta[0][ 4], 1);
 c000312:	68fb      	ldr	r3, [r7, #12]
 c000314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000316:	4aa0      	ldr	r2, [pc, #640]	; (c000598 <lea_set_key+0x308>)
 c000318:	4413      	add	r3, r2
 c00031a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00031e:	68fb      	ldr	r3, [r7, #12]
 c000320:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 30] = ROL(key->rk[ 24] + delta[1][ 5], 1);
 c000322:	68fb      	ldr	r3, [r7, #12]
 c000324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000326:	4a9d      	ldr	r2, [pc, #628]	; (c00059c <lea_set_key+0x30c>)
 c000328:	4413      	add	r3, r2
 c00032a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00032e:	68fb      	ldr	r3, [r7, #12]
 c000330:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 36] = ROL(key->rk[ 30] + delta[2][ 6], 1);
 c000332:	68fb      	ldr	r3, [r7, #12]
 c000334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c000336:	4a9a      	ldr	r2, [pc, #616]	; (c0005a0 <lea_set_key+0x310>)
 c000338:	4413      	add	r3, r2
 c00033a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00033e:	68fb      	ldr	r3, [r7, #12]
 c000340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 42] = ROL(key->rk[ 36] + delta[3][ 7], 1);
 c000344:	68fb      	ldr	r3, [r7, #12]
 c000346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00034a:	4a96      	ldr	r2, [pc, #600]	; (c0005a4 <lea_set_key+0x314>)
 c00034c:	4413      	add	r3, r2
 c00034e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000352:	68fb      	ldr	r3, [r7, #12]
 c000354:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 48] = ROL(key->rk[ 42] + delta[0][ 8], 1);
 c000358:	68fb      	ldr	r3, [r7, #12]
 c00035a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c00035e:	4a92      	ldr	r2, [pc, #584]	; (c0005a8 <lea_set_key+0x318>)
 c000360:	4413      	add	r3, r2
 c000362:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000366:	68fb      	ldr	r3, [r7, #12]
 c000368:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 54] = ROL(key->rk[ 48] + delta[1][ 9], 1);
 c00036c:	68fb      	ldr	r3, [r7, #12]
 c00036e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c000372:	4a8e      	ldr	r2, [pc, #568]	; (c0005ac <lea_set_key+0x31c>)
 c000374:	4413      	add	r3, r2
 c000376:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00037a:	68fb      	ldr	r3, [r7, #12]
 c00037c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 60] = ROL(key->rk[ 54] + delta[2][10], 1);
 c000380:	68fb      	ldr	r3, [r7, #12]
 c000382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c000386:	4a8a      	ldr	r2, [pc, #552]	; (c0005b0 <lea_set_key+0x320>)
 c000388:	4413      	add	r3, r2
 c00038a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00038e:	68fb      	ldr	r3, [r7, #12]
 c000390:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 66] = ROL(key->rk[ 60] + delta[3][11], 1);
 c000394:	68fb      	ldr	r3, [r7, #12]
 c000396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00039a:	4a86      	ldr	r2, [pc, #536]	; (c0005b4 <lea_set_key+0x324>)
 c00039c:	4413      	add	r3, r2
 c00039e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0003a2:	68fb      	ldr	r3, [r7, #12]
 c0003a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 72] = ROL(key->rk[ 66] + delta[0][12], 1);
 c0003a8:	68fb      	ldr	r3, [r7, #12]
 c0003aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c0003ae:	4a82      	ldr	r2, [pc, #520]	; (c0005b8 <lea_set_key+0x328>)
 c0003b0:	4413      	add	r3, r2
 c0003b2:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0003b6:	68fb      	ldr	r3, [r7, #12]
 c0003b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 78] = ROL(key->rk[ 72] + delta[1][13], 1);
 c0003bc:	68fb      	ldr	r3, [r7, #12]
 c0003be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 c0003c2:	4a7e      	ldr	r2, [pc, #504]	; (c0005bc <lea_set_key+0x32c>)
 c0003c4:	4413      	add	r3, r2
 c0003c6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0003ca:	68fb      	ldr	r3, [r7, #12]
 c0003cc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 84] = ROL(key->rk[ 78] + delta[2][14], 1);
 c0003d0:	68fb      	ldr	r3, [r7, #12]
 c0003d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 c0003d6:	4a7a      	ldr	r2, [pc, #488]	; (c0005c0 <lea_set_key+0x330>)
 c0003d8:	4413      	add	r3, r2
 c0003da:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0003de:	68fb      	ldr	r3, [r7, #12]
 c0003e0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 90] = ROL(key->rk[ 84] + delta[3][15], 1);
 c0003e4:	68fb      	ldr	r3, [r7, #12]
 c0003e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 c0003ea:	4a76      	ldr	r2, [pc, #472]	; (c0005c4 <lea_set_key+0x334>)
 c0003ec:	4413      	add	r3, r2
 c0003ee:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0003f2:	68fb      	ldr	r3, [r7, #12]
 c0003f4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 96] = ROL(key->rk[ 90] + delta[0][16], 1);
 c0003f8:	68fb      	ldr	r3, [r7, #12]
 c0003fa:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 c0003fe:	4a72      	ldr	r2, [pc, #456]	; (c0005c8 <lea_set_key+0x338>)
 c000400:	4413      	add	r3, r2
 c000402:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000406:	68fb      	ldr	r3, [r7, #12]
 c000408:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[102] = ROL(key->rk[ 96] + delta[1][17], 1);
 c00040c:	68fb      	ldr	r3, [r7, #12]
 c00040e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 c000412:	4a6e      	ldr	r2, [pc, #440]	; (c0005cc <lea_set_key+0x33c>)
 c000414:	4413      	add	r3, r2
 c000416:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00041a:	68fb      	ldr	r3, [r7, #12]
 c00041c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[108] = ROL(key->rk[102] + delta[2][18], 1);
 c000420:	68fb      	ldr	r3, [r7, #12]
 c000422:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 c000426:	4a6a      	ldr	r2, [pc, #424]	; (c0005d0 <lea_set_key+0x340>)
 c000428:	4413      	add	r3, r2
 c00042a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00042e:	68fb      	ldr	r3, [r7, #12]
 c000430:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[114] = ROL(key->rk[108] + delta[3][19], 1);
 c000434:	68fb      	ldr	r3, [r7, #12]
 c000436:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 c00043a:	4a66      	ldr	r2, [pc, #408]	; (c0005d4 <lea_set_key+0x344>)
 c00043c:	4413      	add	r3, r2
 c00043e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000442:	68fb      	ldr	r3, [r7, #12]
 c000444:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[120] = ROL(key->rk[114] + delta[0][20], 1);
 c000448:	68fb      	ldr	r3, [r7, #12]
 c00044a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 c00044e:	4a62      	ldr	r2, [pc, #392]	; (c0005d8 <lea_set_key+0x348>)
 c000450:	4413      	add	r3, r2
 c000452:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000456:	68fb      	ldr	r3, [r7, #12]
 c000458:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[126] = ROL(key->rk[120] + delta[1][21], 1);
 c00045c:	68fb      	ldr	r3, [r7, #12]
 c00045e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 c000462:	4a5e      	ldr	r2, [pc, #376]	; (c0005dc <lea_set_key+0x34c>)
 c000464:	4413      	add	r3, r2
 c000466:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00046a:	68fb      	ldr	r3, [r7, #12]
 c00046c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[132] = ROL(key->rk[126] + delta[2][22], 1);
 c000470:	68fb      	ldr	r3, [r7, #12]
 c000472:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 c000476:	4a5a      	ldr	r2, [pc, #360]	; (c0005e0 <lea_set_key+0x350>)
 c000478:	4413      	add	r3, r2
 c00047a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00047e:	68fb      	ldr	r3, [r7, #12]
 c000480:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[138] = ROL(key->rk[132] + delta[3][23], 1);
 c000484:	68fb      	ldr	r3, [r7, #12]
 c000486:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 c00048a:	4a56      	ldr	r2, [pc, #344]	; (c0005e4 <lea_set_key+0x354>)
 c00048c:	4413      	add	r3, r2
 c00048e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000492:	68fb      	ldr	r3, [r7, #12]
 c000494:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[  1] = key->rk[  3] = key->rk[  5] = ROL(loadU32(_mk[1]) + delta[0][ 1], 3);
 c000498:	697b      	ldr	r3, [r7, #20]
 c00049a:	3304      	adds	r3, #4
 c00049c:	681b      	ldr	r3, [r3, #0]
 c00049e:	4a52      	ldr	r2, [pc, #328]	; (c0005e8 <lea_set_key+0x358>)
 c0004a0:	4413      	add	r3, r2
 c0004a2:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0004a6:	68fb      	ldr	r3, [r7, #12]
 c0004a8:	615a      	str	r2, [r3, #20]
 c0004aa:	68fb      	ldr	r3, [r7, #12]
 c0004ac:	695a      	ldr	r2, [r3, #20]
 c0004ae:	68fb      	ldr	r3, [r7, #12]
 c0004b0:	60da      	str	r2, [r3, #12]
 c0004b2:	68fb      	ldr	r3, [r7, #12]
 c0004b4:	68da      	ldr	r2, [r3, #12]
 c0004b6:	68fb      	ldr	r3, [r7, #12]
 c0004b8:	605a      	str	r2, [r3, #4]
		key->rk[  7] = key->rk[  9] = key->rk[ 11] = ROL(key->rk[  1] + delta[1][ 2], 3);
 c0004ba:	68fb      	ldr	r3, [r7, #12]
 c0004bc:	685b      	ldr	r3, [r3, #4]
 c0004be:	4a4b      	ldr	r2, [pc, #300]	; (c0005ec <lea_set_key+0x35c>)
 c0004c0:	4413      	add	r3, r2
 c0004c2:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0004c6:	68fb      	ldr	r3, [r7, #12]
 c0004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 c0004ca:	68fb      	ldr	r3, [r7, #12]
 c0004cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0004ce:	68fb      	ldr	r3, [r7, #12]
 c0004d0:	625a      	str	r2, [r3, #36]	; 0x24
 c0004d2:	68fb      	ldr	r3, [r7, #12]
 c0004d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0004d6:	68fb      	ldr	r3, [r7, #12]
 c0004d8:	61da      	str	r2, [r3, #28]
		key->rk[ 13] = key->rk[ 15] = key->rk[ 17] = ROL(key->rk[  7] + delta[2][ 3], 3);
 c0004da:	68fb      	ldr	r3, [r7, #12]
 c0004dc:	69db      	ldr	r3, [r3, #28]
 c0004de:	4a44      	ldr	r2, [pc, #272]	; (c0005f0 <lea_set_key+0x360>)
 c0004e0:	4413      	add	r3, r2
 c0004e2:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0004e6:	68fb      	ldr	r3, [r7, #12]
 c0004e8:	645a      	str	r2, [r3, #68]	; 0x44
 c0004ea:	68fb      	ldr	r3, [r7, #12]
 c0004ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c0004ee:	68fb      	ldr	r3, [r7, #12]
 c0004f0:	63da      	str	r2, [r3, #60]	; 0x3c
 c0004f2:	68fb      	ldr	r3, [r7, #12]
 c0004f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c0004f6:	68fb      	ldr	r3, [r7, #12]
 c0004f8:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 19] = key->rk[ 21] = key->rk[ 23] = ROL(key->rk[ 13] + delta[3][ 4], 3);
 c0004fa:	68fb      	ldr	r3, [r7, #12]
 c0004fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0004fe:	4a3d      	ldr	r2, [pc, #244]	; (c0005f4 <lea_set_key+0x364>)
 c000500:	4413      	add	r3, r2
 c000502:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000506:	68fb      	ldr	r3, [r7, #12]
 c000508:	65da      	str	r2, [r3, #92]	; 0x5c
 c00050a:	68fb      	ldr	r3, [r7, #12]
 c00050c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 c00050e:	68fb      	ldr	r3, [r7, #12]
 c000510:	655a      	str	r2, [r3, #84]	; 0x54
 c000512:	68fb      	ldr	r3, [r7, #12]
 c000514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 c000516:	68fb      	ldr	r3, [r7, #12]
 c000518:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 25] = key->rk[ 27] = key->rk[ 29] = ROL(key->rk[ 19] + delta[0][ 5], 3);
 c00051a:	68fb      	ldr	r3, [r7, #12]
 c00051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00051e:	4a36      	ldr	r2, [pc, #216]	; (c0005f8 <lea_set_key+0x368>)
 c000520:	4413      	add	r3, r2
 c000522:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000526:	68fb      	ldr	r3, [r7, #12]
 c000528:	675a      	str	r2, [r3, #116]	; 0x74
 c00052a:	68fb      	ldr	r3, [r7, #12]
 c00052c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 c00052e:	68fb      	ldr	r3, [r7, #12]
 c000530:	66da      	str	r2, [r3, #108]	; 0x6c
 c000532:	68fb      	ldr	r3, [r7, #12]
 c000534:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 c000536:	68fb      	ldr	r3, [r7, #12]
 c000538:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 31] = key->rk[ 33] = key->rk[ 35] = ROL(key->rk[ 25] + delta[1][ 6], 3);
 c00053a:	68fb      	ldr	r3, [r7, #12]
 c00053c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00053e:	4a2f      	ldr	r2, [pc, #188]	; (c0005fc <lea_set_key+0x36c>)
 c000540:	4413      	add	r3, r2
 c000542:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000546:	68fb      	ldr	r3, [r7, #12]
 c000548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 c00054c:	68fb      	ldr	r3, [r7, #12]
 c00054e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 c000552:	68fb      	ldr	r3, [r7, #12]
 c000554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 c000558:	68fb      	ldr	r3, [r7, #12]
 c00055a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 c00055e:	68fb      	ldr	r3, [r7, #12]
 c000560:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 37] = key->rk[ 39] = key->rk[ 41] = ROL(key->rk[ 31] + delta[2][ 7], 3);
 c000562:	68fb      	ldr	r3, [r7, #12]
 c000564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c000566:	4a26      	ldr	r2, [pc, #152]	; (c000600 <lea_set_key+0x370>)
 c000568:	4413      	add	r3, r2
 c00056a:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00056e:	68fb      	ldr	r3, [r7, #12]
 c000570:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 c000574:	68fb      	ldr	r3, [r7, #12]
 c000576:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 c00057a:	68fb      	ldr	r3, [r7, #12]
 c00057c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 c000580:	68fb      	ldr	r3, [r7, #12]
 c000582:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 c000586:	e03d      	b.n	c000604 <lea_set_key+0x374>
 c000588:	c3efe9db 	.word	0xc3efe9db
 c00058c:	88c4d604 	.word	0x88c4d604
 c000590:	e789f229 	.word	0xe789f229
 c000594:	c6f98763 	.word	0xc6f98763
 c000598:	3efe9dbc 	.word	0x3efe9dbc
 c00059c:	8c4d6048 	.word	0x8c4d6048
 c0005a0:	789f229e 	.word	0x789f229e
 c0005a4:	6f98763c 	.word	0x6f98763c
 c0005a8:	efe9dbc3 	.word	0xefe9dbc3
 c0005ac:	c4d60488 	.word	0xc4d60488
 c0005b0:	89f229e7 	.word	0x89f229e7
 c0005b4:	f98763c6 	.word	0xf98763c6
 c0005b8:	fe9dbc3e 	.word	0xfe9dbc3e
 c0005bc:	4d60488c 	.word	0x4d60488c
 c0005c0:	9f229e78 	.word	0x9f229e78
 c0005c4:	98763c6f 	.word	0x98763c6f
 c0005c8:	e9dbc3ef 	.word	0xe9dbc3ef
 c0005cc:	d60488c4 	.word	0xd60488c4
 c0005d0:	f229e789 	.word	0xf229e789
 c0005d4:	8763c6f9 	.word	0x8763c6f9
 c0005d8:	9dbc3efe 	.word	0x9dbc3efe
 c0005dc:	60488c4d 	.word	0x60488c4d
 c0005e0:	229e789f 	.word	0x229e789f
 c0005e4:	763c6f98 	.word	0x763c6f98
 c0005e8:	87dfd3b7 	.word	0x87dfd3b7
 c0005ec:	1189ac09 	.word	0x1189ac09
 c0005f0:	cf13e453 	.word	0xcf13e453
 c0005f4:	8df30ec7 	.word	0x8df30ec7
 c0005f8:	7dfd3b78 	.word	0x7dfd3b78
 c0005fc:	189ac091 	.word	0x189ac091
 c000600:	f13e453c 	.word	0xf13e453c
 c000604:	68fb      	ldr	r3, [r7, #12]
 c000606:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 43] = key->rk[ 45] = key->rk[ 47] = ROL(key->rk[ 37] + delta[3][ 8], 3);
 c00060a:	68fb      	ldr	r3, [r7, #12]
 c00060c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000610:	4abf      	ldr	r2, [pc, #764]	; (c000910 <lea_set_key+0x680>)
 c000612:	4413      	add	r3, r2
 c000614:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000618:	68fb      	ldr	r3, [r7, #12]
 c00061a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 c00061e:	68fb      	ldr	r3, [r7, #12]
 c000620:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 c000624:	68fb      	ldr	r3, [r7, #12]
 c000626:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 c00062a:	68fb      	ldr	r3, [r7, #12]
 c00062c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 c000630:	68fb      	ldr	r3, [r7, #12]
 c000632:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 49] = key->rk[ 51] = key->rk[ 53] = ROL(key->rk[ 43] + delta[0][ 9], 3);
 c000636:	68fb      	ldr	r3, [r7, #12]
 c000638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c00063c:	4ab5      	ldr	r2, [pc, #724]	; (c000914 <lea_set_key+0x684>)
 c00063e:	4413      	add	r3, r2
 c000640:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000644:	68fb      	ldr	r3, [r7, #12]
 c000646:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 c00064a:	68fb      	ldr	r3, [r7, #12]
 c00064c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 c000650:	68fb      	ldr	r3, [r7, #12]
 c000652:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 c000656:	68fb      	ldr	r3, [r7, #12]
 c000658:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 c00065c:	68fb      	ldr	r3, [r7, #12]
 c00065e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 55] = key->rk[ 57] = key->rk[ 59] = ROL(key->rk[ 49] + delta[1][10], 3);
 c000662:	68fb      	ldr	r3, [r7, #12]
 c000664:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c000668:	4aab      	ldr	r2, [pc, #684]	; (c000918 <lea_set_key+0x688>)
 c00066a:	4413      	add	r3, r2
 c00066c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000670:	68fb      	ldr	r3, [r7, #12]
 c000672:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 c000676:	68fb      	ldr	r3, [r7, #12]
 c000678:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 c00067c:	68fb      	ldr	r3, [r7, #12]
 c00067e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 c000682:	68fb      	ldr	r3, [r7, #12]
 c000684:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 c000688:	68fb      	ldr	r3, [r7, #12]
 c00068a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 61] = key->rk[ 63] = key->rk[ 65] = ROL(key->rk[ 55] + delta[2][11], 3);
 c00068e:	68fb      	ldr	r3, [r7, #12]
 c000690:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c000694:	4aa1      	ldr	r2, [pc, #644]	; (c00091c <lea_set_key+0x68c>)
 c000696:	4413      	add	r3, r2
 c000698:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00069c:	68fb      	ldr	r3, [r7, #12]
 c00069e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 c0006a2:	68fb      	ldr	r3, [r7, #12]
 c0006a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 c0006a8:	68fb      	ldr	r3, [r7, #12]
 c0006aa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 c0006ae:	68fb      	ldr	r3, [r7, #12]
 c0006b0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 c0006b4:	68fb      	ldr	r3, [r7, #12]
 c0006b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 67] = key->rk[ 69] = key->rk[ 71] = ROL(key->rk[ 61] + delta[3][12], 3);
 c0006ba:	68fb      	ldr	r3, [r7, #12]
 c0006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c0006c0:	4a97      	ldr	r2, [pc, #604]	; (c000920 <lea_set_key+0x690>)
 c0006c2:	4413      	add	r3, r2
 c0006c4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0006c8:	68fb      	ldr	r3, [r7, #12]
 c0006ca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 c0006ce:	68fb      	ldr	r3, [r7, #12]
 c0006d0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 c0006d4:	68fb      	ldr	r3, [r7, #12]
 c0006d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 c0006da:	68fb      	ldr	r3, [r7, #12]
 c0006dc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 c0006e0:	68fb      	ldr	r3, [r7, #12]
 c0006e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 73] = key->rk[ 75] = key->rk[ 77] = ROL(key->rk[ 67] + delta[0][13], 3);
 c0006e6:	68fb      	ldr	r3, [r7, #12]
 c0006e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 c0006ec:	4a8d      	ldr	r2, [pc, #564]	; (c000924 <lea_set_key+0x694>)
 c0006ee:	4413      	add	r3, r2
 c0006f0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0006f4:	68fb      	ldr	r3, [r7, #12]
 c0006f6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 c0006fa:	68fb      	ldr	r3, [r7, #12]
 c0006fc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 c000700:	68fb      	ldr	r3, [r7, #12]
 c000702:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 c000706:	68fb      	ldr	r3, [r7, #12]
 c000708:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 c00070c:	68fb      	ldr	r3, [r7, #12]
 c00070e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 79] = key->rk[ 81] = key->rk[ 83] = ROL(key->rk[ 73] + delta[1][14], 3);
 c000712:	68fb      	ldr	r3, [r7, #12]
 c000714:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 c000718:	4a83      	ldr	r2, [pc, #524]	; (c000928 <lea_set_key+0x698>)
 c00071a:	4413      	add	r3, r2
 c00071c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000720:	68fb      	ldr	r3, [r7, #12]
 c000722:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 c000726:	68fb      	ldr	r3, [r7, #12]
 c000728:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 c00072c:	68fb      	ldr	r3, [r7, #12]
 c00072e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 c000732:	68fb      	ldr	r3, [r7, #12]
 c000734:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 c000738:	68fb      	ldr	r3, [r7, #12]
 c00073a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 85] = key->rk[ 87] = key->rk[ 89] = ROL(key->rk[ 79] + delta[2][15], 3);
 c00073e:	68fb      	ldr	r3, [r7, #12]
 c000740:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 c000744:	4a79      	ldr	r2, [pc, #484]	; (c00092c <lea_set_key+0x69c>)
 c000746:	4413      	add	r3, r2
 c000748:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00074c:	68fb      	ldr	r3, [r7, #12]
 c00074e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 c000752:	68fb      	ldr	r3, [r7, #12]
 c000754:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 c000758:	68fb      	ldr	r3, [r7, #12]
 c00075a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 c00075e:	68fb      	ldr	r3, [r7, #12]
 c000760:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 c000764:	68fb      	ldr	r3, [r7, #12]
 c000766:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 91] = key->rk[ 93] = key->rk[ 95] = ROL(key->rk[ 85] + delta[3][16], 3);
 c00076a:	68fb      	ldr	r3, [r7, #12]
 c00076c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 c000770:	4a6f      	ldr	r2, [pc, #444]	; (c000930 <lea_set_key+0x6a0>)
 c000772:	4413      	add	r3, r2
 c000774:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000778:	68fb      	ldr	r3, [r7, #12]
 c00077a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 c00077e:	68fb      	ldr	r3, [r7, #12]
 c000780:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 c000784:	68fb      	ldr	r3, [r7, #12]
 c000786:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 c00078a:	68fb      	ldr	r3, [r7, #12]
 c00078c:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 c000790:	68fb      	ldr	r3, [r7, #12]
 c000792:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 97] = key->rk[ 99] = key->rk[101] = ROL(key->rk[ 91] + delta[0][17], 3);
 c000796:	68fb      	ldr	r3, [r7, #12]
 c000798:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 c00079c:	4a65      	ldr	r2, [pc, #404]	; (c000934 <lea_set_key+0x6a4>)
 c00079e:	4413      	add	r3, r2
 c0007a0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0007a4:	68fb      	ldr	r3, [r7, #12]
 c0007a6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 c0007aa:	68fb      	ldr	r3, [r7, #12]
 c0007ac:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 c0007b0:	68fb      	ldr	r3, [r7, #12]
 c0007b2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 c0007b6:	68fb      	ldr	r3, [r7, #12]
 c0007b8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 c0007bc:	68fb      	ldr	r3, [r7, #12]
 c0007be:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[103] = key->rk[105] = key->rk[107] = ROL(key->rk[ 97] + delta[1][18], 3);
 c0007c2:	68fb      	ldr	r3, [r7, #12]
 c0007c4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 c0007c8:	4a5b      	ldr	r2, [pc, #364]	; (c000938 <lea_set_key+0x6a8>)
 c0007ca:	4413      	add	r3, r2
 c0007cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0007d0:	68fb      	ldr	r3, [r7, #12]
 c0007d2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 c0007d6:	68fb      	ldr	r3, [r7, #12]
 c0007d8:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
 c0007dc:	68fb      	ldr	r3, [r7, #12]
 c0007de:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 c0007e2:	68fb      	ldr	r3, [r7, #12]
 c0007e4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 c0007e8:	68fb      	ldr	r3, [r7, #12]
 c0007ea:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[109] = key->rk[111] = key->rk[113] = ROL(key->rk[103] + delta[2][19], 3);
 c0007ee:	68fb      	ldr	r3, [r7, #12]
 c0007f0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 c0007f4:	4a51      	ldr	r2, [pc, #324]	; (c00093c <lea_set_key+0x6ac>)
 c0007f6:	4413      	add	r3, r2
 c0007f8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0007fc:	68fb      	ldr	r3, [r7, #12]
 c0007fe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 c000802:	68fb      	ldr	r3, [r7, #12]
 c000804:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 c000808:	68fb      	ldr	r3, [r7, #12]
 c00080a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 c00080e:	68fb      	ldr	r3, [r7, #12]
 c000810:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 c000814:	68fb      	ldr	r3, [r7, #12]
 c000816:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[115] = key->rk[117] = key->rk[119] = ROL(key->rk[109] + delta[3][20], 3);
 c00081a:	68fb      	ldr	r3, [r7, #12]
 c00081c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 c000820:	4a47      	ldr	r2, [pc, #284]	; (c000940 <lea_set_key+0x6b0>)
 c000822:	4413      	add	r3, r2
 c000824:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000828:	68fb      	ldr	r3, [r7, #12]
 c00082a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 c00082e:	68fb      	ldr	r3, [r7, #12]
 c000830:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 c000834:	68fb      	ldr	r3, [r7, #12]
 c000836:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 c00083a:	68fb      	ldr	r3, [r7, #12]
 c00083c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 c000840:	68fb      	ldr	r3, [r7, #12]
 c000842:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[121] = key->rk[123] = key->rk[125] = ROL(key->rk[115] + delta[0][21], 3);
 c000846:	68fb      	ldr	r3, [r7, #12]
 c000848:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 c00084c:	4a3d      	ldr	r2, [pc, #244]	; (c000944 <lea_set_key+0x6b4>)
 c00084e:	4413      	add	r3, r2
 c000850:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000854:	68fb      	ldr	r3, [r7, #12]
 c000856:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 c00085a:	68fb      	ldr	r3, [r7, #12]
 c00085c:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 c000860:	68fb      	ldr	r3, [r7, #12]
 c000862:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 c000866:	68fb      	ldr	r3, [r7, #12]
 c000868:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 c00086c:	68fb      	ldr	r3, [r7, #12]
 c00086e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[127] = key->rk[129] = key->rk[131] = ROL(key->rk[121] + delta[1][22], 3);
 c000872:	68fb      	ldr	r3, [r7, #12]
 c000874:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 c000878:	4a33      	ldr	r2, [pc, #204]	; (c000948 <lea_set_key+0x6b8>)
 c00087a:	4413      	add	r3, r2
 c00087c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000880:	68fb      	ldr	r3, [r7, #12]
 c000882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 c000886:	68fb      	ldr	r3, [r7, #12]
 c000888:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 c00088c:	68fb      	ldr	r3, [r7, #12]
 c00088e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 c000892:	68fb      	ldr	r3, [r7, #12]
 c000894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 c000898:	68fb      	ldr	r3, [r7, #12]
 c00089a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[133] = key->rk[135] = key->rk[137] = ROL(key->rk[127] + delta[2][23], 3);
 c00089e:	68fb      	ldr	r3, [r7, #12]
 c0008a0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 c0008a4:	4a29      	ldr	r2, [pc, #164]	; (c00094c <lea_set_key+0x6bc>)
 c0008a6:	4413      	add	r3, r2
 c0008a8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0008ac:	68fb      	ldr	r3, [r7, #12]
 c0008ae:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 c0008b2:	68fb      	ldr	r3, [r7, #12]
 c0008b4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 c0008b8:	68fb      	ldr	r3, [r7, #12]
 c0008ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 c0008be:	68fb      	ldr	r3, [r7, #12]
 c0008c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 c0008c4:	68fb      	ldr	r3, [r7, #12]
 c0008c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[139] = key->rk[141] = key->rk[143] = ROL(key->rk[133] + delta[3][24], 3);
 c0008ca:	68fb      	ldr	r3, [r7, #12]
 c0008cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 c0008d0:	4a1f      	ldr	r2, [pc, #124]	; (c000950 <lea_set_key+0x6c0>)
 c0008d2:	4413      	add	r3, r2
 c0008d4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0008d8:	68fb      	ldr	r3, [r7, #12]
 c0008da:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 c0008de:	68fb      	ldr	r3, [r7, #12]
 c0008e0:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 c0008e4:	68fb      	ldr	r3, [r7, #12]
 c0008e6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 c0008ea:	68fb      	ldr	r3, [r7, #12]
 c0008ec:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 c0008f0:	68fb      	ldr	r3, [r7, #12]
 c0008f2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2], 6);
 c0008f6:	697b      	ldr	r3, [r7, #20]
 c0008f8:	3308      	adds	r3, #8
 c0008fa:	681b      	ldr	r3, [r3, #0]
 c0008fc:	4a15      	ldr	r2, [pc, #84]	; (c000954 <lea_set_key+0x6c4>)
 c0008fe:	4413      	add	r3, r2
 c000900:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000904:	68fb      	ldr	r3, [r7, #12]
 c000906:	609a      	str	r2, [r3, #8]
		key->rk[  8] = ROL(key->rk[  2] + delta[1][ 3], 6);
 c000908:	68fb      	ldr	r3, [r7, #12]
 c00090a:	689b      	ldr	r3, [r3, #8]
 c00090c:	e024      	b.n	c000958 <lea_set_key+0x6c8>
 c00090e:	bf00      	nop
 c000910:	df30ec78 	.word	0xdf30ec78
 c000914:	dfd3b787 	.word	0xdfd3b787
 c000918:	89ac0911 	.word	0x89ac0911
 c00091c:	13e453cf 	.word	0x13e453cf
 c000920:	f30ec78d 	.word	0xf30ec78d
 c000924:	fd3b787d 	.word	0xfd3b787d
 c000928:	9ac09118 	.word	0x9ac09118
 c00092c:	3e453cf1 	.word	0x3e453cf1
 c000930:	30ec78df 	.word	0x30ec78df
 c000934:	d3b787df 	.word	0xd3b787df
 c000938:	ac091189 	.word	0xac091189
 c00093c:	e453cf13 	.word	0xe453cf13
 c000940:	0ec78df3 	.word	0x0ec78df3
 c000944:	3b787dfd 	.word	0x3b787dfd
 c000948:	c091189a 	.word	0xc091189a
 c00094c:	453cf13e 	.word	0x453cf13e
 c000950:	ec78df30 	.word	0xec78df30
 c000954:	0fbfa76f 	.word	0x0fbfa76f
 c000958:	4aba      	ldr	r2, [pc, #744]	; (c000c44 <lea_set_key+0x9b4>)
 c00095a:	4413      	add	r3, r2
 c00095c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000960:	68fb      	ldr	r3, [r7, #12]
 c000962:	621a      	str	r2, [r3, #32]
		key->rk[ 14] = ROL(key->rk[  8] + delta[2][ 4], 6);
 c000964:	68fb      	ldr	r3, [r7, #12]
 c000966:	6a1b      	ldr	r3, [r3, #32]
 c000968:	4ab7      	ldr	r2, [pc, #732]	; (c000c48 <lea_set_key+0x9b8>)
 c00096a:	4413      	add	r3, r2
 c00096c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000970:	68fb      	ldr	r3, [r7, #12]
 c000972:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 20] = ROL(key->rk[ 14] + delta[3][ 5], 6);
 c000974:	68fb      	ldr	r3, [r7, #12]
 c000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c000978:	4ab4      	ldr	r2, [pc, #720]	; (c000c4c <lea_set_key+0x9bc>)
 c00097a:	4413      	add	r3, r2
 c00097c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000980:	68fb      	ldr	r3, [r7, #12]
 c000982:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 26] = ROL(key->rk[ 20] + delta[0][ 6], 6);
 c000984:	68fb      	ldr	r3, [r7, #12]
 c000986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c000988:	4ab1      	ldr	r2, [pc, #708]	; (c000c50 <lea_set_key+0x9c0>)
 c00098a:	4413      	add	r3, r2
 c00098c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000990:	68fb      	ldr	r3, [r7, #12]
 c000992:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 32] = ROL(key->rk[ 26] + delta[1][ 7], 6);
 c000994:	68fb      	ldr	r3, [r7, #12]
 c000996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c000998:	4aae      	ldr	r2, [pc, #696]	; (c000c54 <lea_set_key+0x9c4>)
 c00099a:	4413      	add	r3, r2
 c00099c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0009a0:	68fb      	ldr	r3, [r7, #12]
 c0009a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 38] = ROL(key->rk[ 32] + delta[2][ 8], 6);
 c0009a6:	68fb      	ldr	r3, [r7, #12]
 c0009a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0009ac:	4aaa      	ldr	r2, [pc, #680]	; (c000c58 <lea_set_key+0x9c8>)
 c0009ae:	4413      	add	r3, r2
 c0009b0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0009b4:	68fb      	ldr	r3, [r7, #12]
 c0009b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 44] = ROL(key->rk[ 38] + delta[3][ 9], 6);
 c0009ba:	68fb      	ldr	r3, [r7, #12]
 c0009bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0009c0:	4aa6      	ldr	r2, [pc, #664]	; (c000c5c <lea_set_key+0x9cc>)
 c0009c2:	4413      	add	r3, r2
 c0009c4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0009c8:	68fb      	ldr	r3, [r7, #12]
 c0009ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 50] = ROL(key->rk[ 44] + delta[0][10], 6);
 c0009ce:	68fb      	ldr	r3, [r7, #12]
 c0009d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0009d4:	4aa2      	ldr	r2, [pc, #648]	; (c000c60 <lea_set_key+0x9d0>)
 c0009d6:	4413      	add	r3, r2
 c0009d8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0009dc:	68fb      	ldr	r3, [r7, #12]
 c0009de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 56] = ROL(key->rk[ 50] + delta[1][11], 6);
 c0009e2:	68fb      	ldr	r3, [r7, #12]
 c0009e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c0009e8:	4a9e      	ldr	r2, [pc, #632]	; (c000c64 <lea_set_key+0x9d4>)
 c0009ea:	4413      	add	r3, r2
 c0009ec:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0009f0:	68fb      	ldr	r3, [r7, #12]
 c0009f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 62] = ROL(key->rk[ 56] + delta[2][12], 6);
 c0009f6:	68fb      	ldr	r3, [r7, #12]
 c0009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c0009fc:	4a9a      	ldr	r2, [pc, #616]	; (c000c68 <lea_set_key+0x9d8>)
 c0009fe:	4413      	add	r3, r2
 c000a00:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a04:	68fb      	ldr	r3, [r7, #12]
 c000a06:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 68] = ROL(key->rk[ 62] + delta[3][13], 6);
 c000a0a:	68fb      	ldr	r3, [r7, #12]
 c000a0c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c000a10:	4a96      	ldr	r2, [pc, #600]	; (c000c6c <lea_set_key+0x9dc>)
 c000a12:	4413      	add	r3, r2
 c000a14:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a18:	68fb      	ldr	r3, [r7, #12]
 c000a1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 74] = ROL(key->rk[ 68] + delta[0][14], 6);
 c000a1e:	68fb      	ldr	r3, [r7, #12]
 c000a20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 c000a24:	4a92      	ldr	r2, [pc, #584]	; (c000c70 <lea_set_key+0x9e0>)
 c000a26:	4413      	add	r3, r2
 c000a28:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a2c:	68fb      	ldr	r3, [r7, #12]
 c000a2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 80] = ROL(key->rk[ 74] + delta[1][15], 6);
 c000a32:	68fb      	ldr	r3, [r7, #12]
 c000a34:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 c000a38:	4a8e      	ldr	r2, [pc, #568]	; (c000c74 <lea_set_key+0x9e4>)
 c000a3a:	4413      	add	r3, r2
 c000a3c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a40:	68fb      	ldr	r3, [r7, #12]
 c000a42:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 86] = ROL(key->rk[ 80] + delta[2][16], 6);
 c000a46:	68fb      	ldr	r3, [r7, #12]
 c000a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 c000a4c:	4a8a      	ldr	r2, [pc, #552]	; (c000c78 <lea_set_key+0x9e8>)
 c000a4e:	4413      	add	r3, r2
 c000a50:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a54:	68fb      	ldr	r3, [r7, #12]
 c000a56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 92] = ROL(key->rk[ 86] + delta[3][17], 6);
 c000a5a:	68fb      	ldr	r3, [r7, #12]
 c000a5c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 c000a60:	4a86      	ldr	r2, [pc, #536]	; (c000c7c <lea_set_key+0x9ec>)
 c000a62:	4413      	add	r3, r2
 c000a64:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a68:	68fb      	ldr	r3, [r7, #12]
 c000a6a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[ 98] = ROL(key->rk[ 92] + delta[0][18], 6);
 c000a6e:	68fb      	ldr	r3, [r7, #12]
 c000a70:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 c000a74:	4a82      	ldr	r2, [pc, #520]	; (c000c80 <lea_set_key+0x9f0>)
 c000a76:	4413      	add	r3, r2
 c000a78:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a7c:	68fb      	ldr	r3, [r7, #12]
 c000a7e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[104] = ROL(key->rk[ 98] + delta[1][19], 6);
 c000a82:	68fb      	ldr	r3, [r7, #12]
 c000a84:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 c000a88:	4a7e      	ldr	r2, [pc, #504]	; (c000c84 <lea_set_key+0x9f4>)
 c000a8a:	4413      	add	r3, r2
 c000a8c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000a90:	68fb      	ldr	r3, [r7, #12]
 c000a92:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[110] = ROL(key->rk[104] + delta[2][20], 6);
 c000a96:	68fb      	ldr	r3, [r7, #12]
 c000a98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 c000a9c:	4a7a      	ldr	r2, [pc, #488]	; (c000c88 <lea_set_key+0x9f8>)
 c000a9e:	4413      	add	r3, r2
 c000aa0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000aa4:	68fb      	ldr	r3, [r7, #12]
 c000aa6:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[116] = ROL(key->rk[110] + delta[3][21], 6);
 c000aaa:	68fb      	ldr	r3, [r7, #12]
 c000aac:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 c000ab0:	4a76      	ldr	r2, [pc, #472]	; (c000c8c <lea_set_key+0x9fc>)
 c000ab2:	4413      	add	r3, r2
 c000ab4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000ab8:	68fb      	ldr	r3, [r7, #12]
 c000aba:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[122] = ROL(key->rk[116] + delta[0][22], 6);
 c000abe:	68fb      	ldr	r3, [r7, #12]
 c000ac0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 c000ac4:	4a72      	ldr	r2, [pc, #456]	; (c000c90 <lea_set_key+0xa00>)
 c000ac6:	4413      	add	r3, r2
 c000ac8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000acc:	68fb      	ldr	r3, [r7, #12]
 c000ace:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[128] = ROL(key->rk[122] + delta[1][23], 6);
 c000ad2:	68fb      	ldr	r3, [r7, #12]
 c000ad4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 c000ad8:	4a6e      	ldr	r2, [pc, #440]	; (c000c94 <lea_set_key+0xa04>)
 c000ada:	4413      	add	r3, r2
 c000adc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000ae0:	68fb      	ldr	r3, [r7, #12]
 c000ae2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[134] = ROL(key->rk[128] + delta[2][24], 6);
 c000ae6:	68fb      	ldr	r3, [r7, #12]
 c000ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 c000aec:	4a6a      	ldr	r2, [pc, #424]	; (c000c98 <lea_set_key+0xa08>)
 c000aee:	4413      	add	r3, r2
 c000af0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000af4:	68fb      	ldr	r3, [r7, #12]
 c000af6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[140] = ROL(key->rk[134] + delta[3][25], 6);
 c000afa:	68fb      	ldr	r3, [r7, #12]
 c000afc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 c000b00:	4a66      	ldr	r2, [pc, #408]	; (c000c9c <lea_set_key+0xa0c>)
 c000b02:	4413      	add	r3, r2
 c000b04:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c000b08:	68fb      	ldr	r3, [r7, #12]
 c000b0a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[  4] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 c000b0e:	697b      	ldr	r3, [r7, #20]
 c000b10:	330c      	adds	r3, #12
 c000b12:	681b      	ldr	r3, [r3, #0]
 c000b14:	4a62      	ldr	r2, [pc, #392]	; (c000ca0 <lea_set_key+0xa10>)
 c000b16:	4413      	add	r3, r2
 c000b18:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b1c:	68fb      	ldr	r3, [r7, #12]
 c000b1e:	611a      	str	r2, [r3, #16]
		key->rk[ 10] = ROL(key->rk[  4] + delta[1][ 4], 11);
 c000b20:	68fb      	ldr	r3, [r7, #12]
 c000b22:	691b      	ldr	r3, [r3, #16]
 c000b24:	4a5f      	ldr	r2, [pc, #380]	; (c000ca4 <lea_set_key+0xa14>)
 c000b26:	4413      	add	r3, r2
 c000b28:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b2c:	68fb      	ldr	r3, [r7, #12]
 c000b2e:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 16] = ROL(key->rk[ 10] + delta[2][ 5], 11);
 c000b30:	68fb      	ldr	r3, [r7, #12]
 c000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000b34:	4a5c      	ldr	r2, [pc, #368]	; (c000ca8 <lea_set_key+0xa18>)
 c000b36:	4413      	add	r3, r2
 c000b38:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b3c:	68fb      	ldr	r3, [r7, #12]
 c000b3e:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 22] = ROL(key->rk[ 16] + delta[3][ 6], 11);
 c000b40:	68fb      	ldr	r3, [r7, #12]
 c000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c000b44:	4a59      	ldr	r2, [pc, #356]	; (c000cac <lea_set_key+0xa1c>)
 c000b46:	4413      	add	r3, r2
 c000b48:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b4c:	68fb      	ldr	r3, [r7, #12]
 c000b4e:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 28] = ROL(key->rk[ 22] + delta[0][ 7], 11);
 c000b50:	68fb      	ldr	r3, [r7, #12]
 c000b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000b54:	4a56      	ldr	r2, [pc, #344]	; (c000cb0 <lea_set_key+0xa20>)
 c000b56:	4413      	add	r3, r2
 c000b58:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b5c:	68fb      	ldr	r3, [r7, #12]
 c000b5e:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 34] = ROL(key->rk[ 28] + delta[1][ 8], 11);
 c000b60:	68fb      	ldr	r3, [r7, #12]
 c000b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c000b64:	4a53      	ldr	r2, [pc, #332]	; (c000cb4 <lea_set_key+0xa24>)
 c000b66:	4413      	add	r3, r2
 c000b68:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b6c:	68fb      	ldr	r3, [r7, #12]
 c000b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 40] = ROL(key->rk[ 34] + delta[2][ 9], 11);
 c000b72:	68fb      	ldr	r3, [r7, #12]
 c000b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b78:	4a4f      	ldr	r2, [pc, #316]	; (c000cb8 <lea_set_key+0xa28>)
 c000b7a:	4413      	add	r3, r2
 c000b7c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b80:	68fb      	ldr	r3, [r7, #12]
 c000b82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 46] = ROL(key->rk[ 40] + delta[3][10], 11);
 c000b86:	68fb      	ldr	r3, [r7, #12]
 c000b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c000b8c:	4a4b      	ldr	r2, [pc, #300]	; (c000cbc <lea_set_key+0xa2c>)
 c000b8e:	4413      	add	r3, r2
 c000b90:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000b94:	68fb      	ldr	r3, [r7, #12]
 c000b96:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 52] = ROL(key->rk[ 46] + delta[0][11], 11);
 c000b9a:	68fb      	ldr	r3, [r7, #12]
 c000b9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c000ba0:	4a47      	ldr	r2, [pc, #284]	; (c000cc0 <lea_set_key+0xa30>)
 c000ba2:	4413      	add	r3, r2
 c000ba4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000ba8:	68fb      	ldr	r3, [r7, #12]
 c000baa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 58] = ROL(key->rk[ 52] + delta[1][12], 11);
 c000bae:	68fb      	ldr	r3, [r7, #12]
 c000bb0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c000bb4:	4a43      	ldr	r2, [pc, #268]	; (c000cc4 <lea_set_key+0xa34>)
 c000bb6:	4413      	add	r3, r2
 c000bb8:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000bbc:	68fb      	ldr	r3, [r7, #12]
 c000bbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 64] = ROL(key->rk[ 58] + delta[2][13], 11);
 c000bc2:	68fb      	ldr	r3, [r7, #12]
 c000bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c000bc8:	4a3f      	ldr	r2, [pc, #252]	; (c000cc8 <lea_set_key+0xa38>)
 c000bca:	4413      	add	r3, r2
 c000bcc:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000bd0:	68fb      	ldr	r3, [r7, #12]
 c000bd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 70] = ROL(key->rk[ 64] + delta[3][14], 11);
 c000bd6:	68fb      	ldr	r3, [r7, #12]
 c000bd8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c000bdc:	4a3b      	ldr	r2, [pc, #236]	; (c000ccc <lea_set_key+0xa3c>)
 c000bde:	4413      	add	r3, r2
 c000be0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000be4:	68fb      	ldr	r3, [r7, #12]
 c000be6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 76] = ROL(key->rk[ 70] + delta[0][15], 11);
 c000bea:	68fb      	ldr	r3, [r7, #12]
 c000bec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 c000bf0:	4a37      	ldr	r2, [pc, #220]	; (c000cd0 <lea_set_key+0xa40>)
 c000bf2:	4413      	add	r3, r2
 c000bf4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000bf8:	68fb      	ldr	r3, [r7, #12]
 c000bfa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 82] = ROL(key->rk[ 76] + delta[1][16], 11);
 c000bfe:	68fb      	ldr	r3, [r7, #12]
 c000c00:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 c000c04:	4a33      	ldr	r2, [pc, #204]	; (c000cd4 <lea_set_key+0xa44>)
 c000c06:	4413      	add	r3, r2
 c000c08:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000c0c:	68fb      	ldr	r3, [r7, #12]
 c000c0e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 88] = ROL(key->rk[ 82] + delta[2][17], 11);
 c000c12:	68fb      	ldr	r3, [r7, #12]
 c000c14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 c000c18:	4a2f      	ldr	r2, [pc, #188]	; (c000cd8 <lea_set_key+0xa48>)
 c000c1a:	4413      	add	r3, r2
 c000c1c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000c20:	68fb      	ldr	r3, [r7, #12]
 c000c22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 94] = ROL(key->rk[ 88] + delta[3][18], 11);
 c000c26:	68fb      	ldr	r3, [r7, #12]
 c000c28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 c000c2c:	4a2b      	ldr	r2, [pc, #172]	; (c000cdc <lea_set_key+0xa4c>)
 c000c2e:	4413      	add	r3, r2
 c000c30:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000c34:	68fb      	ldr	r3, [r7, #12]
 c000c36:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[100] = ROL(key->rk[ 94] + delta[0][19], 11);
 c000c3a:	68fb      	ldr	r3, [r7, #12]
 c000c3c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 c000c40:	e04e      	b.n	c000ce0 <lea_set_key+0xa50>
 c000c42:	bf00      	nop
 c000c44:	23135812 	.word	0x23135812
 c000c48:	9e27c8a7 	.word	0x9e27c8a7
 c000c4c:	1be61d8f 	.word	0x1be61d8f
 c000c50:	fbfa76f0 	.word	0xfbfa76f0
 c000c54:	31358122 	.word	0x31358122
 c000c58:	e27c8a79 	.word	0xe27c8a79
 c000c5c:	be61d8f1 	.word	0xbe61d8f1
 c000c60:	bfa76f0f 	.word	0xbfa76f0f
 c000c64:	13581223 	.word	0x13581223
 c000c68:	27c8a79e 	.word	0x27c8a79e
 c000c6c:	e61d8f1b 	.word	0xe61d8f1b
 c000c70:	fa76f0fb 	.word	0xfa76f0fb
 c000c74:	35812231 	.word	0x35812231
 c000c78:	7c8a79e2 	.word	0x7c8a79e2
 c000c7c:	61d8f1be 	.word	0x61d8f1be
 c000c80:	a76f0fbf 	.word	0xa76f0fbf
 c000c84:	58122313 	.word	0x58122313
 c000c88:	c8a79e27 	.word	0xc8a79e27
 c000c8c:	1d8f1be6 	.word	0x1d8f1be6
 c000c90:	76f0fbfa 	.word	0x76f0fbfa
 c000c94:	81223135 	.word	0x81223135
 c000c98:	8a79e27c 	.word	0x8a79e27c
 c000c9c:	d8f1be61 	.word	0xd8f1be61
 c000ca0:	1f7f4ede 	.word	0x1f7f4ede
 c000ca4:	4626b024 	.word	0x4626b024
 c000ca8:	3c4f914f 	.word	0x3c4f914f
 c000cac:	37cc3b1e 	.word	0x37cc3b1e
 c000cb0:	f7f4ede1 	.word	0xf7f4ede1
 c000cb4:	626b0244 	.word	0x626b0244
 c000cb8:	c4f914f3 	.word	0xc4f914f3
 c000cbc:	7cc3b1e3 	.word	0x7cc3b1e3
 c000cc0:	7f4ede1f 	.word	0x7f4ede1f
 c000cc4:	26b02446 	.word	0x26b02446
 c000cc8:	4f914f3c 	.word	0x4f914f3c
 c000ccc:	cc3b1e37 	.word	0xcc3b1e37
 c000cd0:	f4ede1f7 	.word	0xf4ede1f7
 c000cd4:	6b024462 	.word	0x6b024462
 c000cd8:	f914f3c4 	.word	0xf914f3c4
 c000cdc:	c3b1e37c 	.word	0xc3b1e37c
 c000ce0:	4a27      	ldr	r2, [pc, #156]	; (c000d80 <lea_set_key+0xaf0>)
 c000ce2:	4413      	add	r3, r2
 c000ce4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000ce8:	68fb      	ldr	r3, [r7, #12]
 c000cea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[106] = ROL(key->rk[100] + delta[1][20], 11);
 c000cee:	68fb      	ldr	r3, [r7, #12]
 c000cf0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 c000cf4:	4a23      	ldr	r2, [pc, #140]	; (c000d84 <lea_set_key+0xaf4>)
 c000cf6:	4413      	add	r3, r2
 c000cf8:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000cfc:	68fb      	ldr	r3, [r7, #12]
 c000cfe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[112] = ROL(key->rk[106] + delta[2][21], 11);
 c000d02:	68fb      	ldr	r3, [r7, #12]
 c000d04:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 c000d08:	4a1f      	ldr	r2, [pc, #124]	; (c000d88 <lea_set_key+0xaf8>)
 c000d0a:	4413      	add	r3, r2
 c000d0c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d10:	68fb      	ldr	r3, [r7, #12]
 c000d12:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[118] = ROL(key->rk[112] + delta[3][22], 11);
 c000d16:	68fb      	ldr	r3, [r7, #12]
 c000d18:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 c000d1c:	4a1b      	ldr	r2, [pc, #108]	; (c000d8c <lea_set_key+0xafc>)
 c000d1e:	4413      	add	r3, r2
 c000d20:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d24:	68fb      	ldr	r3, [r7, #12]
 c000d26:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[124] = ROL(key->rk[118] + delta[0][23], 11);
 c000d2a:	68fb      	ldr	r3, [r7, #12]
 c000d2c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 c000d30:	4a17      	ldr	r2, [pc, #92]	; (c000d90 <lea_set_key+0xb00>)
 c000d32:	4413      	add	r3, r2
 c000d34:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d38:	68fb      	ldr	r3, [r7, #12]
 c000d3a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[130] = ROL(key->rk[124] + delta[1][24], 11);
 c000d3e:	68fb      	ldr	r3, [r7, #12]
 c000d40:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 c000d44:	4a13      	ldr	r2, [pc, #76]	; (c000d94 <lea_set_key+0xb04>)
 c000d46:	4413      	add	r3, r2
 c000d48:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d4c:	68fb      	ldr	r3, [r7, #12]
 c000d4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[136] = ROL(key->rk[130] + delta[2][25], 11);
 c000d52:	68fb      	ldr	r3, [r7, #12]
 c000d54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 c000d58:	4a0f      	ldr	r2, [pc, #60]	; (c000d98 <lea_set_key+0xb08>)
 c000d5a:	4413      	add	r3, r2
 c000d5c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d60:	68fb      	ldr	r3, [r7, #12]
 c000d62:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[142] = ROL(key->rk[136] + delta[3][26], 11);
 c000d66:	68fb      	ldr	r3, [r7, #12]
 c000d68:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000d6c:	4a0b      	ldr	r2, [pc, #44]	; (c000d9c <lea_set_key+0xb0c>)
 c000d6e:	4413      	add	r3, r2
 c000d70:	ea4f 5273 	mov.w	r2, r3, ror #21
 c000d74:	68fb      	ldr	r3, [r7, #12]
 c000d76:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		break;
 c000d7a:	f002 b839 	b.w	c002df0 <lea_set_key+0x2b60>
 c000d7e:	bf00      	nop
 c000d80:	4ede1f7f 	.word	0x4ede1f7f
 c000d84:	b0244626 	.word	0xb0244626
 c000d88:	914f3c4f 	.word	0x914f3c4f
 c000d8c:	3b1e37cc 	.word	0x3b1e37cc
 c000d90:	ede1f7f4 	.word	0xede1f7f4
 c000d94:	0244626b 	.word	0x0244626b
 c000d98:	14f3c4f9 	.word	0x14f3c4f9
 c000d9c:	b1e37cc3 	.word	0xb1e37cc3
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0], 1);
 c000da0:	697b      	ldr	r3, [r7, #20]
 c000da2:	681b      	ldr	r3, [r3, #0]
 c000da4:	4ab7      	ldr	r2, [pc, #732]	; (c001084 <lea_set_key+0xdf4>)
 c000da6:	4413      	add	r3, r2
 c000da8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000dac:	68fb      	ldr	r3, [r7, #12]
 c000dae:	601a      	str	r2, [r3, #0]
		key->rk[  6] = ROL(key->rk[  0] + delta[1][ 1], 1);
 c000db0:	68fb      	ldr	r3, [r7, #12]
 c000db2:	681b      	ldr	r3, [r3, #0]
 c000db4:	4ab4      	ldr	r2, [pc, #720]	; (c001088 <lea_set_key+0xdf8>)
 c000db6:	4413      	add	r3, r2
 c000db8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000dbc:	68fb      	ldr	r3, [r7, #12]
 c000dbe:	619a      	str	r2, [r3, #24]
		key->rk[ 12] = ROL(key->rk[  6] + delta[2][ 2], 1);
 c000dc0:	68fb      	ldr	r3, [r7, #12]
 c000dc2:	699b      	ldr	r3, [r3, #24]
 c000dc4:	4ab1      	ldr	r2, [pc, #708]	; (c00108c <lea_set_key+0xdfc>)
 c000dc6:	4413      	add	r3, r2
 c000dc8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000dcc:	68fb      	ldr	r3, [r7, #12]
 c000dce:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 18] = ROL(key->rk[ 12] + delta[3][ 3], 1);
 c000dd0:	68fb      	ldr	r3, [r7, #12]
 c000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c000dd4:	4aae      	ldr	r2, [pc, #696]	; (c001090 <lea_set_key+0xe00>)
 c000dd6:	4413      	add	r3, r2
 c000dd8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000ddc:	68fb      	ldr	r3, [r7, #12]
 c000dde:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 24] = ROL(key->rk[ 18] + delta[4][ 4], 1);
 c000de0:	68fb      	ldr	r3, [r7, #12]
 c000de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000de4:	4aab      	ldr	r2, [pc, #684]	; (c001094 <lea_set_key+0xe04>)
 c000de6:	4413      	add	r3, r2
 c000de8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000dec:	68fb      	ldr	r3, [r7, #12]
 c000dee:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 30] = ROL(key->rk[ 24] + delta[5][ 5], 1);
 c000df0:	68fb      	ldr	r3, [r7, #12]
 c000df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000df4:	4aa8      	ldr	r2, [pc, #672]	; (c001098 <lea_set_key+0xe08>)
 c000df6:	4413      	add	r3, r2
 c000df8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000dfc:	68fb      	ldr	r3, [r7, #12]
 c000dfe:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 36] = ROL(key->rk[ 30] + delta[0][ 6], 1);
 c000e00:	68fb      	ldr	r3, [r7, #12]
 c000e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c000e04:	4aa5      	ldr	r2, [pc, #660]	; (c00109c <lea_set_key+0xe0c>)
 c000e06:	4413      	add	r3, r2
 c000e08:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e0c:	68fb      	ldr	r3, [r7, #12]
 c000e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 42] = ROL(key->rk[ 36] + delta[1][ 7], 1);
 c000e12:	68fb      	ldr	r3, [r7, #12]
 c000e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c000e18:	4aa1      	ldr	r2, [pc, #644]	; (c0010a0 <lea_set_key+0xe10>)
 c000e1a:	4413      	add	r3, r2
 c000e1c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e20:	68fb      	ldr	r3, [r7, #12]
 c000e22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 48] = ROL(key->rk[ 42] + delta[2][ 8], 1);
 c000e26:	68fb      	ldr	r3, [r7, #12]
 c000e28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c000e2c:	4a9d      	ldr	r2, [pc, #628]	; (c0010a4 <lea_set_key+0xe14>)
 c000e2e:	4413      	add	r3, r2
 c000e30:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e34:	68fb      	ldr	r3, [r7, #12]
 c000e36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 54] = ROL(key->rk[ 48] + delta[3][ 9], 1);
 c000e3a:	68fb      	ldr	r3, [r7, #12]
 c000e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c000e40:	4a99      	ldr	r2, [pc, #612]	; (c0010a8 <lea_set_key+0xe18>)
 c000e42:	4413      	add	r3, r2
 c000e44:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e48:	68fb      	ldr	r3, [r7, #12]
 c000e4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 60] = ROL(key->rk[ 54] + delta[4][10], 1);
 c000e4e:	68fb      	ldr	r3, [r7, #12]
 c000e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c000e54:	4a95      	ldr	r2, [pc, #596]	; (c0010ac <lea_set_key+0xe1c>)
 c000e56:	4413      	add	r3, r2
 c000e58:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e5c:	68fb      	ldr	r3, [r7, #12]
 c000e5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 66] = ROL(key->rk[ 60] + delta[5][11], 1);
 c000e62:	68fb      	ldr	r3, [r7, #12]
 c000e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c000e68:	4a91      	ldr	r2, [pc, #580]	; (c0010b0 <lea_set_key+0xe20>)
 c000e6a:	4413      	add	r3, r2
 c000e6c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e70:	68fb      	ldr	r3, [r7, #12]
 c000e72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 72] = ROL(key->rk[ 66] + delta[0][12], 1);
 c000e76:	68fb      	ldr	r3, [r7, #12]
 c000e78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c000e7c:	4a8d      	ldr	r2, [pc, #564]	; (c0010b4 <lea_set_key+0xe24>)
 c000e7e:	4413      	add	r3, r2
 c000e80:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e84:	68fb      	ldr	r3, [r7, #12]
 c000e86:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 78] = ROL(key->rk[ 72] + delta[1][13], 1);
 c000e8a:	68fb      	ldr	r3, [r7, #12]
 c000e8c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 c000e90:	4a89      	ldr	r2, [pc, #548]	; (c0010b8 <lea_set_key+0xe28>)
 c000e92:	4413      	add	r3, r2
 c000e94:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000e98:	68fb      	ldr	r3, [r7, #12]
 c000e9a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 84] = ROL(key->rk[ 78] + delta[2][14], 1);
 c000e9e:	68fb      	ldr	r3, [r7, #12]
 c000ea0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 c000ea4:	4a85      	ldr	r2, [pc, #532]	; (c0010bc <lea_set_key+0xe2c>)
 c000ea6:	4413      	add	r3, r2
 c000ea8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000eac:	68fb      	ldr	r3, [r7, #12]
 c000eae:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 90] = ROL(key->rk[ 84] + delta[3][15], 1);
 c000eb2:	68fb      	ldr	r3, [r7, #12]
 c000eb4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 c000eb8:	4a81      	ldr	r2, [pc, #516]	; (c0010c0 <lea_set_key+0xe30>)
 c000eba:	4413      	add	r3, r2
 c000ebc:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000ec0:	68fb      	ldr	r3, [r7, #12]
 c000ec2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 96] = ROL(key->rk[ 90] + delta[4][16], 1);
 c000ec6:	68fb      	ldr	r3, [r7, #12]
 c000ec8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 c000ecc:	4a7d      	ldr	r2, [pc, #500]	; (c0010c4 <lea_set_key+0xe34>)
 c000ece:	4413      	add	r3, r2
 c000ed0:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000ed4:	68fb      	ldr	r3, [r7, #12]
 c000ed6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[102] = ROL(key->rk[ 96] + delta[5][17], 1);
 c000eda:	68fb      	ldr	r3, [r7, #12]
 c000edc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 c000ee0:	4a79      	ldr	r2, [pc, #484]	; (c0010c8 <lea_set_key+0xe38>)
 c000ee2:	4413      	add	r3, r2
 c000ee4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000ee8:	68fb      	ldr	r3, [r7, #12]
 c000eea:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[108] = ROL(key->rk[102] + delta[0][18], 1);
 c000eee:	68fb      	ldr	r3, [r7, #12]
 c000ef0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 c000ef4:	4a75      	ldr	r2, [pc, #468]	; (c0010cc <lea_set_key+0xe3c>)
 c000ef6:	4413      	add	r3, r2
 c000ef8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000efc:	68fb      	ldr	r3, [r7, #12]
 c000efe:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[114] = ROL(key->rk[108] + delta[1][19], 1);
 c000f02:	68fb      	ldr	r3, [r7, #12]
 c000f04:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 c000f08:	4a71      	ldr	r2, [pc, #452]	; (c0010d0 <lea_set_key+0xe40>)
 c000f0a:	4413      	add	r3, r2
 c000f0c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f10:	68fb      	ldr	r3, [r7, #12]
 c000f12:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[120] = ROL(key->rk[114] + delta[2][20], 1);
 c000f16:	68fb      	ldr	r3, [r7, #12]
 c000f18:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 c000f1c:	4a6d      	ldr	r2, [pc, #436]	; (c0010d4 <lea_set_key+0xe44>)
 c000f1e:	4413      	add	r3, r2
 c000f20:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f24:	68fb      	ldr	r3, [r7, #12]
 c000f26:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[126] = ROL(key->rk[120] + delta[3][21], 1);
 c000f2a:	68fb      	ldr	r3, [r7, #12]
 c000f2c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 c000f30:	4a69      	ldr	r2, [pc, #420]	; (c0010d8 <lea_set_key+0xe48>)
 c000f32:	4413      	add	r3, r2
 c000f34:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f38:	68fb      	ldr	r3, [r7, #12]
 c000f3a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[132] = ROL(key->rk[126] + delta[4][22], 1);
 c000f3e:	68fb      	ldr	r3, [r7, #12]
 c000f40:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 c000f44:	4a65      	ldr	r2, [pc, #404]	; (c0010dc <lea_set_key+0xe4c>)
 c000f46:	4413      	add	r3, r2
 c000f48:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f4c:	68fb      	ldr	r3, [r7, #12]
 c000f4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[138] = ROL(key->rk[132] + delta[5][23], 1);
 c000f52:	68fb      	ldr	r3, [r7, #12]
 c000f54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 c000f58:	4a61      	ldr	r2, [pc, #388]	; (c0010e0 <lea_set_key+0xe50>)
 c000f5a:	4413      	add	r3, r2
 c000f5c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f60:	68fb      	ldr	r3, [r7, #12]
 c000f62:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[144] = ROL(key->rk[138] + delta[0][24], 1);
 c000f66:	68fb      	ldr	r3, [r7, #12]
 c000f68:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 c000f6c:	4a5d      	ldr	r2, [pc, #372]	; (c0010e4 <lea_set_key+0xe54>)
 c000f6e:	4413      	add	r3, r2
 c000f70:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f74:	68fb      	ldr	r3, [r7, #12]
 c000f76:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		key->rk[150] = ROL(key->rk[144] + delta[1][25], 1);
 c000f7a:	68fb      	ldr	r3, [r7, #12]
 c000f7c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 c000f80:	4a59      	ldr	r2, [pc, #356]	; (c0010e8 <lea_set_key+0xe58>)
 c000f82:	4413      	add	r3, r2
 c000f84:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f88:	68fb      	ldr	r3, [r7, #12]
 c000f8a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		key->rk[156] = ROL(key->rk[150] + delta[2][26], 1);
 c000f8e:	68fb      	ldr	r3, [r7, #12]
 c000f90:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 c000f94:	4a55      	ldr	r2, [pc, #340]	; (c0010ec <lea_set_key+0xe5c>)
 c000f96:	4413      	add	r3, r2
 c000f98:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000f9c:	68fb      	ldr	r3, [r7, #12]
 c000f9e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		key->rk[162] = ROL(key->rk[156] + delta[3][27], 1);
 c000fa2:	68fb      	ldr	r3, [r7, #12]
 c000fa4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 c000fa8:	4a51      	ldr	r2, [pc, #324]	; (c0010f0 <lea_set_key+0xe60>)
 c000faa:	4413      	add	r3, r2
 c000fac:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c000fb0:	68fb      	ldr	r3, [r7, #12]
 c000fb2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		key->rk[  1] = ROL(loadU32(_mk[1]) + delta[0][ 1], 3);
 c000fb6:	697b      	ldr	r3, [r7, #20]
 c000fb8:	3304      	adds	r3, #4
 c000fba:	681b      	ldr	r3, [r3, #0]
 c000fbc:	4a4d      	ldr	r2, [pc, #308]	; (c0010f4 <lea_set_key+0xe64>)
 c000fbe:	4413      	add	r3, r2
 c000fc0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000fc4:	68fb      	ldr	r3, [r7, #12]
 c000fc6:	605a      	str	r2, [r3, #4]
		key->rk[  7] = ROL(key->rk[  1] + delta[1][ 2], 3);
 c000fc8:	68fb      	ldr	r3, [r7, #12]
 c000fca:	685b      	ldr	r3, [r3, #4]
 c000fcc:	4a4a      	ldr	r2, [pc, #296]	; (c0010f8 <lea_set_key+0xe68>)
 c000fce:	4413      	add	r3, r2
 c000fd0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000fd4:	68fb      	ldr	r3, [r7, #12]
 c000fd6:	61da      	str	r2, [r3, #28]
		key->rk[ 13] = ROL(key->rk[  7] + delta[2][ 3], 3);
 c000fd8:	68fb      	ldr	r3, [r7, #12]
 c000fda:	69db      	ldr	r3, [r3, #28]
 c000fdc:	4a47      	ldr	r2, [pc, #284]	; (c0010fc <lea_set_key+0xe6c>)
 c000fde:	4413      	add	r3, r2
 c000fe0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000fe4:	68fb      	ldr	r3, [r7, #12]
 c000fe6:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 19] = ROL(key->rk[ 13] + delta[3][ 4], 3);
 c000fe8:	68fb      	ldr	r3, [r7, #12]
 c000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c000fec:	4a44      	ldr	r2, [pc, #272]	; (c001100 <lea_set_key+0xe70>)
 c000fee:	4413      	add	r3, r2
 c000ff0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c000ff4:	68fb      	ldr	r3, [r7, #12]
 c000ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 25] = ROL(key->rk[ 19] + delta[4][ 5], 3);
 c000ff8:	68fb      	ldr	r3, [r7, #12]
 c000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000ffc:	4a41      	ldr	r2, [pc, #260]	; (c001104 <lea_set_key+0xe74>)
 c000ffe:	4413      	add	r3, r2
 c001000:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001004:	68fb      	ldr	r3, [r7, #12]
 c001006:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 31] = ROL(key->rk[ 25] + delta[5][ 6], 3);
 c001008:	68fb      	ldr	r3, [r7, #12]
 c00100a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00100c:	4a3e      	ldr	r2, [pc, #248]	; (c001108 <lea_set_key+0xe78>)
 c00100e:	4413      	add	r3, r2
 c001010:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001014:	68fb      	ldr	r3, [r7, #12]
 c001016:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 37] = ROL(key->rk[ 31] + delta[0][ 7], 3);
 c001018:	68fb      	ldr	r3, [r7, #12]
 c00101a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00101c:	4a3b      	ldr	r2, [pc, #236]	; (c00110c <lea_set_key+0xe7c>)
 c00101e:	4413      	add	r3, r2
 c001020:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001024:	68fb      	ldr	r3, [r7, #12]
 c001026:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 43] = ROL(key->rk[ 37] + delta[1][ 8], 3);
 c00102a:	68fb      	ldr	r3, [r7, #12]
 c00102c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001030:	4a37      	ldr	r2, [pc, #220]	; (c001110 <lea_set_key+0xe80>)
 c001032:	4413      	add	r3, r2
 c001034:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001038:	68fb      	ldr	r3, [r7, #12]
 c00103a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 49] = ROL(key->rk[ 43] + delta[2][ 9], 3);
 c00103e:	68fb      	ldr	r3, [r7, #12]
 c001040:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c001044:	4a33      	ldr	r2, [pc, #204]	; (c001114 <lea_set_key+0xe84>)
 c001046:	4413      	add	r3, r2
 c001048:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00104c:	68fb      	ldr	r3, [r7, #12]
 c00104e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 55] = ROL(key->rk[ 49] + delta[3][10], 3);
 c001052:	68fb      	ldr	r3, [r7, #12]
 c001054:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c001058:	4a2f      	ldr	r2, [pc, #188]	; (c001118 <lea_set_key+0xe88>)
 c00105a:	4413      	add	r3, r2
 c00105c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001060:	68fb      	ldr	r3, [r7, #12]
 c001062:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 61] = ROL(key->rk[ 55] + delta[4][11], 3);
 c001066:	68fb      	ldr	r3, [r7, #12]
 c001068:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c00106c:	4a2b      	ldr	r2, [pc, #172]	; (c00111c <lea_set_key+0xe8c>)
 c00106e:	4413      	add	r3, r2
 c001070:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001074:	68fb      	ldr	r3, [r7, #12]
 c001076:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 67] = ROL(key->rk[ 61] + delta[5][12], 3);
 c00107a:	68fb      	ldr	r3, [r7, #12]
 c00107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c001080:	e04e      	b.n	c001120 <lea_set_key+0xe90>
 c001082:	bf00      	nop
 c001084:	c3efe9db 	.word	0xc3efe9db
 c001088:	88c4d604 	.word	0x88c4d604
 c00108c:	e789f229 	.word	0xe789f229
 c001090:	c6f98763 	.word	0xc6f98763
 c001094:	15ea49e7 	.word	0x15ea49e7
 c001098:	f0bb4158 	.word	0xf0bb4158
 c00109c:	fbfa76f0 	.word	0xfbfa76f0
 c0010a0:	31358122 	.word	0x31358122
 c0010a4:	e27c8a79 	.word	0xe27c8a79
 c0010a8:	be61d8f1 	.word	0xbe61d8f1
 c0010ac:	7a9279c5 	.word	0x7a9279c5
 c0010b0:	2ed0563c 	.word	0x2ed0563c
 c0010b4:	fe9dbc3e 	.word	0xfe9dbc3e
 c0010b8:	4d60488c 	.word	0x4d60488c
 c0010bc:	9f229e78 	.word	0x9f229e78
 c0010c0:	98763c6f 	.word	0x98763c6f
 c0010c4:	a49e715e 	.word	0xa49e715e
 c0010c8:	b4158f0b 	.word	0xb4158f0b
 c0010cc:	a76f0fbf 	.word	0xa76f0fbf
 c0010d0:	58122313 	.word	0x58122313
 c0010d4:	c8a79e27 	.word	0xc8a79e27
 c0010d8:	1d8f1be6 	.word	0x1d8f1be6
 c0010dc:	279c57a9 	.word	0x279c57a9
 c0010e0:	0563c2ed 	.word	0x0563c2ed
 c0010e4:	dbc3efe9 	.word	0xdbc3efe9
 c0010e8:	0488c4d6 	.word	0x0488c4d6
 c0010ec:	29e789f2 	.word	0x29e789f2
 c0010f0:	63c6f987 	.word	0x63c6f987
 c0010f4:	87dfd3b7 	.word	0x87dfd3b7
 c0010f8:	1189ac09 	.word	0x1189ac09
 c0010fc:	cf13e453 	.word	0xcf13e453
 c001100:	8df30ec7 	.word	0x8df30ec7
 c001104:	2bd493ce 	.word	0x2bd493ce
 c001108:	e17682b1 	.word	0xe17682b1
 c00110c:	f7f4ede1 	.word	0xf7f4ede1
 c001110:	626b0244 	.word	0x626b0244
 c001114:	c4f914f3 	.word	0xc4f914f3
 c001118:	7cc3b1e3 	.word	0x7cc3b1e3
 c00111c:	f524f38a 	.word	0xf524f38a
 c001120:	4abe      	ldr	r2, [pc, #760]	; (c00141c <lea_set_key+0x118c>)
 c001122:	4413      	add	r3, r2
 c001124:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001128:	68fb      	ldr	r3, [r7, #12]
 c00112a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 73] = ROL(key->rk[ 67] + delta[0][13], 3);
 c00112e:	68fb      	ldr	r3, [r7, #12]
 c001130:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 c001134:	4aba      	ldr	r2, [pc, #744]	; (c001420 <lea_set_key+0x1190>)
 c001136:	4413      	add	r3, r2
 c001138:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00113c:	68fb      	ldr	r3, [r7, #12]
 c00113e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 79] = ROL(key->rk[ 73] + delta[1][14], 3);
 c001142:	68fb      	ldr	r3, [r7, #12]
 c001144:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 c001148:	4ab6      	ldr	r2, [pc, #728]	; (c001424 <lea_set_key+0x1194>)
 c00114a:	4413      	add	r3, r2
 c00114c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001150:	68fb      	ldr	r3, [r7, #12]
 c001152:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 85] = ROL(key->rk[ 79] + delta[2][15], 3);
 c001156:	68fb      	ldr	r3, [r7, #12]
 c001158:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 c00115c:	4ab2      	ldr	r2, [pc, #712]	; (c001428 <lea_set_key+0x1198>)
 c00115e:	4413      	add	r3, r2
 c001160:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001164:	68fb      	ldr	r3, [r7, #12]
 c001166:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 91] = ROL(key->rk[ 85] + delta[3][16], 3);
 c00116a:	68fb      	ldr	r3, [r7, #12]
 c00116c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 c001170:	4aae      	ldr	r2, [pc, #696]	; (c00142c <lea_set_key+0x119c>)
 c001172:	4413      	add	r3, r2
 c001174:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001178:	68fb      	ldr	r3, [r7, #12]
 c00117a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 97] = ROL(key->rk[ 91] + delta[4][17], 3);
 c00117e:	68fb      	ldr	r3, [r7, #12]
 c001180:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 c001184:	4aaa      	ldr	r2, [pc, #680]	; (c001430 <lea_set_key+0x11a0>)
 c001186:	4413      	add	r3, r2
 c001188:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00118c:	68fb      	ldr	r3, [r7, #12]
 c00118e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[103] = ROL(key->rk[ 97] + delta[5][18], 3);
 c001192:	68fb      	ldr	r3, [r7, #12]
 c001194:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 c001198:	4aa6      	ldr	r2, [pc, #664]	; (c001434 <lea_set_key+0x11a4>)
 c00119a:	4413      	add	r3, r2
 c00119c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0011a0:	68fb      	ldr	r3, [r7, #12]
 c0011a2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[109] = ROL(key->rk[103] + delta[0][19], 3);
 c0011a6:	68fb      	ldr	r3, [r7, #12]
 c0011a8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 c0011ac:	4aa2      	ldr	r2, [pc, #648]	; (c001438 <lea_set_key+0x11a8>)
 c0011ae:	4413      	add	r3, r2
 c0011b0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0011b4:	68fb      	ldr	r3, [r7, #12]
 c0011b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[115] = ROL(key->rk[109] + delta[1][20], 3);
 c0011ba:	68fb      	ldr	r3, [r7, #12]
 c0011bc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 c0011c0:	4a9e      	ldr	r2, [pc, #632]	; (c00143c <lea_set_key+0x11ac>)
 c0011c2:	4413      	add	r3, r2
 c0011c4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0011c8:	68fb      	ldr	r3, [r7, #12]
 c0011ca:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[121] = ROL(key->rk[115] + delta[2][21], 3);
 c0011ce:	68fb      	ldr	r3, [r7, #12]
 c0011d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 c0011d4:	4a9a      	ldr	r2, [pc, #616]	; (c001440 <lea_set_key+0x11b0>)
 c0011d6:	4413      	add	r3, r2
 c0011d8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0011dc:	68fb      	ldr	r3, [r7, #12]
 c0011de:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[127] = ROL(key->rk[121] + delta[3][22], 3);
 c0011e2:	68fb      	ldr	r3, [r7, #12]
 c0011e4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 c0011e8:	4a96      	ldr	r2, [pc, #600]	; (c001444 <lea_set_key+0x11b4>)
 c0011ea:	4413      	add	r3, r2
 c0011ec:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0011f0:	68fb      	ldr	r3, [r7, #12]
 c0011f2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[133] = ROL(key->rk[127] + delta[4][23], 3);
 c0011f6:	68fb      	ldr	r3, [r7, #12]
 c0011f8:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 c0011fc:	4a92      	ldr	r2, [pc, #584]	; (c001448 <lea_set_key+0x11b8>)
 c0011fe:	4413      	add	r3, r2
 c001200:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001204:	68fb      	ldr	r3, [r7, #12]
 c001206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[139] = ROL(key->rk[133] + delta[5][24], 3);
 c00120a:	68fb      	ldr	r3, [r7, #12]
 c00120c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 c001210:	4a8e      	ldr	r2, [pc, #568]	; (c00144c <lea_set_key+0x11bc>)
 c001212:	4413      	add	r3, r2
 c001214:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001218:	68fb      	ldr	r3, [r7, #12]
 c00121a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[145] = ROL(key->rk[139] + delta[0][25], 3);
 c00121e:	68fb      	ldr	r3, [r7, #12]
 c001220:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 c001224:	4a8a      	ldr	r2, [pc, #552]	; (c001450 <lea_set_key+0x11c0>)
 c001226:	4413      	add	r3, r2
 c001228:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00122c:	68fb      	ldr	r3, [r7, #12]
 c00122e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		key->rk[151] = ROL(key->rk[145] + delta[1][26], 3);
 c001232:	68fb      	ldr	r3, [r7, #12]
 c001234:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 c001238:	4a86      	ldr	r2, [pc, #536]	; (c001454 <lea_set_key+0x11c4>)
 c00123a:	4413      	add	r3, r2
 c00123c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001240:	68fb      	ldr	r3, [r7, #12]
 c001242:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		key->rk[157] = ROL(key->rk[151] + delta[2][27], 3);
 c001246:	68fb      	ldr	r3, [r7, #12]
 c001248:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 c00124c:	4a82      	ldr	r2, [pc, #520]	; (c001458 <lea_set_key+0x11c8>)
 c00124e:	4413      	add	r3, r2
 c001250:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001254:	68fb      	ldr	r3, [r7, #12]
 c001256:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		key->rk[163] = ROL(key->rk[157] + delta[3][28], 3);
 c00125a:	68fb      	ldr	r3, [r7, #12]
 c00125c:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 c001260:	4a7e      	ldr	r2, [pc, #504]	; (c00145c <lea_set_key+0x11cc>)
 c001262:	4413      	add	r3, r2
 c001264:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001268:	68fb      	ldr	r3, [r7, #12]
 c00126a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2], 6);
 c00126e:	697b      	ldr	r3, [r7, #20]
 c001270:	3308      	adds	r3, #8
 c001272:	681b      	ldr	r3, [r3, #0]
 c001274:	4a7a      	ldr	r2, [pc, #488]	; (c001460 <lea_set_key+0x11d0>)
 c001276:	4413      	add	r3, r2
 c001278:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00127c:	68fb      	ldr	r3, [r7, #12]
 c00127e:	609a      	str	r2, [r3, #8]
		key->rk[  8] = ROL(key->rk[  2] + delta[1][ 3], 6);
 c001280:	68fb      	ldr	r3, [r7, #12]
 c001282:	689b      	ldr	r3, [r3, #8]
 c001284:	4a77      	ldr	r2, [pc, #476]	; (c001464 <lea_set_key+0x11d4>)
 c001286:	4413      	add	r3, r2
 c001288:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00128c:	68fb      	ldr	r3, [r7, #12]
 c00128e:	621a      	str	r2, [r3, #32]
		key->rk[ 14] = ROL(key->rk[  8] + delta[2][ 4], 6);
 c001290:	68fb      	ldr	r3, [r7, #12]
 c001292:	6a1b      	ldr	r3, [r3, #32]
 c001294:	4a74      	ldr	r2, [pc, #464]	; (c001468 <lea_set_key+0x11d8>)
 c001296:	4413      	add	r3, r2
 c001298:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00129c:	68fb      	ldr	r3, [r7, #12]
 c00129e:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 20] = ROL(key->rk[ 14] + delta[3][ 5], 6);
 c0012a0:	68fb      	ldr	r3, [r7, #12]
 c0012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0012a4:	4a71      	ldr	r2, [pc, #452]	; (c00146c <lea_set_key+0x11dc>)
 c0012a6:	4413      	add	r3, r2
 c0012a8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0012ac:	68fb      	ldr	r3, [r7, #12]
 c0012ae:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 26] = ROL(key->rk[ 20] + delta[4][ 6], 6);
 c0012b0:	68fb      	ldr	r3, [r7, #12]
 c0012b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0012b4:	4a6e      	ldr	r2, [pc, #440]	; (c001470 <lea_set_key+0x11e0>)
 c0012b6:	4413      	add	r3, r2
 c0012b8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0012bc:	68fb      	ldr	r3, [r7, #12]
 c0012be:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 32] = ROL(key->rk[ 26] + delta[5][ 7], 6);
 c0012c0:	68fb      	ldr	r3, [r7, #12]
 c0012c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0012c4:	4a6b      	ldr	r2, [pc, #428]	; (c001474 <lea_set_key+0x11e4>)
 c0012c6:	4413      	add	r3, r2
 c0012c8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0012cc:	68fb      	ldr	r3, [r7, #12]
 c0012ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 38] = ROL(key->rk[ 32] + delta[0][ 8], 6);
 c0012d2:	68fb      	ldr	r3, [r7, #12]
 c0012d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0012d8:	4a67      	ldr	r2, [pc, #412]	; (c001478 <lea_set_key+0x11e8>)
 c0012da:	4413      	add	r3, r2
 c0012dc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0012e0:	68fb      	ldr	r3, [r7, #12]
 c0012e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 44] = ROL(key->rk[ 38] + delta[1][ 9], 6);
 c0012e6:	68fb      	ldr	r3, [r7, #12]
 c0012e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0012ec:	4a63      	ldr	r2, [pc, #396]	; (c00147c <lea_set_key+0x11ec>)
 c0012ee:	4413      	add	r3, r2
 c0012f0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0012f4:	68fb      	ldr	r3, [r7, #12]
 c0012f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 50] = ROL(key->rk[ 44] + delta[2][10], 6);
 c0012fa:	68fb      	ldr	r3, [r7, #12]
 c0012fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c001300:	4a5f      	ldr	r2, [pc, #380]	; (c001480 <lea_set_key+0x11f0>)
 c001302:	4413      	add	r3, r2
 c001304:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001308:	68fb      	ldr	r3, [r7, #12]
 c00130a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 56] = ROL(key->rk[ 50] + delta[3][11], 6);
 c00130e:	68fb      	ldr	r3, [r7, #12]
 c001310:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c001314:	4a5b      	ldr	r2, [pc, #364]	; (c001484 <lea_set_key+0x11f4>)
 c001316:	4413      	add	r3, r2
 c001318:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00131c:	68fb      	ldr	r3, [r7, #12]
 c00131e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 62] = ROL(key->rk[ 56] + delta[4][12], 6);
 c001322:	68fb      	ldr	r3, [r7, #12]
 c001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c001328:	4a57      	ldr	r2, [pc, #348]	; (c001488 <lea_set_key+0x11f8>)
 c00132a:	4413      	add	r3, r2
 c00132c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001330:	68fb      	ldr	r3, [r7, #12]
 c001332:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 68] = ROL(key->rk[ 62] + delta[5][13], 6);
 c001336:	68fb      	ldr	r3, [r7, #12]
 c001338:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c00133c:	4a53      	ldr	r2, [pc, #332]	; (c00148c <lea_set_key+0x11fc>)
 c00133e:	4413      	add	r3, r2
 c001340:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001344:	68fb      	ldr	r3, [r7, #12]
 c001346:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 74] = ROL(key->rk[ 68] + delta[0][14], 6);
 c00134a:	68fb      	ldr	r3, [r7, #12]
 c00134c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 c001350:	4a4f      	ldr	r2, [pc, #316]	; (c001490 <lea_set_key+0x1200>)
 c001352:	4413      	add	r3, r2
 c001354:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001358:	68fb      	ldr	r3, [r7, #12]
 c00135a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 80] = ROL(key->rk[ 74] + delta[1][15], 6);
 c00135e:	68fb      	ldr	r3, [r7, #12]
 c001360:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 c001364:	4a4b      	ldr	r2, [pc, #300]	; (c001494 <lea_set_key+0x1204>)
 c001366:	4413      	add	r3, r2
 c001368:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00136c:	68fb      	ldr	r3, [r7, #12]
 c00136e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 86] = ROL(key->rk[ 80] + delta[2][16], 6);
 c001372:	68fb      	ldr	r3, [r7, #12]
 c001374:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 c001378:	4a47      	ldr	r2, [pc, #284]	; (c001498 <lea_set_key+0x1208>)
 c00137a:	4413      	add	r3, r2
 c00137c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001380:	68fb      	ldr	r3, [r7, #12]
 c001382:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 92] = ROL(key->rk[ 86] + delta[3][17], 6);
 c001386:	68fb      	ldr	r3, [r7, #12]
 c001388:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 c00138c:	4a43      	ldr	r2, [pc, #268]	; (c00149c <lea_set_key+0x120c>)
 c00138e:	4413      	add	r3, r2
 c001390:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001394:	68fb      	ldr	r3, [r7, #12]
 c001396:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[ 98] = ROL(key->rk[ 92] + delta[4][18], 6);
 c00139a:	68fb      	ldr	r3, [r7, #12]
 c00139c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 c0013a0:	4a3f      	ldr	r2, [pc, #252]	; (c0014a0 <lea_set_key+0x1210>)
 c0013a2:	4413      	add	r3, r2
 c0013a4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0013a8:	68fb      	ldr	r3, [r7, #12]
 c0013aa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[104] = ROL(key->rk[ 98] + delta[5][19], 6);
 c0013ae:	68fb      	ldr	r3, [r7, #12]
 c0013b0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 c0013b4:	4a3b      	ldr	r2, [pc, #236]	; (c0014a4 <lea_set_key+0x1214>)
 c0013b6:	4413      	add	r3, r2
 c0013b8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0013bc:	68fb      	ldr	r3, [r7, #12]
 c0013be:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[110] = ROL(key->rk[104] + delta[0][20], 6);
 c0013c2:	68fb      	ldr	r3, [r7, #12]
 c0013c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 c0013c8:	4a37      	ldr	r2, [pc, #220]	; (c0014a8 <lea_set_key+0x1218>)
 c0013ca:	4413      	add	r3, r2
 c0013cc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0013d0:	68fb      	ldr	r3, [r7, #12]
 c0013d2:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[116] = ROL(key->rk[110] + delta[1][21], 6);
 c0013d6:	68fb      	ldr	r3, [r7, #12]
 c0013d8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 c0013dc:	4a33      	ldr	r2, [pc, #204]	; (c0014ac <lea_set_key+0x121c>)
 c0013de:	4413      	add	r3, r2
 c0013e0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0013e4:	68fb      	ldr	r3, [r7, #12]
 c0013e6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[122] = ROL(key->rk[116] + delta[2][22], 6);
 c0013ea:	68fb      	ldr	r3, [r7, #12]
 c0013ec:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 c0013f0:	4a2f      	ldr	r2, [pc, #188]	; (c0014b0 <lea_set_key+0x1220>)
 c0013f2:	4413      	add	r3, r2
 c0013f4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0013f8:	68fb      	ldr	r3, [r7, #12]
 c0013fa:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[128] = ROL(key->rk[122] + delta[3][23], 6);
 c0013fe:	68fb      	ldr	r3, [r7, #12]
 c001400:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 c001404:	4a2b      	ldr	r2, [pc, #172]	; (c0014b4 <lea_set_key+0x1224>)
 c001406:	4413      	add	r3, r2
 c001408:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00140c:	68fb      	ldr	r3, [r7, #12]
 c00140e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[134] = ROL(key->rk[128] + delta[4][24], 6);
 c001412:	68fb      	ldr	r3, [r7, #12]
 c001414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 c001418:	e04e      	b.n	c0014b8 <lea_set_key+0x1228>
 c00141a:	bf00      	nop
 c00141c:	5da0ac78 	.word	0x5da0ac78
 c001420:	fd3b787d 	.word	0xfd3b787d
 c001424:	9ac09118 	.word	0x9ac09118
 c001428:	3e453cf1 	.word	0x3e453cf1
 c00142c:	30ec78df 	.word	0x30ec78df
 c001430:	493ce2bd 	.word	0x493ce2bd
 c001434:	682b1e17 	.word	0x682b1e17
 c001438:	4ede1f7f 	.word	0x4ede1f7f
 c00143c:	b0244626 	.word	0xb0244626
 c001440:	914f3c4f 	.word	0x914f3c4f
 c001444:	3b1e37cc 	.word	0x3b1e37cc
 c001448:	4f38af52 	.word	0x4f38af52
 c00144c:	0ac785da 	.word	0x0ac785da
 c001450:	b787dfd3 	.word	0xb787dfd3
 c001454:	091189ac 	.word	0x091189ac
 c001458:	53cf13e4 	.word	0x53cf13e4
 c00145c:	c78df30e 	.word	0xc78df30e
 c001460:	0fbfa76f 	.word	0x0fbfa76f
 c001464:	23135812 	.word	0x23135812
 c001468:	9e27c8a7 	.word	0x9e27c8a7
 c00146c:	1be61d8f 	.word	0x1be61d8f
 c001470:	57a9279c 	.word	0x57a9279c
 c001474:	c2ed0563 	.word	0xc2ed0563
 c001478:	efe9dbc3 	.word	0xefe9dbc3
 c00147c:	c4d60488 	.word	0xc4d60488
 c001480:	89f229e7 	.word	0x89f229e7
 c001484:	f98763c6 	.word	0xf98763c6
 c001488:	ea49e715 	.word	0xea49e715
 c00148c:	bb4158f0 	.word	0xbb4158f0
 c001490:	fa76f0fb 	.word	0xfa76f0fb
 c001494:	35812231 	.word	0x35812231
 c001498:	7c8a79e2 	.word	0x7c8a79e2
 c00149c:	61d8f1be 	.word	0x61d8f1be
 c0014a0:	9279c57a 	.word	0x9279c57a
 c0014a4:	d0563c2e 	.word	0xd0563c2e
 c0014a8:	9dbc3efe 	.word	0x9dbc3efe
 c0014ac:	60488c4d 	.word	0x60488c4d
 c0014b0:	229e789f 	.word	0x229e789f
 c0014b4:	763c6f98 	.word	0x763c6f98
 c0014b8:	4ab8      	ldr	r2, [pc, #736]	; (c00179c <lea_set_key+0x150c>)
 c0014ba:	4413      	add	r3, r2
 c0014bc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0014c0:	68fb      	ldr	r3, [r7, #12]
 c0014c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[140] = ROL(key->rk[134] + delta[5][25], 6);
 c0014c6:	68fb      	ldr	r3, [r7, #12]
 c0014c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 c0014cc:	4ab4      	ldr	r2, [pc, #720]	; (c0017a0 <lea_set_key+0x1510>)
 c0014ce:	4413      	add	r3, r2
 c0014d0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0014d4:	68fb      	ldr	r3, [r7, #12]
 c0014d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[146] = ROL(key->rk[140] + delta[0][26], 6);
 c0014da:	68fb      	ldr	r3, [r7, #12]
 c0014dc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 c0014e0:	4ab0      	ldr	r2, [pc, #704]	; (c0017a4 <lea_set_key+0x1514>)
 c0014e2:	4413      	add	r3, r2
 c0014e4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0014e8:	68fb      	ldr	r3, [r7, #12]
 c0014ea:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		key->rk[152] = ROL(key->rk[146] + delta[1][27], 6);
 c0014ee:	68fb      	ldr	r3, [r7, #12]
 c0014f0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 c0014f4:	4aac      	ldr	r2, [pc, #688]	; (c0017a8 <lea_set_key+0x1518>)
 c0014f6:	4413      	add	r3, r2
 c0014f8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0014fc:	68fb      	ldr	r3, [r7, #12]
 c0014fe:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		key->rk[158] = ROL(key->rk[152] + delta[2][28], 6);
 c001502:	68fb      	ldr	r3, [r7, #12]
 c001504:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 c001508:	4aa8      	ldr	r2, [pc, #672]	; (c0017ac <lea_set_key+0x151c>)
 c00150a:	4413      	add	r3, r2
 c00150c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001510:	68fb      	ldr	r3, [r7, #12]
 c001512:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		key->rk[164] = ROL(key->rk[158] + delta[3][29], 6);
 c001516:	68fb      	ldr	r3, [r7, #12]
 c001518:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 c00151c:	4aa4      	ldr	r2, [pc, #656]	; (c0017b0 <lea_set_key+0x1520>)
 c00151e:	4413      	add	r3, r2
 c001520:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001524:	68fb      	ldr	r3, [r7, #12]
 c001526:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		key->rk[  3] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 c00152a:	697b      	ldr	r3, [r7, #20]
 c00152c:	330c      	adds	r3, #12
 c00152e:	681b      	ldr	r3, [r3, #0]
 c001530:	4aa0      	ldr	r2, [pc, #640]	; (c0017b4 <lea_set_key+0x1524>)
 c001532:	4413      	add	r3, r2
 c001534:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001538:	68fb      	ldr	r3, [r7, #12]
 c00153a:	60da      	str	r2, [r3, #12]
		key->rk[  9] = ROL(key->rk[  3] + delta[1][ 4], 11);
 c00153c:	68fb      	ldr	r3, [r7, #12]
 c00153e:	68db      	ldr	r3, [r3, #12]
 c001540:	4a9d      	ldr	r2, [pc, #628]	; (c0017b8 <lea_set_key+0x1528>)
 c001542:	4413      	add	r3, r2
 c001544:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001548:	68fb      	ldr	r3, [r7, #12]
 c00154a:	625a      	str	r2, [r3, #36]	; 0x24
		key->rk[ 15] = ROL(key->rk[  9] + delta[2][ 5], 11);
 c00154c:	68fb      	ldr	r3, [r7, #12]
 c00154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001550:	4a9a      	ldr	r2, [pc, #616]	; (c0017bc <lea_set_key+0x152c>)
 c001552:	4413      	add	r3, r2
 c001554:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001558:	68fb      	ldr	r3, [r7, #12]
 c00155a:	63da      	str	r2, [r3, #60]	; 0x3c
		key->rk[ 21] = ROL(key->rk[ 15] + delta[3][ 6], 11);
 c00155c:	68fb      	ldr	r3, [r7, #12]
 c00155e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001560:	4a97      	ldr	r2, [pc, #604]	; (c0017c0 <lea_set_key+0x1530>)
 c001562:	4413      	add	r3, r2
 c001564:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001568:	68fb      	ldr	r3, [r7, #12]
 c00156a:	655a      	str	r2, [r3, #84]	; 0x54
		key->rk[ 27] = ROL(key->rk[ 21] + delta[4][ 7], 11);
 c00156c:	68fb      	ldr	r3, [r7, #12]
 c00156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c001570:	4a94      	ldr	r2, [pc, #592]	; (c0017c4 <lea_set_key+0x1534>)
 c001572:	4413      	add	r3, r2
 c001574:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001578:	68fb      	ldr	r3, [r7, #12]
 c00157a:	66da      	str	r2, [r3, #108]	; 0x6c
		key->rk[ 33] = ROL(key->rk[ 27] + delta[5][ 8], 11);
 c00157c:	68fb      	ldr	r3, [r7, #12]
 c00157e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c001580:	4a91      	ldr	r2, [pc, #580]	; (c0017c8 <lea_set_key+0x1538>)
 c001582:	4413      	add	r3, r2
 c001584:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001588:	68fb      	ldr	r3, [r7, #12]
 c00158a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		key->rk[ 39] = ROL(key->rk[ 33] + delta[0][ 9], 11);
 c00158e:	68fb      	ldr	r3, [r7, #12]
 c001590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001594:	4a8d      	ldr	r2, [pc, #564]	; (c0017cc <lea_set_key+0x153c>)
 c001596:	4413      	add	r3, r2
 c001598:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00159c:	68fb      	ldr	r3, [r7, #12]
 c00159e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		key->rk[ 45] = ROL(key->rk[ 39] + delta[1][10], 11);
 c0015a2:	68fb      	ldr	r3, [r7, #12]
 c0015a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0015a8:	4a89      	ldr	r2, [pc, #548]	; (c0017d0 <lea_set_key+0x1540>)
 c0015aa:	4413      	add	r3, r2
 c0015ac:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0015b0:	68fb      	ldr	r3, [r7, #12]
 c0015b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		key->rk[ 51] = ROL(key->rk[ 45] + delta[2][11], 11);
 c0015b6:	68fb      	ldr	r3, [r7, #12]
 c0015b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c0015bc:	4a85      	ldr	r2, [pc, #532]	; (c0017d4 <lea_set_key+0x1544>)
 c0015be:	4413      	add	r3, r2
 c0015c0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0015c4:	68fb      	ldr	r3, [r7, #12]
 c0015c6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		key->rk[ 57] = ROL(key->rk[ 51] + delta[3][12], 11);
 c0015ca:	68fb      	ldr	r3, [r7, #12]
 c0015cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c0015d0:	4a81      	ldr	r2, [pc, #516]	; (c0017d8 <lea_set_key+0x1548>)
 c0015d2:	4413      	add	r3, r2
 c0015d4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0015d8:	68fb      	ldr	r3, [r7, #12]
 c0015da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		key->rk[ 63] = ROL(key->rk[ 57] + delta[4][13], 11);
 c0015de:	68fb      	ldr	r3, [r7, #12]
 c0015e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c0015e4:	4a7d      	ldr	r2, [pc, #500]	; (c0017dc <lea_set_key+0x154c>)
 c0015e6:	4413      	add	r3, r2
 c0015e8:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0015ec:	68fb      	ldr	r3, [r7, #12]
 c0015ee:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		key->rk[ 69] = ROL(key->rk[ 63] + delta[5][14], 11);
 c0015f2:	68fb      	ldr	r3, [r7, #12]
 c0015f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 c0015f8:	4a79      	ldr	r2, [pc, #484]	; (c0017e0 <lea_set_key+0x1550>)
 c0015fa:	4413      	add	r3, r2
 c0015fc:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001600:	68fb      	ldr	r3, [r7, #12]
 c001602:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		key->rk[ 75] = ROL(key->rk[ 69] + delta[0][15], 11);
 c001606:	68fb      	ldr	r3, [r7, #12]
 c001608:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 c00160c:	4a75      	ldr	r2, [pc, #468]	; (c0017e4 <lea_set_key+0x1554>)
 c00160e:	4413      	add	r3, r2
 c001610:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001614:	68fb      	ldr	r3, [r7, #12]
 c001616:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		key->rk[ 81] = ROL(key->rk[ 75] + delta[1][16], 11);
 c00161a:	68fb      	ldr	r3, [r7, #12]
 c00161c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 c001620:	4a71      	ldr	r2, [pc, #452]	; (c0017e8 <lea_set_key+0x1558>)
 c001622:	4413      	add	r3, r2
 c001624:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001628:	68fb      	ldr	r3, [r7, #12]
 c00162a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		key->rk[ 87] = ROL(key->rk[ 81] + delta[2][17], 11);
 c00162e:	68fb      	ldr	r3, [r7, #12]
 c001630:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 c001634:	4a6d      	ldr	r2, [pc, #436]	; (c0017ec <lea_set_key+0x155c>)
 c001636:	4413      	add	r3, r2
 c001638:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00163c:	68fb      	ldr	r3, [r7, #12]
 c00163e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		key->rk[ 93] = ROL(key->rk[ 87] + delta[3][18], 11);
 c001642:	68fb      	ldr	r3, [r7, #12]
 c001644:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 c001648:	4a69      	ldr	r2, [pc, #420]	; (c0017f0 <lea_set_key+0x1560>)
 c00164a:	4413      	add	r3, r2
 c00164c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001650:	68fb      	ldr	r3, [r7, #12]
 c001652:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		key->rk[ 99] = ROL(key->rk[ 93] + delta[4][19], 11);
 c001656:	68fb      	ldr	r3, [r7, #12]
 c001658:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 c00165c:	4a65      	ldr	r2, [pc, #404]	; (c0017f4 <lea_set_key+0x1564>)
 c00165e:	4413      	add	r3, r2
 c001660:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001664:	68fb      	ldr	r3, [r7, #12]
 c001666:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		key->rk[105] = ROL(key->rk[ 99] + delta[5][20], 11);
 c00166a:	68fb      	ldr	r3, [r7, #12]
 c00166c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 c001670:	4a61      	ldr	r2, [pc, #388]	; (c0017f8 <lea_set_key+0x1568>)
 c001672:	4413      	add	r3, r2
 c001674:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001678:	68fb      	ldr	r3, [r7, #12]
 c00167a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		key->rk[111] = ROL(key->rk[105] + delta[0][21], 11);
 c00167e:	68fb      	ldr	r3, [r7, #12]
 c001680:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 c001684:	4a5d      	ldr	r2, [pc, #372]	; (c0017fc <lea_set_key+0x156c>)
 c001686:	4413      	add	r3, r2
 c001688:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00168c:	68fb      	ldr	r3, [r7, #12]
 c00168e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		key->rk[117] = ROL(key->rk[111] + delta[1][22], 11);
 c001692:	68fb      	ldr	r3, [r7, #12]
 c001694:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 c001698:	4a59      	ldr	r2, [pc, #356]	; (c001800 <lea_set_key+0x1570>)
 c00169a:	4413      	add	r3, r2
 c00169c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0016a0:	68fb      	ldr	r3, [r7, #12]
 c0016a2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		key->rk[123] = ROL(key->rk[117] + delta[2][23], 11);
 c0016a6:	68fb      	ldr	r3, [r7, #12]
 c0016a8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 c0016ac:	4a55      	ldr	r2, [pc, #340]	; (c001804 <lea_set_key+0x1574>)
 c0016ae:	4413      	add	r3, r2
 c0016b0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0016b4:	68fb      	ldr	r3, [r7, #12]
 c0016b6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		key->rk[129] = ROL(key->rk[123] + delta[3][24], 11);
 c0016ba:	68fb      	ldr	r3, [r7, #12]
 c0016bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 c0016c0:	4a51      	ldr	r2, [pc, #324]	; (c001808 <lea_set_key+0x1578>)
 c0016c2:	4413      	add	r3, r2
 c0016c4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0016c8:	68fb      	ldr	r3, [r7, #12]
 c0016ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		key->rk[135] = ROL(key->rk[129] + delta[4][25], 11);
 c0016ce:	68fb      	ldr	r3, [r7, #12]
 c0016d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 c0016d4:	4a4d      	ldr	r2, [pc, #308]	; (c00180c <lea_set_key+0x157c>)
 c0016d6:	4413      	add	r3, r2
 c0016d8:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0016dc:	68fb      	ldr	r3, [r7, #12]
 c0016de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		key->rk[141] = ROL(key->rk[135] + delta[5][26], 11);
 c0016e2:	68fb      	ldr	r3, [r7, #12]
 c0016e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 c0016e8:	4a49      	ldr	r2, [pc, #292]	; (c001810 <lea_set_key+0x1580>)
 c0016ea:	4413      	add	r3, r2
 c0016ec:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0016f0:	68fb      	ldr	r3, [r7, #12]
 c0016f2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		key->rk[147] = ROL(key->rk[141] + delta[0][27], 11);
 c0016f6:	68fb      	ldr	r3, [r7, #12]
 c0016f8:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 c0016fc:	4a45      	ldr	r2, [pc, #276]	; (c001814 <lea_set_key+0x1584>)
 c0016fe:	4413      	add	r3, r2
 c001700:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001704:	68fb      	ldr	r3, [r7, #12]
 c001706:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		key->rk[153] = ROL(key->rk[147] + delta[1][28], 11);
 c00170a:	68fb      	ldr	r3, [r7, #12]
 c00170c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 c001710:	4a41      	ldr	r2, [pc, #260]	; (c001818 <lea_set_key+0x1588>)
 c001712:	4413      	add	r3, r2
 c001714:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001718:	68fb      	ldr	r3, [r7, #12]
 c00171a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		key->rk[159] = ROL(key->rk[153] + delta[2][29], 11);
 c00171e:	68fb      	ldr	r3, [r7, #12]
 c001720:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 c001724:	4a3d      	ldr	r2, [pc, #244]	; (c00181c <lea_set_key+0x158c>)
 c001726:	4413      	add	r3, r2
 c001728:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00172c:	68fb      	ldr	r3, [r7, #12]
 c00172e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		key->rk[165] = ROL(key->rk[159] + delta[3][30], 11);
 c001732:	68fb      	ldr	r3, [r7, #12]
 c001734:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 c001738:	4a39      	ldr	r2, [pc, #228]	; (c001820 <lea_set_key+0x1590>)
 c00173a:	4413      	add	r3, r2
 c00173c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001740:	68fb      	ldr	r3, [r7, #12]
 c001742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		key->rk[  4] = ROL(loadU32(_mk[4]) + delta[0][ 4], 13);
 c001746:	697b      	ldr	r3, [r7, #20]
 c001748:	3310      	adds	r3, #16
 c00174a:	681b      	ldr	r3, [r3, #0]
 c00174c:	4a35      	ldr	r2, [pc, #212]	; (c001824 <lea_set_key+0x1594>)
 c00174e:	4413      	add	r3, r2
 c001750:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001754:	68fb      	ldr	r3, [r7, #12]
 c001756:	611a      	str	r2, [r3, #16]
		key->rk[ 10] = ROL(key->rk[  4] + delta[1][ 5], 13);
 c001758:	68fb      	ldr	r3, [r7, #12]
 c00175a:	691b      	ldr	r3, [r3, #16]
 c00175c:	4a32      	ldr	r2, [pc, #200]	; (c001828 <lea_set_key+0x1598>)
 c00175e:	4413      	add	r3, r2
 c001760:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001764:	68fb      	ldr	r3, [r7, #12]
 c001766:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 16] = ROL(key->rk[ 10] + delta[2][ 6], 13);
 c001768:	68fb      	ldr	r3, [r7, #12]
 c00176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00176c:	4a2f      	ldr	r2, [pc, #188]	; (c00182c <lea_set_key+0x159c>)
 c00176e:	4413      	add	r3, r2
 c001770:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001774:	68fb      	ldr	r3, [r7, #12]
 c001776:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 22] = ROL(key->rk[ 16] + delta[3][ 7], 13);
 c001778:	68fb      	ldr	r3, [r7, #12]
 c00177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00177c:	4a2c      	ldr	r2, [pc, #176]	; (c001830 <lea_set_key+0x15a0>)
 c00177e:	4413      	add	r3, r2
 c001780:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001784:	68fb      	ldr	r3, [r7, #12]
 c001786:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 28] = ROL(key->rk[ 22] + delta[4][ 8], 13);
 c001788:	68fb      	ldr	r3, [r7, #12]
 c00178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00178c:	4a29      	ldr	r2, [pc, #164]	; (c001834 <lea_set_key+0x15a4>)
 c00178e:	4413      	add	r3, r2
 c001790:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001794:	68fb      	ldr	r3, [r7, #12]
 c001796:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 34] = ROL(key->rk[ 28] + delta[5][ 9], 13);
 c001798:	68fb      	ldr	r3, [r7, #12]
 c00179a:	e04d      	b.n	c001838 <lea_set_key+0x15a8>
 c00179c:	9e715ea4 	.word	0x9e715ea4
 c0017a0:	158f0bb4 	.word	0x158f0bb4
 c0017a4:	6f0fbfa7 	.word	0x6f0fbfa7
 c0017a8:	12231358 	.word	0x12231358
 c0017ac:	a79e27c8 	.word	0xa79e27c8
 c0017b0:	8f1be61d 	.word	0x8f1be61d
 c0017b4:	1f7f4ede 	.word	0x1f7f4ede
 c0017b8:	4626b024 	.word	0x4626b024
 c0017bc:	3c4f914f 	.word	0x3c4f914f
 c0017c0:	37cc3b1e 	.word	0x37cc3b1e
 c0017c4:	af524f38 	.word	0xaf524f38
 c0017c8:	85da0ac7 	.word	0x85da0ac7
 c0017cc:	dfd3b787 	.word	0xdfd3b787
 c0017d0:	89ac0911 	.word	0x89ac0911
 c0017d4:	13e453cf 	.word	0x13e453cf
 c0017d8:	f30ec78d 	.word	0xf30ec78d
 c0017dc:	d493ce2b 	.word	0xd493ce2b
 c0017e0:	7682b1e1 	.word	0x7682b1e1
 c0017e4:	f4ede1f7 	.word	0xf4ede1f7
 c0017e8:	6b024462 	.word	0x6b024462
 c0017ec:	f914f3c4 	.word	0xf914f3c4
 c0017f0:	c3b1e37c 	.word	0xc3b1e37c
 c0017f4:	24f38af5 	.word	0x24f38af5
 c0017f8:	a0ac785d 	.word	0xa0ac785d
 c0017fc:	3b787dfd 	.word	0x3b787dfd
 c001800:	c091189a 	.word	0xc091189a
 c001804:	453cf13e 	.word	0x453cf13e
 c001808:	ec78df30 	.word	0xec78df30
 c00180c:	3ce2bd49 	.word	0x3ce2bd49
 c001810:	2b1e1768 	.word	0x2b1e1768
 c001814:	de1f7f4e 	.word	0xde1f7f4e
 c001818:	244626b0 	.word	0x244626b0
 c00181c:	4f3c4f91 	.word	0x4f3c4f91
 c001820:	1e37cc3b 	.word	0x1e37cc3b
 c001824:	3efe9dbc 	.word	0x3efe9dbc
 c001828:	8c4d6048 	.word	0x8c4d6048
 c00182c:	789f229e 	.word	0x789f229e
 c001830:	6f98763c 	.word	0x6f98763c
 c001834:	5ea49e71 	.word	0x5ea49e71
 c001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00183a:	4abe      	ldr	r2, [pc, #760]	; (c001b34 <lea_set_key+0x18a4>)
 c00183c:	4413      	add	r3, r2
 c00183e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001842:	68fb      	ldr	r3, [r7, #12]
 c001844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 40] = ROL(key->rk[ 34] + delta[0][10], 13);
 c001848:	68fb      	ldr	r3, [r7, #12]
 c00184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00184e:	4aba      	ldr	r2, [pc, #744]	; (c001b38 <lea_set_key+0x18a8>)
 c001850:	4413      	add	r3, r2
 c001852:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001856:	68fb      	ldr	r3, [r7, #12]
 c001858:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 46] = ROL(key->rk[ 40] + delta[1][11], 13);
 c00185c:	68fb      	ldr	r3, [r7, #12]
 c00185e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c001862:	4ab6      	ldr	r2, [pc, #728]	; (c001b3c <lea_set_key+0x18ac>)
 c001864:	4413      	add	r3, r2
 c001866:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00186a:	68fb      	ldr	r3, [r7, #12]
 c00186c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 52] = ROL(key->rk[ 46] + delta[2][12], 13);
 c001870:	68fb      	ldr	r3, [r7, #12]
 c001872:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c001876:	4ab2      	ldr	r2, [pc, #712]	; (c001b40 <lea_set_key+0x18b0>)
 c001878:	4413      	add	r3, r2
 c00187a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00187e:	68fb      	ldr	r3, [r7, #12]
 c001880:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 58] = ROL(key->rk[ 52] + delta[3][13], 13);
 c001884:	68fb      	ldr	r3, [r7, #12]
 c001886:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c00188a:	4aae      	ldr	r2, [pc, #696]	; (c001b44 <lea_set_key+0x18b4>)
 c00188c:	4413      	add	r3, r2
 c00188e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001892:	68fb      	ldr	r3, [r7, #12]
 c001894:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 64] = ROL(key->rk[ 58] + delta[4][14], 13);
 c001898:	68fb      	ldr	r3, [r7, #12]
 c00189a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c00189e:	4aaa      	ldr	r2, [pc, #680]	; (c001b48 <lea_set_key+0x18b8>)
 c0018a0:	4413      	add	r3, r2
 c0018a2:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0018a6:	68fb      	ldr	r3, [r7, #12]
 c0018a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 70] = ROL(key->rk[ 64] + delta[5][15], 13);
 c0018ac:	68fb      	ldr	r3, [r7, #12]
 c0018ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c0018b2:	4aa6      	ldr	r2, [pc, #664]	; (c001b4c <lea_set_key+0x18bc>)
 c0018b4:	4413      	add	r3, r2
 c0018b6:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0018ba:	68fb      	ldr	r3, [r7, #12]
 c0018bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 76] = ROL(key->rk[ 70] + delta[0][16], 13);
 c0018c0:	68fb      	ldr	r3, [r7, #12]
 c0018c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 c0018c6:	4aa2      	ldr	r2, [pc, #648]	; (c001b50 <lea_set_key+0x18c0>)
 c0018c8:	4413      	add	r3, r2
 c0018ca:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0018ce:	68fb      	ldr	r3, [r7, #12]
 c0018d0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 82] = ROL(key->rk[ 76] + delta[1][17], 13);
 c0018d4:	68fb      	ldr	r3, [r7, #12]
 c0018d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 c0018da:	4a9e      	ldr	r2, [pc, #632]	; (c001b54 <lea_set_key+0x18c4>)
 c0018dc:	4413      	add	r3, r2
 c0018de:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0018e2:	68fb      	ldr	r3, [r7, #12]
 c0018e4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 88] = ROL(key->rk[ 82] + delta[2][18], 13);
 c0018e8:	68fb      	ldr	r3, [r7, #12]
 c0018ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 c0018ee:	4a9a      	ldr	r2, [pc, #616]	; (c001b58 <lea_set_key+0x18c8>)
 c0018f0:	4413      	add	r3, r2
 c0018f2:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0018f6:	68fb      	ldr	r3, [r7, #12]
 c0018f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 94] = ROL(key->rk[ 88] + delta[3][19], 13);
 c0018fc:	68fb      	ldr	r3, [r7, #12]
 c0018fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 c001902:	4a96      	ldr	r2, [pc, #600]	; (c001b5c <lea_set_key+0x18cc>)
 c001904:	4413      	add	r3, r2
 c001906:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00190a:	68fb      	ldr	r3, [r7, #12]
 c00190c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[100] = ROL(key->rk[ 94] + delta[4][20], 13);
 c001910:	68fb      	ldr	r3, [r7, #12]
 c001912:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 c001916:	4a92      	ldr	r2, [pc, #584]	; (c001b60 <lea_set_key+0x18d0>)
 c001918:	4413      	add	r3, r2
 c00191a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00191e:	68fb      	ldr	r3, [r7, #12]
 c001920:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[106] = ROL(key->rk[100] + delta[5][21], 13);
 c001924:	68fb      	ldr	r3, [r7, #12]
 c001926:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 c00192a:	4a8e      	ldr	r2, [pc, #568]	; (c001b64 <lea_set_key+0x18d4>)
 c00192c:	4413      	add	r3, r2
 c00192e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001932:	68fb      	ldr	r3, [r7, #12]
 c001934:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[112] = ROL(key->rk[106] + delta[0][22], 13);
 c001938:	68fb      	ldr	r3, [r7, #12]
 c00193a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 c00193e:	4a8a      	ldr	r2, [pc, #552]	; (c001b68 <lea_set_key+0x18d8>)
 c001940:	4413      	add	r3, r2
 c001942:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001946:	68fb      	ldr	r3, [r7, #12]
 c001948:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[118] = ROL(key->rk[112] + delta[1][23], 13);
 c00194c:	68fb      	ldr	r3, [r7, #12]
 c00194e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 c001952:	4a86      	ldr	r2, [pc, #536]	; (c001b6c <lea_set_key+0x18dc>)
 c001954:	4413      	add	r3, r2
 c001956:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00195a:	68fb      	ldr	r3, [r7, #12]
 c00195c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[124] = ROL(key->rk[118] + delta[2][24], 13);
 c001960:	68fb      	ldr	r3, [r7, #12]
 c001962:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 c001966:	4a82      	ldr	r2, [pc, #520]	; (c001b70 <lea_set_key+0x18e0>)
 c001968:	4413      	add	r3, r2
 c00196a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00196e:	68fb      	ldr	r3, [r7, #12]
 c001970:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[130] = ROL(key->rk[124] + delta[3][25], 13);
 c001974:	68fb      	ldr	r3, [r7, #12]
 c001976:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 c00197a:	4a7e      	ldr	r2, [pc, #504]	; (c001b74 <lea_set_key+0x18e4>)
 c00197c:	4413      	add	r3, r2
 c00197e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001982:	68fb      	ldr	r3, [r7, #12]
 c001984:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[136] = ROL(key->rk[130] + delta[4][26], 13);
 c001988:	68fb      	ldr	r3, [r7, #12]
 c00198a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 c00198e:	4a7a      	ldr	r2, [pc, #488]	; (c001b78 <lea_set_key+0x18e8>)
 c001990:	4413      	add	r3, r2
 c001992:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001996:	68fb      	ldr	r3, [r7, #12]
 c001998:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[142] = ROL(key->rk[136] + delta[5][27], 13);
 c00199c:	68fb      	ldr	r3, [r7, #12]
 c00199e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c0019a2:	4a76      	ldr	r2, [pc, #472]	; (c001b7c <lea_set_key+0x18ec>)
 c0019a4:	4413      	add	r3, r2
 c0019a6:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0019aa:	68fb      	ldr	r3, [r7, #12]
 c0019ac:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		key->rk[148] = ROL(key->rk[142] + delta[0][28], 13);
 c0019b0:	68fb      	ldr	r3, [r7, #12]
 c0019b2:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 c0019b6:	4a72      	ldr	r2, [pc, #456]	; (c001b80 <lea_set_key+0x18f0>)
 c0019b8:	4413      	add	r3, r2
 c0019ba:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0019be:	68fb      	ldr	r3, [r7, #12]
 c0019c0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		key->rk[154] = ROL(key->rk[148] + delta[1][29], 13);
 c0019c4:	68fb      	ldr	r3, [r7, #12]
 c0019c6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 c0019ca:	4a6e      	ldr	r2, [pc, #440]	; (c001b84 <lea_set_key+0x18f4>)
 c0019cc:	4413      	add	r3, r2
 c0019ce:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0019d2:	68fb      	ldr	r3, [r7, #12]
 c0019d4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		key->rk[160] = ROL(key->rk[154] + delta[2][30], 13);
 c0019d8:	68fb      	ldr	r3, [r7, #12]
 c0019da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 c0019de:	4a6a      	ldr	r2, [pc, #424]	; (c001b88 <lea_set_key+0x18f8>)
 c0019e0:	4413      	add	r3, r2
 c0019e2:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0019e6:	68fb      	ldr	r3, [r7, #12]
 c0019e8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		key->rk[166] = ROL(key->rk[160] + delta[3][31], 13);
 c0019ec:	68fb      	ldr	r3, [r7, #12]
 c0019ee:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 c0019f2:	4a66      	ldr	r2, [pc, #408]	; (c001b8c <lea_set_key+0x18fc>)
 c0019f4:	4413      	add	r3, r2
 c0019f6:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0019fa:	68fb      	ldr	r3, [r7, #12]
 c0019fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		key->rk[  5] = ROL(loadU32(_mk[5]) + delta[0][ 5], 17);
 c001a00:	697b      	ldr	r3, [r7, #20]
 c001a02:	3314      	adds	r3, #20
 c001a04:	681b      	ldr	r3, [r3, #0]
 c001a06:	4a62      	ldr	r2, [pc, #392]	; (c001b90 <lea_set_key+0x1900>)
 c001a08:	4413      	add	r3, r2
 c001a0a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a0e:	68fb      	ldr	r3, [r7, #12]
 c001a10:	615a      	str	r2, [r3, #20]
		key->rk[ 11] = ROL(key->rk[  5] + delta[1][ 6], 17);
 c001a12:	68fb      	ldr	r3, [r7, #12]
 c001a14:	695b      	ldr	r3, [r3, #20]
 c001a16:	4a5f      	ldr	r2, [pc, #380]	; (c001b94 <lea_set_key+0x1904>)
 c001a18:	4413      	add	r3, r2
 c001a1a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a1e:	68fb      	ldr	r3, [r7, #12]
 c001a20:	62da      	str	r2, [r3, #44]	; 0x2c
		key->rk[ 17] = ROL(key->rk[ 11] + delta[2][ 7], 17);
 c001a22:	68fb      	ldr	r3, [r7, #12]
 c001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001a26:	4a5c      	ldr	r2, [pc, #368]	; (c001b98 <lea_set_key+0x1908>)
 c001a28:	4413      	add	r3, r2
 c001a2a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a2e:	68fb      	ldr	r3, [r7, #12]
 c001a30:	645a      	str	r2, [r3, #68]	; 0x44
		key->rk[ 23] = ROL(key->rk[ 17] + delta[3][ 8], 17);
 c001a32:	68fb      	ldr	r3, [r7, #12]
 c001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c001a36:	4a59      	ldr	r2, [pc, #356]	; (c001b9c <lea_set_key+0x190c>)
 c001a38:	4413      	add	r3, r2
 c001a3a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a3e:	68fb      	ldr	r3, [r7, #12]
 c001a40:	65da      	str	r2, [r3, #92]	; 0x5c
		key->rk[ 29] = ROL(key->rk[ 23] + delta[4][ 9], 17);
 c001a42:	68fb      	ldr	r3, [r7, #12]
 c001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001a46:	4a56      	ldr	r2, [pc, #344]	; (c001ba0 <lea_set_key+0x1910>)
 c001a48:	4413      	add	r3, r2
 c001a4a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a4e:	68fb      	ldr	r3, [r7, #12]
 c001a50:	675a      	str	r2, [r3, #116]	; 0x74
		key->rk[ 35] = ROL(key->rk[ 29] + delta[5][10], 17);
 c001a52:	68fb      	ldr	r3, [r7, #12]
 c001a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c001a56:	4a53      	ldr	r2, [pc, #332]	; (c001ba4 <lea_set_key+0x1914>)
 c001a58:	4413      	add	r3, r2
 c001a5a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a5e:	68fb      	ldr	r3, [r7, #12]
 c001a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		key->rk[ 41] = ROL(key->rk[ 35] + delta[0][11], 17);
 c001a64:	68fb      	ldr	r3, [r7, #12]
 c001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001a6a:	4a4f      	ldr	r2, [pc, #316]	; (c001ba8 <lea_set_key+0x1918>)
 c001a6c:	4413      	add	r3, r2
 c001a6e:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a72:	68fb      	ldr	r3, [r7, #12]
 c001a74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		key->rk[ 47] = ROL(key->rk[ 41] + delta[1][12], 17);
 c001a78:	68fb      	ldr	r3, [r7, #12]
 c001a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c001a7e:	4a4b      	ldr	r2, [pc, #300]	; (c001bac <lea_set_key+0x191c>)
 c001a80:	4413      	add	r3, r2
 c001a82:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a86:	68fb      	ldr	r3, [r7, #12]
 c001a88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		key->rk[ 53] = ROL(key->rk[ 47] + delta[2][13], 17);
 c001a8c:	68fb      	ldr	r3, [r7, #12]
 c001a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c001a92:	4a47      	ldr	r2, [pc, #284]	; (c001bb0 <lea_set_key+0x1920>)
 c001a94:	4413      	add	r3, r2
 c001a96:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001a9a:	68fb      	ldr	r3, [r7, #12]
 c001a9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		key->rk[ 59] = ROL(key->rk[ 53] + delta[3][14], 17);
 c001aa0:	68fb      	ldr	r3, [r7, #12]
 c001aa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c001aa6:	4a43      	ldr	r2, [pc, #268]	; (c001bb4 <lea_set_key+0x1924>)
 c001aa8:	4413      	add	r3, r2
 c001aaa:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001aae:	68fb      	ldr	r3, [r7, #12]
 c001ab0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		key->rk[ 65] = ROL(key->rk[ 59] + delta[4][15], 17);
 c001ab4:	68fb      	ldr	r3, [r7, #12]
 c001ab6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c001aba:	4a3f      	ldr	r2, [pc, #252]	; (c001bb8 <lea_set_key+0x1928>)
 c001abc:	4413      	add	r3, r2
 c001abe:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001ac2:	68fb      	ldr	r3, [r7, #12]
 c001ac4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		key->rk[ 71] = ROL(key->rk[ 65] + delta[5][16], 17);
 c001ac8:	68fb      	ldr	r3, [r7, #12]
 c001aca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 c001ace:	4a3b      	ldr	r2, [pc, #236]	; (c001bbc <lea_set_key+0x192c>)
 c001ad0:	4413      	add	r3, r2
 c001ad2:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001ad6:	68fb      	ldr	r3, [r7, #12]
 c001ad8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		key->rk[ 77] = ROL(key->rk[ 71] + delta[0][17], 17);
 c001adc:	68fb      	ldr	r3, [r7, #12]
 c001ade:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 c001ae2:	4a37      	ldr	r2, [pc, #220]	; (c001bc0 <lea_set_key+0x1930>)
 c001ae4:	4413      	add	r3, r2
 c001ae6:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001aea:	68fb      	ldr	r3, [r7, #12]
 c001aec:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		key->rk[ 83] = ROL(key->rk[ 77] + delta[1][18], 17);
 c001af0:	68fb      	ldr	r3, [r7, #12]
 c001af2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 c001af6:	4a33      	ldr	r2, [pc, #204]	; (c001bc4 <lea_set_key+0x1934>)
 c001af8:	4413      	add	r3, r2
 c001afa:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001afe:	68fb      	ldr	r3, [r7, #12]
 c001b00:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		key->rk[ 89] = ROL(key->rk[ 83] + delta[2][19], 17);
 c001b04:	68fb      	ldr	r3, [r7, #12]
 c001b06:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 c001b0a:	4a2f      	ldr	r2, [pc, #188]	; (c001bc8 <lea_set_key+0x1938>)
 c001b0c:	4413      	add	r3, r2
 c001b0e:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001b12:	68fb      	ldr	r3, [r7, #12]
 c001b14:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		key->rk[ 95] = ROL(key->rk[ 89] + delta[3][20], 17);
 c001b18:	68fb      	ldr	r3, [r7, #12]
 c001b1a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 c001b1e:	4a2b      	ldr	r2, [pc, #172]	; (c001bcc <lea_set_key+0x193c>)
 c001b20:	4413      	add	r3, r2
 c001b22:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001b26:	68fb      	ldr	r3, [r7, #12]
 c001b28:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		key->rk[101] = ROL(key->rk[ 95] + delta[4][21], 17);
 c001b2c:	68fb      	ldr	r3, [r7, #12]
 c001b2e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 c001b32:	e04d      	b.n	c001bd0 <lea_set_key+0x1940>
 c001b34:	0bb4158f 	.word	0x0bb4158f
 c001b38:	bfa76f0f 	.word	0xbfa76f0f
 c001b3c:	13581223 	.word	0x13581223
 c001b40:	27c8a79e 	.word	0x27c8a79e
 c001b44:	e61d8f1b 	.word	0xe61d8f1b
 c001b48:	a9279c57 	.word	0xa9279c57
 c001b4c:	ed0563c2 	.word	0xed0563c2
 c001b50:	e9dbc3ef 	.word	0xe9dbc3ef
 c001b54:	d60488c4 	.word	0xd60488c4
 c001b58:	f229e789 	.word	0xf229e789
 c001b5c:	8763c6f9 	.word	0x8763c6f9
 c001b60:	49e715ea 	.word	0x49e715ea
 c001b64:	4158f0bb 	.word	0x4158f0bb
 c001b68:	76f0fbfa 	.word	0x76f0fbfa
 c001b6c:	81223135 	.word	0x81223135
 c001b70:	8a79e27c 	.word	0x8a79e27c
 c001b74:	d8f1be61 	.word	0xd8f1be61
 c001b78:	79c57a92 	.word	0x79c57a92
 c001b7c:	563c2ed0 	.word	0x563c2ed0
 c001b80:	bc3efe9d 	.word	0xbc3efe9d
 c001b84:	488c4d60 	.word	0x488c4d60
 c001b88:	9e789f22 	.word	0x9e789f22
 c001b8c:	3c6f9876 	.word	0x3c6f9876
 c001b90:	7dfd3b78 	.word	0x7dfd3b78
 c001b94:	189ac091 	.word	0x189ac091
 c001b98:	f13e453c 	.word	0xf13e453c
 c001b9c:	df30ec78 	.word	0xdf30ec78
 c001ba0:	bd493ce2 	.word	0xbd493ce2
 c001ba4:	17682b1e 	.word	0x17682b1e
 c001ba8:	7f4ede1f 	.word	0x7f4ede1f
 c001bac:	26b02446 	.word	0x26b02446
 c001bb0:	4f914f3c 	.word	0x4f914f3c
 c001bb4:	cc3b1e37 	.word	0xcc3b1e37
 c001bb8:	524f38af 	.word	0x524f38af
 c001bbc:	da0ac785 	.word	0xda0ac785
 c001bc0:	d3b787df 	.word	0xd3b787df
 c001bc4:	ac091189 	.word	0xac091189
 c001bc8:	e453cf13 	.word	0xe453cf13
 c001bcc:	0ec78df3 	.word	0x0ec78df3
 c001bd0:	4a3b      	ldr	r2, [pc, #236]	; (c001cc0 <lea_set_key+0x1a30>)
 c001bd2:	4413      	add	r3, r2
 c001bd4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001bd8:	68fb      	ldr	r3, [r7, #12]
 c001bda:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		key->rk[107] = ROL(key->rk[101] + delta[5][22], 17);
 c001bde:	68fb      	ldr	r3, [r7, #12]
 c001be0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 c001be4:	4a37      	ldr	r2, [pc, #220]	; (c001cc4 <lea_set_key+0x1a34>)
 c001be6:	4413      	add	r3, r2
 c001be8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001bec:	68fb      	ldr	r3, [r7, #12]
 c001bee:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		key->rk[113] = ROL(key->rk[107] + delta[0][23], 17);
 c001bf2:	68fb      	ldr	r3, [r7, #12]
 c001bf4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 c001bf8:	4a33      	ldr	r2, [pc, #204]	; (c001cc8 <lea_set_key+0x1a38>)
 c001bfa:	4413      	add	r3, r2
 c001bfc:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c00:	68fb      	ldr	r3, [r7, #12]
 c001c02:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		key->rk[119] = ROL(key->rk[113] + delta[1][24], 17);
 c001c06:	68fb      	ldr	r3, [r7, #12]
 c001c08:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 c001c0c:	4a2f      	ldr	r2, [pc, #188]	; (c001ccc <lea_set_key+0x1a3c>)
 c001c0e:	4413      	add	r3, r2
 c001c10:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c14:	68fb      	ldr	r3, [r7, #12]
 c001c16:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		key->rk[125] = ROL(key->rk[119] + delta[2][25], 17);
 c001c1a:	68fb      	ldr	r3, [r7, #12]
 c001c1c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 c001c20:	4a2b      	ldr	r2, [pc, #172]	; (c001cd0 <lea_set_key+0x1a40>)
 c001c22:	4413      	add	r3, r2
 c001c24:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c28:	68fb      	ldr	r3, [r7, #12]
 c001c2a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		key->rk[131] = ROL(key->rk[125] + delta[3][26], 17);
 c001c2e:	68fb      	ldr	r3, [r7, #12]
 c001c30:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 c001c34:	4a27      	ldr	r2, [pc, #156]	; (c001cd4 <lea_set_key+0x1a44>)
 c001c36:	4413      	add	r3, r2
 c001c38:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c3c:	68fb      	ldr	r3, [r7, #12]
 c001c3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		key->rk[137] = ROL(key->rk[131] + delta[4][27], 17);
 c001c42:	68fb      	ldr	r3, [r7, #12]
 c001c44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 c001c48:	4a23      	ldr	r2, [pc, #140]	; (c001cd8 <lea_set_key+0x1a48>)
 c001c4a:	4413      	add	r3, r2
 c001c4c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c50:	68fb      	ldr	r3, [r7, #12]
 c001c52:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		key->rk[143] = ROL(key->rk[137] + delta[5][28], 17);
 c001c56:	68fb      	ldr	r3, [r7, #12]
 c001c58:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 c001c5c:	4a1f      	ldr	r2, [pc, #124]	; (c001cdc <lea_set_key+0x1a4c>)
 c001c5e:	4413      	add	r3, r2
 c001c60:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c64:	68fb      	ldr	r3, [r7, #12]
 c001c66:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		key->rk[149] = ROL(key->rk[143] + delta[0][29], 17);
 c001c6a:	68fb      	ldr	r3, [r7, #12]
 c001c6c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 c001c70:	4a1b      	ldr	r2, [pc, #108]	; (c001ce0 <lea_set_key+0x1a50>)
 c001c72:	4413      	add	r3, r2
 c001c74:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c78:	68fb      	ldr	r3, [r7, #12]
 c001c7a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		key->rk[155] = ROL(key->rk[149] + delta[1][30], 17);
 c001c7e:	68fb      	ldr	r3, [r7, #12]
 c001c80:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 c001c84:	4a17      	ldr	r2, [pc, #92]	; (c001ce4 <lea_set_key+0x1a54>)
 c001c86:	4413      	add	r3, r2
 c001c88:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001c8c:	68fb      	ldr	r3, [r7, #12]
 c001c8e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
		key->rk[161] = ROL(key->rk[155] + delta[2][31], 17);
 c001c92:	68fb      	ldr	r3, [r7, #12]
 c001c94:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 c001c98:	4a13      	ldr	r2, [pc, #76]	; (c001ce8 <lea_set_key+0x1a58>)
 c001c9a:	4413      	add	r3, r2
 c001c9c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001ca0:	68fb      	ldr	r3, [r7, #12]
 c001ca2:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
		key->rk[167] = ROL(key->rk[161] + delta[3][ 0], 17);
 c001ca6:	68fb      	ldr	r3, [r7, #12]
 c001ca8:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 c001cac:	4a0f      	ldr	r2, [pc, #60]	; (c001cec <lea_set_key+0x1a5c>)
 c001cae:	4413      	add	r3, r2
 c001cb0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001cb4:	68fb      	ldr	r3, [r7, #12]
 c001cb6:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		break;
 c001cba:	f001 b899 	b.w	c002df0 <lea_set_key+0x2b60>
 c001cbe:	bf00      	nop
 c001cc0:	93ce2bd4 	.word	0x93ce2bd4
 c001cc4:	82b1e176 	.word	0x82b1e176
 c001cc8:	ede1f7f4 	.word	0xede1f7f4
 c001ccc:	0244626b 	.word	0x0244626b
 c001cd0:	14f3c4f9 	.word	0x14f3c4f9
 c001cd4:	b1e37cc3 	.word	0xb1e37cc3
 c001cd8:	f38af524 	.word	0xf38af524
 c001cdc:	ac785da0 	.word	0xac785da0
 c001ce0:	787dfd3b 	.word	0x787dfd3b
 c001ce4:	91189ac0 	.word	0x91189ac0
 c001ce8:	3cf13e45 	.word	0x3cf13e45
 c001cec:	78df30ec 	.word	0x78df30ec
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0],  1);
 c001cf0:	697b      	ldr	r3, [r7, #20]
 c001cf2:	681b      	ldr	r3, [r3, #0]
 c001cf4:	4abb      	ldr	r2, [pc, #748]	; (c001fe4 <lea_set_key+0x1d54>)
 c001cf6:	4413      	add	r3, r2
 c001cf8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001cfc:	68fb      	ldr	r3, [r7, #12]
 c001cfe:	601a      	str	r2, [r3, #0]
		key->rk[  8] = ROL(key->rk[  0] + delta[1][ 3],  6);
 c001d00:	68fb      	ldr	r3, [r7, #12]
 c001d02:	681b      	ldr	r3, [r3, #0]
 c001d04:	4ab8      	ldr	r2, [pc, #736]	; (c001fe8 <lea_set_key+0x1d58>)
 c001d06:	4413      	add	r3, r2
 c001d08:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001d0c:	68fb      	ldr	r3, [r7, #12]
 c001d0e:	621a      	str	r2, [r3, #32]
		key->rk[ 16] = ROL(key->rk[  8] + delta[2][ 6], 13);
 c001d10:	68fb      	ldr	r3, [r7, #12]
 c001d12:	6a1b      	ldr	r3, [r3, #32]
 c001d14:	4ab5      	ldr	r2, [pc, #724]	; (c001fec <lea_set_key+0x1d5c>)
 c001d16:	4413      	add	r3, r2
 c001d18:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001d1c:	68fb      	ldr	r3, [r7, #12]
 c001d1e:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 24] = ROL(key->rk[ 16] + delta[4][ 4],  1);
 c001d20:	68fb      	ldr	r3, [r7, #12]
 c001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c001d24:	4ab2      	ldr	r2, [pc, #712]	; (c001ff0 <lea_set_key+0x1d60>)
 c001d26:	4413      	add	r3, r2
 c001d28:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001d2c:	68fb      	ldr	r3, [r7, #12]
 c001d2e:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 32] = ROL(key->rk[ 24] + delta[5][ 7],  6);
 c001d30:	68fb      	ldr	r3, [r7, #12]
 c001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001d34:	4aaf      	ldr	r2, [pc, #700]	; (c001ff4 <lea_set_key+0x1d64>)
 c001d36:	4413      	add	r3, r2
 c001d38:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001d3c:	68fb      	ldr	r3, [r7, #12]
 c001d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 40] = ROL(key->rk[ 32] + delta[6][10], 13);
 c001d42:	68fb      	ldr	r3, [r7, #12]
 c001d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001d48:	4aab      	ldr	r2, [pc, #684]	; (c001ff8 <lea_set_key+0x1d68>)
 c001d4a:	4413      	add	r3, r2
 c001d4c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001d50:	68fb      	ldr	r3, [r7, #12]
 c001d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 48] = ROL(key->rk[ 40] + delta[0][ 8],  1);
 c001d56:	68fb      	ldr	r3, [r7, #12]
 c001d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c001d5c:	4aa7      	ldr	r2, [pc, #668]	; (c001ffc <lea_set_key+0x1d6c>)
 c001d5e:	4413      	add	r3, r2
 c001d60:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001d64:	68fb      	ldr	r3, [r7, #12]
 c001d66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 56] = ROL(key->rk[ 48] + delta[1][11],  6);
 c001d6a:	68fb      	ldr	r3, [r7, #12]
 c001d6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c001d70:	4aa3      	ldr	r2, [pc, #652]	; (c002000 <lea_set_key+0x1d70>)
 c001d72:	4413      	add	r3, r2
 c001d74:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001d78:	68fb      	ldr	r3, [r7, #12]
 c001d7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 64] = ROL(key->rk[ 56] + delta[2][14], 13);
 c001d7e:	68fb      	ldr	r3, [r7, #12]
 c001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c001d84:	4a9f      	ldr	r2, [pc, #636]	; (c002004 <lea_set_key+0x1d74>)
 c001d86:	4413      	add	r3, r2
 c001d88:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001d8c:	68fb      	ldr	r3, [r7, #12]
 c001d8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 72] = ROL(key->rk[ 64] + delta[4][12],  1);
 c001d92:	68fb      	ldr	r3, [r7, #12]
 c001d94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c001d98:	4a9b      	ldr	r2, [pc, #620]	; (c002008 <lea_set_key+0x1d78>)
 c001d9a:	4413      	add	r3, r2
 c001d9c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001da0:	68fb      	ldr	r3, [r7, #12]
 c001da2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 80] = ROL(key->rk[ 72] + delta[5][15],  6);
 c001da6:	68fb      	ldr	r3, [r7, #12]
 c001da8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 c001dac:	4a97      	ldr	r2, [pc, #604]	; (c00200c <lea_set_key+0x1d7c>)
 c001dae:	4413      	add	r3, r2
 c001db0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001db4:	68fb      	ldr	r3, [r7, #12]
 c001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 88] = ROL(key->rk[ 80] + delta[6][18], 13);
 c001dba:	68fb      	ldr	r3, [r7, #12]
 c001dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 c001dc0:	4a93      	ldr	r2, [pc, #588]	; (c002010 <lea_set_key+0x1d80>)
 c001dc2:	4413      	add	r3, r2
 c001dc4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001dc8:	68fb      	ldr	r3, [r7, #12]
 c001dca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 96] = ROL(key->rk[ 88] + delta[0][16],  1);
 c001dce:	68fb      	ldr	r3, [r7, #12]
 c001dd0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 c001dd4:	4a8f      	ldr	r2, [pc, #572]	; (c002014 <lea_set_key+0x1d84>)
 c001dd6:	4413      	add	r3, r2
 c001dd8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001ddc:	68fb      	ldr	r3, [r7, #12]
 c001dde:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[104] = ROL(key->rk[ 96] + delta[1][19],  6);
 c001de2:	68fb      	ldr	r3, [r7, #12]
 c001de4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 c001de8:	4a8b      	ldr	r2, [pc, #556]	; (c002018 <lea_set_key+0x1d88>)
 c001dea:	4413      	add	r3, r2
 c001dec:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001df0:	68fb      	ldr	r3, [r7, #12]
 c001df2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[112] = ROL(key->rk[104] + delta[2][22], 13);
 c001df6:	68fb      	ldr	r3, [r7, #12]
 c001df8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 c001dfc:	4a87      	ldr	r2, [pc, #540]	; (c00201c <lea_set_key+0x1d8c>)
 c001dfe:	4413      	add	r3, r2
 c001e00:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001e04:	68fb      	ldr	r3, [r7, #12]
 c001e06:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[120] = ROL(key->rk[112] + delta[4][20],  1);
 c001e0a:	68fb      	ldr	r3, [r7, #12]
 c001e0c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 c001e10:	4a83      	ldr	r2, [pc, #524]	; (c002020 <lea_set_key+0x1d90>)
 c001e12:	4413      	add	r3, r2
 c001e14:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001e18:	68fb      	ldr	r3, [r7, #12]
 c001e1a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[128] = ROL(key->rk[120] + delta[5][23],  6);
 c001e1e:	68fb      	ldr	r3, [r7, #12]
 c001e20:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 c001e24:	4a7f      	ldr	r2, [pc, #508]	; (c002024 <lea_set_key+0x1d94>)
 c001e26:	4413      	add	r3, r2
 c001e28:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001e2c:	68fb      	ldr	r3, [r7, #12]
 c001e2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[136] = ROL(key->rk[128] + delta[6][26], 13);
 c001e32:	68fb      	ldr	r3, [r7, #12]
 c001e34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 c001e38:	4a7b      	ldr	r2, [pc, #492]	; (c002028 <lea_set_key+0x1d98>)
 c001e3a:	4413      	add	r3, r2
 c001e3c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001e40:	68fb      	ldr	r3, [r7, #12]
 c001e42:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[144] = ROL(key->rk[136] + delta[0][24],  1);
 c001e46:	68fb      	ldr	r3, [r7, #12]
 c001e48:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c001e4c:	4a77      	ldr	r2, [pc, #476]	; (c00202c <lea_set_key+0x1d9c>)
 c001e4e:	4413      	add	r3, r2
 c001e50:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001e54:	68fb      	ldr	r3, [r7, #12]
 c001e56:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		key->rk[152] = ROL(key->rk[144] + delta[1][27],  6);
 c001e5a:	68fb      	ldr	r3, [r7, #12]
 c001e5c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 c001e60:	4a73      	ldr	r2, [pc, #460]	; (c002030 <lea_set_key+0x1da0>)
 c001e62:	4413      	add	r3, r2
 c001e64:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001e68:	68fb      	ldr	r3, [r7, #12]
 c001e6a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		key->rk[160] = ROL(key->rk[152] + delta[2][30], 13);
 c001e6e:	68fb      	ldr	r3, [r7, #12]
 c001e70:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 c001e74:	4a6f      	ldr	r2, [pc, #444]	; (c002034 <lea_set_key+0x1da4>)
 c001e76:	4413      	add	r3, r2
 c001e78:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001e7c:	68fb      	ldr	r3, [r7, #12]
 c001e7e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		key->rk[168] = ROL(key->rk[160] + delta[4][28],  1);
 c001e82:	68fb      	ldr	r3, [r7, #12]
 c001e84:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 c001e88:	4a6b      	ldr	r2, [pc, #428]	; (c002038 <lea_set_key+0x1da8>)
 c001e8a:	4413      	add	r3, r2
 c001e8c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c001e90:	68fb      	ldr	r3, [r7, #12]
 c001e92:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		key->rk[176] = ROL(key->rk[168] + delta[5][31],  6);
 c001e96:	68fb      	ldr	r3, [r7, #12]
 c001e98:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 c001e9c:	4a67      	ldr	r2, [pc, #412]	; (c00203c <lea_set_key+0x1dac>)
 c001e9e:	4413      	add	r3, r2
 c001ea0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c001ea4:	68fb      	ldr	r3, [r7, #12]
 c001ea6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
		key->rk[184] = ROL(key->rk[176] + delta[6][ 2], 13);
 c001eaa:	68fb      	ldr	r3, [r7, #12]
 c001eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 c001eb0:	4a63      	ldr	r2, [pc, #396]	; (c002040 <lea_set_key+0x1db0>)
 c001eb2:	4413      	add	r3, r2
 c001eb4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c001eb8:	68fb      	ldr	r3, [r7, #12]
 c001eba:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
		key->rk[  1] = ROL(loadU32(_mk[1]) + delta[0][ 1],  3);
 c001ebe:	697b      	ldr	r3, [r7, #20]
 c001ec0:	3304      	adds	r3, #4
 c001ec2:	681b      	ldr	r3, [r3, #0]
 c001ec4:	4a5f      	ldr	r2, [pc, #380]	; (c002044 <lea_set_key+0x1db4>)
 c001ec6:	4413      	add	r3, r2
 c001ec8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001ecc:	68fb      	ldr	r3, [r7, #12]
 c001ece:	605a      	str	r2, [r3, #4]
		key->rk[  9] = ROL(key->rk[  1] + delta[1][ 4], 11);
 c001ed0:	68fb      	ldr	r3, [r7, #12]
 c001ed2:	685b      	ldr	r3, [r3, #4]
 c001ed4:	4a5c      	ldr	r2, [pc, #368]	; (c002048 <lea_set_key+0x1db8>)
 c001ed6:	4413      	add	r3, r2
 c001ed8:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001edc:	68fb      	ldr	r3, [r7, #12]
 c001ede:	625a      	str	r2, [r3, #36]	; 0x24
		key->rk[ 17] = ROL(key->rk[  9] + delta[2][ 7], 17);
 c001ee0:	68fb      	ldr	r3, [r7, #12]
 c001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001ee4:	4a59      	ldr	r2, [pc, #356]	; (c00204c <lea_set_key+0x1dbc>)
 c001ee6:	4413      	add	r3, r2
 c001ee8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001eec:	68fb      	ldr	r3, [r7, #12]
 c001eee:	645a      	str	r2, [r3, #68]	; 0x44
		key->rk[ 25] = ROL(key->rk[ 17] + delta[4][ 5],  3);
 c001ef0:	68fb      	ldr	r3, [r7, #12]
 c001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c001ef4:	4a56      	ldr	r2, [pc, #344]	; (c002050 <lea_set_key+0x1dc0>)
 c001ef6:	4413      	add	r3, r2
 c001ef8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001efc:	68fb      	ldr	r3, [r7, #12]
 c001efe:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 33] = ROL(key->rk[ 25] + delta[5][ 8], 11);
 c001f00:	68fb      	ldr	r3, [r7, #12]
 c001f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c001f04:	4a53      	ldr	r2, [pc, #332]	; (c002054 <lea_set_key+0x1dc4>)
 c001f06:	4413      	add	r3, r2
 c001f08:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001f0c:	68fb      	ldr	r3, [r7, #12]
 c001f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		key->rk[ 41] = ROL(key->rk[ 33] + delta[6][11], 17);
 c001f12:	68fb      	ldr	r3, [r7, #12]
 c001f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001f18:	4a4f      	ldr	r2, [pc, #316]	; (c002058 <lea_set_key+0x1dc8>)
 c001f1a:	4413      	add	r3, r2
 c001f1c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001f20:	68fb      	ldr	r3, [r7, #12]
 c001f22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		key->rk[ 49] = ROL(key->rk[ 41] + delta[0][ 9],  3);
 c001f26:	68fb      	ldr	r3, [r7, #12]
 c001f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c001f2c:	4a4b      	ldr	r2, [pc, #300]	; (c00205c <lea_set_key+0x1dcc>)
 c001f2e:	4413      	add	r3, r2
 c001f30:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001f34:	68fb      	ldr	r3, [r7, #12]
 c001f36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 57] = ROL(key->rk[ 49] + delta[1][12], 11);
 c001f3a:	68fb      	ldr	r3, [r7, #12]
 c001f3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c001f40:	4a47      	ldr	r2, [pc, #284]	; (c002060 <lea_set_key+0x1dd0>)
 c001f42:	4413      	add	r3, r2
 c001f44:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001f48:	68fb      	ldr	r3, [r7, #12]
 c001f4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		key->rk[ 65] = ROL(key->rk[ 57] + delta[2][15], 17);
 c001f4e:	68fb      	ldr	r3, [r7, #12]
 c001f50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c001f54:	4a43      	ldr	r2, [pc, #268]	; (c002064 <lea_set_key+0x1dd4>)
 c001f56:	4413      	add	r3, r2
 c001f58:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001f5c:	68fb      	ldr	r3, [r7, #12]
 c001f5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		key->rk[ 73] = ROL(key->rk[ 65] + delta[4][13],  3);
 c001f62:	68fb      	ldr	r3, [r7, #12]
 c001f64:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 c001f68:	4a3f      	ldr	r2, [pc, #252]	; (c002068 <lea_set_key+0x1dd8>)
 c001f6a:	4413      	add	r3, r2
 c001f6c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001f70:	68fb      	ldr	r3, [r7, #12]
 c001f72:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 81] = ROL(key->rk[ 73] + delta[5][16], 11);
 c001f76:	68fb      	ldr	r3, [r7, #12]
 c001f78:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 c001f7c:	4a3b      	ldr	r2, [pc, #236]	; (c00206c <lea_set_key+0x1ddc>)
 c001f7e:	4413      	add	r3, r2
 c001f80:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001f84:	68fb      	ldr	r3, [r7, #12]
 c001f86:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		key->rk[ 89] = ROL(key->rk[ 81] + delta[6][19], 17);
 c001f8a:	68fb      	ldr	r3, [r7, #12]
 c001f8c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 c001f90:	4a37      	ldr	r2, [pc, #220]	; (c002070 <lea_set_key+0x1de0>)
 c001f92:	4413      	add	r3, r2
 c001f94:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001f98:	68fb      	ldr	r3, [r7, #12]
 c001f9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		key->rk[ 97] = ROL(key->rk[ 89] + delta[0][17],  3);
 c001f9e:	68fb      	ldr	r3, [r7, #12]
 c001fa0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 c001fa4:	4a33      	ldr	r2, [pc, #204]	; (c002074 <lea_set_key+0x1de4>)
 c001fa6:	4413      	add	r3, r2
 c001fa8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c001fac:	68fb      	ldr	r3, [r7, #12]
 c001fae:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[105] = ROL(key->rk[ 97] + delta[1][20], 11);
 c001fb2:	68fb      	ldr	r3, [r7, #12]
 c001fb4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 c001fb8:	4a2f      	ldr	r2, [pc, #188]	; (c002078 <lea_set_key+0x1de8>)
 c001fba:	4413      	add	r3, r2
 c001fbc:	ea4f 5273 	mov.w	r2, r3, ror #21
 c001fc0:	68fb      	ldr	r3, [r7, #12]
 c001fc2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		key->rk[113] = ROL(key->rk[105] + delta[2][23], 17);
 c001fc6:	68fb      	ldr	r3, [r7, #12]
 c001fc8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 c001fcc:	4a2b      	ldr	r2, [pc, #172]	; (c00207c <lea_set_key+0x1dec>)
 c001fce:	4413      	add	r3, r2
 c001fd0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c001fd4:	68fb      	ldr	r3, [r7, #12]
 c001fd6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		key->rk[121] = ROL(key->rk[113] + delta[4][21],  3);
 c001fda:	68fb      	ldr	r3, [r7, #12]
 c001fdc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 c001fe0:	e04e      	b.n	c002080 <lea_set_key+0x1df0>
 c001fe2:	bf00      	nop
 c001fe4:	c3efe9db 	.word	0xc3efe9db
 c001fe8:	23135812 	.word	0x23135812
 c001fec:	789f229e 	.word	0x789f229e
 c001ff0:	15ea49e7 	.word	0x15ea49e7
 c001ff4:	c2ed0563 	.word	0xc2ed0563
 c001ff8:	3bc8ab81 	.word	0x3bc8ab81
 c001ffc:	efe9dbc3 	.word	0xefe9dbc3
 c002000:	13581223 	.word	0x13581223
 c002004:	9f229e78 	.word	0x9f229e78
 c002008:	ea49e715 	.word	0xea49e715
 c00200c:	ed0563c2 	.word	0xed0563c2
 c002010:	c8ab813b 	.word	0xc8ab813b
 c002014:	e9dbc3ef 	.word	0xe9dbc3ef
 c002018:	58122313 	.word	0x58122313
 c00201c:	229e789f 	.word	0x229e789f
 c002020:	49e715ea 	.word	0x49e715ea
 c002024:	0563c2ed 	.word	0x0563c2ed
 c002028:	ab813bc8 	.word	0xab813bc8
 c00202c:	dbc3efe9 	.word	0xdbc3efe9
 c002030:	12231358 	.word	0x12231358
 c002034:	9e789f22 	.word	0x9e789f22
 c002038:	e715ea49 	.word	0xe715ea49
 c00203c:	63c2ed05 	.word	0x63c2ed05
 c002040:	813bc8ab 	.word	0x813bc8ab
 c002044:	87dfd3b7 	.word	0x87dfd3b7
 c002048:	4626b024 	.word	0x4626b024
 c00204c:	f13e453c 	.word	0xf13e453c
 c002050:	2bd493ce 	.word	0x2bd493ce
 c002054:	85da0ac7 	.word	0x85da0ac7
 c002058:	77915702 	.word	0x77915702
 c00205c:	dfd3b787 	.word	0xdfd3b787
 c002060:	26b02446 	.word	0x26b02446
 c002064:	3e453cf1 	.word	0x3e453cf1
 c002068:	d493ce2b 	.word	0xd493ce2b
 c00206c:	da0ac785 	.word	0xda0ac785
 c002070:	91570277 	.word	0x91570277
 c002074:	d3b787df 	.word	0xd3b787df
 c002078:	b0244626 	.word	0xb0244626
 c00207c:	453cf13e 	.word	0x453cf13e
 c002080:	4aba      	ldr	r2, [pc, #744]	; (c00236c <lea_set_key+0x20dc>)
 c002082:	4413      	add	r3, r2
 c002084:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002088:	68fb      	ldr	r3, [r7, #12]
 c00208a:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[129] = ROL(key->rk[121] + delta[5][24], 11);
 c00208e:	68fb      	ldr	r3, [r7, #12]
 c002090:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 c002094:	4ab6      	ldr	r2, [pc, #728]	; (c002370 <lea_set_key+0x20e0>)
 c002096:	4413      	add	r3, r2
 c002098:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00209c:	68fb      	ldr	r3, [r7, #12]
 c00209e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		key->rk[137] = ROL(key->rk[129] + delta[6][27], 17);
 c0020a2:	68fb      	ldr	r3, [r7, #12]
 c0020a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 c0020a8:	4ab2      	ldr	r2, [pc, #712]	; (c002374 <lea_set_key+0x20e4>)
 c0020aa:	4413      	add	r3, r2
 c0020ac:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0020b0:	68fb      	ldr	r3, [r7, #12]
 c0020b2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		key->rk[145] = ROL(key->rk[137] + delta[0][25],  3);
 c0020b6:	68fb      	ldr	r3, [r7, #12]
 c0020b8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 c0020bc:	4aae      	ldr	r2, [pc, #696]	; (c002378 <lea_set_key+0x20e8>)
 c0020be:	4413      	add	r3, r2
 c0020c0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0020c4:	68fb      	ldr	r3, [r7, #12]
 c0020c6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		key->rk[153] = ROL(key->rk[145] + delta[1][28], 11);
 c0020ca:	68fb      	ldr	r3, [r7, #12]
 c0020cc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 c0020d0:	4aaa      	ldr	r2, [pc, #680]	; (c00237c <lea_set_key+0x20ec>)
 c0020d2:	4413      	add	r3, r2
 c0020d4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0020d8:	68fb      	ldr	r3, [r7, #12]
 c0020da:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		key->rk[161] = ROL(key->rk[153] + delta[2][31], 17);
 c0020de:	68fb      	ldr	r3, [r7, #12]
 c0020e0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 c0020e4:	4aa6      	ldr	r2, [pc, #664]	; (c002380 <lea_set_key+0x20f0>)
 c0020e6:	4413      	add	r3, r2
 c0020e8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0020ec:	68fb      	ldr	r3, [r7, #12]
 c0020ee:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
		key->rk[169] = ROL(key->rk[161] + delta[4][29],  3);
 c0020f2:	68fb      	ldr	r3, [r7, #12]
 c0020f4:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 c0020f8:	4aa2      	ldr	r2, [pc, #648]	; (c002384 <lea_set_key+0x20f4>)
 c0020fa:	4413      	add	r3, r2
 c0020fc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002100:	68fb      	ldr	r3, [r7, #12]
 c002102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
		key->rk[177] = ROL(key->rk[169] + delta[5][ 0], 11);
 c002106:	68fb      	ldr	r3, [r7, #12]
 c002108:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 c00210c:	4a9e      	ldr	r2, [pc, #632]	; (c002388 <lea_set_key+0x20f8>)
 c00210e:	4413      	add	r3, r2
 c002110:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002114:	68fb      	ldr	r3, [r7, #12]
 c002116:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
		key->rk[185] = ROL(key->rk[177] + delta[6][ 3], 17);
 c00211a:	68fb      	ldr	r3, [r7, #12]
 c00211c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 c002120:	4a9a      	ldr	r2, [pc, #616]	; (c00238c <lea_set_key+0x20fc>)
 c002122:	4413      	add	r3, r2
 c002124:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002128:	68fb      	ldr	r3, [r7, #12]
 c00212a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2],  6);
 c00212e:	697b      	ldr	r3, [r7, #20]
 c002130:	3308      	adds	r3, #8
 c002132:	681b      	ldr	r3, [r3, #0]
 c002134:	4a96      	ldr	r2, [pc, #600]	; (c002390 <lea_set_key+0x2100>)
 c002136:	4413      	add	r3, r2
 c002138:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00213c:	68fb      	ldr	r3, [r7, #12]
 c00213e:	609a      	str	r2, [r3, #8]
		key->rk[ 10] = ROL(key->rk[  2] + delta[1][ 5], 13);
 c002140:	68fb      	ldr	r3, [r7, #12]
 c002142:	689b      	ldr	r3, [r3, #8]
 c002144:	4a93      	ldr	r2, [pc, #588]	; (c002394 <lea_set_key+0x2104>)
 c002146:	4413      	add	r3, r2
 c002148:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00214c:	68fb      	ldr	r3, [r7, #12]
 c00214e:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 18] = ROL(key->rk[ 10] + delta[3][ 3],  1);
 c002150:	68fb      	ldr	r3, [r7, #12]
 c002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002154:	4a90      	ldr	r2, [pc, #576]	; (c002398 <lea_set_key+0x2108>)
 c002156:	4413      	add	r3, r2
 c002158:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00215c:	68fb      	ldr	r3, [r7, #12]
 c00215e:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 26] = ROL(key->rk[ 18] + delta[4][ 6],  6);
 c002160:	68fb      	ldr	r3, [r7, #12]
 c002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002164:	4a8d      	ldr	r2, [pc, #564]	; (c00239c <lea_set_key+0x210c>)
 c002166:	4413      	add	r3, r2
 c002168:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00216c:	68fb      	ldr	r3, [r7, #12]
 c00216e:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 34] = ROL(key->rk[ 26] + delta[5][ 9], 13);
 c002170:	68fb      	ldr	r3, [r7, #12]
 c002172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002174:	4a8a      	ldr	r2, [pc, #552]	; (c0023a0 <lea_set_key+0x2110>)
 c002176:	4413      	add	r3, r2
 c002178:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00217c:	68fb      	ldr	r3, [r7, #12]
 c00217e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 42] = ROL(key->rk[ 34] + delta[7][ 7],  1);
 c002182:	68fb      	ldr	r3, [r7, #12]
 c002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002188:	4a86      	ldr	r2, [pc, #536]	; (c0023a4 <lea_set_key+0x2114>)
 c00218a:	4413      	add	r3, r2
 c00218c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002190:	68fb      	ldr	r3, [r7, #12]
 c002192:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 50] = ROL(key->rk[ 42] + delta[0][10],  6);
 c002196:	68fb      	ldr	r3, [r7, #12]
 c002198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c00219c:	4a82      	ldr	r2, [pc, #520]	; (c0023a8 <lea_set_key+0x2118>)
 c00219e:	4413      	add	r3, r2
 c0021a0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0021a4:	68fb      	ldr	r3, [r7, #12]
 c0021a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 58] = ROL(key->rk[ 50] + delta[1][13], 13);
 c0021aa:	68fb      	ldr	r3, [r7, #12]
 c0021ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c0021b0:	4a7e      	ldr	r2, [pc, #504]	; (c0023ac <lea_set_key+0x211c>)
 c0021b2:	4413      	add	r3, r2
 c0021b4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0021b8:	68fb      	ldr	r3, [r7, #12]
 c0021ba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 66] = ROL(key->rk[ 58] + delta[3][11],  1);
 c0021be:	68fb      	ldr	r3, [r7, #12]
 c0021c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0021c4:	4a7a      	ldr	r2, [pc, #488]	; (c0023b0 <lea_set_key+0x2120>)
 c0021c6:	4413      	add	r3, r2
 c0021c8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0021cc:	68fb      	ldr	r3, [r7, #12]
 c0021ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 74] = ROL(key->rk[ 66] + delta[4][14],  6);
 c0021d2:	68fb      	ldr	r3, [r7, #12]
 c0021d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c0021d8:	4a76      	ldr	r2, [pc, #472]	; (c0023b4 <lea_set_key+0x2124>)
 c0021da:	4413      	add	r3, r2
 c0021dc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0021e0:	68fb      	ldr	r3, [r7, #12]
 c0021e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 82] = ROL(key->rk[ 74] + delta[5][17], 13);
 c0021e6:	68fb      	ldr	r3, [r7, #12]
 c0021e8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 c0021ec:	4a72      	ldr	r2, [pc, #456]	; (c0023b8 <lea_set_key+0x2128>)
 c0021ee:	4413      	add	r3, r2
 c0021f0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0021f4:	68fb      	ldr	r3, [r7, #12]
 c0021f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 90] = ROL(key->rk[ 82] + delta[7][15],  1);
 c0021fa:	68fb      	ldr	r3, [r7, #12]
 c0021fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 c002200:	4a6e      	ldr	r2, [pc, #440]	; (c0023bc <lea_set_key+0x212c>)
 c002202:	4413      	add	r3, r2
 c002204:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002208:	68fb      	ldr	r3, [r7, #12]
 c00220a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 98] = ROL(key->rk[ 90] + delta[0][18],  6);
 c00220e:	68fb      	ldr	r3, [r7, #12]
 c002210:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 c002214:	4a6a      	ldr	r2, [pc, #424]	; (c0023c0 <lea_set_key+0x2130>)
 c002216:	4413      	add	r3, r2
 c002218:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00221c:	68fb      	ldr	r3, [r7, #12]
 c00221e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[106] = ROL(key->rk[ 98] + delta[1][21], 13);
 c002222:	68fb      	ldr	r3, [r7, #12]
 c002224:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 c002228:	4a66      	ldr	r2, [pc, #408]	; (c0023c4 <lea_set_key+0x2134>)
 c00222a:	4413      	add	r3, r2
 c00222c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002230:	68fb      	ldr	r3, [r7, #12]
 c002232:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[114] = ROL(key->rk[106] + delta[3][19],  1);
 c002236:	68fb      	ldr	r3, [r7, #12]
 c002238:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 c00223c:	4a62      	ldr	r2, [pc, #392]	; (c0023c8 <lea_set_key+0x2138>)
 c00223e:	4413      	add	r3, r2
 c002240:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002244:	68fb      	ldr	r3, [r7, #12]
 c002246:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[122] = ROL(key->rk[114] + delta[4][22],  6);
 c00224a:	68fb      	ldr	r3, [r7, #12]
 c00224c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 c002250:	4a5e      	ldr	r2, [pc, #376]	; (c0023cc <lea_set_key+0x213c>)
 c002252:	4413      	add	r3, r2
 c002254:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002258:	68fb      	ldr	r3, [r7, #12]
 c00225a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[130] = ROL(key->rk[122] + delta[5][25], 13);
 c00225e:	68fb      	ldr	r3, [r7, #12]
 c002260:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 c002264:	4a5a      	ldr	r2, [pc, #360]	; (c0023d0 <lea_set_key+0x2140>)
 c002266:	4413      	add	r3, r2
 c002268:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00226c:	68fb      	ldr	r3, [r7, #12]
 c00226e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[138] = ROL(key->rk[130] + delta[7][23],  1);
 c002272:	68fb      	ldr	r3, [r7, #12]
 c002274:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 c002278:	4a56      	ldr	r2, [pc, #344]	; (c0023d4 <lea_set_key+0x2144>)
 c00227a:	4413      	add	r3, r2
 c00227c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002280:	68fb      	ldr	r3, [r7, #12]
 c002282:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[146] = ROL(key->rk[138] + delta[0][26],  6);
 c002286:	68fb      	ldr	r3, [r7, #12]
 c002288:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 c00228c:	4a52      	ldr	r2, [pc, #328]	; (c0023d8 <lea_set_key+0x2148>)
 c00228e:	4413      	add	r3, r2
 c002290:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002294:	68fb      	ldr	r3, [r7, #12]
 c002296:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		key->rk[154] = ROL(key->rk[146] + delta[1][29], 13);
 c00229a:	68fb      	ldr	r3, [r7, #12]
 c00229c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 c0022a0:	4a4e      	ldr	r2, [pc, #312]	; (c0023dc <lea_set_key+0x214c>)
 c0022a2:	4413      	add	r3, r2
 c0022a4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0022a8:	68fb      	ldr	r3, [r7, #12]
 c0022aa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		key->rk[162] = ROL(key->rk[154] + delta[3][27],  1);
 c0022ae:	68fb      	ldr	r3, [r7, #12]
 c0022b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 c0022b4:	4a4a      	ldr	r2, [pc, #296]	; (c0023e0 <lea_set_key+0x2150>)
 c0022b6:	4413      	add	r3, r2
 c0022b8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0022bc:	68fb      	ldr	r3, [r7, #12]
 c0022be:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		key->rk[170] = ROL(key->rk[162] + delta[4][30],  6);
 c0022c2:	68fb      	ldr	r3, [r7, #12]
 c0022c4:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 c0022c8:	4a46      	ldr	r2, [pc, #280]	; (c0023e4 <lea_set_key+0x2154>)
 c0022ca:	4413      	add	r3, r2
 c0022cc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0022d0:	68fb      	ldr	r3, [r7, #12]
 c0022d2:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
		key->rk[178] = ROL(key->rk[170] + delta[5][ 1], 13);
 c0022d6:	68fb      	ldr	r3, [r7, #12]
 c0022d8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 c0022dc:	4a42      	ldr	r2, [pc, #264]	; (c0023e8 <lea_set_key+0x2158>)
 c0022de:	4413      	add	r3, r2
 c0022e0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0022e4:	68fb      	ldr	r3, [r7, #12]
 c0022e6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
		key->rk[186] = ROL(key->rk[178] + delta[7][31],  1);
 c0022ea:	68fb      	ldr	r3, [r7, #12]
 c0022ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 c0022f0:	4a3e      	ldr	r2, [pc, #248]	; (c0023ec <lea_set_key+0x215c>)
 c0022f2:	4413      	add	r3, r2
 c0022f4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0022f8:	68fb      	ldr	r3, [r7, #12]
 c0022fa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
		key->rk[  3] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 c0022fe:	697b      	ldr	r3, [r7, #20]
 c002300:	330c      	adds	r3, #12
 c002302:	681b      	ldr	r3, [r3, #0]
 c002304:	4a3a      	ldr	r2, [pc, #232]	; (c0023f0 <lea_set_key+0x2160>)
 c002306:	4413      	add	r3, r2
 c002308:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00230c:	68fb      	ldr	r3, [r7, #12]
 c00230e:	60da      	str	r2, [r3, #12]
		key->rk[ 11] = ROL(key->rk[  3] + delta[1][ 6], 17);
 c002310:	68fb      	ldr	r3, [r7, #12]
 c002312:	68db      	ldr	r3, [r3, #12]
 c002314:	4a37      	ldr	r2, [pc, #220]	; (c0023f4 <lea_set_key+0x2164>)
 c002316:	4413      	add	r3, r2
 c002318:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c00231c:	68fb      	ldr	r3, [r7, #12]
 c00231e:	62da      	str	r2, [r3, #44]	; 0x2c
		key->rk[ 19] = ROL(key->rk[ 11] + delta[3][ 4],  3);
 c002320:	68fb      	ldr	r3, [r7, #12]
 c002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002324:	4a34      	ldr	r2, [pc, #208]	; (c0023f8 <lea_set_key+0x2168>)
 c002326:	4413      	add	r3, r2
 c002328:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00232c:	68fb      	ldr	r3, [r7, #12]
 c00232e:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 27] = ROL(key->rk[ 19] + delta[4][ 7], 11);
 c002330:	68fb      	ldr	r3, [r7, #12]
 c002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002334:	4a31      	ldr	r2, [pc, #196]	; (c0023fc <lea_set_key+0x216c>)
 c002336:	4413      	add	r3, r2
 c002338:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00233c:	68fb      	ldr	r3, [r7, #12]
 c00233e:	66da      	str	r2, [r3, #108]	; 0x6c
		key->rk[ 35] = ROL(key->rk[ 27] + delta[5][10], 17);
 c002340:	68fb      	ldr	r3, [r7, #12]
 c002342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002344:	4a2e      	ldr	r2, [pc, #184]	; (c002400 <lea_set_key+0x2170>)
 c002346:	4413      	add	r3, r2
 c002348:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c00234c:	68fb      	ldr	r3, [r7, #12]
 c00234e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		key->rk[ 43] = ROL(key->rk[ 35] + delta[7][ 8],  3);
 c002352:	68fb      	ldr	r3, [r7, #12]
 c002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c002358:	4a2a      	ldr	r2, [pc, #168]	; (c002404 <lea_set_key+0x2174>)
 c00235a:	4413      	add	r3, r2
 c00235c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002360:	68fb      	ldr	r3, [r7, #12]
 c002362:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 51] = ROL(key->rk[ 43] + delta[0][11], 11);
 c002366:	68fb      	ldr	r3, [r7, #12]
 c002368:	e04e      	b.n	c002408 <lea_set_key+0x2178>
 c00236a:	bf00      	nop
 c00236c:	93ce2bd4 	.word	0x93ce2bd4
 c002370:	0ac785da 	.word	0x0ac785da
 c002374:	57027791 	.word	0x57027791
 c002378:	b787dfd3 	.word	0xb787dfd3
 c00237c:	244626b0 	.word	0x244626b0
 c002380:	3cf13e45 	.word	0x3cf13e45
 c002384:	ce2bd493 	.word	0xce2bd493
 c002388:	c785da0a 	.word	0xc785da0a
 c00238c:	02779157 	.word	0x02779157
 c002390:	0fbfa76f 	.word	0x0fbfa76f
 c002394:	8c4d6048 	.word	0x8c4d6048
 c002398:	c6f98763 	.word	0xc6f98763
 c00239c:	57a9279c 	.word	0x57a9279c
 c0023a0:	0bb4158f 	.word	0x0bb4158f
 c0023a4:	e204abf2 	.word	0xe204abf2
 c0023a8:	bfa76f0f 	.word	0xbfa76f0f
 c0023ac:	4d60488c 	.word	0x4d60488c
 c0023b0:	f98763c6 	.word	0xf98763c6
 c0023b4:	a9279c57 	.word	0xa9279c57
 c0023b8:	b4158f0b 	.word	0xb4158f0b
 c0023bc:	04abf2e2 	.word	0x04abf2e2
 c0023c0:	a76f0fbf 	.word	0xa76f0fbf
 c0023c4:	60488c4d 	.word	0x60488c4d
 c0023c8:	8763c6f9 	.word	0x8763c6f9
 c0023cc:	279c57a9 	.word	0x279c57a9
 c0023d0:	158f0bb4 	.word	0x158f0bb4
 c0023d4:	abf2e204 	.word	0xabf2e204
 c0023d8:	6f0fbfa7 	.word	0x6f0fbfa7
 c0023dc:	488c4d60 	.word	0x488c4d60
 c0023e0:	63c6f987 	.word	0x63c6f987
 c0023e4:	9c57a927 	.word	0x9c57a927
 c0023e8:	8f0bb415 	.word	0x8f0bb415
 c0023ec:	f2e204ab 	.word	0xf2e204ab
 c0023f0:	1f7f4ede 	.word	0x1f7f4ede
 c0023f4:	189ac091 	.word	0x189ac091
 c0023f8:	8df30ec7 	.word	0x8df30ec7
 c0023fc:	af524f38 	.word	0xaf524f38
 c002400:	17682b1e 	.word	0x17682b1e
 c002404:	c40957e5 	.word	0xc40957e5
 c002408:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c00240c:	4abf      	ldr	r2, [pc, #764]	; (c00270c <lea_set_key+0x247c>)
 c00240e:	4413      	add	r3, r2
 c002410:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002414:	68fb      	ldr	r3, [r7, #12]
 c002416:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		key->rk[ 59] = ROL(key->rk[ 51] + delta[1][14], 17);
 c00241a:	68fb      	ldr	r3, [r7, #12]
 c00241c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c002420:	4abb      	ldr	r2, [pc, #748]	; (c002710 <lea_set_key+0x2480>)
 c002422:	4413      	add	r3, r2
 c002424:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002428:	68fb      	ldr	r3, [r7, #12]
 c00242a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		key->rk[ 67] = ROL(key->rk[ 59] + delta[3][12],  3);
 c00242e:	68fb      	ldr	r3, [r7, #12]
 c002430:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c002434:	4ab7      	ldr	r2, [pc, #732]	; (c002714 <lea_set_key+0x2484>)
 c002436:	4413      	add	r3, r2
 c002438:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00243c:	68fb      	ldr	r3, [r7, #12]
 c00243e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 75] = ROL(key->rk[ 67] + delta[4][15], 11);
 c002442:	68fb      	ldr	r3, [r7, #12]
 c002444:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 c002448:	4ab3      	ldr	r2, [pc, #716]	; (c002718 <lea_set_key+0x2488>)
 c00244a:	4413      	add	r3, r2
 c00244c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002450:	68fb      	ldr	r3, [r7, #12]
 c002452:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		key->rk[ 83] = ROL(key->rk[ 75] + delta[5][18], 17);
 c002456:	68fb      	ldr	r3, [r7, #12]
 c002458:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 c00245c:	4aaf      	ldr	r2, [pc, #700]	; (c00271c <lea_set_key+0x248c>)
 c00245e:	4413      	add	r3, r2
 c002460:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002464:	68fb      	ldr	r3, [r7, #12]
 c002466:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		key->rk[ 91] = ROL(key->rk[ 83] + delta[7][16],  3);
 c00246a:	68fb      	ldr	r3, [r7, #12]
 c00246c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 c002470:	4aab      	ldr	r2, [pc, #684]	; (c002720 <lea_set_key+0x2490>)
 c002472:	4413      	add	r3, r2
 c002474:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002478:	68fb      	ldr	r3, [r7, #12]
 c00247a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 99] = ROL(key->rk[ 91] + delta[0][19], 11);
 c00247e:	68fb      	ldr	r3, [r7, #12]
 c002480:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 c002484:	4aa7      	ldr	r2, [pc, #668]	; (c002724 <lea_set_key+0x2494>)
 c002486:	4413      	add	r3, r2
 c002488:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00248c:	68fb      	ldr	r3, [r7, #12]
 c00248e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		key->rk[107] = ROL(key->rk[ 99] + delta[1][22], 17);
 c002492:	68fb      	ldr	r3, [r7, #12]
 c002494:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 c002498:	4aa3      	ldr	r2, [pc, #652]	; (c002728 <lea_set_key+0x2498>)
 c00249a:	4413      	add	r3, r2
 c00249c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0024a0:	68fb      	ldr	r3, [r7, #12]
 c0024a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		key->rk[115] = ROL(key->rk[107] + delta[3][20],  3);
 c0024a6:	68fb      	ldr	r3, [r7, #12]
 c0024a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 c0024ac:	4a9f      	ldr	r2, [pc, #636]	; (c00272c <lea_set_key+0x249c>)
 c0024ae:	4413      	add	r3, r2
 c0024b0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0024b4:	68fb      	ldr	r3, [r7, #12]
 c0024b6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[123] = ROL(key->rk[115] + delta[4][23], 11);
 c0024ba:	68fb      	ldr	r3, [r7, #12]
 c0024bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 c0024c0:	4a9b      	ldr	r2, [pc, #620]	; (c002730 <lea_set_key+0x24a0>)
 c0024c2:	4413      	add	r3, r2
 c0024c4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0024c8:	68fb      	ldr	r3, [r7, #12]
 c0024ca:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		key->rk[131] = ROL(key->rk[123] + delta[5][26], 17);
 c0024ce:	68fb      	ldr	r3, [r7, #12]
 c0024d0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 c0024d4:	4a97      	ldr	r2, [pc, #604]	; (c002734 <lea_set_key+0x24a4>)
 c0024d6:	4413      	add	r3, r2
 c0024d8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0024dc:	68fb      	ldr	r3, [r7, #12]
 c0024de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		key->rk[139] = ROL(key->rk[131] + delta[7][24],  3);
 c0024e2:	68fb      	ldr	r3, [r7, #12]
 c0024e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 c0024e8:	4a93      	ldr	r2, [pc, #588]	; (c002738 <lea_set_key+0x24a8>)
 c0024ea:	4413      	add	r3, r2
 c0024ec:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0024f0:	68fb      	ldr	r3, [r7, #12]
 c0024f2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[147] = ROL(key->rk[139] + delta[0][27], 11);
 c0024f6:	68fb      	ldr	r3, [r7, #12]
 c0024f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 c0024fc:	4a8f      	ldr	r2, [pc, #572]	; (c00273c <lea_set_key+0x24ac>)
 c0024fe:	4413      	add	r3, r2
 c002500:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002504:	68fb      	ldr	r3, [r7, #12]
 c002506:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		key->rk[155] = ROL(key->rk[147] + delta[1][30], 17);
 c00250a:	68fb      	ldr	r3, [r7, #12]
 c00250c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 c002510:	4a8b      	ldr	r2, [pc, #556]	; (c002740 <lea_set_key+0x24b0>)
 c002512:	4413      	add	r3, r2
 c002514:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002518:	68fb      	ldr	r3, [r7, #12]
 c00251a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
		key->rk[163] = ROL(key->rk[155] + delta[3][28],  3);
 c00251e:	68fb      	ldr	r3, [r7, #12]
 c002520:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 c002524:	4a87      	ldr	r2, [pc, #540]	; (c002744 <lea_set_key+0x24b4>)
 c002526:	4413      	add	r3, r2
 c002528:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00252c:	68fb      	ldr	r3, [r7, #12]
 c00252e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		key->rk[171] = ROL(key->rk[163] + delta[4][31], 11);
 c002532:	68fb      	ldr	r3, [r7, #12]
 c002534:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 c002538:	4a83      	ldr	r2, [pc, #524]	; (c002748 <lea_set_key+0x24b8>)
 c00253a:	4413      	add	r3, r2
 c00253c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002540:	68fb      	ldr	r3, [r7, #12]
 c002542:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
		key->rk[179] = ROL(key->rk[171] + delta[5][ 2], 17);
 c002546:	68fb      	ldr	r3, [r7, #12]
 c002548:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 c00254c:	4a7f      	ldr	r2, [pc, #508]	; (c00274c <lea_set_key+0x24bc>)
 c00254e:	4413      	add	r3, r2
 c002550:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002554:	68fb      	ldr	r3, [r7, #12]
 c002556:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
		key->rk[187] = ROL(key->rk[179] + delta[7][ 0],  3);
 c00255a:	68fb      	ldr	r3, [r7, #12]
 c00255c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 c002560:	4a7b      	ldr	r2, [pc, #492]	; (c002750 <lea_set_key+0x24c0>)
 c002562:	4413      	add	r3, r2
 c002564:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002568:	68fb      	ldr	r3, [r7, #12]
 c00256a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
		key->rk[  4] = ROL(loadU32(_mk[4]) + delta[0][ 4], 13);
 c00256e:	697b      	ldr	r3, [r7, #20]
 c002570:	3310      	adds	r3, #16
 c002572:	681b      	ldr	r3, [r3, #0]
 c002574:	4a77      	ldr	r2, [pc, #476]	; (c002754 <lea_set_key+0x24c4>)
 c002576:	4413      	add	r3, r2
 c002578:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00257c:	68fb      	ldr	r3, [r7, #12]
 c00257e:	611a      	str	r2, [r3, #16]
		key->rk[ 12] = ROL(key->rk[  4] + delta[2][ 2],  1);
 c002580:	68fb      	ldr	r3, [r7, #12]
 c002582:	691b      	ldr	r3, [r3, #16]
 c002584:	4a74      	ldr	r2, [pc, #464]	; (c002758 <lea_set_key+0x24c8>)
 c002586:	4413      	add	r3, r2
 c002588:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c00258c:	68fb      	ldr	r3, [r7, #12]
 c00258e:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 20] = ROL(key->rk[ 12] + delta[3][ 5],  6);
 c002590:	68fb      	ldr	r3, [r7, #12]
 c002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002594:	4a71      	ldr	r2, [pc, #452]	; (c00275c <lea_set_key+0x24cc>)
 c002596:	4413      	add	r3, r2
 c002598:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00259c:	68fb      	ldr	r3, [r7, #12]
 c00259e:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 28] = ROL(key->rk[ 20] + delta[4][ 8], 13);
 c0025a0:	68fb      	ldr	r3, [r7, #12]
 c0025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0025a4:	4a6e      	ldr	r2, [pc, #440]	; (c002760 <lea_set_key+0x24d0>)
 c0025a6:	4413      	add	r3, r2
 c0025a8:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0025ac:	68fb      	ldr	r3, [r7, #12]
 c0025ae:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 36] = ROL(key->rk[ 28] + delta[6][ 6],  1);
 c0025b0:	68fb      	ldr	r3, [r7, #12]
 c0025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0025b4:	4a6b      	ldr	r2, [pc, #428]	; (c002764 <lea_set_key+0x24d4>)
 c0025b6:	4413      	add	r3, r2
 c0025b8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0025bc:	68fb      	ldr	r3, [r7, #12]
 c0025be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 44] = ROL(key->rk[ 36] + delta[7][ 9],  6);
 c0025c2:	68fb      	ldr	r3, [r7, #12]
 c0025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025c8:	4a67      	ldr	r2, [pc, #412]	; (c002768 <lea_set_key+0x24d8>)
 c0025ca:	4413      	add	r3, r2
 c0025cc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0025d0:	68fb      	ldr	r3, [r7, #12]
 c0025d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 52] = ROL(key->rk[ 44] + delta[0][12], 13);
 c0025d6:	68fb      	ldr	r3, [r7, #12]
 c0025d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0025dc:	4a63      	ldr	r2, [pc, #396]	; (c00276c <lea_set_key+0x24dc>)
 c0025de:	4413      	add	r3, r2
 c0025e0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0025e4:	68fb      	ldr	r3, [r7, #12]
 c0025e6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 60] = ROL(key->rk[ 52] + delta[2][10],  1);
 c0025ea:	68fb      	ldr	r3, [r7, #12]
 c0025ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c0025f0:	4a5f      	ldr	r2, [pc, #380]	; (c002770 <lea_set_key+0x24e0>)
 c0025f2:	4413      	add	r3, r2
 c0025f4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0025f8:	68fb      	ldr	r3, [r7, #12]
 c0025fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 68] = ROL(key->rk[ 60] + delta[3][13],  6);
 c0025fe:	68fb      	ldr	r3, [r7, #12]
 c002600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002604:	4a5b      	ldr	r2, [pc, #364]	; (c002774 <lea_set_key+0x24e4>)
 c002606:	4413      	add	r3, r2
 c002608:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c00260c:	68fb      	ldr	r3, [r7, #12]
 c00260e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 76] = ROL(key->rk[ 68] + delta[4][16], 13);
 c002612:	68fb      	ldr	r3, [r7, #12]
 c002614:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 c002618:	4a57      	ldr	r2, [pc, #348]	; (c002778 <lea_set_key+0x24e8>)
 c00261a:	4413      	add	r3, r2
 c00261c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002620:	68fb      	ldr	r3, [r7, #12]
 c002622:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 84] = ROL(key->rk[ 76] + delta[6][14],  1);
 c002626:	68fb      	ldr	r3, [r7, #12]
 c002628:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 c00262c:	4a53      	ldr	r2, [pc, #332]	; (c00277c <lea_set_key+0x24ec>)
 c00262e:	4413      	add	r3, r2
 c002630:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002634:	68fb      	ldr	r3, [r7, #12]
 c002636:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 92] = ROL(key->rk[ 84] + delta[7][17],  6);
 c00263a:	68fb      	ldr	r3, [r7, #12]
 c00263c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 c002640:	4a4f      	ldr	r2, [pc, #316]	; (c002780 <lea_set_key+0x24f0>)
 c002642:	4413      	add	r3, r2
 c002644:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002648:	68fb      	ldr	r3, [r7, #12]
 c00264a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[100] = ROL(key->rk[ 92] + delta[0][20], 13);
 c00264e:	68fb      	ldr	r3, [r7, #12]
 c002650:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 c002654:	4a4b      	ldr	r2, [pc, #300]	; (c002784 <lea_set_key+0x24f4>)
 c002656:	4413      	add	r3, r2
 c002658:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c00265c:	68fb      	ldr	r3, [r7, #12]
 c00265e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[108] = ROL(key->rk[100] + delta[2][18],  1);
 c002662:	68fb      	ldr	r3, [r7, #12]
 c002664:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 c002668:	4a47      	ldr	r2, [pc, #284]	; (c002788 <lea_set_key+0x24f8>)
 c00266a:	4413      	add	r3, r2
 c00266c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002670:	68fb      	ldr	r3, [r7, #12]
 c002672:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[116] = ROL(key->rk[108] + delta[3][21],  6);
 c002676:	68fb      	ldr	r3, [r7, #12]
 c002678:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 c00267c:	4a43      	ldr	r2, [pc, #268]	; (c00278c <lea_set_key+0x24fc>)
 c00267e:	4413      	add	r3, r2
 c002680:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002684:	68fb      	ldr	r3, [r7, #12]
 c002686:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[124] = ROL(key->rk[116] + delta[4][24], 13);
 c00268a:	68fb      	ldr	r3, [r7, #12]
 c00268c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 c002690:	4a3f      	ldr	r2, [pc, #252]	; (c002790 <lea_set_key+0x2500>)
 c002692:	4413      	add	r3, r2
 c002694:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002698:	68fb      	ldr	r3, [r7, #12]
 c00269a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[132] = ROL(key->rk[124] + delta[6][22],  1);
 c00269e:	68fb      	ldr	r3, [r7, #12]
 c0026a0:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 c0026a4:	4a3b      	ldr	r2, [pc, #236]	; (c002794 <lea_set_key+0x2504>)
 c0026a6:	4413      	add	r3, r2
 c0026a8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0026ac:	68fb      	ldr	r3, [r7, #12]
 c0026ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[140] = ROL(key->rk[132] + delta[7][25],  6);
 c0026b2:	68fb      	ldr	r3, [r7, #12]
 c0026b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 c0026b8:	4a37      	ldr	r2, [pc, #220]	; (c002798 <lea_set_key+0x2508>)
 c0026ba:	4413      	add	r3, r2
 c0026bc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0026c0:	68fb      	ldr	r3, [r7, #12]
 c0026c2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[148] = ROL(key->rk[140] + delta[0][28], 13);
 c0026c6:	68fb      	ldr	r3, [r7, #12]
 c0026c8:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 c0026cc:	4a33      	ldr	r2, [pc, #204]	; (c00279c <lea_set_key+0x250c>)
 c0026ce:	4413      	add	r3, r2
 c0026d0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0026d4:	68fb      	ldr	r3, [r7, #12]
 c0026d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		key->rk[156] = ROL(key->rk[148] + delta[2][26],  1);
 c0026da:	68fb      	ldr	r3, [r7, #12]
 c0026dc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 c0026e0:	4a2f      	ldr	r2, [pc, #188]	; (c0027a0 <lea_set_key+0x2510>)
 c0026e2:	4413      	add	r3, r2
 c0026e4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0026e8:	68fb      	ldr	r3, [r7, #12]
 c0026ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		key->rk[164] = ROL(key->rk[156] + delta[3][29],  6);
 c0026ee:	68fb      	ldr	r3, [r7, #12]
 c0026f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 c0026f4:	4a2b      	ldr	r2, [pc, #172]	; (c0027a4 <lea_set_key+0x2514>)
 c0026f6:	4413      	add	r3, r2
 c0026f8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0026fc:	68fb      	ldr	r3, [r7, #12]
 c0026fe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		key->rk[172] = ROL(key->rk[164] + delta[4][ 0], 13);
 c002702:	68fb      	ldr	r3, [r7, #12]
 c002704:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 c002708:	e04e      	b.n	c0027a8 <lea_set_key+0x2518>
 c00270a:	bf00      	nop
 c00270c:	7f4ede1f 	.word	0x7f4ede1f
 c002710:	9ac09118 	.word	0x9ac09118
 c002714:	f30ec78d 	.word	0xf30ec78d
 c002718:	524f38af 	.word	0x524f38af
 c00271c:	682b1e17 	.word	0x682b1e17
 c002720:	0957e5c4 	.word	0x0957e5c4
 c002724:	4ede1f7f 	.word	0x4ede1f7f
 c002728:	c091189a 	.word	0xc091189a
 c00272c:	0ec78df3 	.word	0x0ec78df3
 c002730:	4f38af52 	.word	0x4f38af52
 c002734:	2b1e1768 	.word	0x2b1e1768
 c002738:	57e5c409 	.word	0x57e5c409
 c00273c:	de1f7f4e 	.word	0xde1f7f4e
 c002740:	91189ac0 	.word	0x91189ac0
 c002744:	c78df30e 	.word	0xc78df30e
 c002748:	38af524f 	.word	0x38af524f
 c00274c:	1e17682b 	.word	0x1e17682b
 c002750:	e5c40957 	.word	0xe5c40957
 c002754:	3efe9dbc 	.word	0x3efe9dbc
 c002758:	e789f229 	.word	0xe789f229
 c00275c:	1be61d8f 	.word	0x1be61d8f
 c002760:	5ea49e71 	.word	0x5ea49e71
 c002764:	13bc8ab8 	.word	0x13bc8ab8
 c002768:	8812afcb 	.word	0x8812afcb
 c00276c:	fe9dbc3e 	.word	0xfe9dbc3e
 c002770:	89f229e7 	.word	0x89f229e7
 c002774:	e61d8f1b 	.word	0xe61d8f1b
 c002778:	a49e715e 	.word	0xa49e715e
 c00277c:	bc8ab813 	.word	0xbc8ab813
 c002780:	12afcb88 	.word	0x12afcb88
 c002784:	9dbc3efe 	.word	0x9dbc3efe
 c002788:	f229e789 	.word	0xf229e789
 c00278c:	1d8f1be6 	.word	0x1d8f1be6
 c002790:	9e715ea4 	.word	0x9e715ea4
 c002794:	8ab813bc 	.word	0x8ab813bc
 c002798:	afcb8812 	.word	0xafcb8812
 c00279c:	bc3efe9d 	.word	0xbc3efe9d
 c0027a0:	29e789f2 	.word	0x29e789f2
 c0027a4:	8f1be61d 	.word	0x8f1be61d
 c0027a8:	4aba      	ldr	r2, [pc, #744]	; (c002a94 <lea_set_key+0x2804>)
 c0027aa:	4413      	add	r3, r2
 c0027ac:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0027b0:	68fb      	ldr	r3, [r7, #12]
 c0027b2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
		key->rk[180] = ROL(key->rk[172] + delta[6][30],  1);
 c0027b6:	68fb      	ldr	r3, [r7, #12]
 c0027b8:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 c0027bc:	4ab6      	ldr	r2, [pc, #728]	; (c002a98 <lea_set_key+0x2808>)
 c0027be:	4413      	add	r3, r2
 c0027c0:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0027c4:	68fb      	ldr	r3, [r7, #12]
 c0027c6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
		key->rk[188] = ROL(key->rk[180] + delta[7][ 1],  6);
 c0027ca:	68fb      	ldr	r3, [r7, #12]
 c0027cc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 c0027d0:	4ab2      	ldr	r2, [pc, #712]	; (c002a9c <lea_set_key+0x280c>)
 c0027d2:	4413      	add	r3, r2
 c0027d4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0027d8:	68fb      	ldr	r3, [r7, #12]
 c0027da:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
		key->rk[  5] = ROL(loadU32(_mk[5]) + delta[0][ 5], 17);
 c0027de:	697b      	ldr	r3, [r7, #20]
 c0027e0:	3314      	adds	r3, #20
 c0027e2:	681b      	ldr	r3, [r3, #0]
 c0027e4:	4aae      	ldr	r2, [pc, #696]	; (c002aa0 <lea_set_key+0x2810>)
 c0027e6:	4413      	add	r3, r2
 c0027e8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0027ec:	68fb      	ldr	r3, [r7, #12]
 c0027ee:	615a      	str	r2, [r3, #20]
		key->rk[ 13] = ROL(key->rk[  5] + delta[2][ 3],  3);
 c0027f0:	68fb      	ldr	r3, [r7, #12]
 c0027f2:	695b      	ldr	r3, [r3, #20]
 c0027f4:	4aab      	ldr	r2, [pc, #684]	; (c002aa4 <lea_set_key+0x2814>)
 c0027f6:	4413      	add	r3, r2
 c0027f8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0027fc:	68fb      	ldr	r3, [r7, #12]
 c0027fe:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 21] = ROL(key->rk[ 13] + delta[3][ 6], 11);
 c002800:	68fb      	ldr	r3, [r7, #12]
 c002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002804:	4aa8      	ldr	r2, [pc, #672]	; (c002aa8 <lea_set_key+0x2818>)
 c002806:	4413      	add	r3, r2
 c002808:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00280c:	68fb      	ldr	r3, [r7, #12]
 c00280e:	655a      	str	r2, [r3, #84]	; 0x54
		key->rk[ 29] = ROL(key->rk[ 21] + delta[4][ 9], 17);
 c002810:	68fb      	ldr	r3, [r7, #12]
 c002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002814:	4aa5      	ldr	r2, [pc, #660]	; (c002aac <lea_set_key+0x281c>)
 c002816:	4413      	add	r3, r2
 c002818:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c00281c:	68fb      	ldr	r3, [r7, #12]
 c00281e:	675a      	str	r2, [r3, #116]	; 0x74
		key->rk[ 37] = ROL(key->rk[ 29] + delta[6][ 7],  3);
 c002820:	68fb      	ldr	r3, [r7, #12]
 c002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002824:	4aa2      	ldr	r2, [pc, #648]	; (c002ab0 <lea_set_key+0x2820>)
 c002826:	4413      	add	r3, r2
 c002828:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00282c:	68fb      	ldr	r3, [r7, #12]
 c00282e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 45] = ROL(key->rk[ 37] + delta[7][10], 11);
 c002832:	68fb      	ldr	r3, [r7, #12]
 c002834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002838:	4a9e      	ldr	r2, [pc, #632]	; (c002ab4 <lea_set_key+0x2824>)
 c00283a:	4413      	add	r3, r2
 c00283c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002840:	68fb      	ldr	r3, [r7, #12]
 c002842:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		key->rk[ 53] = ROL(key->rk[ 45] + delta[0][13], 17);
 c002846:	68fb      	ldr	r3, [r7, #12]
 c002848:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c00284c:	4a9a      	ldr	r2, [pc, #616]	; (c002ab8 <lea_set_key+0x2828>)
 c00284e:	4413      	add	r3, r2
 c002850:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002854:	68fb      	ldr	r3, [r7, #12]
 c002856:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		key->rk[ 61] = ROL(key->rk[ 53] + delta[2][11],  3);
 c00285a:	68fb      	ldr	r3, [r7, #12]
 c00285c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c002860:	4a96      	ldr	r2, [pc, #600]	; (c002abc <lea_set_key+0x282c>)
 c002862:	4413      	add	r3, r2
 c002864:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002868:	68fb      	ldr	r3, [r7, #12]
 c00286a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 69] = ROL(key->rk[ 61] + delta[3][14], 11);
 c00286e:	68fb      	ldr	r3, [r7, #12]
 c002870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c002874:	4a92      	ldr	r2, [pc, #584]	; (c002ac0 <lea_set_key+0x2830>)
 c002876:	4413      	add	r3, r2
 c002878:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00287c:	68fb      	ldr	r3, [r7, #12]
 c00287e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		key->rk[ 77] = ROL(key->rk[ 69] + delta[4][17], 17);
 c002882:	68fb      	ldr	r3, [r7, #12]
 c002884:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 c002888:	4a8e      	ldr	r2, [pc, #568]	; (c002ac4 <lea_set_key+0x2834>)
 c00288a:	4413      	add	r3, r2
 c00288c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002890:	68fb      	ldr	r3, [r7, #12]
 c002892:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		key->rk[ 85] = ROL(key->rk[ 77] + delta[6][15],  3);
 c002896:	68fb      	ldr	r3, [r7, #12]
 c002898:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 c00289c:	4a8a      	ldr	r2, [pc, #552]	; (c002ac8 <lea_set_key+0x2838>)
 c00289e:	4413      	add	r3, r2
 c0028a0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0028a4:	68fb      	ldr	r3, [r7, #12]
 c0028a6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 93] = ROL(key->rk[ 85] + delta[7][18], 11);
 c0028aa:	68fb      	ldr	r3, [r7, #12]
 c0028ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 c0028b0:	4a86      	ldr	r2, [pc, #536]	; (c002acc <lea_set_key+0x283c>)
 c0028b2:	4413      	add	r3, r2
 c0028b4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0028b8:	68fb      	ldr	r3, [r7, #12]
 c0028ba:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		key->rk[101] = ROL(key->rk[ 93] + delta[0][21], 17);
 c0028be:	68fb      	ldr	r3, [r7, #12]
 c0028c0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 c0028c4:	4a82      	ldr	r2, [pc, #520]	; (c002ad0 <lea_set_key+0x2840>)
 c0028c6:	4413      	add	r3, r2
 c0028c8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c0028cc:	68fb      	ldr	r3, [r7, #12]
 c0028ce:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		key->rk[109] = ROL(key->rk[101] + delta[2][19],  3);
 c0028d2:	68fb      	ldr	r3, [r7, #12]
 c0028d4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 c0028d8:	4a7e      	ldr	r2, [pc, #504]	; (c002ad4 <lea_set_key+0x2844>)
 c0028da:	4413      	add	r3, r2
 c0028dc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0028e0:	68fb      	ldr	r3, [r7, #12]
 c0028e2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[117] = ROL(key->rk[109] + delta[3][22], 11);
 c0028e6:	68fb      	ldr	r3, [r7, #12]
 c0028e8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 c0028ec:	4a7a      	ldr	r2, [pc, #488]	; (c002ad8 <lea_set_key+0x2848>)
 c0028ee:	4413      	add	r3, r2
 c0028f0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0028f4:	68fb      	ldr	r3, [r7, #12]
 c0028f6:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		key->rk[125] = ROL(key->rk[117] + delta[4][25], 17);
 c0028fa:	68fb      	ldr	r3, [r7, #12]
 c0028fc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 c002900:	4a76      	ldr	r2, [pc, #472]	; (c002adc <lea_set_key+0x284c>)
 c002902:	4413      	add	r3, r2
 c002904:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002908:	68fb      	ldr	r3, [r7, #12]
 c00290a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		key->rk[133] = ROL(key->rk[125] + delta[6][23],  3);
 c00290e:	68fb      	ldr	r3, [r7, #12]
 c002910:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 c002914:	4a72      	ldr	r2, [pc, #456]	; (c002ae0 <lea_set_key+0x2850>)
 c002916:	4413      	add	r3, r2
 c002918:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00291c:	68fb      	ldr	r3, [r7, #12]
 c00291e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[141] = ROL(key->rk[133] + delta[7][26], 11);
 c002922:	68fb      	ldr	r3, [r7, #12]
 c002924:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 c002928:	4a6e      	ldr	r2, [pc, #440]	; (c002ae4 <lea_set_key+0x2854>)
 c00292a:	4413      	add	r3, r2
 c00292c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002930:	68fb      	ldr	r3, [r7, #12]
 c002932:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		key->rk[149] = ROL(key->rk[141] + delta[0][29], 17);
 c002936:	68fb      	ldr	r3, [r7, #12]
 c002938:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 c00293c:	4a6a      	ldr	r2, [pc, #424]	; (c002ae8 <lea_set_key+0x2858>)
 c00293e:	4413      	add	r3, r2
 c002940:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002944:	68fb      	ldr	r3, [r7, #12]
 c002946:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		key->rk[157] = ROL(key->rk[149] + delta[2][27],  3);
 c00294a:	68fb      	ldr	r3, [r7, #12]
 c00294c:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 c002950:	4a66      	ldr	r2, [pc, #408]	; (c002aec <lea_set_key+0x285c>)
 c002952:	4413      	add	r3, r2
 c002954:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002958:	68fb      	ldr	r3, [r7, #12]
 c00295a:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		key->rk[165] = ROL(key->rk[157] + delta[3][30], 11);
 c00295e:	68fb      	ldr	r3, [r7, #12]
 c002960:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 c002964:	4a62      	ldr	r2, [pc, #392]	; (c002af0 <lea_set_key+0x2860>)
 c002966:	4413      	add	r3, r2
 c002968:	ea4f 5273 	mov.w	r2, r3, ror #21
 c00296c:	68fb      	ldr	r3, [r7, #12]
 c00296e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		key->rk[173] = ROL(key->rk[165] + delta[4][ 1], 17);
 c002972:	68fb      	ldr	r3, [r7, #12]
 c002974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 c002978:	4a5e      	ldr	r2, [pc, #376]	; (c002af4 <lea_set_key+0x2864>)
 c00297a:	4413      	add	r3, r2
 c00297c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002980:	68fb      	ldr	r3, [r7, #12]
 c002982:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
		key->rk[181] = ROL(key->rk[173] + delta[6][31],  3);
 c002986:	68fb      	ldr	r3, [r7, #12]
 c002988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 c00298c:	4a5a      	ldr	r2, [pc, #360]	; (c002af8 <lea_set_key+0x2868>)
 c00298e:	4413      	add	r3, r2
 c002990:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002994:	68fb      	ldr	r3, [r7, #12]
 c002996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
		key->rk[189] = ROL(key->rk[181] + delta[7][ 2], 11);
 c00299a:	68fb      	ldr	r3, [r7, #12]
 c00299c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 c0029a0:	4a56      	ldr	r2, [pc, #344]	; (c002afc <lea_set_key+0x286c>)
 c0029a2:	4413      	add	r3, r2
 c0029a4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c0029a8:	68fb      	ldr	r3, [r7, #12]
 c0029aa:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
		key->rk[  6] = ROL(loadU32(_mk[6]) + delta[1][ 1],  1);
 c0029ae:	697b      	ldr	r3, [r7, #20]
 c0029b0:	3318      	adds	r3, #24
 c0029b2:	681b      	ldr	r3, [r3, #0]
 c0029b4:	4a52      	ldr	r2, [pc, #328]	; (c002b00 <lea_set_key+0x2870>)
 c0029b6:	4413      	add	r3, r2
 c0029b8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0029bc:	68fb      	ldr	r3, [r7, #12]
 c0029be:	619a      	str	r2, [r3, #24]
		key->rk[ 14] = ROL(key->rk[  6] + delta[2][ 4],  6);
 c0029c0:	68fb      	ldr	r3, [r7, #12]
 c0029c2:	699b      	ldr	r3, [r3, #24]
 c0029c4:	4a4f      	ldr	r2, [pc, #316]	; (c002b04 <lea_set_key+0x2874>)
 c0029c6:	4413      	add	r3, r2
 c0029c8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0029cc:	68fb      	ldr	r3, [r7, #12]
 c0029ce:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 22] = ROL(key->rk[ 14] + delta[3][ 7], 13);
 c0029d0:	68fb      	ldr	r3, [r7, #12]
 c0029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0029d4:	4a4c      	ldr	r2, [pc, #304]	; (c002b08 <lea_set_key+0x2878>)
 c0029d6:	4413      	add	r3, r2
 c0029d8:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c0029dc:	68fb      	ldr	r3, [r7, #12]
 c0029de:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 30] = ROL(key->rk[ 22] + delta[5][ 5],  1);
 c0029e0:	68fb      	ldr	r3, [r7, #12]
 c0029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0029e4:	4a49      	ldr	r2, [pc, #292]	; (c002b0c <lea_set_key+0x287c>)
 c0029e6:	4413      	add	r3, r2
 c0029e8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c0029ec:	68fb      	ldr	r3, [r7, #12]
 c0029ee:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 38] = ROL(key->rk[ 30] + delta[6][ 8],  6);
 c0029f0:	68fb      	ldr	r3, [r7, #12]
 c0029f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0029f4:	4a46      	ldr	r2, [pc, #280]	; (c002b10 <lea_set_key+0x2880>)
 c0029f6:	4413      	add	r3, r2
 c0029f8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c0029fc:	68fb      	ldr	r3, [r7, #12]
 c0029fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 46] = ROL(key->rk[ 38] + delta[7][11], 13);
 c002a02:	68fb      	ldr	r3, [r7, #12]
 c002a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002a08:	4a42      	ldr	r2, [pc, #264]	; (c002b14 <lea_set_key+0x2884>)
 c002a0a:	4413      	add	r3, r2
 c002a0c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002a10:	68fb      	ldr	r3, [r7, #12]
 c002a12:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 54] = ROL(key->rk[ 46] + delta[1][ 9],  1);
 c002a16:	68fb      	ldr	r3, [r7, #12]
 c002a18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c002a1c:	4a3e      	ldr	r2, [pc, #248]	; (c002b18 <lea_set_key+0x2888>)
 c002a1e:	4413      	add	r3, r2
 c002a20:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002a24:	68fb      	ldr	r3, [r7, #12]
 c002a26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 62] = ROL(key->rk[ 54] + delta[2][12],  6);
 c002a2a:	68fb      	ldr	r3, [r7, #12]
 c002a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c002a30:	4a3a      	ldr	r2, [pc, #232]	; (c002b1c <lea_set_key+0x288c>)
 c002a32:	4413      	add	r3, r2
 c002a34:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002a38:	68fb      	ldr	r3, [r7, #12]
 c002a3a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 70] = ROL(key->rk[ 62] + delta[3][15], 13);
 c002a3e:	68fb      	ldr	r3, [r7, #12]
 c002a40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c002a44:	4a36      	ldr	r2, [pc, #216]	; (c002b20 <lea_set_key+0x2890>)
 c002a46:	4413      	add	r3, r2
 c002a48:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002a4c:	68fb      	ldr	r3, [r7, #12]
 c002a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 78] = ROL(key->rk[ 70] + delta[5][13],  1);
 c002a52:	68fb      	ldr	r3, [r7, #12]
 c002a54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 c002a58:	4a32      	ldr	r2, [pc, #200]	; (c002b24 <lea_set_key+0x2894>)
 c002a5a:	4413      	add	r3, r2
 c002a5c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002a60:	68fb      	ldr	r3, [r7, #12]
 c002a62:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 86] = ROL(key->rk[ 78] + delta[6][16],  6);
 c002a66:	68fb      	ldr	r3, [r7, #12]
 c002a68:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 c002a6c:	4a2e      	ldr	r2, [pc, #184]	; (c002b28 <lea_set_key+0x2898>)
 c002a6e:	4413      	add	r3, r2
 c002a70:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002a74:	68fb      	ldr	r3, [r7, #12]
 c002a76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 94] = ROL(key->rk[ 86] + delta[7][19], 13);
 c002a7a:	68fb      	ldr	r3, [r7, #12]
 c002a7c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 c002a80:	4a2a      	ldr	r2, [pc, #168]	; (c002b2c <lea_set_key+0x289c>)
 c002a82:	4413      	add	r3, r2
 c002a84:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002a88:	68fb      	ldr	r3, [r7, #12]
 c002a8a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[102] = ROL(key->rk[ 94] + delta[1][17],  1);
 c002a8e:	68fb      	ldr	r3, [r7, #12]
 c002a90:	e04e      	b.n	c002b30 <lea_set_key+0x28a0>
 c002a92:	bf00      	nop
 c002a94:	715ea49e 	.word	0x715ea49e
 c002a98:	b813bc8a 	.word	0xb813bc8a
 c002a9c:	cb8812af 	.word	0xcb8812af
 c002aa0:	7dfd3b78 	.word	0x7dfd3b78
 c002aa4:	cf13e453 	.word	0xcf13e453
 c002aa8:	37cc3b1e 	.word	0x37cc3b1e
 c002aac:	bd493ce2 	.word	0xbd493ce2
 c002ab0:	27791570 	.word	0x27791570
 c002ab4:	10255f97 	.word	0x10255f97
 c002ab8:	fd3b787d 	.word	0xfd3b787d
 c002abc:	13e453cf 	.word	0x13e453cf
 c002ac0:	cc3b1e37 	.word	0xcc3b1e37
 c002ac4:	493ce2bd 	.word	0x493ce2bd
 c002ac8:	79157027 	.word	0x79157027
 c002acc:	255f9710 	.word	0x255f9710
 c002ad0:	3b787dfd 	.word	0x3b787dfd
 c002ad4:	e453cf13 	.word	0xe453cf13
 c002ad8:	3b1e37cc 	.word	0x3b1e37cc
 c002adc:	3ce2bd49 	.word	0x3ce2bd49
 c002ae0:	15702779 	.word	0x15702779
 c002ae4:	5f971025 	.word	0x5f971025
 c002ae8:	787dfd3b 	.word	0x787dfd3b
 c002aec:	53cf13e4 	.word	0x53cf13e4
 c002af0:	1e37cc3b 	.word	0x1e37cc3b
 c002af4:	e2bd493c 	.word	0xe2bd493c
 c002af8:	70277915 	.word	0x70277915
 c002afc:	9710255f 	.word	0x9710255f
 c002b00:	88c4d604 	.word	0x88c4d604
 c002b04:	9e27c8a7 	.word	0x9e27c8a7
 c002b08:	6f98763c 	.word	0x6f98763c
 c002b0c:	f0bb4158 	.word	0xf0bb4158
 c002b10:	4ef22ae0 	.word	0x4ef22ae0
 c002b14:	204abf2e 	.word	0x204abf2e
 c002b18:	c4d60488 	.word	0xc4d60488
 c002b1c:	27c8a79e 	.word	0x27c8a79e
 c002b20:	98763c6f 	.word	0x98763c6f
 c002b24:	bb4158f0 	.word	0xbb4158f0
 c002b28:	f22ae04e 	.word	0xf22ae04e
 c002b2c:	4abf2e20 	.word	0x4abf2e20
 c002b30:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 c002b34:	4ab7      	ldr	r2, [pc, #732]	; (c002e14 <lea_set_key+0x2b84>)
 c002b36:	4413      	add	r3, r2
 c002b38:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002b3c:	68fb      	ldr	r3, [r7, #12]
 c002b3e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[110] = ROL(key->rk[102] + delta[2][20],  6);
 c002b42:	68fb      	ldr	r3, [r7, #12]
 c002b44:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 c002b48:	4ab3      	ldr	r2, [pc, #716]	; (c002e18 <lea_set_key+0x2b88>)
 c002b4a:	4413      	add	r3, r2
 c002b4c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002b50:	68fb      	ldr	r3, [r7, #12]
 c002b52:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[118] = ROL(key->rk[110] + delta[3][23], 13);
 c002b56:	68fb      	ldr	r3, [r7, #12]
 c002b58:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 c002b5c:	4aaf      	ldr	r2, [pc, #700]	; (c002e1c <lea_set_key+0x2b8c>)
 c002b5e:	4413      	add	r3, r2
 c002b60:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002b64:	68fb      	ldr	r3, [r7, #12]
 c002b66:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[126] = ROL(key->rk[118] + delta[5][21],  1);
 c002b6a:	68fb      	ldr	r3, [r7, #12]
 c002b6c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 c002b70:	4aab      	ldr	r2, [pc, #684]	; (c002e20 <lea_set_key+0x2b90>)
 c002b72:	4413      	add	r3, r2
 c002b74:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002b78:	68fb      	ldr	r3, [r7, #12]
 c002b7a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[134] = ROL(key->rk[126] + delta[6][24],  6);
 c002b7e:	68fb      	ldr	r3, [r7, #12]
 c002b80:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 c002b84:	4aa7      	ldr	r2, [pc, #668]	; (c002e24 <lea_set_key+0x2b94>)
 c002b86:	4413      	add	r3, r2
 c002b88:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002b8c:	68fb      	ldr	r3, [r7, #12]
 c002b8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[142] = ROL(key->rk[134] + delta[7][27], 13);
 c002b92:	68fb      	ldr	r3, [r7, #12]
 c002b94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 c002b98:	4aa3      	ldr	r2, [pc, #652]	; (c002e28 <lea_set_key+0x2b98>)
 c002b9a:	4413      	add	r3, r2
 c002b9c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002ba0:	68fb      	ldr	r3, [r7, #12]
 c002ba2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		key->rk[150] = ROL(key->rk[142] + delta[1][25],  1);
 c002ba6:	68fb      	ldr	r3, [r7, #12]
 c002ba8:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 c002bac:	4a9f      	ldr	r2, [pc, #636]	; (c002e2c <lea_set_key+0x2b9c>)
 c002bae:	4413      	add	r3, r2
 c002bb0:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002bb4:	68fb      	ldr	r3, [r7, #12]
 c002bb6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		key->rk[158] = ROL(key->rk[150] + delta[2][28],  6);
 c002bba:	68fb      	ldr	r3, [r7, #12]
 c002bbc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 c002bc0:	4a9b      	ldr	r2, [pc, #620]	; (c002e30 <lea_set_key+0x2ba0>)
 c002bc2:	4413      	add	r3, r2
 c002bc4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002bc8:	68fb      	ldr	r3, [r7, #12]
 c002bca:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		key->rk[166] = ROL(key->rk[158] + delta[3][31], 13);
 c002bce:	68fb      	ldr	r3, [r7, #12]
 c002bd0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 c002bd4:	4a97      	ldr	r2, [pc, #604]	; (c002e34 <lea_set_key+0x2ba4>)
 c002bd6:	4413      	add	r3, r2
 c002bd8:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002bdc:	68fb      	ldr	r3, [r7, #12]
 c002bde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		key->rk[174] = ROL(key->rk[166] + delta[5][29],  1);
 c002be2:	68fb      	ldr	r3, [r7, #12]
 c002be4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 c002be8:	4a93      	ldr	r2, [pc, #588]	; (c002e38 <lea_set_key+0x2ba8>)
 c002bea:	4413      	add	r3, r2
 c002bec:	ea4f 72f3 	mov.w	r2, r3, ror #31
 c002bf0:	68fb      	ldr	r3, [r7, #12]
 c002bf2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
		key->rk[182] = ROL(key->rk[174] + delta[6][ 0],  6);
 c002bf6:	68fb      	ldr	r3, [r7, #12]
 c002bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 c002bfc:	4a8f      	ldr	r2, [pc, #572]	; (c002e3c <lea_set_key+0x2bac>)
 c002bfe:	4413      	add	r3, r2
 c002c00:	ea4f 62b3 	mov.w	r2, r3, ror #26
 c002c04:	68fb      	ldr	r3, [r7, #12]
 c002c06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
		key->rk[190] = ROL(key->rk[182] + delta[7][ 3], 13);
 c002c0a:	68fb      	ldr	r3, [r7, #12]
 c002c0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 c002c10:	4a8b      	ldr	r2, [pc, #556]	; (c002e40 <lea_set_key+0x2bb0>)
 c002c12:	4413      	add	r3, r2
 c002c14:	ea4f 42f3 	mov.w	r2, r3, ror #19
 c002c18:	68fb      	ldr	r3, [r7, #12]
 c002c1a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
		key->rk[  7] = ROL(loadU32(_mk[7]) + delta[1][ 2],  3);
 c002c1e:	697b      	ldr	r3, [r7, #20]
 c002c20:	331c      	adds	r3, #28
 c002c22:	681b      	ldr	r3, [r3, #0]
 c002c24:	4a87      	ldr	r2, [pc, #540]	; (c002e44 <lea_set_key+0x2bb4>)
 c002c26:	4413      	add	r3, r2
 c002c28:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002c2c:	68fb      	ldr	r3, [r7, #12]
 c002c2e:	61da      	str	r2, [r3, #28]
		key->rk[ 15] = ROL(key->rk[  7] + delta[2][ 5], 11);
 c002c30:	68fb      	ldr	r3, [r7, #12]
 c002c32:	69db      	ldr	r3, [r3, #28]
 c002c34:	4a84      	ldr	r2, [pc, #528]	; (c002e48 <lea_set_key+0x2bb8>)
 c002c36:	4413      	add	r3, r2
 c002c38:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002c3c:	68fb      	ldr	r3, [r7, #12]
 c002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
		key->rk[ 23] = ROL(key->rk[ 15] + delta[3][ 8], 17);
 c002c40:	68fb      	ldr	r3, [r7, #12]
 c002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002c44:	4a81      	ldr	r2, [pc, #516]	; (c002e4c <lea_set_key+0x2bbc>)
 c002c46:	4413      	add	r3, r2
 c002c48:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002c4c:	68fb      	ldr	r3, [r7, #12]
 c002c4e:	65da      	str	r2, [r3, #92]	; 0x5c
		key->rk[ 31] = ROL(key->rk[ 23] + delta[5][ 6],  3);
 c002c50:	68fb      	ldr	r3, [r7, #12]
 c002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002c54:	4a7e      	ldr	r2, [pc, #504]	; (c002e50 <lea_set_key+0x2bc0>)
 c002c56:	4413      	add	r3, r2
 c002c58:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002c5c:	68fb      	ldr	r3, [r7, #12]
 c002c5e:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 39] = ROL(key->rk[ 31] + delta[6][ 9], 11);
 c002c60:	68fb      	ldr	r3, [r7, #12]
 c002c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c002c64:	4a7b      	ldr	r2, [pc, #492]	; (c002e54 <lea_set_key+0x2bc4>)
 c002c66:	4413      	add	r3, r2
 c002c68:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002c6c:	68fb      	ldr	r3, [r7, #12]
 c002c6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		key->rk[ 47] = ROL(key->rk[ 39] + delta[7][12], 17);
 c002c72:	68fb      	ldr	r3, [r7, #12]
 c002c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002c78:	4a77      	ldr	r2, [pc, #476]	; (c002e58 <lea_set_key+0x2bc8>)
 c002c7a:	4413      	add	r3, r2
 c002c7c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002c80:	68fb      	ldr	r3, [r7, #12]
 c002c82:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		key->rk[ 55] = ROL(key->rk[ 47] + delta[1][10],  3);
 c002c86:	68fb      	ldr	r3, [r7, #12]
 c002c88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c002c8c:	4a73      	ldr	r2, [pc, #460]	; (c002e5c <lea_set_key+0x2bcc>)
 c002c8e:	4413      	add	r3, r2
 c002c90:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002c94:	68fb      	ldr	r3, [r7, #12]
 c002c96:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 63] = ROL(key->rk[ 55] + delta[2][13], 11);
 c002c9a:	68fb      	ldr	r3, [r7, #12]
 c002c9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c002ca0:	4a6f      	ldr	r2, [pc, #444]	; (c002e60 <lea_set_key+0x2bd0>)
 c002ca2:	4413      	add	r3, r2
 c002ca4:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002ca8:	68fb      	ldr	r3, [r7, #12]
 c002caa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		key->rk[ 71] = ROL(key->rk[ 63] + delta[3][16], 17);
 c002cae:	68fb      	ldr	r3, [r7, #12]
 c002cb0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 c002cb4:	4a6b      	ldr	r2, [pc, #428]	; (c002e64 <lea_set_key+0x2bd4>)
 c002cb6:	4413      	add	r3, r2
 c002cb8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002cbc:	68fb      	ldr	r3, [r7, #12]
 c002cbe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		key->rk[ 79] = ROL(key->rk[ 71] + delta[5][14],  3);
 c002cc2:	68fb      	ldr	r3, [r7, #12]
 c002cc4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 c002cc8:	4a67      	ldr	r2, [pc, #412]	; (c002e68 <lea_set_key+0x2bd8>)
 c002cca:	4413      	add	r3, r2
 c002ccc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002cd0:	68fb      	ldr	r3, [r7, #12]
 c002cd2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 87] = ROL(key->rk[ 79] + delta[6][17], 11);
 c002cd6:	68fb      	ldr	r3, [r7, #12]
 c002cd8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 c002cdc:	4a63      	ldr	r2, [pc, #396]	; (c002e6c <lea_set_key+0x2bdc>)
 c002cde:	4413      	add	r3, r2
 c002ce0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002ce4:	68fb      	ldr	r3, [r7, #12]
 c002ce6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		key->rk[ 95] = ROL(key->rk[ 87] + delta[7][20], 17);
 c002cea:	68fb      	ldr	r3, [r7, #12]
 c002cec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 c002cf0:	4a5f      	ldr	r2, [pc, #380]	; (c002e70 <lea_set_key+0x2be0>)
 c002cf2:	4413      	add	r3, r2
 c002cf4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002cf8:	68fb      	ldr	r3, [r7, #12]
 c002cfa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		key->rk[103] = ROL(key->rk[ 95] + delta[1][18],  3);
 c002cfe:	68fb      	ldr	r3, [r7, #12]
 c002d00:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 c002d04:	4a5b      	ldr	r2, [pc, #364]	; (c002e74 <lea_set_key+0x2be4>)
 c002d06:	4413      	add	r3, r2
 c002d08:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002d0c:	68fb      	ldr	r3, [r7, #12]
 c002d0e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[111] = ROL(key->rk[103] + delta[2][21], 11);
 c002d12:	68fb      	ldr	r3, [r7, #12]
 c002d14:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 c002d18:	4a57      	ldr	r2, [pc, #348]	; (c002e78 <lea_set_key+0x2be8>)
 c002d1a:	4413      	add	r3, r2
 c002d1c:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002d20:	68fb      	ldr	r3, [r7, #12]
 c002d22:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		key->rk[119] = ROL(key->rk[111] + delta[3][24], 17);
 c002d26:	68fb      	ldr	r3, [r7, #12]
 c002d28:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 c002d2c:	4a53      	ldr	r2, [pc, #332]	; (c002e7c <lea_set_key+0x2bec>)
 c002d2e:	4413      	add	r3, r2
 c002d30:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002d34:	68fb      	ldr	r3, [r7, #12]
 c002d36:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		key->rk[127] = ROL(key->rk[119] + delta[5][22],  3);
 c002d3a:	68fb      	ldr	r3, [r7, #12]
 c002d3c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 c002d40:	4a4f      	ldr	r2, [pc, #316]	; (c002e80 <lea_set_key+0x2bf0>)
 c002d42:	4413      	add	r3, r2
 c002d44:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002d48:	68fb      	ldr	r3, [r7, #12]
 c002d4a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[135] = ROL(key->rk[127] + delta[6][25], 11);
 c002d4e:	68fb      	ldr	r3, [r7, #12]
 c002d50:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 c002d54:	4a4b      	ldr	r2, [pc, #300]	; (c002e84 <lea_set_key+0x2bf4>)
 c002d56:	4413      	add	r3, r2
 c002d58:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002d5c:	68fb      	ldr	r3, [r7, #12]
 c002d5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		key->rk[143] = ROL(key->rk[135] + delta[7][28], 17);
 c002d62:	68fb      	ldr	r3, [r7, #12]
 c002d64:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 c002d68:	4a47      	ldr	r2, [pc, #284]	; (c002e88 <lea_set_key+0x2bf8>)
 c002d6a:	4413      	add	r3, r2
 c002d6c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002d70:	68fb      	ldr	r3, [r7, #12]
 c002d72:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		key->rk[151] = ROL(key->rk[143] + delta[1][26],  3);
 c002d76:	68fb      	ldr	r3, [r7, #12]
 c002d78:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 c002d7c:	4a43      	ldr	r2, [pc, #268]	; (c002e8c <lea_set_key+0x2bfc>)
 c002d7e:	4413      	add	r3, r2
 c002d80:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002d84:	68fb      	ldr	r3, [r7, #12]
 c002d86:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		key->rk[159] = ROL(key->rk[151] + delta[2][29], 11);
 c002d8a:	68fb      	ldr	r3, [r7, #12]
 c002d8c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 c002d90:	4a3f      	ldr	r2, [pc, #252]	; (c002e90 <lea_set_key+0x2c00>)
 c002d92:	4413      	add	r3, r2
 c002d94:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002d98:	68fb      	ldr	r3, [r7, #12]
 c002d9a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		key->rk[167] = ROL(key->rk[159] + delta[3][ 0], 17);
 c002d9e:	68fb      	ldr	r3, [r7, #12]
 c002da0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 c002da4:	4a3b      	ldr	r2, [pc, #236]	; (c002e94 <lea_set_key+0x2c04>)
 c002da6:	4413      	add	r3, r2
 c002da8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002dac:	68fb      	ldr	r3, [r7, #12]
 c002dae:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		key->rk[175] = ROL(key->rk[167] + delta[5][30],  3);
 c002db2:	68fb      	ldr	r3, [r7, #12]
 c002db4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 c002db8:	4a37      	ldr	r2, [pc, #220]	; (c002e98 <lea_set_key+0x2c08>)
 c002dba:	4413      	add	r3, r2
 c002dbc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c002dc0:	68fb      	ldr	r3, [r7, #12]
 c002dc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		key->rk[183] = ROL(key->rk[175] + delta[6][ 1], 11);
 c002dc6:	68fb      	ldr	r3, [r7, #12]
 c002dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 c002dcc:	4a33      	ldr	r2, [pc, #204]	; (c002e9c <lea_set_key+0x2c0c>)
 c002dce:	4413      	add	r3, r2
 c002dd0:	ea4f 5273 	mov.w	r2, r3, ror #21
 c002dd4:	68fb      	ldr	r3, [r7, #12]
 c002dd6:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
		key->rk[191] = ROL(key->rk[183] + delta[7][ 4], 17);
 c002dda:	68fb      	ldr	r3, [r7, #12]
 c002ddc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 c002de0:	4a2f      	ldr	r2, [pc, #188]	; (c002ea0 <lea_set_key+0x2c10>)
 c002de2:	4413      	add	r3, r2
 c002de4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 c002de8:	68fb      	ldr	r3, [r7, #12]
 c002dea:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
		break;
 c002dee:	bf00      	nop
	}

	key->round = (mk_len >> 1) + 16;
 c002df0:	687b      	ldr	r3, [r7, #4]
 c002df2:	085b      	lsrs	r3, r3, #1
 c002df4:	f103 0210 	add.w	r2, r3, #16
 c002df8:	68fb      	ldr	r3, [r7, #12]
 c002dfa:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 c002dfe:	e004      	b.n	c002e0a <lea_set_key+0x2b7a>
		return;
 c002e00:	bf00      	nop
 c002e02:	e002      	b.n	c002e0a <lea_set_key+0x2b7a>
		return;
 c002e04:	bf00      	nop
 c002e06:	e000      	b.n	c002e0a <lea_set_key+0x2b7a>
			return;
 c002e08:	bf00      	nop
}
 c002e0a:	371c      	adds	r7, #28
 c002e0c:	46bd      	mov	sp, r7
 c002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e12:	4770      	bx	lr
 c002e14:	d60488c4 	.word	0xd60488c4
 c002e18:	c8a79e27 	.word	0xc8a79e27
 c002e1c:	763c6f98 	.word	0x763c6f98
 c002e20:	4158f0bb 	.word	0x4158f0bb
 c002e24:	2ae04ef2 	.word	0x2ae04ef2
 c002e28:	bf2e204a 	.word	0xbf2e204a
 c002e2c:	0488c4d6 	.word	0x0488c4d6
 c002e30:	a79e27c8 	.word	0xa79e27c8
 c002e34:	3c6f9876 	.word	0x3c6f9876
 c002e38:	58f0bb41 	.word	0x58f0bb41
 c002e3c:	e04ef22a 	.word	0xe04ef22a
 c002e40:	2e204abf 	.word	0x2e204abf
 c002e44:	1189ac09 	.word	0x1189ac09
 c002e48:	3c4f914f 	.word	0x3c4f914f
 c002e4c:	df30ec78 	.word	0xdf30ec78
 c002e50:	e17682b1 	.word	0xe17682b1
 c002e54:	9de455c0 	.word	0x9de455c0
 c002e58:	40957e5c 	.word	0x40957e5c
 c002e5c:	89ac0911 	.word	0x89ac0911
 c002e60:	4f914f3c 	.word	0x4f914f3c
 c002e64:	30ec78df 	.word	0x30ec78df
 c002e68:	7682b1e1 	.word	0x7682b1e1
 c002e6c:	e455c09d 	.word	0xe455c09d
 c002e70:	957e5c40 	.word	0x957e5c40
 c002e74:	ac091189 	.word	0xac091189
 c002e78:	914f3c4f 	.word	0x914f3c4f
 c002e7c:	ec78df30 	.word	0xec78df30
 c002e80:	82b1e176 	.word	0x82b1e176
 c002e84:	55c09de4 	.word	0x55c09de4
 c002e88:	7e5c4095 	.word	0x7e5c4095
 c002e8c:	091189ac 	.word	0x091189ac
 c002e90:	4f3c4f91 	.word	0x4f3c4f91
 c002e94:	78df30ec 	.word	0x78df30ec
 c002e98:	b1e17682 	.word	0xb1e17682
 c002e9c:	c09de455 	.word	0xc09de455
 c002ea0:	5c40957e 	.word	0x5c40957e

0c002ea4 <lea_encrypt>:

void lea_encrypt(unsigned char *ct, const unsigned char *pt, const LEA_KEY *key)
{
 c002ea4:	b480      	push	{r7}
 c002ea6:	b08b      	sub	sp, #44	; 0x2c
 c002ea8:	af00      	add	r7, sp, #0
 c002eaa:	60f8      	str	r0, [r7, #12]
 c002eac:	60b9      	str	r1, [r7, #8]
 c002eae:	607a      	str	r2, [r7, #4]
	unsigned int X0,X1,X2,X3;
	
	const unsigned int * _pt = (const unsigned int *)pt;
 c002eb0:	68bb      	ldr	r3, [r7, #8]
 c002eb2:	617b      	str	r3, [r7, #20]
	unsigned int * _ct  = (unsigned int*)ct;
 c002eb4:	68fb      	ldr	r3, [r7, #12]
 c002eb6:	613b      	str	r3, [r7, #16]
	
	X0 = loadU32(_pt[0]);
 c002eb8:	697b      	ldr	r3, [r7, #20]
 c002eba:	681b      	ldr	r3, [r3, #0]
 c002ebc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = loadU32(_pt[1]);
 c002ebe:	697b      	ldr	r3, [r7, #20]
 c002ec0:	3304      	adds	r3, #4
 c002ec2:	681b      	ldr	r3, [r3, #0]
 c002ec4:	623b      	str	r3, [r7, #32]
	X2 = loadU32(_pt[2]);
 c002ec6:	697b      	ldr	r3, [r7, #20]
 c002ec8:	3308      	adds	r3, #8
 c002eca:	681b      	ldr	r3, [r3, #0]
 c002ecc:	61fb      	str	r3, [r7, #28]
	X3 = loadU32(_pt[3]);
 c002ece:	697b      	ldr	r3, [r7, #20]
 c002ed0:	330c      	adds	r3, #12
 c002ed2:	681b      	ldr	r3, [r3, #0]
 c002ed4:	61bb      	str	r3, [r7, #24]

	X3 = ROR((X2 ^ key->rk[  4]) + (X3 ^ key->rk[  5]), 3);
 c002ed6:	687b      	ldr	r3, [r7, #4]
 c002ed8:	691a      	ldr	r2, [r3, #16]
 c002eda:	69fb      	ldr	r3, [r7, #28]
 c002edc:	405a      	eors	r2, r3
 c002ede:	687b      	ldr	r3, [r7, #4]
 c002ee0:	6959      	ldr	r1, [r3, #20]
 c002ee2:	69bb      	ldr	r3, [r7, #24]
 c002ee4:	404b      	eors	r3, r1
 c002ee6:	4413      	add	r3, r2
 c002ee8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c002eec:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[  2]) + (X2 ^ key->rk[  3]), 5);
 c002eee:	687b      	ldr	r3, [r7, #4]
 c002ef0:	689a      	ldr	r2, [r3, #8]
 c002ef2:	6a3b      	ldr	r3, [r7, #32]
 c002ef4:	405a      	eors	r2, r3
 c002ef6:	687b      	ldr	r3, [r7, #4]
 c002ef8:	68d9      	ldr	r1, [r3, #12]
 c002efa:	69fb      	ldr	r3, [r7, #28]
 c002efc:	404b      	eors	r3, r1
 c002efe:	4413      	add	r3, r2
 c002f00:	ea4f 1373 	mov.w	r3, r3, ror #5
 c002f04:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[  0]) + (X1 ^ key->rk[  1]), 9);
 c002f06:	687b      	ldr	r3, [r7, #4]
 c002f08:	681a      	ldr	r2, [r3, #0]
 c002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002f0c:	405a      	eors	r2, r3
 c002f0e:	687b      	ldr	r3, [r7, #4]
 c002f10:	6859      	ldr	r1, [r3, #4]
 c002f12:	6a3b      	ldr	r3, [r7, #32]
 c002f14:	404b      	eors	r3, r1
 c002f16:	4413      	add	r3, r2
 c002f18:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c002f1c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 10]) + (X0 ^ key->rk[ 11]), 3);
 c002f1e:	687b      	ldr	r3, [r7, #4]
 c002f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c002f22:	69bb      	ldr	r3, [r7, #24]
 c002f24:	405a      	eors	r2, r3
 c002f26:	687b      	ldr	r3, [r7, #4]
 c002f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 c002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002f2c:	404b      	eors	r3, r1
 c002f2e:	4413      	add	r3, r2
 c002f30:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c002f34:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[  8]) + (X3 ^ key->rk[  9]), 5);
 c002f36:	687b      	ldr	r3, [r7, #4]
 c002f38:	6a1a      	ldr	r2, [r3, #32]
 c002f3a:	69fb      	ldr	r3, [r7, #28]
 c002f3c:	405a      	eors	r2, r3
 c002f3e:	687b      	ldr	r3, [r7, #4]
 c002f40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 c002f42:	69bb      	ldr	r3, [r7, #24]
 c002f44:	404b      	eors	r3, r1
 c002f46:	4413      	add	r3, r2
 c002f48:	ea4f 1373 	mov.w	r3, r3, ror #5
 c002f4c:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[  6]) + (X2 ^ key->rk[  7]), 9);
 c002f4e:	687b      	ldr	r3, [r7, #4]
 c002f50:	699a      	ldr	r2, [r3, #24]
 c002f52:	6a3b      	ldr	r3, [r7, #32]
 c002f54:	405a      	eors	r2, r3
 c002f56:	687b      	ldr	r3, [r7, #4]
 c002f58:	69d9      	ldr	r1, [r3, #28]
 c002f5a:	69fb      	ldr	r3, [r7, #28]
 c002f5c:	404b      	eors	r3, r1
 c002f5e:	4413      	add	r3, r2
 c002f60:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c002f64:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 16]) + (X1 ^ key->rk[ 17]), 3);
 c002f66:	687b      	ldr	r3, [r7, #4]
 c002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002f6c:	405a      	eors	r2, r3
 c002f6e:	687b      	ldr	r3, [r7, #4]
 c002f70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 c002f72:	6a3b      	ldr	r3, [r7, #32]
 c002f74:	404b      	eors	r3, r1
 c002f76:	4413      	add	r3, r2
 c002f78:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c002f7c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 14]) + (X0 ^ key->rk[ 15]), 5);
 c002f7e:	687b      	ldr	r3, [r7, #4]
 c002f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c002f82:	69bb      	ldr	r3, [r7, #24]
 c002f84:	405a      	eors	r2, r3
 c002f86:	687b      	ldr	r3, [r7, #4]
 c002f88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 c002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002f8c:	404b      	eors	r3, r1
 c002f8e:	4413      	add	r3, r2
 c002f90:	ea4f 1373 	mov.w	r3, r3, ror #5
 c002f94:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 12]) + (X3 ^ key->rk[ 13]), 9);
 c002f96:	687b      	ldr	r3, [r7, #4]
 c002f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c002f9a:	69fb      	ldr	r3, [r7, #28]
 c002f9c:	405a      	eors	r2, r3
 c002f9e:	687b      	ldr	r3, [r7, #4]
 c002fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 c002fa2:	69bb      	ldr	r3, [r7, #24]
 c002fa4:	404b      	eors	r3, r1
 c002fa6:	4413      	add	r3, r2
 c002fa8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c002fac:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 22]) + (X2 ^ key->rk[ 23]), 3);
 c002fae:	687b      	ldr	r3, [r7, #4]
 c002fb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c002fb2:	6a3b      	ldr	r3, [r7, #32]
 c002fb4:	405a      	eors	r2, r3
 c002fb6:	687b      	ldr	r3, [r7, #4]
 c002fb8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 c002fba:	69fb      	ldr	r3, [r7, #28]
 c002fbc:	404b      	eors	r3, r1
 c002fbe:	4413      	add	r3, r2
 c002fc0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c002fc4:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 20]) + (X1 ^ key->rk[ 21]), 5);
 c002fc6:	687b      	ldr	r3, [r7, #4]
 c002fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 c002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002fcc:	405a      	eors	r2, r3
 c002fce:	687b      	ldr	r3, [r7, #4]
 c002fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 c002fd2:	6a3b      	ldr	r3, [r7, #32]
 c002fd4:	404b      	eors	r3, r1
 c002fd6:	4413      	add	r3, r2
 c002fd8:	ea4f 1373 	mov.w	r3, r3, ror #5
 c002fdc:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 18]) + (X0 ^ key->rk[ 19]), 9);
 c002fde:	687b      	ldr	r3, [r7, #4]
 c002fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c002fe2:	69bb      	ldr	r3, [r7, #24]
 c002fe4:	405a      	eors	r2, r3
 c002fe6:	687b      	ldr	r3, [r7, #4]
 c002fe8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 c002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c002fec:	404b      	eors	r3, r1
 c002fee:	4413      	add	r3, r2
 c002ff0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c002ff4:	627b      	str	r3, [r7, #36]	; 0x24
	
	X3 = ROR((X2 ^ key->rk[ 28]) + (X3 ^ key->rk[ 29]), 3);
 c002ff6:	687b      	ldr	r3, [r7, #4]
 c002ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 c002ffa:	69fb      	ldr	r3, [r7, #28]
 c002ffc:	405a      	eors	r2, r3
 c002ffe:	687b      	ldr	r3, [r7, #4]
 c003000:	6f59      	ldr	r1, [r3, #116]	; 0x74
 c003002:	69bb      	ldr	r3, [r7, #24]
 c003004:	404b      	eors	r3, r1
 c003006:	4413      	add	r3, r2
 c003008:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00300c:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 26]) + (X2 ^ key->rk[ 27]), 5);
 c00300e:	687b      	ldr	r3, [r7, #4]
 c003010:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 c003012:	6a3b      	ldr	r3, [r7, #32]
 c003014:	405a      	eors	r2, r3
 c003016:	687b      	ldr	r3, [r7, #4]
 c003018:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 c00301a:	69fb      	ldr	r3, [r7, #28]
 c00301c:	404b      	eors	r3, r1
 c00301e:	4413      	add	r3, r2
 c003020:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003024:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 24]) + (X1 ^ key->rk[ 25]), 9);
 c003026:	687b      	ldr	r3, [r7, #4]
 c003028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c00302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00302c:	405a      	eors	r2, r3
 c00302e:	687b      	ldr	r3, [r7, #4]
 c003030:	6e59      	ldr	r1, [r3, #100]	; 0x64
 c003032:	6a3b      	ldr	r3, [r7, #32]
 c003034:	404b      	eors	r3, r1
 c003036:	4413      	add	r3, r2
 c003038:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00303c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 34]) + (X0 ^ key->rk[ 35]), 3);
 c00303e:	687b      	ldr	r3, [r7, #4]
 c003040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 c003044:	69bb      	ldr	r3, [r7, #24]
 c003046:	405a      	eors	r2, r3
 c003048:	687b      	ldr	r3, [r7, #4]
 c00304a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 c00304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003050:	404b      	eors	r3, r1
 c003052:	4413      	add	r3, r2
 c003054:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003058:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 32]) + (X3 ^ key->rk[ 33]), 5);
 c00305a:	687b      	ldr	r3, [r7, #4]
 c00305c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 c003060:	69fb      	ldr	r3, [r7, #28]
 c003062:	405a      	eors	r2, r3
 c003064:	687b      	ldr	r3, [r7, #4]
 c003066:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 c00306a:	69bb      	ldr	r3, [r7, #24]
 c00306c:	404b      	eors	r3, r1
 c00306e:	4413      	add	r3, r2
 c003070:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003074:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 30]) + (X2 ^ key->rk[ 31]), 9);
 c003076:	687b      	ldr	r3, [r7, #4]
 c003078:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c00307a:	6a3b      	ldr	r3, [r7, #32]
 c00307c:	405a      	eors	r2, r3
 c00307e:	687b      	ldr	r3, [r7, #4]
 c003080:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 c003082:	69fb      	ldr	r3, [r7, #28]
 c003084:	404b      	eors	r3, r1
 c003086:	4413      	add	r3, r2
 c003088:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00308c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 40]) + (X1 ^ key->rk[ 41]), 3);
 c00308e:	687b      	ldr	r3, [r7, #4]
 c003090:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 c003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003096:	405a      	eors	r2, r3
 c003098:	687b      	ldr	r3, [r7, #4]
 c00309a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 c00309e:	6a3b      	ldr	r3, [r7, #32]
 c0030a0:	404b      	eors	r3, r1
 c0030a2:	4413      	add	r3, r2
 c0030a4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0030a8:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 38]) + (X0 ^ key->rk[ 39]), 5);
 c0030aa:	687b      	ldr	r3, [r7, #4]
 c0030ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 c0030b0:	69bb      	ldr	r3, [r7, #24]
 c0030b2:	405a      	eors	r2, r3
 c0030b4:	687b      	ldr	r3, [r7, #4]
 c0030b6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 c0030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0030bc:	404b      	eors	r3, r1
 c0030be:	4413      	add	r3, r2
 c0030c0:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0030c4:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 36]) + (X3 ^ key->rk[ 37]), 9);
 c0030c6:	687b      	ldr	r3, [r7, #4]
 c0030c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 c0030cc:	69fb      	ldr	r3, [r7, #28]
 c0030ce:	405a      	eors	r2, r3
 c0030d0:	687b      	ldr	r3, [r7, #4]
 c0030d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 c0030d6:	69bb      	ldr	r3, [r7, #24]
 c0030d8:	404b      	eors	r3, r1
 c0030da:	4413      	add	r3, r2
 c0030dc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0030e0:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 46]) + (X2 ^ key->rk[ 47]), 3);
 c0030e2:	687b      	ldr	r3, [r7, #4]
 c0030e4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 c0030e8:	6a3b      	ldr	r3, [r7, #32]
 c0030ea:	405a      	eors	r2, r3
 c0030ec:	687b      	ldr	r3, [r7, #4]
 c0030ee:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 c0030f2:	69fb      	ldr	r3, [r7, #28]
 c0030f4:	404b      	eors	r3, r1
 c0030f6:	4413      	add	r3, r2
 c0030f8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0030fc:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 44]) + (X1 ^ key->rk[ 45]), 5);
 c0030fe:	687b      	ldr	r3, [r7, #4]
 c003100:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 c003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003106:	405a      	eors	r2, r3
 c003108:	687b      	ldr	r3, [r7, #4]
 c00310a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 c00310e:	6a3b      	ldr	r3, [r7, #32]
 c003110:	404b      	eors	r3, r1
 c003112:	4413      	add	r3, r2
 c003114:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003118:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 42]) + (X0 ^ key->rk[ 43]), 9);
 c00311a:	687b      	ldr	r3, [r7, #4]
 c00311c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 c003120:	69bb      	ldr	r3, [r7, #24]
 c003122:	405a      	eors	r2, r3
 c003124:	687b      	ldr	r3, [r7, #4]
 c003126:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 c00312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00312c:	404b      	eors	r3, r1
 c00312e:	4413      	add	r3, r2
 c003130:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003134:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[ 52]) + (X3 ^ key->rk[ 53]), 3);
 c003136:	687b      	ldr	r3, [r7, #4]
 c003138:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 c00313c:	69fb      	ldr	r3, [r7, #28]
 c00313e:	405a      	eors	r2, r3
 c003140:	687b      	ldr	r3, [r7, #4]
 c003142:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
 c003146:	69bb      	ldr	r3, [r7, #24]
 c003148:	404b      	eors	r3, r1
 c00314a:	4413      	add	r3, r2
 c00314c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003150:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 50]) + (X2 ^ key->rk[ 51]), 5);
 c003152:	687b      	ldr	r3, [r7, #4]
 c003154:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 c003158:	6a3b      	ldr	r3, [r7, #32]
 c00315a:	405a      	eors	r2, r3
 c00315c:	687b      	ldr	r3, [r7, #4]
 c00315e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 c003162:	69fb      	ldr	r3, [r7, #28]
 c003164:	404b      	eors	r3, r1
 c003166:	4413      	add	r3, r2
 c003168:	ea4f 1373 	mov.w	r3, r3, ror #5
 c00316c:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 48]) + (X1 ^ key->rk[ 49]), 9);
 c00316e:	687b      	ldr	r3, [r7, #4]
 c003170:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 c003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003176:	405a      	eors	r2, r3
 c003178:	687b      	ldr	r3, [r7, #4]
 c00317a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 c00317e:	6a3b      	ldr	r3, [r7, #32]
 c003180:	404b      	eors	r3, r1
 c003182:	4413      	add	r3, r2
 c003184:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003188:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 58]) + (X0 ^ key->rk[ 59]), 3);
 c00318a:	687b      	ldr	r3, [r7, #4]
 c00318c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 c003190:	69bb      	ldr	r3, [r7, #24]
 c003192:	405a      	eors	r2, r3
 c003194:	687b      	ldr	r3, [r7, #4]
 c003196:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
 c00319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00319c:	404b      	eors	r3, r1
 c00319e:	4413      	add	r3, r2
 c0031a0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0031a4:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 56]) + (X3 ^ key->rk[ 57]), 5);
 c0031a6:	687b      	ldr	r3, [r7, #4]
 c0031a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 c0031ac:	69fb      	ldr	r3, [r7, #28]
 c0031ae:	405a      	eors	r2, r3
 c0031b0:	687b      	ldr	r3, [r7, #4]
 c0031b2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 c0031b6:	69bb      	ldr	r3, [r7, #24]
 c0031b8:	404b      	eors	r3, r1
 c0031ba:	4413      	add	r3, r2
 c0031bc:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0031c0:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 54]) + (X2 ^ key->rk[ 55]), 9);
 c0031c2:	687b      	ldr	r3, [r7, #4]
 c0031c4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 c0031c8:	6a3b      	ldr	r3, [r7, #32]
 c0031ca:	405a      	eors	r2, r3
 c0031cc:	687b      	ldr	r3, [r7, #4]
 c0031ce:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 c0031d2:	69fb      	ldr	r3, [r7, #28]
 c0031d4:	404b      	eors	r3, r1
 c0031d6:	4413      	add	r3, r2
 c0031d8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0031dc:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 64]) + (X1 ^ key->rk[ 65]), 3);
 c0031de:	687b      	ldr	r3, [r7, #4]
 c0031e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 c0031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0031e6:	405a      	eors	r2, r3
 c0031e8:	687b      	ldr	r3, [r7, #4]
 c0031ea:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 c0031ee:	6a3b      	ldr	r3, [r7, #32]
 c0031f0:	404b      	eors	r3, r1
 c0031f2:	4413      	add	r3, r2
 c0031f4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0031f8:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 62]) + (X0 ^ key->rk[ 63]), 5);
 c0031fa:	687b      	ldr	r3, [r7, #4]
 c0031fc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 c003200:	69bb      	ldr	r3, [r7, #24]
 c003202:	405a      	eors	r2, r3
 c003204:	687b      	ldr	r3, [r7, #4]
 c003206:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 c00320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00320c:	404b      	eors	r3, r1
 c00320e:	4413      	add	r3, r2
 c003210:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003214:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 60]) + (X3 ^ key->rk[ 61]), 9);
 c003216:	687b      	ldr	r3, [r7, #4]
 c003218:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 c00321c:	69fb      	ldr	r3, [r7, #28]
 c00321e:	405a      	eors	r2, r3
 c003220:	687b      	ldr	r3, [r7, #4]
 c003222:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 c003226:	69bb      	ldr	r3, [r7, #24]
 c003228:	404b      	eors	r3, r1
 c00322a:	4413      	add	r3, r2
 c00322c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003230:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 70]) + (X2 ^ key->rk[ 71]), 3);
 c003232:	687b      	ldr	r3, [r7, #4]
 c003234:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 c003238:	6a3b      	ldr	r3, [r7, #32]
 c00323a:	405a      	eors	r2, r3
 c00323c:	687b      	ldr	r3, [r7, #4]
 c00323e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 c003242:	69fb      	ldr	r3, [r7, #28]
 c003244:	404b      	eors	r3, r1
 c003246:	4413      	add	r3, r2
 c003248:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00324c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 68]) + (X1 ^ key->rk[ 69]), 5);
 c00324e:	687b      	ldr	r3, [r7, #4]
 c003250:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 c003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003256:	405a      	eors	r2, r3
 c003258:	687b      	ldr	r3, [r7, #4]
 c00325a:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 c00325e:	6a3b      	ldr	r3, [r7, #32]
 c003260:	404b      	eors	r3, r1
 c003262:	4413      	add	r3, r2
 c003264:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003268:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 66]) + (X0 ^ key->rk[ 67]), 9);
 c00326a:	687b      	ldr	r3, [r7, #4]
 c00326c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 c003270:	69bb      	ldr	r3, [r7, #24]
 c003272:	405a      	eors	r2, r3
 c003274:	687b      	ldr	r3, [r7, #4]
 c003276:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 c00327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00327c:	404b      	eors	r3, r1
 c00327e:	4413      	add	r3, r2
 c003280:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003284:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[ 76]) + (X3 ^ key->rk[ 77]), 3);
 c003286:	687b      	ldr	r3, [r7, #4]
 c003288:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 c00328c:	69fb      	ldr	r3, [r7, #28]
 c00328e:	405a      	eors	r2, r3
 c003290:	687b      	ldr	r3, [r7, #4]
 c003292:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 c003296:	69bb      	ldr	r3, [r7, #24]
 c003298:	404b      	eors	r3, r1
 c00329a:	4413      	add	r3, r2
 c00329c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0032a0:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 74]) + (X2 ^ key->rk[ 75]), 5);
 c0032a2:	687b      	ldr	r3, [r7, #4]
 c0032a4:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 c0032a8:	6a3b      	ldr	r3, [r7, #32]
 c0032aa:	405a      	eors	r2, r3
 c0032ac:	687b      	ldr	r3, [r7, #4]
 c0032ae:	f8d3 112c 	ldr.w	r1, [r3, #300]	; 0x12c
 c0032b2:	69fb      	ldr	r3, [r7, #28]
 c0032b4:	404b      	eors	r3, r1
 c0032b6:	4413      	add	r3, r2
 c0032b8:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0032bc:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 72]) + (X1 ^ key->rk[ 73]), 9);
 c0032be:	687b      	ldr	r3, [r7, #4]
 c0032c0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 c0032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0032c6:	405a      	eors	r2, r3
 c0032c8:	687b      	ldr	r3, [r7, #4]
 c0032ca:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 c0032ce:	6a3b      	ldr	r3, [r7, #32]
 c0032d0:	404b      	eors	r3, r1
 c0032d2:	4413      	add	r3, r2
 c0032d4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0032d8:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 82]) + (X0 ^ key->rk[ 83]), 3);
 c0032da:	687b      	ldr	r3, [r7, #4]
 c0032dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 c0032e0:	69bb      	ldr	r3, [r7, #24]
 c0032e2:	405a      	eors	r2, r3
 c0032e4:	687b      	ldr	r3, [r7, #4]
 c0032e6:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 c0032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0032ec:	404b      	eors	r3, r1
 c0032ee:	4413      	add	r3, r2
 c0032f0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0032f4:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 80]) + (X3 ^ key->rk[ 81]), 5);
 c0032f6:	687b      	ldr	r3, [r7, #4]
 c0032f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 c0032fc:	69fb      	ldr	r3, [r7, #28]
 c0032fe:	405a      	eors	r2, r3
 c003300:	687b      	ldr	r3, [r7, #4]
 c003302:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
 c003306:	69bb      	ldr	r3, [r7, #24]
 c003308:	404b      	eors	r3, r1
 c00330a:	4413      	add	r3, r2
 c00330c:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003310:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 78]) + (X2 ^ key->rk[ 79]), 9);
 c003312:	687b      	ldr	r3, [r7, #4]
 c003314:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 c003318:	6a3b      	ldr	r3, [r7, #32]
 c00331a:	405a      	eors	r2, r3
 c00331c:	687b      	ldr	r3, [r7, #4]
 c00331e:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
 c003322:	69fb      	ldr	r3, [r7, #28]
 c003324:	404b      	eors	r3, r1
 c003326:	4413      	add	r3, r2
 c003328:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00332c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 88]) + (X1 ^ key->rk[ 89]), 3);
 c00332e:	687b      	ldr	r3, [r7, #4]
 c003330:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 c003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003336:	405a      	eors	r2, r3
 c003338:	687b      	ldr	r3, [r7, #4]
 c00333a:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 c00333e:	6a3b      	ldr	r3, [r7, #32]
 c003340:	404b      	eors	r3, r1
 c003342:	4413      	add	r3, r2
 c003344:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003348:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 86]) + (X0 ^ key->rk[ 87]), 5);
 c00334a:	687b      	ldr	r3, [r7, #4]
 c00334c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 c003350:	69bb      	ldr	r3, [r7, #24]
 c003352:	405a      	eors	r2, r3
 c003354:	687b      	ldr	r3, [r7, #4]
 c003356:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
 c00335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00335c:	404b      	eors	r3, r1
 c00335e:	4413      	add	r3, r2
 c003360:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003364:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 84]) + (X3 ^ key->rk[ 85]), 9);
 c003366:	687b      	ldr	r3, [r7, #4]
 c003368:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 c00336c:	69fb      	ldr	r3, [r7, #28]
 c00336e:	405a      	eors	r2, r3
 c003370:	687b      	ldr	r3, [r7, #4]
 c003372:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
 c003376:	69bb      	ldr	r3, [r7, #24]
 c003378:	404b      	eors	r3, r1
 c00337a:	4413      	add	r3, r2
 c00337c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003380:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 94]) + (X2 ^ key->rk[ 95]), 3);
 c003382:	687b      	ldr	r3, [r7, #4]
 c003384:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 c003388:	6a3b      	ldr	r3, [r7, #32]
 c00338a:	405a      	eors	r2, r3
 c00338c:	687b      	ldr	r3, [r7, #4]
 c00338e:	f8d3 117c 	ldr.w	r1, [r3, #380]	; 0x17c
 c003392:	69fb      	ldr	r3, [r7, #28]
 c003394:	404b      	eors	r3, r1
 c003396:	4413      	add	r3, r2
 c003398:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00339c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 92]) + (X1 ^ key->rk[ 93]), 5);
 c00339e:	687b      	ldr	r3, [r7, #4]
 c0033a0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 c0033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0033a6:	405a      	eors	r2, r3
 c0033a8:	687b      	ldr	r3, [r7, #4]
 c0033aa:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
 c0033ae:	6a3b      	ldr	r3, [r7, #32]
 c0033b0:	404b      	eors	r3, r1
 c0033b2:	4413      	add	r3, r2
 c0033b4:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0033b8:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 90]) + (X0 ^ key->rk[ 91]), 9);
 c0033ba:	687b      	ldr	r3, [r7, #4]
 c0033bc:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 c0033c0:	69bb      	ldr	r3, [r7, #24]
 c0033c2:	405a      	eors	r2, r3
 c0033c4:	687b      	ldr	r3, [r7, #4]
 c0033c6:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 c0033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0033cc:	404b      	eors	r3, r1
 c0033ce:	4413      	add	r3, r2
 c0033d0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0033d4:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[100]) + (X3 ^ key->rk[101]), 3);
 c0033d6:	687b      	ldr	r3, [r7, #4]
 c0033d8:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 c0033dc:	69fb      	ldr	r3, [r7, #28]
 c0033de:	405a      	eors	r2, r3
 c0033e0:	687b      	ldr	r3, [r7, #4]
 c0033e2:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 c0033e6:	69bb      	ldr	r3, [r7, #24]
 c0033e8:	404b      	eors	r3, r1
 c0033ea:	4413      	add	r3, r2
 c0033ec:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0033f0:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 98]) + (X2 ^ key->rk[ 99]), 5);
 c0033f2:	687b      	ldr	r3, [r7, #4]
 c0033f4:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 c0033f8:	6a3b      	ldr	r3, [r7, #32]
 c0033fa:	405a      	eors	r2, r3
 c0033fc:	687b      	ldr	r3, [r7, #4]
 c0033fe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 c003402:	69fb      	ldr	r3, [r7, #28]
 c003404:	404b      	eors	r3, r1
 c003406:	4413      	add	r3, r2
 c003408:	ea4f 1373 	mov.w	r3, r3, ror #5
 c00340c:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 96]) + (X1 ^ key->rk[ 97]), 9);
 c00340e:	687b      	ldr	r3, [r7, #4]
 c003410:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 c003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003416:	405a      	eors	r2, r3
 c003418:	687b      	ldr	r3, [r7, #4]
 c00341a:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 c00341e:	6a3b      	ldr	r3, [r7, #32]
 c003420:	404b      	eors	r3, r1
 c003422:	4413      	add	r3, r2
 c003424:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003428:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[106]) + (X0 ^ key->rk[107]), 3);
 c00342a:	687b      	ldr	r3, [r7, #4]
 c00342c:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 c003430:	69bb      	ldr	r3, [r7, #24]
 c003432:	405a      	eors	r2, r3
 c003434:	687b      	ldr	r3, [r7, #4]
 c003436:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 c00343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00343c:	404b      	eors	r3, r1
 c00343e:	4413      	add	r3, r2
 c003440:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003444:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[104]) + (X3 ^ key->rk[105]), 5);
 c003446:	687b      	ldr	r3, [r7, #4]
 c003448:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 c00344c:	69fb      	ldr	r3, [r7, #28]
 c00344e:	405a      	eors	r2, r3
 c003450:	687b      	ldr	r3, [r7, #4]
 c003452:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 c003456:	69bb      	ldr	r3, [r7, #24]
 c003458:	404b      	eors	r3, r1
 c00345a:	4413      	add	r3, r2
 c00345c:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003460:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[102]) + (X2 ^ key->rk[103]), 9);
 c003462:	687b      	ldr	r3, [r7, #4]
 c003464:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 c003468:	6a3b      	ldr	r3, [r7, #32]
 c00346a:	405a      	eors	r2, r3
 c00346c:	687b      	ldr	r3, [r7, #4]
 c00346e:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 c003472:	69fb      	ldr	r3, [r7, #28]
 c003474:	404b      	eors	r3, r1
 c003476:	4413      	add	r3, r2
 c003478:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00347c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[112]) + (X1 ^ key->rk[113]), 3);
 c00347e:	687b      	ldr	r3, [r7, #4]
 c003480:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 c003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003486:	405a      	eors	r2, r3
 c003488:	687b      	ldr	r3, [r7, #4]
 c00348a:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 c00348e:	6a3b      	ldr	r3, [r7, #32]
 c003490:	404b      	eors	r3, r1
 c003492:	4413      	add	r3, r2
 c003494:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003498:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[110]) + (X0 ^ key->rk[111]), 5);
 c00349a:	687b      	ldr	r3, [r7, #4]
 c00349c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 c0034a0:	69bb      	ldr	r3, [r7, #24]
 c0034a2:	405a      	eors	r2, r3
 c0034a4:	687b      	ldr	r3, [r7, #4]
 c0034a6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 c0034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0034ac:	404b      	eors	r3, r1
 c0034ae:	4413      	add	r3, r2
 c0034b0:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0034b4:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[108]) + (X3 ^ key->rk[109]), 9);
 c0034b6:	687b      	ldr	r3, [r7, #4]
 c0034b8:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 c0034bc:	69fb      	ldr	r3, [r7, #28]
 c0034be:	405a      	eors	r2, r3
 c0034c0:	687b      	ldr	r3, [r7, #4]
 c0034c2:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
 c0034c6:	69bb      	ldr	r3, [r7, #24]
 c0034c8:	404b      	eors	r3, r1
 c0034ca:	4413      	add	r3, r2
 c0034cc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0034d0:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[118]) + (X2 ^ key->rk[119]), 3);
 c0034d2:	687b      	ldr	r3, [r7, #4]
 c0034d4:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 c0034d8:	6a3b      	ldr	r3, [r7, #32]
 c0034da:	405a      	eors	r2, r3
 c0034dc:	687b      	ldr	r3, [r7, #4]
 c0034de:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 c0034e2:	69fb      	ldr	r3, [r7, #28]
 c0034e4:	404b      	eors	r3, r1
 c0034e6:	4413      	add	r3, r2
 c0034e8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0034ec:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[116]) + (X1 ^ key->rk[117]), 5);
 c0034ee:	687b      	ldr	r3, [r7, #4]
 c0034f0:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 c0034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0034f6:	405a      	eors	r2, r3
 c0034f8:	687b      	ldr	r3, [r7, #4]
 c0034fa:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 c0034fe:	6a3b      	ldr	r3, [r7, #32]
 c003500:	404b      	eors	r3, r1
 c003502:	4413      	add	r3, r2
 c003504:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003508:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[114]) + (X0 ^ key->rk[115]), 9);
 c00350a:	687b      	ldr	r3, [r7, #4]
 c00350c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 c003510:	69bb      	ldr	r3, [r7, #24]
 c003512:	405a      	eors	r2, r3
 c003514:	687b      	ldr	r3, [r7, #4]
 c003516:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 c00351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00351c:	404b      	eors	r3, r1
 c00351e:	4413      	add	r3, r2
 c003520:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003524:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[124]) + (X3 ^ key->rk[125]), 3);
 c003526:	687b      	ldr	r3, [r7, #4]
 c003528:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 c00352c:	69fb      	ldr	r3, [r7, #28]
 c00352e:	405a      	eors	r2, r3
 c003530:	687b      	ldr	r3, [r7, #4]
 c003532:	f8d3 11f4 	ldr.w	r1, [r3, #500]	; 0x1f4
 c003536:	69bb      	ldr	r3, [r7, #24]
 c003538:	404b      	eors	r3, r1
 c00353a:	4413      	add	r3, r2
 c00353c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003540:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[122]) + (X2 ^ key->rk[123]), 5);
 c003542:	687b      	ldr	r3, [r7, #4]
 c003544:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 c003548:	6a3b      	ldr	r3, [r7, #32]
 c00354a:	405a      	eors	r2, r3
 c00354c:	687b      	ldr	r3, [r7, #4]
 c00354e:	f8d3 11ec 	ldr.w	r1, [r3, #492]	; 0x1ec
 c003552:	69fb      	ldr	r3, [r7, #28]
 c003554:	404b      	eors	r3, r1
 c003556:	4413      	add	r3, r2
 c003558:	ea4f 1373 	mov.w	r3, r3, ror #5
 c00355c:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[120]) + (X1 ^ key->rk[121]), 9);
 c00355e:	687b      	ldr	r3, [r7, #4]
 c003560:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 c003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003566:	405a      	eors	r2, r3
 c003568:	687b      	ldr	r3, [r7, #4]
 c00356a:	f8d3 11e4 	ldr.w	r1, [r3, #484]	; 0x1e4
 c00356e:	6a3b      	ldr	r3, [r7, #32]
 c003570:	404b      	eors	r3, r1
 c003572:	4413      	add	r3, r2
 c003574:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003578:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[130]) + (X0 ^ key->rk[131]), 3);
 c00357a:	687b      	ldr	r3, [r7, #4]
 c00357c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 c003580:	69bb      	ldr	r3, [r7, #24]
 c003582:	405a      	eors	r2, r3
 c003584:	687b      	ldr	r3, [r7, #4]
 c003586:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 c00358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00358c:	404b      	eors	r3, r1
 c00358e:	4413      	add	r3, r2
 c003590:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003594:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[128]) + (X3 ^ key->rk[129]), 5);
 c003596:	687b      	ldr	r3, [r7, #4]
 c003598:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 c00359c:	69fb      	ldr	r3, [r7, #28]
 c00359e:	405a      	eors	r2, r3
 c0035a0:	687b      	ldr	r3, [r7, #4]
 c0035a2:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 c0035a6:	69bb      	ldr	r3, [r7, #24]
 c0035a8:	404b      	eors	r3, r1
 c0035aa:	4413      	add	r3, r2
 c0035ac:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0035b0:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[126]) + (X2 ^ key->rk[127]), 9);
 c0035b2:	687b      	ldr	r3, [r7, #4]
 c0035b4:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 c0035b8:	6a3b      	ldr	r3, [r7, #32]
 c0035ba:	405a      	eors	r2, r3
 c0035bc:	687b      	ldr	r3, [r7, #4]
 c0035be:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 c0035c2:	69fb      	ldr	r3, [r7, #28]
 c0035c4:	404b      	eors	r3, r1
 c0035c6:	4413      	add	r3, r2
 c0035c8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0035cc:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[136]) + (X1 ^ key->rk[137]), 3);
 c0035ce:	687b      	ldr	r3, [r7, #4]
 c0035d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 c0035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0035d6:	405a      	eors	r2, r3
 c0035d8:	687b      	ldr	r3, [r7, #4]
 c0035da:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
 c0035de:	6a3b      	ldr	r3, [r7, #32]
 c0035e0:	404b      	eors	r3, r1
 c0035e2:	4413      	add	r3, r2
 c0035e4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0035e8:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[134]) + (X0 ^ key->rk[135]), 5);
 c0035ea:	687b      	ldr	r3, [r7, #4]
 c0035ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 c0035f0:	69bb      	ldr	r3, [r7, #24]
 c0035f2:	405a      	eors	r2, r3
 c0035f4:	687b      	ldr	r3, [r7, #4]
 c0035f6:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 c0035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0035fc:	404b      	eors	r3, r1
 c0035fe:	4413      	add	r3, r2
 c003600:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003604:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[132]) + (X3 ^ key->rk[133]), 9);
 c003606:	687b      	ldr	r3, [r7, #4]
 c003608:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 c00360c:	69fb      	ldr	r3, [r7, #28]
 c00360e:	405a      	eors	r2, r3
 c003610:	687b      	ldr	r3, [r7, #4]
 c003612:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 c003616:	69bb      	ldr	r3, [r7, #24]
 c003618:	404b      	eors	r3, r1
 c00361a:	4413      	add	r3, r2
 c00361c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003620:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[142]) + (X2 ^ key->rk[143]), 3);
 c003622:	687b      	ldr	r3, [r7, #4]
 c003624:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 c003628:	6a3b      	ldr	r3, [r7, #32]
 c00362a:	405a      	eors	r2, r3
 c00362c:	687b      	ldr	r3, [r7, #4]
 c00362e:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
 c003632:	69fb      	ldr	r3, [r7, #28]
 c003634:	404b      	eors	r3, r1
 c003636:	4413      	add	r3, r2
 c003638:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00363c:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[140]) + (X1 ^ key->rk[141]), 5);
 c00363e:	687b      	ldr	r3, [r7, #4]
 c003640:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 c003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003646:	405a      	eors	r2, r3
 c003648:	687b      	ldr	r3, [r7, #4]
 c00364a:	f8d3 1234 	ldr.w	r1, [r3, #564]	; 0x234
 c00364e:	6a3b      	ldr	r3, [r7, #32]
 c003650:	404b      	eors	r3, r1
 c003652:	4413      	add	r3, r2
 c003654:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003658:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[138]) + (X0 ^ key->rk[139]), 9);
 c00365a:	687b      	ldr	r3, [r7, #4]
 c00365c:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 c003660:	69bb      	ldr	r3, [r7, #24]
 c003662:	405a      	eors	r2, r3
 c003664:	687b      	ldr	r3, [r7, #4]
 c003666:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 c00366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00366c:	404b      	eors	r3, r1
 c00366e:	4413      	add	r3, r2
 c003670:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003674:	627b      	str	r3, [r7, #36]	; 0x24
		
	if(key->round > 24)
 c003676:	687b      	ldr	r3, [r7, #4]
 c003678:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 c00367c:	2b18      	cmp	r3, #24
 c00367e:	f240 80a8 	bls.w	c0037d2 <lea_encrypt+0x92e>
	{
		X3 = ROR((X2 ^ key->rk[148]) + (X3 ^ key->rk[149]), 3);
 c003682:	687b      	ldr	r3, [r7, #4]
 c003684:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 c003688:	69fb      	ldr	r3, [r7, #28]
 c00368a:	405a      	eors	r2, r3
 c00368c:	687b      	ldr	r3, [r7, #4]
 c00368e:	f8d3 1254 	ldr.w	r1, [r3, #596]	; 0x254
 c003692:	69bb      	ldr	r3, [r7, #24]
 c003694:	404b      	eors	r3, r1
 c003696:	4413      	add	r3, r2
 c003698:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00369c:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[146]) + (X2 ^ key->rk[147]), 5);
 c00369e:	687b      	ldr	r3, [r7, #4]
 c0036a0:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 c0036a4:	6a3b      	ldr	r3, [r7, #32]
 c0036a6:	405a      	eors	r2, r3
 c0036a8:	687b      	ldr	r3, [r7, #4]
 c0036aa:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
 c0036ae:	69fb      	ldr	r3, [r7, #28]
 c0036b0:	404b      	eors	r3, r1
 c0036b2:	4413      	add	r3, r2
 c0036b4:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0036b8:	61fb      	str	r3, [r7, #28]
		X1 = ROL((X0 ^ key->rk[144]) + (X1 ^ key->rk[145]), 9);
 c0036ba:	687b      	ldr	r3, [r7, #4]
 c0036bc:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 c0036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0036c2:	405a      	eors	r2, r3
 c0036c4:	687b      	ldr	r3, [r7, #4]
 c0036c6:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
 c0036ca:	6a3b      	ldr	r3, [r7, #32]
 c0036cc:	404b      	eors	r3, r1
 c0036ce:	4413      	add	r3, r2
 c0036d0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0036d4:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[154]) + (X0 ^ key->rk[155]), 3);
 c0036d6:	687b      	ldr	r3, [r7, #4]
 c0036d8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 c0036dc:	69bb      	ldr	r3, [r7, #24]
 c0036de:	405a      	eors	r2, r3
 c0036e0:	687b      	ldr	r3, [r7, #4]
 c0036e2:	f8d3 126c 	ldr.w	r1, [r3, #620]	; 0x26c
 c0036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0036e8:	404b      	eors	r3, r1
 c0036ea:	4413      	add	r3, r2
 c0036ec:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0036f0:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROR((X2 ^ key->rk[152]) + (X3 ^ key->rk[153]), 5);
 c0036f2:	687b      	ldr	r3, [r7, #4]
 c0036f4:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 c0036f8:	69fb      	ldr	r3, [r7, #28]
 c0036fa:	405a      	eors	r2, r3
 c0036fc:	687b      	ldr	r3, [r7, #4]
 c0036fe:	f8d3 1264 	ldr.w	r1, [r3, #612]	; 0x264
 c003702:	69bb      	ldr	r3, [r7, #24]
 c003704:	404b      	eors	r3, r1
 c003706:	4413      	add	r3, r2
 c003708:	ea4f 1373 	mov.w	r3, r3, ror #5
 c00370c:	61bb      	str	r3, [r7, #24]
		X2 = ROL((X1 ^ key->rk[150]) + (X2 ^ key->rk[151]), 9);
 c00370e:	687b      	ldr	r3, [r7, #4]
 c003710:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 c003714:	6a3b      	ldr	r3, [r7, #32]
 c003716:	405a      	eors	r2, r3
 c003718:	687b      	ldr	r3, [r7, #4]
 c00371a:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
 c00371e:	69fb      	ldr	r3, [r7, #28]
 c003720:	404b      	eors	r3, r1
 c003722:	4413      	add	r3, r2
 c003724:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003728:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[160]) + (X1 ^ key->rk[161]), 3);
 c00372a:	687b      	ldr	r3, [r7, #4]
 c00372c:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 c003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003732:	405a      	eors	r2, r3
 c003734:	687b      	ldr	r3, [r7, #4]
 c003736:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
 c00373a:	6a3b      	ldr	r3, [r7, #32]
 c00373c:	404b      	eors	r3, r1
 c00373e:	4413      	add	r3, r2
 c003740:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003744:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[158]) + (X0 ^ key->rk[159]), 5);
 c003746:	687b      	ldr	r3, [r7, #4]
 c003748:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278
 c00374c:	69bb      	ldr	r3, [r7, #24]
 c00374e:	405a      	eors	r2, r3
 c003750:	687b      	ldr	r3, [r7, #4]
 c003752:	f8d3 127c 	ldr.w	r1, [r3, #636]	; 0x27c
 c003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003758:	404b      	eors	r3, r1
 c00375a:	4413      	add	r3, r2
 c00375c:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003760:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROL((X2 ^ key->rk[156]) + (X3 ^ key->rk[157]), 9);
 c003762:	687b      	ldr	r3, [r7, #4]
 c003764:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 c003768:	69fb      	ldr	r3, [r7, #28]
 c00376a:	405a      	eors	r2, r3
 c00376c:	687b      	ldr	r3, [r7, #4]
 c00376e:	f8d3 1274 	ldr.w	r1, [r3, #628]	; 0x274
 c003772:	69bb      	ldr	r3, [r7, #24]
 c003774:	404b      	eors	r3, r1
 c003776:	4413      	add	r3, r2
 c003778:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00377c:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[166]) + (X2 ^ key->rk[167]), 3);
 c00377e:	687b      	ldr	r3, [r7, #4]
 c003780:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 c003784:	6a3b      	ldr	r3, [r7, #32]
 c003786:	405a      	eors	r2, r3
 c003788:	687b      	ldr	r3, [r7, #4]
 c00378a:	f8d3 129c 	ldr.w	r1, [r3, #668]	; 0x29c
 c00378e:	69fb      	ldr	r3, [r7, #28]
 c003790:	404b      	eors	r3, r1
 c003792:	4413      	add	r3, r2
 c003794:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c003798:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[164]) + (X1 ^ key->rk[165]), 5);
 c00379a:	687b      	ldr	r3, [r7, #4]
 c00379c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 c0037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0037a2:	405a      	eors	r2, r3
 c0037a4:	687b      	ldr	r3, [r7, #4]
 c0037a6:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
 c0037aa:	6a3b      	ldr	r3, [r7, #32]
 c0037ac:	404b      	eors	r3, r1
 c0037ae:	4413      	add	r3, r2
 c0037b0:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0037b4:	623b      	str	r3, [r7, #32]
		X0 = ROL((X3 ^ key->rk[162]) + (X0 ^ key->rk[163]), 9);
 c0037b6:	687b      	ldr	r3, [r7, #4]
 c0037b8:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 c0037bc:	69bb      	ldr	r3, [r7, #24]
 c0037be:	405a      	eors	r2, r3
 c0037c0:	687b      	ldr	r3, [r7, #4]
 c0037c2:	f8d3 128c 	ldr.w	r1, [r3, #652]	; 0x28c
 c0037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0037c8:	404b      	eors	r3, r1
 c0037ca:	4413      	add	r3, r2
 c0037cc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0037d0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(key->round > 28)
 c0037d2:	687b      	ldr	r3, [r7, #4]
 c0037d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 c0037d8:	2b1c      	cmp	r3, #28
 c0037da:	f240 80a8 	bls.w	c00392e <lea_encrypt+0xa8a>
	{
		X3 = ROR((X2 ^ key->rk[172]) + (X3 ^ key->rk[173]), 3);
 c0037de:	687b      	ldr	r3, [r7, #4]
 c0037e0:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
 c0037e4:	69fb      	ldr	r3, [r7, #28]
 c0037e6:	405a      	eors	r2, r3
 c0037e8:	687b      	ldr	r3, [r7, #4]
 c0037ea:	f8d3 12b4 	ldr.w	r1, [r3, #692]	; 0x2b4
 c0037ee:	69bb      	ldr	r3, [r7, #24]
 c0037f0:	404b      	eors	r3, r1
 c0037f2:	4413      	add	r3, r2
 c0037f4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0037f8:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[170]) + (X2 ^ key->rk[171]), 5);
 c0037fa:	687b      	ldr	r3, [r7, #4]
 c0037fc:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
 c003800:	6a3b      	ldr	r3, [r7, #32]
 c003802:	405a      	eors	r2, r3
 c003804:	687b      	ldr	r3, [r7, #4]
 c003806:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
 c00380a:	69fb      	ldr	r3, [r7, #28]
 c00380c:	404b      	eors	r3, r1
 c00380e:	4413      	add	r3, r2
 c003810:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003814:	61fb      	str	r3, [r7, #28]
		X1 = ROL((X0 ^ key->rk[168]) + (X1 ^ key->rk[169]), 9);
 c003816:	687b      	ldr	r3, [r7, #4]
 c003818:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
 c00381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00381e:	405a      	eors	r2, r3
 c003820:	687b      	ldr	r3, [r7, #4]
 c003822:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 c003826:	6a3b      	ldr	r3, [r7, #32]
 c003828:	404b      	eors	r3, r1
 c00382a:	4413      	add	r3, r2
 c00382c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003830:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[178]) + (X0 ^ key->rk[179]), 3);
 c003832:	687b      	ldr	r3, [r7, #4]
 c003834:	f8d3 22c8 	ldr.w	r2, [r3, #712]	; 0x2c8
 c003838:	69bb      	ldr	r3, [r7, #24]
 c00383a:	405a      	eors	r2, r3
 c00383c:	687b      	ldr	r3, [r7, #4]
 c00383e:	f8d3 12cc 	ldr.w	r1, [r3, #716]	; 0x2cc
 c003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003844:	404b      	eors	r3, r1
 c003846:	4413      	add	r3, r2
 c003848:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c00384c:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROR((X2 ^ key->rk[176]) + (X3 ^ key->rk[177]), 5);
 c00384e:	687b      	ldr	r3, [r7, #4]
 c003850:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 c003854:	69fb      	ldr	r3, [r7, #28]
 c003856:	405a      	eors	r2, r3
 c003858:	687b      	ldr	r3, [r7, #4]
 c00385a:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 c00385e:	69bb      	ldr	r3, [r7, #24]
 c003860:	404b      	eors	r3, r1
 c003862:	4413      	add	r3, r2
 c003864:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003868:	61bb      	str	r3, [r7, #24]
		X2 = ROL((X1 ^ key->rk[174]) + (X2 ^ key->rk[175]), 9);
 c00386a:	687b      	ldr	r3, [r7, #4]
 c00386c:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 c003870:	6a3b      	ldr	r3, [r7, #32]
 c003872:	405a      	eors	r2, r3
 c003874:	687b      	ldr	r3, [r7, #4]
 c003876:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 c00387a:	69fb      	ldr	r3, [r7, #28]
 c00387c:	404b      	eors	r3, r1
 c00387e:	4413      	add	r3, r2
 c003880:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c003884:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[184]) + (X1 ^ key->rk[185]), 3);
 c003886:	687b      	ldr	r3, [r7, #4]
 c003888:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
 c00388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00388e:	405a      	eors	r2, r3
 c003890:	687b      	ldr	r3, [r7, #4]
 c003892:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 c003896:	6a3b      	ldr	r3, [r7, #32]
 c003898:	404b      	eors	r3, r1
 c00389a:	4413      	add	r3, r2
 c00389c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0038a0:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[182]) + (X0 ^ key->rk[183]), 5);
 c0038a2:	687b      	ldr	r3, [r7, #4]
 c0038a4:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 c0038a8:	69bb      	ldr	r3, [r7, #24]
 c0038aa:	405a      	eors	r2, r3
 c0038ac:	687b      	ldr	r3, [r7, #4]
 c0038ae:	f8d3 12dc 	ldr.w	r1, [r3, #732]	; 0x2dc
 c0038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0038b4:	404b      	eors	r3, r1
 c0038b6:	4413      	add	r3, r2
 c0038b8:	ea4f 1373 	mov.w	r3, r3, ror #5
 c0038bc:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROL((X2 ^ key->rk[180]) + (X3 ^ key->rk[181]), 9);
 c0038be:	687b      	ldr	r3, [r7, #4]
 c0038c0:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 c0038c4:	69fb      	ldr	r3, [r7, #28]
 c0038c6:	405a      	eors	r2, r3
 c0038c8:	687b      	ldr	r3, [r7, #4]
 c0038ca:	f8d3 12d4 	ldr.w	r1, [r3, #724]	; 0x2d4
 c0038ce:	69bb      	ldr	r3, [r7, #24]
 c0038d0:	404b      	eors	r3, r1
 c0038d2:	4413      	add	r3, r2
 c0038d4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c0038d8:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[190]) + (X2 ^ key->rk[191]), 3);
 c0038da:	687b      	ldr	r3, [r7, #4]
 c0038dc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 c0038e0:	6a3b      	ldr	r3, [r7, #32]
 c0038e2:	405a      	eors	r2, r3
 c0038e4:	687b      	ldr	r3, [r7, #4]
 c0038e6:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 c0038ea:	69fb      	ldr	r3, [r7, #28]
 c0038ec:	404b      	eors	r3, r1
 c0038ee:	4413      	add	r3, r2
 c0038f0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 c0038f4:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[188]) + (X1 ^ key->rk[189]), 5);
 c0038f6:	687b      	ldr	r3, [r7, #4]
 c0038f8:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 c0038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0038fe:	405a      	eors	r2, r3
 c003900:	687b      	ldr	r3, [r7, #4]
 c003902:	f8d3 12f4 	ldr.w	r1, [r3, #756]	; 0x2f4
 c003906:	6a3b      	ldr	r3, [r7, #32]
 c003908:	404b      	eors	r3, r1
 c00390a:	4413      	add	r3, r2
 c00390c:	ea4f 1373 	mov.w	r3, r3, ror #5
 c003910:	623b      	str	r3, [r7, #32]
		X0 = ROL((X3 ^ key->rk[186]) + (X0 ^ key->rk[187]), 9);
 c003912:	687b      	ldr	r3, [r7, #4]
 c003914:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 c003918:	69bb      	ldr	r3, [r7, #24]
 c00391a:	405a      	eors	r2, r3
 c00391c:	687b      	ldr	r3, [r7, #4]
 c00391e:	f8d3 12ec 	ldr.w	r1, [r3, #748]	; 0x2ec
 c003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003924:	404b      	eors	r3, r1
 c003926:	4413      	add	r3, r2
 c003928:	ea4f 53f3 	mov.w	r3, r3, ror #23
 c00392c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	_ct[0] = loadU32(X0);
 c00392e:	693b      	ldr	r3, [r7, #16]
 c003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c003932:	601a      	str	r2, [r3, #0]
	_ct[1] = loadU32(X1);
 c003934:	693b      	ldr	r3, [r7, #16]
 c003936:	3304      	adds	r3, #4
 c003938:	6a3a      	ldr	r2, [r7, #32]
 c00393a:	601a      	str	r2, [r3, #0]
	_ct[2] = loadU32(X2);
 c00393c:	693b      	ldr	r3, [r7, #16]
 c00393e:	3308      	adds	r3, #8
 c003940:	69fa      	ldr	r2, [r7, #28]
 c003942:	601a      	str	r2, [r3, #0]
	_ct[3] = loadU32(X3);
 c003944:	693b      	ldr	r3, [r7, #16]
 c003946:	330c      	adds	r3, #12
 c003948:	69ba      	ldr	r2, [r7, #24]
 c00394a:	601a      	str	r2, [r3, #0]
}
 c00394c:	bf00      	nop
 c00394e:	372c      	adds	r7, #44	; 0x2c
 c003950:	46bd      	mov	sp, r7
 c003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003956:	4770      	bx	lr

0c003958 <lea_decrypt>:

void lea_decrypt(unsigned char *pt, const unsigned char *ct, const LEA_KEY *key)
{
 c003958:	b480      	push	{r7}
 c00395a:	b08b      	sub	sp, #44	; 0x2c
 c00395c:	af00      	add	r7, sp, #0
 c00395e:	60f8      	str	r0, [r7, #12]
 c003960:	60b9      	str	r1, [r7, #8]
 c003962:	607a      	str	r2, [r7, #4]
	unsigned int X0,X1,X2,X3;

	unsigned int * _pt = (unsigned int *)pt;
 c003964:	68fb      	ldr	r3, [r7, #12]
 c003966:	617b      	str	r3, [r7, #20]
	const unsigned int * _ct  = (const unsigned int*)ct;
 c003968:	68bb      	ldr	r3, [r7, #8]
 c00396a:	613b      	str	r3, [r7, #16]
	
	X0 = loadU32(_ct[0]);
 c00396c:	693b      	ldr	r3, [r7, #16]
 c00396e:	681b      	ldr	r3, [r3, #0]
 c003970:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = loadU32(_ct[1]);
 c003972:	693b      	ldr	r3, [r7, #16]
 c003974:	3304      	adds	r3, #4
 c003976:	681b      	ldr	r3, [r3, #0]
 c003978:	623b      	str	r3, [r7, #32]
	X2 = loadU32(_ct[2]);
 c00397a:	693b      	ldr	r3, [r7, #16]
 c00397c:	3308      	adds	r3, #8
 c00397e:	681b      	ldr	r3, [r3, #0]
 c003980:	61fb      	str	r3, [r7, #28]
	X3 = loadU32(_ct[3]);
 c003982:	693b      	ldr	r3, [r7, #16]
 c003984:	330c      	adds	r3, #12
 c003986:	681b      	ldr	r3, [r3, #0]
 c003988:	61bb      	str	r3, [r7, #24]

	if(key->round > 28)
 c00398a:	687b      	ldr	r3, [r7, #4]
 c00398c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 c003990:	2b1c      	cmp	r3, #28
 c003992:	f240 80a8 	bls.w	c003ae6 <lea_decrypt+0x18e>
	{
		X0 = (ROR(X0, 9) - (X3 ^ key->rk[186])) ^ key->rk[187];
 c003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003998:	ea4f 2273 	mov.w	r2, r3, ror #9
 c00399c:	687b      	ldr	r3, [r7, #4]
 c00399e:	f8d3 12e8 	ldr.w	r1, [r3, #744]	; 0x2e8
 c0039a2:	69bb      	ldr	r3, [r7, #24]
 c0039a4:	404b      	eors	r3, r1
 c0039a6:	1ad2      	subs	r2, r2, r3
 c0039a8:	687b      	ldr	r3, [r7, #4]
 c0039aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 c0039ae:	4053      	eors	r3, r2
 c0039b0:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 5) - (X0 ^ key->rk[188])) ^ key->rk[189];
 c0039b2:	6a3b      	ldr	r3, [r7, #32]
 c0039b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0039b8:	687b      	ldr	r3, [r7, #4]
 c0039ba:	f8d3 12f0 	ldr.w	r1, [r3, #752]	; 0x2f0
 c0039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0039c0:	404b      	eors	r3, r1
 c0039c2:	1ad2      	subs	r2, r2, r3
 c0039c4:	687b      	ldr	r3, [r7, #4]
 c0039c6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 c0039ca:	4053      	eors	r3, r2
 c0039cc:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 3) - (X1 ^ key->rk[190])) ^ key->rk[191];
 c0039ce:	69fb      	ldr	r3, [r7, #28]
 c0039d0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0039d4:	687b      	ldr	r3, [r7, #4]
 c0039d6:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 c0039da:	6a3b      	ldr	r3, [r7, #32]
 c0039dc:	404b      	eors	r3, r1
 c0039de:	1ad2      	subs	r2, r2, r3
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 c0039e6:	4053      	eors	r3, r2
 c0039e8:	61fb      	str	r3, [r7, #28]
		X3 = (ROR(X3, 9) - (X2 ^ key->rk[180])) ^ key->rk[181];
 c0039ea:	69bb      	ldr	r3, [r7, #24]
 c0039ec:	ea4f 2273 	mov.w	r2, r3, ror #9
 c0039f0:	687b      	ldr	r3, [r7, #4]
 c0039f2:	f8d3 12d0 	ldr.w	r1, [r3, #720]	; 0x2d0
 c0039f6:	69fb      	ldr	r3, [r7, #28]
 c0039f8:	404b      	eors	r3, r1
 c0039fa:	1ad2      	subs	r2, r2, r3
 c0039fc:	687b      	ldr	r3, [r7, #4]
 c0039fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 c003a02:	4053      	eors	r3, r2
 c003a04:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 5) - (X3 ^ key->rk[182])) ^ key->rk[183];
 c003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003a08:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003a0c:	687b      	ldr	r3, [r7, #4]
 c003a0e:	f8d3 12d8 	ldr.w	r1, [r3, #728]	; 0x2d8
 c003a12:	69bb      	ldr	r3, [r7, #24]
 c003a14:	404b      	eors	r3, r1
 c003a16:	1ad2      	subs	r2, r2, r3
 c003a18:	687b      	ldr	r3, [r7, #4]
 c003a1a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 c003a1e:	4053      	eors	r3, r2
 c003a20:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 3) - (X0 ^ key->rk[184])) ^ key->rk[185];
 c003a22:	6a3b      	ldr	r3, [r7, #32]
 c003a24:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003a28:	687b      	ldr	r3, [r7, #4]
 c003a2a:	f8d3 12e0 	ldr.w	r1, [r3, #736]	; 0x2e0
 c003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003a30:	404b      	eors	r3, r1
 c003a32:	1ad2      	subs	r2, r2, r3
 c003a34:	687b      	ldr	r3, [r7, #4]
 c003a36:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 c003a3a:	4053      	eors	r3, r2
 c003a3c:	623b      	str	r3, [r7, #32]
		X2 = (ROR(X2, 9) - (X1 ^ key->rk[174])) ^ key->rk[175];
 c003a3e:	69fb      	ldr	r3, [r7, #28]
 c003a40:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003a44:	687b      	ldr	r3, [r7, #4]
 c003a46:	f8d3 12b8 	ldr.w	r1, [r3, #696]	; 0x2b8
 c003a4a:	6a3b      	ldr	r3, [r7, #32]
 c003a4c:	404b      	eors	r3, r1
 c003a4e:	1ad2      	subs	r2, r2, r3
 c003a50:	687b      	ldr	r3, [r7, #4]
 c003a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 c003a56:	4053      	eors	r3, r2
 c003a58:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 5) - (X2 ^ key->rk[176])) ^ key->rk[177];
 c003a5a:	69bb      	ldr	r3, [r7, #24]
 c003a5c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003a60:	687b      	ldr	r3, [r7, #4]
 c003a62:	f8d3 12c0 	ldr.w	r1, [r3, #704]	; 0x2c0
 c003a66:	69fb      	ldr	r3, [r7, #28]
 c003a68:	404b      	eors	r3, r1
 c003a6a:	1ad2      	subs	r2, r2, r3
 c003a6c:	687b      	ldr	r3, [r7, #4]
 c003a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 c003a72:	4053      	eors	r3, r2
 c003a74:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 3) - (X3 ^ key->rk[178])) ^ key->rk[179];
 c003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003a78:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003a7c:	687b      	ldr	r3, [r7, #4]
 c003a7e:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 c003a82:	69bb      	ldr	r3, [r7, #24]
 c003a84:	404b      	eors	r3, r1
 c003a86:	1ad2      	subs	r2, r2, r3
 c003a88:	687b      	ldr	r3, [r7, #4]
 c003a8a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 c003a8e:	4053      	eors	r3, r2
 c003a90:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROR(X1, 9) - (X0 ^ key->rk[168])) ^ key->rk[169];
 c003a92:	6a3b      	ldr	r3, [r7, #32]
 c003a94:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003a98:	687b      	ldr	r3, [r7, #4]
 c003a9a:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
 c003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003aa0:	404b      	eors	r3, r1
 c003aa2:	1ad2      	subs	r2, r2, r3
 c003aa4:	687b      	ldr	r3, [r7, #4]
 c003aa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 c003aaa:	4053      	eors	r3, r2
 c003aac:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 5) - (X1 ^ key->rk[170])) ^ key->rk[171];
 c003aae:	69fb      	ldr	r3, [r7, #28]
 c003ab0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003ab4:	687b      	ldr	r3, [r7, #4]
 c003ab6:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
 c003aba:	6a3b      	ldr	r3, [r7, #32]
 c003abc:	404b      	eors	r3, r1
 c003abe:	1ad2      	subs	r2, r2, r3
 c003ac0:	687b      	ldr	r3, [r7, #4]
 c003ac2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 c003ac6:	4053      	eors	r3, r2
 c003ac8:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 3) - (X2 ^ key->rk[172])) ^ key->rk[173];
 c003aca:	69bb      	ldr	r3, [r7, #24]
 c003acc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003ad0:	687b      	ldr	r3, [r7, #4]
 c003ad2:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
 c003ad6:	69fb      	ldr	r3, [r7, #28]
 c003ad8:	404b      	eors	r3, r1
 c003ada:	1ad2      	subs	r2, r2, r3
 c003adc:	687b      	ldr	r3, [r7, #4]
 c003ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 c003ae2:	4053      	eors	r3, r2
 c003ae4:	61bb      	str	r3, [r7, #24]
	}

	if(key->round > 24)
 c003ae6:	687b      	ldr	r3, [r7, #4]
 c003ae8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 c003aec:	2b18      	cmp	r3, #24
 c003aee:	f240 80a8 	bls.w	c003c42 <lea_decrypt+0x2ea>
	{
		X0 = (ROR(X0, 9) - (X3 ^ key->rk[162])) ^ key->rk[163];
 c003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003af4:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003af8:	687b      	ldr	r3, [r7, #4]
 c003afa:	f8d3 1288 	ldr.w	r1, [r3, #648]	; 0x288
 c003afe:	69bb      	ldr	r3, [r7, #24]
 c003b00:	404b      	eors	r3, r1
 c003b02:	1ad2      	subs	r2, r2, r3
 c003b04:	687b      	ldr	r3, [r7, #4]
 c003b06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 c003b0a:	4053      	eors	r3, r2
 c003b0c:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 5) - (X0 ^ key->rk[164])) ^ key->rk[165];
 c003b0e:	6a3b      	ldr	r3, [r7, #32]
 c003b10:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003b14:	687b      	ldr	r3, [r7, #4]
 c003b16:	f8d3 1290 	ldr.w	r1, [r3, #656]	; 0x290
 c003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003b1c:	404b      	eors	r3, r1
 c003b1e:	1ad2      	subs	r2, r2, r3
 c003b20:	687b      	ldr	r3, [r7, #4]
 c003b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 c003b26:	4053      	eors	r3, r2
 c003b28:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 3) - (X1 ^ key->rk[166])) ^ key->rk[167];
 c003b2a:	69fb      	ldr	r3, [r7, #28]
 c003b2c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003b30:	687b      	ldr	r3, [r7, #4]
 c003b32:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
 c003b36:	6a3b      	ldr	r3, [r7, #32]
 c003b38:	404b      	eors	r3, r1
 c003b3a:	1ad2      	subs	r2, r2, r3
 c003b3c:	687b      	ldr	r3, [r7, #4]
 c003b3e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 c003b42:	4053      	eors	r3, r2
 c003b44:	61fb      	str	r3, [r7, #28]
		X3 = (ROR(X3, 9) - (X2 ^ key->rk[156])) ^ key->rk[157];
 c003b46:	69bb      	ldr	r3, [r7, #24]
 c003b48:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003b4c:	687b      	ldr	r3, [r7, #4]
 c003b4e:	f8d3 1270 	ldr.w	r1, [r3, #624]	; 0x270
 c003b52:	69fb      	ldr	r3, [r7, #28]
 c003b54:	404b      	eors	r3, r1
 c003b56:	1ad2      	subs	r2, r2, r3
 c003b58:	687b      	ldr	r3, [r7, #4]
 c003b5a:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 c003b5e:	4053      	eors	r3, r2
 c003b60:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 5) - (X3 ^ key->rk[158])) ^ key->rk[159];
 c003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003b64:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003b68:	687b      	ldr	r3, [r7, #4]
 c003b6a:	f8d3 1278 	ldr.w	r1, [r3, #632]	; 0x278
 c003b6e:	69bb      	ldr	r3, [r7, #24]
 c003b70:	404b      	eors	r3, r1
 c003b72:	1ad2      	subs	r2, r2, r3
 c003b74:	687b      	ldr	r3, [r7, #4]
 c003b76:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 c003b7a:	4053      	eors	r3, r2
 c003b7c:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 3) - (X0 ^ key->rk[160])) ^ key->rk[161];
 c003b7e:	6a3b      	ldr	r3, [r7, #32]
 c003b80:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003b84:	687b      	ldr	r3, [r7, #4]
 c003b86:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 c003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003b8c:	404b      	eors	r3, r1
 c003b8e:	1ad2      	subs	r2, r2, r3
 c003b90:	687b      	ldr	r3, [r7, #4]
 c003b92:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 c003b96:	4053      	eors	r3, r2
 c003b98:	623b      	str	r3, [r7, #32]
		X2 = (ROR(X2, 9) - (X1 ^ key->rk[150])) ^ key->rk[151];
 c003b9a:	69fb      	ldr	r3, [r7, #28]
 c003b9c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003ba0:	687b      	ldr	r3, [r7, #4]
 c003ba2:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
 c003ba6:	6a3b      	ldr	r3, [r7, #32]
 c003ba8:	404b      	eors	r3, r1
 c003baa:	1ad2      	subs	r2, r2, r3
 c003bac:	687b      	ldr	r3, [r7, #4]
 c003bae:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 c003bb2:	4053      	eors	r3, r2
 c003bb4:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 5) - (X2 ^ key->rk[152])) ^ key->rk[153];
 c003bb6:	69bb      	ldr	r3, [r7, #24]
 c003bb8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003bbc:	687b      	ldr	r3, [r7, #4]
 c003bbe:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 c003bc2:	69fb      	ldr	r3, [r7, #28]
 c003bc4:	404b      	eors	r3, r1
 c003bc6:	1ad2      	subs	r2, r2, r3
 c003bc8:	687b      	ldr	r3, [r7, #4]
 c003bca:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 c003bce:	4053      	eors	r3, r2
 c003bd0:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 3) - (X3 ^ key->rk[154])) ^ key->rk[155];
 c003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003bd4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003bd8:	687b      	ldr	r3, [r7, #4]
 c003bda:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 c003bde:	69bb      	ldr	r3, [r7, #24]
 c003be0:	404b      	eors	r3, r1
 c003be2:	1ad2      	subs	r2, r2, r3
 c003be4:	687b      	ldr	r3, [r7, #4]
 c003be6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 c003bea:	4053      	eors	r3, r2
 c003bec:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROR(X1, 9) - (X0 ^ key->rk[144])) ^ key->rk[145];
 c003bee:	6a3b      	ldr	r3, [r7, #32]
 c003bf0:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003bf4:	687b      	ldr	r3, [r7, #4]
 c003bf6:	f8d3 1240 	ldr.w	r1, [r3, #576]	; 0x240
 c003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003bfc:	404b      	eors	r3, r1
 c003bfe:	1ad2      	subs	r2, r2, r3
 c003c00:	687b      	ldr	r3, [r7, #4]
 c003c02:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 c003c06:	4053      	eors	r3, r2
 c003c08:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 5) - (X1 ^ key->rk[146])) ^ key->rk[147];
 c003c0a:	69fb      	ldr	r3, [r7, #28]
 c003c0c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003c10:	687b      	ldr	r3, [r7, #4]
 c003c12:	f8d3 1248 	ldr.w	r1, [r3, #584]	; 0x248
 c003c16:	6a3b      	ldr	r3, [r7, #32]
 c003c18:	404b      	eors	r3, r1
 c003c1a:	1ad2      	subs	r2, r2, r3
 c003c1c:	687b      	ldr	r3, [r7, #4]
 c003c1e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 c003c22:	4053      	eors	r3, r2
 c003c24:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 3) - (X2 ^ key->rk[148])) ^ key->rk[149];
 c003c26:	69bb      	ldr	r3, [r7, #24]
 c003c28:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003c2c:	687b      	ldr	r3, [r7, #4]
 c003c2e:	f8d3 1250 	ldr.w	r1, [r3, #592]	; 0x250
 c003c32:	69fb      	ldr	r3, [r7, #28]
 c003c34:	404b      	eors	r3, r1
 c003c36:	1ad2      	subs	r2, r2, r3
 c003c38:	687b      	ldr	r3, [r7, #4]
 c003c3a:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 c003c3e:	4053      	eors	r3, r2
 c003c40:	61bb      	str	r3, [r7, #24]
	}

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[138])) ^ key->rk[139];
 c003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003c44:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003c48:	687b      	ldr	r3, [r7, #4]
 c003c4a:	f8d3 1228 	ldr.w	r1, [r3, #552]	; 0x228
 c003c4e:	69bb      	ldr	r3, [r7, #24]
 c003c50:	404b      	eors	r3, r1
 c003c52:	1ad2      	subs	r2, r2, r3
 c003c54:	687b      	ldr	r3, [r7, #4]
 c003c56:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 c003c5a:	4053      	eors	r3, r2
 c003c5c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[140])) ^ key->rk[141];
 c003c5e:	6a3b      	ldr	r3, [r7, #32]
 c003c60:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003c64:	687b      	ldr	r3, [r7, #4]
 c003c66:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 c003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003c6c:	404b      	eors	r3, r1
 c003c6e:	1ad2      	subs	r2, r2, r3
 c003c70:	687b      	ldr	r3, [r7, #4]
 c003c72:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 c003c76:	4053      	eors	r3, r2
 c003c78:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[142])) ^ key->rk[143];
 c003c7a:	69fb      	ldr	r3, [r7, #28]
 c003c7c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003c80:	687b      	ldr	r3, [r7, #4]
 c003c82:	f8d3 1238 	ldr.w	r1, [r3, #568]	; 0x238
 c003c86:	6a3b      	ldr	r3, [r7, #32]
 c003c88:	404b      	eors	r3, r1
 c003c8a:	1ad2      	subs	r2, r2, r3
 c003c8c:	687b      	ldr	r3, [r7, #4]
 c003c8e:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 c003c92:	4053      	eors	r3, r2
 c003c94:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[132])) ^ key->rk[133];
 c003c96:	69bb      	ldr	r3, [r7, #24]
 c003c98:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003c9c:	687b      	ldr	r3, [r7, #4]
 c003c9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 c003ca2:	69fb      	ldr	r3, [r7, #28]
 c003ca4:	404b      	eors	r3, r1
 c003ca6:	1ad2      	subs	r2, r2, r3
 c003ca8:	687b      	ldr	r3, [r7, #4]
 c003caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 c003cae:	4053      	eors	r3, r2
 c003cb0:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[134])) ^ key->rk[135];
 c003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003cb4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003cb8:	687b      	ldr	r3, [r7, #4]
 c003cba:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 c003cbe:	69bb      	ldr	r3, [r7, #24]
 c003cc0:	404b      	eors	r3, r1
 c003cc2:	1ad2      	subs	r2, r2, r3
 c003cc4:	687b      	ldr	r3, [r7, #4]
 c003cc6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 c003cca:	4053      	eors	r3, r2
 c003ccc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[136])) ^ key->rk[137];
 c003cce:	6a3b      	ldr	r3, [r7, #32]
 c003cd0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003cd4:	687b      	ldr	r3, [r7, #4]
 c003cd6:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 c003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003cdc:	404b      	eors	r3, r1
 c003cde:	1ad2      	subs	r2, r2, r3
 c003ce0:	687b      	ldr	r3, [r7, #4]
 c003ce2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 c003ce6:	4053      	eors	r3, r2
 c003ce8:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[126])) ^ key->rk[127];
 c003cea:	69fb      	ldr	r3, [r7, #28]
 c003cec:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003cf0:	687b      	ldr	r3, [r7, #4]
 c003cf2:	f8d3 11f8 	ldr.w	r1, [r3, #504]	; 0x1f8
 c003cf6:	6a3b      	ldr	r3, [r7, #32]
 c003cf8:	404b      	eors	r3, r1
 c003cfa:	1ad2      	subs	r2, r2, r3
 c003cfc:	687b      	ldr	r3, [r7, #4]
 c003cfe:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 c003d02:	4053      	eors	r3, r2
 c003d04:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[128])) ^ key->rk[129];
 c003d06:	69bb      	ldr	r3, [r7, #24]
 c003d08:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003d0c:	687b      	ldr	r3, [r7, #4]
 c003d0e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 c003d12:	69fb      	ldr	r3, [r7, #28]
 c003d14:	404b      	eors	r3, r1
 c003d16:	1ad2      	subs	r2, r2, r3
 c003d18:	687b      	ldr	r3, [r7, #4]
 c003d1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 c003d1e:	4053      	eors	r3, r2
 c003d20:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[130])) ^ key->rk[131];
 c003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003d24:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003d28:	687b      	ldr	r3, [r7, #4]
 c003d2a:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 c003d2e:	69bb      	ldr	r3, [r7, #24]
 c003d30:	404b      	eors	r3, r1
 c003d32:	1ad2      	subs	r2, r2, r3
 c003d34:	687b      	ldr	r3, [r7, #4]
 c003d36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 c003d3a:	4053      	eors	r3, r2
 c003d3c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[120])) ^ key->rk[121];
 c003d3e:	6a3b      	ldr	r3, [r7, #32]
 c003d40:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003d44:	687b      	ldr	r3, [r7, #4]
 c003d46:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
 c003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003d4c:	404b      	eors	r3, r1
 c003d4e:	1ad2      	subs	r2, r2, r3
 c003d50:	687b      	ldr	r3, [r7, #4]
 c003d52:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 c003d56:	4053      	eors	r3, r2
 c003d58:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[122])) ^ key->rk[123];
 c003d5a:	69fb      	ldr	r3, [r7, #28]
 c003d5c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003d60:	687b      	ldr	r3, [r7, #4]
 c003d62:	f8d3 11e8 	ldr.w	r1, [r3, #488]	; 0x1e8
 c003d66:	6a3b      	ldr	r3, [r7, #32]
 c003d68:	404b      	eors	r3, r1
 c003d6a:	1ad2      	subs	r2, r2, r3
 c003d6c:	687b      	ldr	r3, [r7, #4]
 c003d6e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 c003d72:	4053      	eors	r3, r2
 c003d74:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[124])) ^ key->rk[125];
 c003d76:	69bb      	ldr	r3, [r7, #24]
 c003d78:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003d7c:	687b      	ldr	r3, [r7, #4]
 c003d7e:	f8d3 11f0 	ldr.w	r1, [r3, #496]	; 0x1f0
 c003d82:	69fb      	ldr	r3, [r7, #28]
 c003d84:	404b      	eors	r3, r1
 c003d86:	1ad2      	subs	r2, r2, r3
 c003d88:	687b      	ldr	r3, [r7, #4]
 c003d8a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 c003d8e:	4053      	eors	r3, r2
 c003d90:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[114])) ^ key->rk[115];
 c003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003d94:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003d98:	687b      	ldr	r3, [r7, #4]
 c003d9a:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
 c003d9e:	69bb      	ldr	r3, [r7, #24]
 c003da0:	404b      	eors	r3, r1
 c003da2:	1ad2      	subs	r2, r2, r3
 c003da4:	687b      	ldr	r3, [r7, #4]
 c003da6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 c003daa:	4053      	eors	r3, r2
 c003dac:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[116])) ^ key->rk[117];
 c003dae:	6a3b      	ldr	r3, [r7, #32]
 c003db0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003db4:	687b      	ldr	r3, [r7, #4]
 c003db6:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 c003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003dbc:	404b      	eors	r3, r1
 c003dbe:	1ad2      	subs	r2, r2, r3
 c003dc0:	687b      	ldr	r3, [r7, #4]
 c003dc2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 c003dc6:	4053      	eors	r3, r2
 c003dc8:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[118])) ^ key->rk[119];
 c003dca:	69fb      	ldr	r3, [r7, #28]
 c003dcc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003dd0:	687b      	ldr	r3, [r7, #4]
 c003dd2:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 c003dd6:	6a3b      	ldr	r3, [r7, #32]
 c003dd8:	404b      	eors	r3, r1
 c003dda:	1ad2      	subs	r2, r2, r3
 c003ddc:	687b      	ldr	r3, [r7, #4]
 c003dde:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 c003de2:	4053      	eors	r3, r2
 c003de4:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[108])) ^ key->rk[109];
 c003de6:	69bb      	ldr	r3, [r7, #24]
 c003de8:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003dec:	687b      	ldr	r3, [r7, #4]
 c003dee:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 c003df2:	69fb      	ldr	r3, [r7, #28]
 c003df4:	404b      	eors	r3, r1
 c003df6:	1ad2      	subs	r2, r2, r3
 c003df8:	687b      	ldr	r3, [r7, #4]
 c003dfa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 c003dfe:	4053      	eors	r3, r2
 c003e00:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[110])) ^ key->rk[111];
 c003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003e04:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003e08:	687b      	ldr	r3, [r7, #4]
 c003e0a:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 c003e0e:	69bb      	ldr	r3, [r7, #24]
 c003e10:	404b      	eors	r3, r1
 c003e12:	1ad2      	subs	r2, r2, r3
 c003e14:	687b      	ldr	r3, [r7, #4]
 c003e16:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 c003e1a:	4053      	eors	r3, r2
 c003e1c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[112])) ^ key->rk[113];
 c003e1e:	6a3b      	ldr	r3, [r7, #32]
 c003e20:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003e24:	687b      	ldr	r3, [r7, #4]
 c003e26:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 c003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003e2c:	404b      	eors	r3, r1
 c003e2e:	1ad2      	subs	r2, r2, r3
 c003e30:	687b      	ldr	r3, [r7, #4]
 c003e32:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 c003e36:	4053      	eors	r3, r2
 c003e38:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[102])) ^ key->rk[103];
 c003e3a:	69fb      	ldr	r3, [r7, #28]
 c003e3c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003e40:	687b      	ldr	r3, [r7, #4]
 c003e42:	f8d3 1198 	ldr.w	r1, [r3, #408]	; 0x198
 c003e46:	6a3b      	ldr	r3, [r7, #32]
 c003e48:	404b      	eors	r3, r1
 c003e4a:	1ad2      	subs	r2, r2, r3
 c003e4c:	687b      	ldr	r3, [r7, #4]
 c003e4e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 c003e52:	4053      	eors	r3, r2
 c003e54:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[104])) ^ key->rk[105];
 c003e56:	69bb      	ldr	r3, [r7, #24]
 c003e58:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003e5c:	687b      	ldr	r3, [r7, #4]
 c003e5e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 c003e62:	69fb      	ldr	r3, [r7, #28]
 c003e64:	404b      	eors	r3, r1
 c003e66:	1ad2      	subs	r2, r2, r3
 c003e68:	687b      	ldr	r3, [r7, #4]
 c003e6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 c003e6e:	4053      	eors	r3, r2
 c003e70:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[106])) ^ key->rk[107];
 c003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003e74:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003e78:	687b      	ldr	r3, [r7, #4]
 c003e7a:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
 c003e7e:	69bb      	ldr	r3, [r7, #24]
 c003e80:	404b      	eors	r3, r1
 c003e82:	1ad2      	subs	r2, r2, r3
 c003e84:	687b      	ldr	r3, [r7, #4]
 c003e86:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 c003e8a:	4053      	eors	r3, r2
 c003e8c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 96])) ^ key->rk[ 97];
 c003e8e:	6a3b      	ldr	r3, [r7, #32]
 c003e90:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003e94:	687b      	ldr	r3, [r7, #4]
 c003e96:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 c003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003e9c:	404b      	eors	r3, r1
 c003e9e:	1ad2      	subs	r2, r2, r3
 c003ea0:	687b      	ldr	r3, [r7, #4]
 c003ea2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 c003ea6:	4053      	eors	r3, r2
 c003ea8:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 98])) ^ key->rk[ 99];
 c003eaa:	69fb      	ldr	r3, [r7, #28]
 c003eac:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003eb0:	687b      	ldr	r3, [r7, #4]
 c003eb2:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 c003eb6:	6a3b      	ldr	r3, [r7, #32]
 c003eb8:	404b      	eors	r3, r1
 c003eba:	1ad2      	subs	r2, r2, r3
 c003ebc:	687b      	ldr	r3, [r7, #4]
 c003ebe:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 c003ec2:	4053      	eors	r3, r2
 c003ec4:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[100])) ^ key->rk[101];
 c003ec6:	69bb      	ldr	r3, [r7, #24]
 c003ec8:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003ecc:	687b      	ldr	r3, [r7, #4]
 c003ece:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
 c003ed2:	69fb      	ldr	r3, [r7, #28]
 c003ed4:	404b      	eors	r3, r1
 c003ed6:	1ad2      	subs	r2, r2, r3
 c003ed8:	687b      	ldr	r3, [r7, #4]
 c003eda:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 c003ede:	4053      	eors	r3, r2
 c003ee0:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 90])) ^ key->rk[ 91];
 c003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003ee4:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003ee8:	687b      	ldr	r3, [r7, #4]
 c003eea:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 c003eee:	69bb      	ldr	r3, [r7, #24]
 c003ef0:	404b      	eors	r3, r1
 c003ef2:	1ad2      	subs	r2, r2, r3
 c003ef4:	687b      	ldr	r3, [r7, #4]
 c003ef6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 c003efa:	4053      	eors	r3, r2
 c003efc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 92])) ^ key->rk[ 93];
 c003efe:	6a3b      	ldr	r3, [r7, #32]
 c003f00:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003f04:	687b      	ldr	r3, [r7, #4]
 c003f06:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 c003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003f0c:	404b      	eors	r3, r1
 c003f0e:	1ad2      	subs	r2, r2, r3
 c003f10:	687b      	ldr	r3, [r7, #4]
 c003f12:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 c003f16:	4053      	eors	r3, r2
 c003f18:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 94])) ^ key->rk[ 95];
 c003f1a:	69fb      	ldr	r3, [r7, #28]
 c003f1c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003f20:	687b      	ldr	r3, [r7, #4]
 c003f22:	f8d3 1178 	ldr.w	r1, [r3, #376]	; 0x178
 c003f26:	6a3b      	ldr	r3, [r7, #32]
 c003f28:	404b      	eors	r3, r1
 c003f2a:	1ad2      	subs	r2, r2, r3
 c003f2c:	687b      	ldr	r3, [r7, #4]
 c003f2e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 c003f32:	4053      	eors	r3, r2
 c003f34:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 84])) ^ key->rk[ 85];
 c003f36:	69bb      	ldr	r3, [r7, #24]
 c003f38:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003f3c:	687b      	ldr	r3, [r7, #4]
 c003f3e:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
 c003f42:	69fb      	ldr	r3, [r7, #28]
 c003f44:	404b      	eors	r3, r1
 c003f46:	1ad2      	subs	r2, r2, r3
 c003f48:	687b      	ldr	r3, [r7, #4]
 c003f4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 c003f4e:	4053      	eors	r3, r2
 c003f50:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 86])) ^ key->rk[ 87];
 c003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003f54:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003f58:	687b      	ldr	r3, [r7, #4]
 c003f5a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
 c003f5e:	69bb      	ldr	r3, [r7, #24]
 c003f60:	404b      	eors	r3, r1
 c003f62:	1ad2      	subs	r2, r2, r3
 c003f64:	687b      	ldr	r3, [r7, #4]
 c003f66:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 c003f6a:	4053      	eors	r3, r2
 c003f6c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 88])) ^ key->rk[ 89];
 c003f6e:	6a3b      	ldr	r3, [r7, #32]
 c003f70:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003f74:	687b      	ldr	r3, [r7, #4]
 c003f76:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 c003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003f7c:	404b      	eors	r3, r1
 c003f7e:	1ad2      	subs	r2, r2, r3
 c003f80:	687b      	ldr	r3, [r7, #4]
 c003f82:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 c003f86:	4053      	eors	r3, r2
 c003f88:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 78])) ^ key->rk[ 79];
 c003f8a:	69fb      	ldr	r3, [r7, #28]
 c003f8c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003f90:	687b      	ldr	r3, [r7, #4]
 c003f92:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 c003f96:	6a3b      	ldr	r3, [r7, #32]
 c003f98:	404b      	eors	r3, r1
 c003f9a:	1ad2      	subs	r2, r2, r3
 c003f9c:	687b      	ldr	r3, [r7, #4]
 c003f9e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 c003fa2:	4053      	eors	r3, r2
 c003fa4:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 80])) ^ key->rk[ 81];
 c003fa6:	69bb      	ldr	r3, [r7, #24]
 c003fa8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c003fac:	687b      	ldr	r3, [r7, #4]
 c003fae:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
 c003fb2:	69fb      	ldr	r3, [r7, #28]
 c003fb4:	404b      	eors	r3, r1
 c003fb6:	1ad2      	subs	r2, r2, r3
 c003fb8:	687b      	ldr	r3, [r7, #4]
 c003fba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 c003fbe:	4053      	eors	r3, r2
 c003fc0:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 82])) ^ key->rk[ 83];
 c003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003fc4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c003fc8:	687b      	ldr	r3, [r7, #4]
 c003fca:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 c003fce:	69bb      	ldr	r3, [r7, #24]
 c003fd0:	404b      	eors	r3, r1
 c003fd2:	1ad2      	subs	r2, r2, r3
 c003fd4:	687b      	ldr	r3, [r7, #4]
 c003fd6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 c003fda:	4053      	eors	r3, r2
 c003fdc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 72])) ^ key->rk[ 73];
 c003fde:	6a3b      	ldr	r3, [r7, #32]
 c003fe0:	ea4f 2273 	mov.w	r2, r3, ror #9
 c003fe4:	687b      	ldr	r3, [r7, #4]
 c003fe6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 c003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003fec:	404b      	eors	r3, r1
 c003fee:	1ad2      	subs	r2, r2, r3
 c003ff0:	687b      	ldr	r3, [r7, #4]
 c003ff2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 c003ff6:	4053      	eors	r3, r2
 c003ff8:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 74])) ^ key->rk[ 75];
 c003ffa:	69fb      	ldr	r3, [r7, #28]
 c003ffc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004000:	687b      	ldr	r3, [r7, #4]
 c004002:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 c004006:	6a3b      	ldr	r3, [r7, #32]
 c004008:	404b      	eors	r3, r1
 c00400a:	1ad2      	subs	r2, r2, r3
 c00400c:	687b      	ldr	r3, [r7, #4]
 c00400e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 c004012:	4053      	eors	r3, r2
 c004014:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 76])) ^ key->rk[ 77];
 c004016:	69bb      	ldr	r3, [r7, #24]
 c004018:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00401c:	687b      	ldr	r3, [r7, #4]
 c00401e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
 c004022:	69fb      	ldr	r3, [r7, #28]
 c004024:	404b      	eors	r3, r1
 c004026:	1ad2      	subs	r2, r2, r3
 c004028:	687b      	ldr	r3, [r7, #4]
 c00402a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 c00402e:	4053      	eors	r3, r2
 c004030:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 66])) ^ key->rk[ 67];
 c004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004034:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004038:	687b      	ldr	r3, [r7, #4]
 c00403a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 c00403e:	69bb      	ldr	r3, [r7, #24]
 c004040:	404b      	eors	r3, r1
 c004042:	1ad2      	subs	r2, r2, r3
 c004044:	687b      	ldr	r3, [r7, #4]
 c004046:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 c00404a:	4053      	eors	r3, r2
 c00404c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 68])) ^ key->rk[ 69];
 c00404e:	6a3b      	ldr	r3, [r7, #32]
 c004050:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004054:	687b      	ldr	r3, [r7, #4]
 c004056:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 c00405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00405c:	404b      	eors	r3, r1
 c00405e:	1ad2      	subs	r2, r2, r3
 c004060:	687b      	ldr	r3, [r7, #4]
 c004062:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 c004066:	4053      	eors	r3, r2
 c004068:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 70])) ^ key->rk[ 71];
 c00406a:	69fb      	ldr	r3, [r7, #28]
 c00406c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004070:	687b      	ldr	r3, [r7, #4]
 c004072:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 c004076:	6a3b      	ldr	r3, [r7, #32]
 c004078:	404b      	eors	r3, r1
 c00407a:	1ad2      	subs	r2, r2, r3
 c00407c:	687b      	ldr	r3, [r7, #4]
 c00407e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 c004082:	4053      	eors	r3, r2
 c004084:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 60])) ^ key->rk[ 61];
 c004086:	69bb      	ldr	r3, [r7, #24]
 c004088:	ea4f 2273 	mov.w	r2, r3, ror #9
 c00408c:	687b      	ldr	r3, [r7, #4]
 c00408e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 c004092:	69fb      	ldr	r3, [r7, #28]
 c004094:	404b      	eors	r3, r1
 c004096:	1ad2      	subs	r2, r2, r3
 c004098:	687b      	ldr	r3, [r7, #4]
 c00409a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c00409e:	4053      	eors	r3, r2
 c0040a0:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 62])) ^ key->rk[ 63];
 c0040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0040a4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0040a8:	687b      	ldr	r3, [r7, #4]
 c0040aa:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 c0040ae:	69bb      	ldr	r3, [r7, #24]
 c0040b0:	404b      	eors	r3, r1
 c0040b2:	1ad2      	subs	r2, r2, r3
 c0040b4:	687b      	ldr	r3, [r7, #4]
 c0040b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 c0040ba:	4053      	eors	r3, r2
 c0040bc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 64])) ^ key->rk[ 65];
 c0040be:	6a3b      	ldr	r3, [r7, #32]
 c0040c0:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0040c4:	687b      	ldr	r3, [r7, #4]
 c0040c6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 c0040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0040cc:	404b      	eors	r3, r1
 c0040ce:	1ad2      	subs	r2, r2, r3
 c0040d0:	687b      	ldr	r3, [r7, #4]
 c0040d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 c0040d6:	4053      	eors	r3, r2
 c0040d8:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 54])) ^ key->rk[ 55];
 c0040da:	69fb      	ldr	r3, [r7, #28]
 c0040dc:	ea4f 2273 	mov.w	r2, r3, ror #9
 c0040e0:	687b      	ldr	r3, [r7, #4]
 c0040e2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 c0040e6:	6a3b      	ldr	r3, [r7, #32]
 c0040e8:	404b      	eors	r3, r1
 c0040ea:	1ad2      	subs	r2, r2, r3
 c0040ec:	687b      	ldr	r3, [r7, #4]
 c0040ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0040f2:	4053      	eors	r3, r2
 c0040f4:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 56])) ^ key->rk[ 57];
 c0040f6:	69bb      	ldr	r3, [r7, #24]
 c0040f8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0040fc:	687b      	ldr	r3, [r7, #4]
 c0040fe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 c004102:	69fb      	ldr	r3, [r7, #28]
 c004104:	404b      	eors	r3, r1
 c004106:	1ad2      	subs	r2, r2, r3
 c004108:	687b      	ldr	r3, [r7, #4]
 c00410a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c00410e:	4053      	eors	r3, r2
 c004110:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 58])) ^ key->rk[ 59];
 c004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004114:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004118:	687b      	ldr	r3, [r7, #4]
 c00411a:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 c00411e:	69bb      	ldr	r3, [r7, #24]
 c004120:	404b      	eors	r3, r1
 c004122:	1ad2      	subs	r2, r2, r3
 c004124:	687b      	ldr	r3, [r7, #4]
 c004126:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c00412a:	4053      	eors	r3, r2
 c00412c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 48])) ^ key->rk[ 49];
 c00412e:	6a3b      	ldr	r3, [r7, #32]
 c004130:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004134:	687b      	ldr	r3, [r7, #4]
 c004136:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 c00413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00413c:	404b      	eors	r3, r1
 c00413e:	1ad2      	subs	r2, r2, r3
 c004140:	687b      	ldr	r3, [r7, #4]
 c004142:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c004146:	4053      	eors	r3, r2
 c004148:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 50])) ^ key->rk[ 51];
 c00414a:	69fb      	ldr	r3, [r7, #28]
 c00414c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004150:	687b      	ldr	r3, [r7, #4]
 c004152:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 c004156:	6a3b      	ldr	r3, [r7, #32]
 c004158:	404b      	eors	r3, r1
 c00415a:	1ad2      	subs	r2, r2, r3
 c00415c:	687b      	ldr	r3, [r7, #4]
 c00415e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c004162:	4053      	eors	r3, r2
 c004164:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 52])) ^ key->rk[ 53];
 c004166:	69bb      	ldr	r3, [r7, #24]
 c004168:	ea4f 7273 	mov.w	r2, r3, ror #29
 c00416c:	687b      	ldr	r3, [r7, #4]
 c00416e:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 c004172:	69fb      	ldr	r3, [r7, #28]
 c004174:	404b      	eors	r3, r1
 c004176:	1ad2      	subs	r2, r2, r3
 c004178:	687b      	ldr	r3, [r7, #4]
 c00417a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c00417e:	4053      	eors	r3, r2
 c004180:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 42])) ^ key->rk[ 43];
 c004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004184:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004188:	687b      	ldr	r3, [r7, #4]
 c00418a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 c00418e:	69bb      	ldr	r3, [r7, #24]
 c004190:	404b      	eors	r3, r1
 c004192:	1ad2      	subs	r2, r2, r3
 c004194:	687b      	ldr	r3, [r7, #4]
 c004196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c00419a:	4053      	eors	r3, r2
 c00419c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 44])) ^ key->rk[ 45];
 c00419e:	6a3b      	ldr	r3, [r7, #32]
 c0041a0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0041a4:	687b      	ldr	r3, [r7, #4]
 c0041a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 c0041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0041ac:	404b      	eors	r3, r1
 c0041ae:	1ad2      	subs	r2, r2, r3
 c0041b0:	687b      	ldr	r3, [r7, #4]
 c0041b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c0041b6:	4053      	eors	r3, r2
 c0041b8:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 46])) ^ key->rk[ 47];
 c0041ba:	69fb      	ldr	r3, [r7, #28]
 c0041bc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0041c0:	687b      	ldr	r3, [r7, #4]
 c0041c2:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 c0041c6:	6a3b      	ldr	r3, [r7, #32]
 c0041c8:	404b      	eors	r3, r1
 c0041ca:	1ad2      	subs	r2, r2, r3
 c0041cc:	687b      	ldr	r3, [r7, #4]
 c0041ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c0041d2:	4053      	eors	r3, r2
 c0041d4:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 36])) ^ key->rk[ 37];
 c0041d6:	69bb      	ldr	r3, [r7, #24]
 c0041d8:	ea4f 2273 	mov.w	r2, r3, ror #9
 c0041dc:	687b      	ldr	r3, [r7, #4]
 c0041de:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 c0041e2:	69fb      	ldr	r3, [r7, #28]
 c0041e4:	404b      	eors	r3, r1
 c0041e6:	1ad2      	subs	r2, r2, r3
 c0041e8:	687b      	ldr	r3, [r7, #4]
 c0041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0041ee:	4053      	eors	r3, r2
 c0041f0:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 38])) ^ key->rk[ 39];
 c0041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0041f4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0041f8:	687b      	ldr	r3, [r7, #4]
 c0041fa:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 c0041fe:	69bb      	ldr	r3, [r7, #24]
 c004200:	404b      	eors	r3, r1
 c004202:	1ad2      	subs	r2, r2, r3
 c004204:	687b      	ldr	r3, [r7, #4]
 c004206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00420a:	4053      	eors	r3, r2
 c00420c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 40])) ^ key->rk[ 41];
 c00420e:	6a3b      	ldr	r3, [r7, #32]
 c004210:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004214:	687b      	ldr	r3, [r7, #4]
 c004216:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 c00421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00421c:	404b      	eors	r3, r1
 c00421e:	1ad2      	subs	r2, r2, r3
 c004220:	687b      	ldr	r3, [r7, #4]
 c004222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c004226:	4053      	eors	r3, r2
 c004228:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 30])) ^ key->rk[ 31];
 c00422a:	69fb      	ldr	r3, [r7, #28]
 c00422c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004230:	687b      	ldr	r3, [r7, #4]
 c004232:	6f99      	ldr	r1, [r3, #120]	; 0x78
 c004234:	6a3b      	ldr	r3, [r7, #32]
 c004236:	404b      	eors	r3, r1
 c004238:	1ad2      	subs	r2, r2, r3
 c00423a:	687b      	ldr	r3, [r7, #4]
 c00423c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00423e:	4053      	eors	r3, r2
 c004240:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 32])) ^ key->rk[ 33];
 c004242:	69bb      	ldr	r3, [r7, #24]
 c004244:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004248:	687b      	ldr	r3, [r7, #4]
 c00424a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 c00424e:	69fb      	ldr	r3, [r7, #28]
 c004250:	404b      	eors	r3, r1
 c004252:	1ad2      	subs	r2, r2, r3
 c004254:	687b      	ldr	r3, [r7, #4]
 c004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00425a:	4053      	eors	r3, r2
 c00425c:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 34])) ^ key->rk[ 35];
 c00425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004260:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004264:	687b      	ldr	r3, [r7, #4]
 c004266:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 c00426a:	69bb      	ldr	r3, [r7, #24]
 c00426c:	404b      	eors	r3, r1
 c00426e:	1ad2      	subs	r2, r2, r3
 c004270:	687b      	ldr	r3, [r7, #4]
 c004272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004276:	4053      	eors	r3, r2
 c004278:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 24])) ^ key->rk[ 25];
 c00427a:	6a3b      	ldr	r3, [r7, #32]
 c00427c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004280:	687b      	ldr	r3, [r7, #4]
 c004282:	6e19      	ldr	r1, [r3, #96]	; 0x60
 c004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004286:	404b      	eors	r3, r1
 c004288:	1ad2      	subs	r2, r2, r3
 c00428a:	687b      	ldr	r3, [r7, #4]
 c00428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00428e:	4053      	eors	r3, r2
 c004290:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 26])) ^ key->rk[ 27];
 c004292:	69fb      	ldr	r3, [r7, #28]
 c004294:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004298:	687b      	ldr	r3, [r7, #4]
 c00429a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 c00429c:	6a3b      	ldr	r3, [r7, #32]
 c00429e:	404b      	eors	r3, r1
 c0042a0:	1ad2      	subs	r2, r2, r3
 c0042a2:	687b      	ldr	r3, [r7, #4]
 c0042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0042a6:	4053      	eors	r3, r2
 c0042a8:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 28])) ^ key->rk[ 29];
 c0042aa:	69bb      	ldr	r3, [r7, #24]
 c0042ac:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0042b0:	687b      	ldr	r3, [r7, #4]
 c0042b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 c0042b4:	69fb      	ldr	r3, [r7, #28]
 c0042b6:	404b      	eors	r3, r1
 c0042b8:	1ad2      	subs	r2, r2, r3
 c0042ba:	687b      	ldr	r3, [r7, #4]
 c0042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0042be:	4053      	eors	r3, r2
 c0042c0:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 18])) ^ key->rk[ 19];
 c0042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0042c4:	ea4f 2273 	mov.w	r2, r3, ror #9
 c0042c8:	687b      	ldr	r3, [r7, #4]
 c0042ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 c0042cc:	69bb      	ldr	r3, [r7, #24]
 c0042ce:	404b      	eors	r3, r1
 c0042d0:	1ad2      	subs	r2, r2, r3
 c0042d2:	687b      	ldr	r3, [r7, #4]
 c0042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0042d6:	4053      	eors	r3, r2
 c0042d8:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 20])) ^ key->rk[ 21];
 c0042da:	6a3b      	ldr	r3, [r7, #32]
 c0042dc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0042e0:	687b      	ldr	r3, [r7, #4]
 c0042e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 c0042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0042e6:	404b      	eors	r3, r1
 c0042e8:	1ad2      	subs	r2, r2, r3
 c0042ea:	687b      	ldr	r3, [r7, #4]
 c0042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0042ee:	4053      	eors	r3, r2
 c0042f0:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 22])) ^ key->rk[ 23];
 c0042f2:	69fb      	ldr	r3, [r7, #28]
 c0042f4:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0042f8:	687b      	ldr	r3, [r7, #4]
 c0042fa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 c0042fc:	6a3b      	ldr	r3, [r7, #32]
 c0042fe:	404b      	eors	r3, r1
 c004300:	1ad2      	subs	r2, r2, r3
 c004302:	687b      	ldr	r3, [r7, #4]
 c004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004306:	4053      	eors	r3, r2
 c004308:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 12])) ^ key->rk[ 13];
 c00430a:	69bb      	ldr	r3, [r7, #24]
 c00430c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004310:	687b      	ldr	r3, [r7, #4]
 c004312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 c004314:	69fb      	ldr	r3, [r7, #28]
 c004316:	404b      	eors	r3, r1
 c004318:	1ad2      	subs	r2, r2, r3
 c00431a:	687b      	ldr	r3, [r7, #4]
 c00431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00431e:	4053      	eors	r3, r2
 c004320:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 14])) ^ key->rk[ 15];
 c004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004324:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004328:	687b      	ldr	r3, [r7, #4]
 c00432a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 c00432c:	69bb      	ldr	r3, [r7, #24]
 c00432e:	404b      	eors	r3, r1
 c004330:	1ad2      	subs	r2, r2, r3
 c004332:	687b      	ldr	r3, [r7, #4]
 c004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004336:	4053      	eors	r3, r2
 c004338:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 16])) ^ key->rk[ 17];
 c00433a:	6a3b      	ldr	r3, [r7, #32]
 c00433c:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004340:	687b      	ldr	r3, [r7, #4]
 c004342:	6c19      	ldr	r1, [r3, #64]	; 0x40
 c004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004346:	404b      	eors	r3, r1
 c004348:	1ad2      	subs	r2, r2, r3
 c00434a:	687b      	ldr	r3, [r7, #4]
 c00434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00434e:	4053      	eors	r3, r2
 c004350:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[  6])) ^ key->rk[  7];
 c004352:	69fb      	ldr	r3, [r7, #28]
 c004354:	ea4f 2273 	mov.w	r2, r3, ror #9
 c004358:	687b      	ldr	r3, [r7, #4]
 c00435a:	6999      	ldr	r1, [r3, #24]
 c00435c:	6a3b      	ldr	r3, [r7, #32]
 c00435e:	404b      	eors	r3, r1
 c004360:	1ad2      	subs	r2, r2, r3
 c004362:	687b      	ldr	r3, [r7, #4]
 c004364:	69db      	ldr	r3, [r3, #28]
 c004366:	4053      	eors	r3, r2
 c004368:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[  8])) ^ key->rk[  9];
 c00436a:	69bb      	ldr	r3, [r7, #24]
 c00436c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c004370:	687b      	ldr	r3, [r7, #4]
 c004372:	6a19      	ldr	r1, [r3, #32]
 c004374:	69fb      	ldr	r3, [r7, #28]
 c004376:	404b      	eors	r3, r1
 c004378:	1ad2      	subs	r2, r2, r3
 c00437a:	687b      	ldr	r3, [r7, #4]
 c00437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00437e:	4053      	eors	r3, r2
 c004380:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 10])) ^ key->rk[ 11];
 c004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004384:	ea4f 7273 	mov.w	r2, r3, ror #29
 c004388:	687b      	ldr	r3, [r7, #4]
 c00438a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 c00438c:	69bb      	ldr	r3, [r7, #24]
 c00438e:	404b      	eors	r3, r1
 c004390:	1ad2      	subs	r2, r2, r3
 c004392:	687b      	ldr	r3, [r7, #4]
 c004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004396:	4053      	eors	r3, r2
 c004398:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[  0])) ^ key->rk[  1];
 c00439a:	6a3b      	ldr	r3, [r7, #32]
 c00439c:	ea4f 2273 	mov.w	r2, r3, ror #9
 c0043a0:	687b      	ldr	r3, [r7, #4]
 c0043a2:	6819      	ldr	r1, [r3, #0]
 c0043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0043a6:	404b      	eors	r3, r1
 c0043a8:	1ad2      	subs	r2, r2, r3
 c0043aa:	687b      	ldr	r3, [r7, #4]
 c0043ac:	685b      	ldr	r3, [r3, #4]
 c0043ae:	4053      	eors	r3, r2
 c0043b0:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[  2])) ^ key->rk[  3];
 c0043b2:	69fb      	ldr	r3, [r7, #28]
 c0043b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 c0043b8:	687b      	ldr	r3, [r7, #4]
 c0043ba:	6899      	ldr	r1, [r3, #8]
 c0043bc:	6a3b      	ldr	r3, [r7, #32]
 c0043be:	404b      	eors	r3, r1
 c0043c0:	1ad2      	subs	r2, r2, r3
 c0043c2:	687b      	ldr	r3, [r7, #4]
 c0043c4:	68db      	ldr	r3, [r3, #12]
 c0043c6:	4053      	eors	r3, r2
 c0043c8:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[  4])) ^ key->rk[  5];
 c0043ca:	69bb      	ldr	r3, [r7, #24]
 c0043cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 c0043d0:	687b      	ldr	r3, [r7, #4]
 c0043d2:	6919      	ldr	r1, [r3, #16]
 c0043d4:	69fb      	ldr	r3, [r7, #28]
 c0043d6:	404b      	eors	r3, r1
 c0043d8:	1ad2      	subs	r2, r2, r3
 c0043da:	687b      	ldr	r3, [r7, #4]
 c0043dc:	695b      	ldr	r3, [r3, #20]
 c0043de:	4053      	eors	r3, r2
 c0043e0:	61bb      	str	r3, [r7, #24]

	_pt[0] = loadU32(X0);
 c0043e2:	697b      	ldr	r3, [r7, #20]
 c0043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0043e6:	601a      	str	r2, [r3, #0]
	_pt[1] = loadU32(X1);
 c0043e8:	697b      	ldr	r3, [r7, #20]
 c0043ea:	3304      	adds	r3, #4
 c0043ec:	6a3a      	ldr	r2, [r7, #32]
 c0043ee:	601a      	str	r2, [r3, #0]
	_pt[2] = loadU32(X2);
 c0043f0:	697b      	ldr	r3, [r7, #20]
 c0043f2:	3308      	adds	r3, #8
 c0043f4:	69fa      	ldr	r2, [r7, #28]
 c0043f6:	601a      	str	r2, [r3, #0]
	_pt[3] = loadU32(X3);
 c0043f8:	697b      	ldr	r3, [r7, #20]
 c0043fa:	330c      	adds	r3, #12
 c0043fc:	69ba      	ldr	r2, [r7, #24]
 c0043fe:	601a      	str	r2, [r3, #0]
}
 c004400:	bf00      	nop
 c004402:	372c      	adds	r7, #44	; 0x2c
 c004404:	46bd      	mov	sp, r7
 c004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00440a:	4770      	bx	lr

0c00440c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c00440c:	b580      	push	{r7, lr}
 c00440e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c004410:	f000 ff73 	bl	c0052fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c004414:	f000 f84a 	bl	c0044ac <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c004418:	f000 f8c0 	bl	c00459c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c00441c:	f000 f802 	bl	c004424 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c004420:	e7fe      	b.n	c004420 <main+0x14>
	...

0c004424 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c004424:	b590      	push	{r4, r7, lr}
 c004426:	b083      	sub	sp, #12
 c004428:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00442a:	4b1d      	ldr	r3, [pc, #116]	; (c0044a0 <NonSecure_Init+0x7c>)
 c00442c:	4a1d      	ldr	r2, [pc, #116]	; (c0044a4 <NonSecure_Init+0x80>)
 c00442e:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c004430:	4b1c      	ldr	r3, [pc, #112]	; (c0044a4 <NonSecure_Init+0x80>)
 c004432:	681b      	ldr	r3, [r3, #0]
 c004434:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c004436:	683b      	ldr	r3, [r7, #0]
 c004438:	f383 8888 	msr	MSP_NS, r3
}
 c00443c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00443e:	4b1a      	ldr	r3, [pc, #104]	; (c0044a8 <NonSecure_Init+0x84>)
 c004440:	681b      	ldr	r3, [r3, #0]
 c004442:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c004444:	687b      	ldr	r3, [r7, #4]
 c004446:	461c      	mov	r4, r3
 c004448:	0864      	lsrs	r4, r4, #1
 c00444a:	0064      	lsls	r4, r4, #1
 c00444c:	4620      	mov	r0, r4
 c00444e:	4621      	mov	r1, r4
 c004450:	4622      	mov	r2, r4
 c004452:	4623      	mov	r3, r4
 c004454:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c004458:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00445c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c004460:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c004464:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c004468:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00446c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c004470:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c004474:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c004478:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00447c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c004480:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c004484:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c004488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00448c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c004490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c004494:	f7fb fece 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c004498:	bf00      	nop
 c00449a:	370c      	adds	r7, #12
 c00449c:	46bd      	mov	sp, r7
 c00449e:	bd90      	pop	{r4, r7, pc}
 c0044a0:	e002ed00 	.word	0xe002ed00
 c0044a4:	08040000 	.word	0x08040000
 c0044a8:	08040004 	.word	0x08040004

0c0044ac <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c0044ac:	b580      	push	{r7, lr}
 c0044ae:	b09c      	sub	sp, #112	; 0x70
 c0044b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c0044b2:	1d3b      	adds	r3, r7, #4
 c0044b4:	226c      	movs	r2, #108	; 0x6c
 c0044b6:	2100      	movs	r1, #0
 c0044b8:	4618      	mov	r0, r3
 c0044ba:	f001 fac1 	bl	c005a40 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0044be:	2300      	movs	r3, #0
 c0044c0:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0044c2:	2300      	movs	r3, #0
 c0044c4:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c0044c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044ca:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c0044cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044d0:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c0044d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044d6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c0044d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044dc:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c0044de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044e2:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c0044e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044e8:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c0044ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044ee:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c0044f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044f4:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0044f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0044fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c004500:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c004502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c004506:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c004508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00450c:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c00450e:	2300      	movs	r3, #0
 c004510:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c004512:	2300      	movs	r3, #0
 c004514:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c004516:	2300      	movs	r3, #0
 c004518:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c00451a:	2300      	movs	r3, #0
 c00451c:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c00451e:	2300      	movs	r3, #0
 c004520:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c004522:	2300      	movs	r3, #0
 c004524:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c004526:	2300      	movs	r3, #0
 c004528:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c00452a:	2300      	movs	r3, #0
 c00452c:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c00452e:	2300      	movs	r3, #0
 c004530:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c004532:	2300      	movs	r3, #0
 c004534:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c004536:	2300      	movs	r3, #0
 c004538:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c00453a:	2300      	movs	r3, #0
 c00453c:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00453e:	2300      	movs	r3, #0
 c004540:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c004542:	1d3b      	adds	r3, r7, #4
 c004544:	4619      	mov	r1, r3
 c004546:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c00454a:	f001 f9f5 	bl	c005938 <HAL_GTZC_MPCBB_ConfigMem>
 c00454e:	4603      	mov	r3, r0
 c004550:	2b00      	cmp	r3, #0
 c004552:	d001      	beq.n	c004558 <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c004554:	f000 f87c 	bl	c004650 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c004558:	2300      	movs	r3, #0
 c00455a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c00455c:	2300      	movs	r3, #0
 c00455e:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c004560:	2300      	movs	r3, #0
 c004562:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c004564:	2300      	movs	r3, #0
 c004566:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c004568:	2300      	movs	r3, #0
 c00456a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c00456c:	2300      	movs	r3, #0
 c00456e:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c004570:	2300      	movs	r3, #0
 c004572:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c004574:	2300      	movs	r3, #0
 c004576:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c004578:	2300      	movs	r3, #0
 c00457a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00457c:	1d3b      	adds	r3, r7, #4
 c00457e:	4619      	mov	r1, r3
 c004580:	4805      	ldr	r0, [pc, #20]	; (c004598 <MX_GTZC_S_Init+0xec>)
 c004582:	f001 f9d9 	bl	c005938 <HAL_GTZC_MPCBB_ConfigMem>
 c004586:	4603      	mov	r3, r0
 c004588:	2b00      	cmp	r3, #0
 c00458a:	d001      	beq.n	c004590 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c00458c:	f000 f860 	bl	c004650 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c004590:	bf00      	nop
 c004592:	3770      	adds	r7, #112	; 0x70
 c004594:	46bd      	mov	sp, r7
 c004596:	bd80      	pop	{r7, pc}
 c004598:	30030000 	.word	0x30030000

0c00459c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c00459c:	b580      	push	{r7, lr}
 c00459e:	b088      	sub	sp, #32
 c0045a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0045a2:	f107 030c 	add.w	r3, r7, #12
 c0045a6:	2200      	movs	r2, #0
 c0045a8:	601a      	str	r2, [r3, #0]
 c0045aa:	605a      	str	r2, [r3, #4]
 c0045ac:	609a      	str	r2, [r3, #8]
 c0045ae:	60da      	str	r2, [r3, #12]
 c0045b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c0045b2:	4b23      	ldr	r3, [pc, #140]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045b6:	4a22      	ldr	r2, [pc, #136]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045b8:	f043 0304 	orr.w	r3, r3, #4
 c0045bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0045be:	4b20      	ldr	r3, [pc, #128]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045c2:	f003 0304 	and.w	r3, r3, #4
 c0045c6:	60bb      	str	r3, [r7, #8]
 c0045c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c0045ca:	4b1d      	ldr	r3, [pc, #116]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045ce:	4a1c      	ldr	r2, [pc, #112]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045d0:	f043 0301 	orr.w	r3, r3, #1
 c0045d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0045d6:	4b1a      	ldr	r3, [pc, #104]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045da:	f003 0301 	and.w	r3, r3, #1
 c0045de:	607b      	str	r3, [r7, #4]
 c0045e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0045e2:	4b17      	ldr	r3, [pc, #92]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045e6:	4a16      	ldr	r2, [pc, #88]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045e8:	f043 0302 	orr.w	r3, r3, #2
 c0045ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0045ee:	4b14      	ldr	r3, [pc, #80]	; (c004640 <MX_GPIO_Init+0xa4>)
 c0045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0045f2:	f003 0302 	and.w	r3, r3, #2
 c0045f6:	603b      	str	r3, [r7, #0]
 c0045f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c0045fa:	2200      	movs	r2, #0
 c0045fc:	2180      	movs	r1, #128	; 0x80
 c0045fe:	4811      	ldr	r0, [pc, #68]	; (c004644 <MX_GPIO_Init+0xa8>)
 c004600:	f001 f94a 	bl	c005898 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_7, GPIO_PIN_NSEC);
 c004604:	2200      	movs	r2, #0
 c004606:	2180      	movs	r1, #128	; 0x80
 c004608:	480f      	ldr	r0, [pc, #60]	; (c004648 <MX_GPIO_Init+0xac>)
 c00460a:	f001 f95d 	bl	c0058c8 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c00460e:	2200      	movs	r2, #0
 c004610:	f44f 7100 	mov.w	r1, #512	; 0x200
 c004614:	480d      	ldr	r0, [pc, #52]	; (c00464c <MX_GPIO_Init+0xb0>)
 c004616:	f001 f957 	bl	c0058c8 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c00461a:	2380      	movs	r3, #128	; 0x80
 c00461c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c00461e:	2301      	movs	r3, #1
 c004620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c004622:	2300      	movs	r3, #0
 c004624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c004626:	2300      	movs	r3, #0
 c004628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c00462a:	f107 030c 	add.w	r3, r7, #12
 c00462e:	4619      	mov	r1, r3
 c004630:	4804      	ldr	r0, [pc, #16]	; (c004644 <MX_GPIO_Init+0xa8>)
 c004632:	f000 ffb1 	bl	c005598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c004636:	bf00      	nop
 c004638:	3720      	adds	r7, #32
 c00463a:	46bd      	mov	sp, r7
 c00463c:	bd80      	pop	{r7, pc}
 c00463e:	bf00      	nop
 c004640:	50021000 	.word	0x50021000
 c004644:	52020400 	.word	0x52020400
 c004648:	52020800 	.word	0x52020800
 c00464c:	52020000 	.word	0x52020000

0c004650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c004650:	b480      	push	{r7}
 c004652:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c004654:	b672      	cpsid	i
}
 c004656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c004658:	e7fe      	b.n	c004658 <Error_Handler+0x8>

0c00465a <lea_cbc_enc>:
#define _LEA_CBC
#define lea_encrypt_1block lea_encrypt
#define lea_decrypt_1block lea_decrypt

void MAKE_FUNC(cbc_enc)(unsigned char *ct, const unsigned char *pt, unsigned int pt_len, const unsigned char *iv, const LEA_KEY *key)
{
 c00465a:	b580      	push	{r7, lr}
 c00465c:	b088      	sub	sp, #32
 c00465e:	af00      	add	r7, sp, #0
 c004660:	60f8      	str	r0, [r7, #12]
 c004662:	60b9      	str	r1, [r7, #8]
 c004664:	607a      	str	r2, [r7, #4]
 c004666:	603b      	str	r3, [r7, #0]
#ifdef USE_OWN_FUNC
	_lea_cbc_enc(ct,pt,pt_len,iv,key);
#else
	unsigned int nBlock1 = pt_len >> 4, i;
 c004668:	687b      	ldr	r3, [r7, #4]
 c00466a:	091b      	lsrs	r3, r3, #4
 c00466c:	617b      	str	r3, [r7, #20]
	const unsigned char *iv_ptr = iv;
 c00466e:	683b      	ldr	r3, [r7, #0]
 c004670:	61bb      	str	r3, [r7, #24]

	if (ct == NULL)
 c004672:	68fb      	ldr	r3, [r7, #12]
 c004674:	2b00      	cmp	r3, #0
 c004676:	f000 80dc 	beq.w	c004832 <lea_cbc_enc+0x1d8>
		return;
	else if (pt == NULL)
 c00467a:	68bb      	ldr	r3, [r7, #8]
 c00467c:	2b00      	cmp	r3, #0
 c00467e:	f000 80da 	beq.w	c004836 <lea_cbc_enc+0x1dc>
		return;
	else if ((pt_len == 0) || (pt_len & 0xf))
 c004682:	687b      	ldr	r3, [r7, #4]
 c004684:	2b00      	cmp	r3, #0
 c004686:	f000 80d8 	beq.w	c00483a <lea_cbc_enc+0x1e0>
 c00468a:	687b      	ldr	r3, [r7, #4]
 c00468c:	f003 030f 	and.w	r3, r3, #15
 c004690:	2b00      	cmp	r3, #0
 c004692:	f040 80d2 	bne.w	c00483a <lea_cbc_enc+0x1e0>
		return;
	else if (iv == NULL)
 c004696:	683b      	ldr	r3, [r7, #0]
 c004698:	2b00      	cmp	r3, #0
 c00469a:	f000 80d0 	beq.w	c00483e <lea_cbc_enc+0x1e4>
		return;
	else if (key == NULL)
 c00469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0046a0:	2b00      	cmp	r3, #0
 c0046a2:	f000 80ce 	beq.w	c004842 <lea_cbc_enc+0x1e8>
		return;

	for(i = 0; i < nBlock1; i++, pt += 16, ct += 16)
 c0046a6:	2300      	movs	r3, #0
 c0046a8:	61fb      	str	r3, [r7, #28]
 c0046aa:	e0bc      	b.n	c004826 <lea_cbc_enc+0x1cc>
	{
		XOR8x16(ct, pt, iv_ptr);
 c0046ac:	68bb      	ldr	r3, [r7, #8]
 c0046ae:	781a      	ldrb	r2, [r3, #0]
 c0046b0:	69bb      	ldr	r3, [r7, #24]
 c0046b2:	781b      	ldrb	r3, [r3, #0]
 c0046b4:	4053      	eors	r3, r2
 c0046b6:	b2da      	uxtb	r2, r3
 c0046b8:	68fb      	ldr	r3, [r7, #12]
 c0046ba:	701a      	strb	r2, [r3, #0]
 c0046bc:	68bb      	ldr	r3, [r7, #8]
 c0046be:	3301      	adds	r3, #1
 c0046c0:	7819      	ldrb	r1, [r3, #0]
 c0046c2:	69bb      	ldr	r3, [r7, #24]
 c0046c4:	3301      	adds	r3, #1
 c0046c6:	781a      	ldrb	r2, [r3, #0]
 c0046c8:	68fb      	ldr	r3, [r7, #12]
 c0046ca:	3301      	adds	r3, #1
 c0046cc:	404a      	eors	r2, r1
 c0046ce:	b2d2      	uxtb	r2, r2
 c0046d0:	701a      	strb	r2, [r3, #0]
 c0046d2:	68bb      	ldr	r3, [r7, #8]
 c0046d4:	3302      	adds	r3, #2
 c0046d6:	7819      	ldrb	r1, [r3, #0]
 c0046d8:	69bb      	ldr	r3, [r7, #24]
 c0046da:	3302      	adds	r3, #2
 c0046dc:	781a      	ldrb	r2, [r3, #0]
 c0046de:	68fb      	ldr	r3, [r7, #12]
 c0046e0:	3302      	adds	r3, #2
 c0046e2:	404a      	eors	r2, r1
 c0046e4:	b2d2      	uxtb	r2, r2
 c0046e6:	701a      	strb	r2, [r3, #0]
 c0046e8:	68bb      	ldr	r3, [r7, #8]
 c0046ea:	3303      	adds	r3, #3
 c0046ec:	7819      	ldrb	r1, [r3, #0]
 c0046ee:	69bb      	ldr	r3, [r7, #24]
 c0046f0:	3303      	adds	r3, #3
 c0046f2:	781a      	ldrb	r2, [r3, #0]
 c0046f4:	68fb      	ldr	r3, [r7, #12]
 c0046f6:	3303      	adds	r3, #3
 c0046f8:	404a      	eors	r2, r1
 c0046fa:	b2d2      	uxtb	r2, r2
 c0046fc:	701a      	strb	r2, [r3, #0]
 c0046fe:	68bb      	ldr	r3, [r7, #8]
 c004700:	3304      	adds	r3, #4
 c004702:	7819      	ldrb	r1, [r3, #0]
 c004704:	69bb      	ldr	r3, [r7, #24]
 c004706:	3304      	adds	r3, #4
 c004708:	781a      	ldrb	r2, [r3, #0]
 c00470a:	68fb      	ldr	r3, [r7, #12]
 c00470c:	3304      	adds	r3, #4
 c00470e:	404a      	eors	r2, r1
 c004710:	b2d2      	uxtb	r2, r2
 c004712:	701a      	strb	r2, [r3, #0]
 c004714:	68bb      	ldr	r3, [r7, #8]
 c004716:	3305      	adds	r3, #5
 c004718:	7819      	ldrb	r1, [r3, #0]
 c00471a:	69bb      	ldr	r3, [r7, #24]
 c00471c:	3305      	adds	r3, #5
 c00471e:	781a      	ldrb	r2, [r3, #0]
 c004720:	68fb      	ldr	r3, [r7, #12]
 c004722:	3305      	adds	r3, #5
 c004724:	404a      	eors	r2, r1
 c004726:	b2d2      	uxtb	r2, r2
 c004728:	701a      	strb	r2, [r3, #0]
 c00472a:	68bb      	ldr	r3, [r7, #8]
 c00472c:	3306      	adds	r3, #6
 c00472e:	7819      	ldrb	r1, [r3, #0]
 c004730:	69bb      	ldr	r3, [r7, #24]
 c004732:	3306      	adds	r3, #6
 c004734:	781a      	ldrb	r2, [r3, #0]
 c004736:	68fb      	ldr	r3, [r7, #12]
 c004738:	3306      	adds	r3, #6
 c00473a:	404a      	eors	r2, r1
 c00473c:	b2d2      	uxtb	r2, r2
 c00473e:	701a      	strb	r2, [r3, #0]
 c004740:	68bb      	ldr	r3, [r7, #8]
 c004742:	3307      	adds	r3, #7
 c004744:	7819      	ldrb	r1, [r3, #0]
 c004746:	69bb      	ldr	r3, [r7, #24]
 c004748:	3307      	adds	r3, #7
 c00474a:	781a      	ldrb	r2, [r3, #0]
 c00474c:	68fb      	ldr	r3, [r7, #12]
 c00474e:	3307      	adds	r3, #7
 c004750:	404a      	eors	r2, r1
 c004752:	b2d2      	uxtb	r2, r2
 c004754:	701a      	strb	r2, [r3, #0]
 c004756:	68bb      	ldr	r3, [r7, #8]
 c004758:	3308      	adds	r3, #8
 c00475a:	7819      	ldrb	r1, [r3, #0]
 c00475c:	69bb      	ldr	r3, [r7, #24]
 c00475e:	3308      	adds	r3, #8
 c004760:	781a      	ldrb	r2, [r3, #0]
 c004762:	68fb      	ldr	r3, [r7, #12]
 c004764:	3308      	adds	r3, #8
 c004766:	404a      	eors	r2, r1
 c004768:	b2d2      	uxtb	r2, r2
 c00476a:	701a      	strb	r2, [r3, #0]
 c00476c:	68bb      	ldr	r3, [r7, #8]
 c00476e:	3309      	adds	r3, #9
 c004770:	7819      	ldrb	r1, [r3, #0]
 c004772:	69bb      	ldr	r3, [r7, #24]
 c004774:	3309      	adds	r3, #9
 c004776:	781a      	ldrb	r2, [r3, #0]
 c004778:	68fb      	ldr	r3, [r7, #12]
 c00477a:	3309      	adds	r3, #9
 c00477c:	404a      	eors	r2, r1
 c00477e:	b2d2      	uxtb	r2, r2
 c004780:	701a      	strb	r2, [r3, #0]
 c004782:	68bb      	ldr	r3, [r7, #8]
 c004784:	330a      	adds	r3, #10
 c004786:	7819      	ldrb	r1, [r3, #0]
 c004788:	69bb      	ldr	r3, [r7, #24]
 c00478a:	330a      	adds	r3, #10
 c00478c:	781a      	ldrb	r2, [r3, #0]
 c00478e:	68fb      	ldr	r3, [r7, #12]
 c004790:	330a      	adds	r3, #10
 c004792:	404a      	eors	r2, r1
 c004794:	b2d2      	uxtb	r2, r2
 c004796:	701a      	strb	r2, [r3, #0]
 c004798:	68bb      	ldr	r3, [r7, #8]
 c00479a:	330b      	adds	r3, #11
 c00479c:	7819      	ldrb	r1, [r3, #0]
 c00479e:	69bb      	ldr	r3, [r7, #24]
 c0047a0:	330b      	adds	r3, #11
 c0047a2:	781a      	ldrb	r2, [r3, #0]
 c0047a4:	68fb      	ldr	r3, [r7, #12]
 c0047a6:	330b      	adds	r3, #11
 c0047a8:	404a      	eors	r2, r1
 c0047aa:	b2d2      	uxtb	r2, r2
 c0047ac:	701a      	strb	r2, [r3, #0]
 c0047ae:	68bb      	ldr	r3, [r7, #8]
 c0047b0:	330c      	adds	r3, #12
 c0047b2:	7819      	ldrb	r1, [r3, #0]
 c0047b4:	69bb      	ldr	r3, [r7, #24]
 c0047b6:	330c      	adds	r3, #12
 c0047b8:	781a      	ldrb	r2, [r3, #0]
 c0047ba:	68fb      	ldr	r3, [r7, #12]
 c0047bc:	330c      	adds	r3, #12
 c0047be:	404a      	eors	r2, r1
 c0047c0:	b2d2      	uxtb	r2, r2
 c0047c2:	701a      	strb	r2, [r3, #0]
 c0047c4:	68bb      	ldr	r3, [r7, #8]
 c0047c6:	330d      	adds	r3, #13
 c0047c8:	7819      	ldrb	r1, [r3, #0]
 c0047ca:	69bb      	ldr	r3, [r7, #24]
 c0047cc:	330d      	adds	r3, #13
 c0047ce:	781a      	ldrb	r2, [r3, #0]
 c0047d0:	68fb      	ldr	r3, [r7, #12]
 c0047d2:	330d      	adds	r3, #13
 c0047d4:	404a      	eors	r2, r1
 c0047d6:	b2d2      	uxtb	r2, r2
 c0047d8:	701a      	strb	r2, [r3, #0]
 c0047da:	68bb      	ldr	r3, [r7, #8]
 c0047dc:	330e      	adds	r3, #14
 c0047de:	7819      	ldrb	r1, [r3, #0]
 c0047e0:	69bb      	ldr	r3, [r7, #24]
 c0047e2:	330e      	adds	r3, #14
 c0047e4:	781a      	ldrb	r2, [r3, #0]
 c0047e6:	68fb      	ldr	r3, [r7, #12]
 c0047e8:	330e      	adds	r3, #14
 c0047ea:	404a      	eors	r2, r1
 c0047ec:	b2d2      	uxtb	r2, r2
 c0047ee:	701a      	strb	r2, [r3, #0]
 c0047f0:	68bb      	ldr	r3, [r7, #8]
 c0047f2:	330f      	adds	r3, #15
 c0047f4:	7819      	ldrb	r1, [r3, #0]
 c0047f6:	69bb      	ldr	r3, [r7, #24]
 c0047f8:	330f      	adds	r3, #15
 c0047fa:	781a      	ldrb	r2, [r3, #0]
 c0047fc:	68fb      	ldr	r3, [r7, #12]
 c0047fe:	330f      	adds	r3, #15
 c004800:	404a      	eors	r2, r1
 c004802:	b2d2      	uxtb	r2, r2
 c004804:	701a      	strb	r2, [r3, #0]
		lea_encrypt_1block(ct, ct, key);
 c004806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c004808:	68f9      	ldr	r1, [r7, #12]
 c00480a:	68f8      	ldr	r0, [r7, #12]
 c00480c:	f7fe fb4a 	bl	c002ea4 <lea_encrypt>

		iv_ptr = ct;
 c004810:	68fb      	ldr	r3, [r7, #12]
 c004812:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < nBlock1; i++, pt += 16, ct += 16)
 c004814:	69fb      	ldr	r3, [r7, #28]
 c004816:	3301      	adds	r3, #1
 c004818:	61fb      	str	r3, [r7, #28]
 c00481a:	68bb      	ldr	r3, [r7, #8]
 c00481c:	3310      	adds	r3, #16
 c00481e:	60bb      	str	r3, [r7, #8]
 c004820:	68fb      	ldr	r3, [r7, #12]
 c004822:	3310      	adds	r3, #16
 c004824:	60fb      	str	r3, [r7, #12]
 c004826:	69fa      	ldr	r2, [r7, #28]
 c004828:	697b      	ldr	r3, [r7, #20]
 c00482a:	429a      	cmp	r2, r3
 c00482c:	f4ff af3e 	bcc.w	c0046ac <lea_cbc_enc+0x52>
 c004830:	e008      	b.n	c004844 <lea_cbc_enc+0x1ea>
		return;
 c004832:	bf00      	nop
 c004834:	e006      	b.n	c004844 <lea_cbc_enc+0x1ea>
		return;
 c004836:	bf00      	nop
 c004838:	e004      	b.n	c004844 <lea_cbc_enc+0x1ea>
		return;
 c00483a:	bf00      	nop
 c00483c:	e002      	b.n	c004844 <lea_cbc_enc+0x1ea>
		return;
 c00483e:	bf00      	nop
 c004840:	e000      	b.n	c004844 <lea_cbc_enc+0x1ea>
		return;
 c004842:	bf00      	nop
	}
#endif
}
 c004844:	3720      	adds	r7, #32
 c004846:	46bd      	mov	sp, r7
 c004848:	bd80      	pop	{r7, pc}

0c00484a <lea_cbc_dec>:

void MAKE_FUNC(cbc_dec)(unsigned char *pt, const unsigned char *ct, unsigned int ct_len, const unsigned char *iv, const LEA_KEY *key)
{
 c00484a:	b580      	push	{r7, lr}
 c00484c:	b0a6      	sub	sp, #152	; 0x98
 c00484e:	af00      	add	r7, sp, #0
 c004850:	60f8      	str	r0, [r7, #12]
 c004852:	60b9      	str	r1, [r7, #8]
 c004854:	607a      	str	r2, [r7, #4]
 c004856:	603b      	str	r3, [r7, #0]
	unsigned int remainBlock = ct_len >> 4;
 c004858:	687b      	ldr	r3, [r7, #4]
 c00485a:	091b      	lsrs	r3, r3, #4
 c00485c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const unsigned char *pIv = iv;
 c004860:	683b      	ldr	r3, [r7, #0]
 c004862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	unsigned char tmp[128];// = {0, };

	if (pt == NULL)
 c004866:	68fb      	ldr	r3, [r7, #12]
 c004868:	2b00      	cmp	r3, #0
 c00486a:	f000 81b1 	beq.w	c004bd0 <lea_cbc_dec+0x386>
		return;
	else if (ct == NULL)
 c00486e:	68bb      	ldr	r3, [r7, #8]
 c004870:	2b00      	cmp	r3, #0
 c004872:	f000 81af 	beq.w	c004bd4 <lea_cbc_dec+0x38a>
		return;
	else if ((ct_len == 0) || (ct_len & 0xf))
 c004876:	687b      	ldr	r3, [r7, #4]
 c004878:	2b00      	cmp	r3, #0
 c00487a:	f000 81ad 	beq.w	c004bd8 <lea_cbc_dec+0x38e>
 c00487e:	687b      	ldr	r3, [r7, #4]
 c004880:	f003 030f 	and.w	r3, r3, #15
 c004884:	2b00      	cmp	r3, #0
 c004886:	f040 81a7 	bne.w	c004bd8 <lea_cbc_dec+0x38e>
		return;
	else if (iv == NULL)
 c00488a:	683b      	ldr	r3, [r7, #0]
 c00488c:	2b00      	cmp	r3, #0
 c00488e:	f000 81a5 	beq.w	c004bdc <lea_cbc_dec+0x392>
		return;
	else if (key == NULL)
 c004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c004896:	2b00      	cmp	r3, #0
 c004898:	f000 81a2 	beq.w	c004be0 <lea_cbc_dec+0x396>
		return;

	pt += ct_len;
 c00489c:	68fa      	ldr	r2, [r7, #12]
 c00489e:	687b      	ldr	r3, [r7, #4]
 c0048a0:	4413      	add	r3, r2
 c0048a2:	60fb      	str	r3, [r7, #12]
	ct += ct_len;
 c0048a4:	68ba      	ldr	r2, [r7, #8]
 c0048a6:	687b      	ldr	r3, [r7, #4]
 c0048a8:	4413      	add	r3, r2
 c0048aa:	60bb      	str	r3, [r7, #8]

		remainBlock -= 4;
	}
#endif

	while (remainBlock > 1){ // > 1, not >= 1.
 c0048ac:	e0d1      	b.n	c004a52 <lea_cbc_dec+0x208>
		pt -= 0x10;
 c0048ae:	68fb      	ldr	r3, [r7, #12]
 c0048b0:	3b10      	subs	r3, #16
 c0048b2:	60fb      	str	r3, [r7, #12]
		ct -= 0x10;
 c0048b4:	68bb      	ldr	r3, [r7, #8]
 c0048b6:	3b10      	subs	r3, #16
 c0048b8:	60bb      	str	r3, [r7, #8]
		pIv = ct - 16;
 c0048ba:	68bb      	ldr	r3, [r7, #8]
 c0048bc:	3b10      	subs	r3, #16
 c0048be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		lea_decrypt_1block(pt, ct, key);
 c0048c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 c0048c6:	68b9      	ldr	r1, [r7, #8]
 c0048c8:	68f8      	ldr	r0, [r7, #12]
 c0048ca:	f7ff f845 	bl	c003958 <lea_decrypt>

		XOR8x16(pt, pt, pIv);
 c0048ce:	68fb      	ldr	r3, [r7, #12]
 c0048d0:	781a      	ldrb	r2, [r3, #0]
 c0048d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0048d6:	781b      	ldrb	r3, [r3, #0]
 c0048d8:	4053      	eors	r3, r2
 c0048da:	b2da      	uxtb	r2, r3
 c0048dc:	68fb      	ldr	r3, [r7, #12]
 c0048de:	701a      	strb	r2, [r3, #0]
 c0048e0:	68fb      	ldr	r3, [r7, #12]
 c0048e2:	3301      	adds	r3, #1
 c0048e4:	7819      	ldrb	r1, [r3, #0]
 c0048e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0048ea:	3301      	adds	r3, #1
 c0048ec:	781a      	ldrb	r2, [r3, #0]
 c0048ee:	68fb      	ldr	r3, [r7, #12]
 c0048f0:	3301      	adds	r3, #1
 c0048f2:	404a      	eors	r2, r1
 c0048f4:	b2d2      	uxtb	r2, r2
 c0048f6:	701a      	strb	r2, [r3, #0]
 c0048f8:	68fb      	ldr	r3, [r7, #12]
 c0048fa:	3302      	adds	r3, #2
 c0048fc:	7819      	ldrb	r1, [r3, #0]
 c0048fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004902:	3302      	adds	r3, #2
 c004904:	781a      	ldrb	r2, [r3, #0]
 c004906:	68fb      	ldr	r3, [r7, #12]
 c004908:	3302      	adds	r3, #2
 c00490a:	404a      	eors	r2, r1
 c00490c:	b2d2      	uxtb	r2, r2
 c00490e:	701a      	strb	r2, [r3, #0]
 c004910:	68fb      	ldr	r3, [r7, #12]
 c004912:	3303      	adds	r3, #3
 c004914:	7819      	ldrb	r1, [r3, #0]
 c004916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00491a:	3303      	adds	r3, #3
 c00491c:	781a      	ldrb	r2, [r3, #0]
 c00491e:	68fb      	ldr	r3, [r7, #12]
 c004920:	3303      	adds	r3, #3
 c004922:	404a      	eors	r2, r1
 c004924:	b2d2      	uxtb	r2, r2
 c004926:	701a      	strb	r2, [r3, #0]
 c004928:	68fb      	ldr	r3, [r7, #12]
 c00492a:	3304      	adds	r3, #4
 c00492c:	7819      	ldrb	r1, [r3, #0]
 c00492e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004932:	3304      	adds	r3, #4
 c004934:	781a      	ldrb	r2, [r3, #0]
 c004936:	68fb      	ldr	r3, [r7, #12]
 c004938:	3304      	adds	r3, #4
 c00493a:	404a      	eors	r2, r1
 c00493c:	b2d2      	uxtb	r2, r2
 c00493e:	701a      	strb	r2, [r3, #0]
 c004940:	68fb      	ldr	r3, [r7, #12]
 c004942:	3305      	adds	r3, #5
 c004944:	7819      	ldrb	r1, [r3, #0]
 c004946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00494a:	3305      	adds	r3, #5
 c00494c:	781a      	ldrb	r2, [r3, #0]
 c00494e:	68fb      	ldr	r3, [r7, #12]
 c004950:	3305      	adds	r3, #5
 c004952:	404a      	eors	r2, r1
 c004954:	b2d2      	uxtb	r2, r2
 c004956:	701a      	strb	r2, [r3, #0]
 c004958:	68fb      	ldr	r3, [r7, #12]
 c00495a:	3306      	adds	r3, #6
 c00495c:	7819      	ldrb	r1, [r3, #0]
 c00495e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004962:	3306      	adds	r3, #6
 c004964:	781a      	ldrb	r2, [r3, #0]
 c004966:	68fb      	ldr	r3, [r7, #12]
 c004968:	3306      	adds	r3, #6
 c00496a:	404a      	eors	r2, r1
 c00496c:	b2d2      	uxtb	r2, r2
 c00496e:	701a      	strb	r2, [r3, #0]
 c004970:	68fb      	ldr	r3, [r7, #12]
 c004972:	3307      	adds	r3, #7
 c004974:	7819      	ldrb	r1, [r3, #0]
 c004976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00497a:	3307      	adds	r3, #7
 c00497c:	781a      	ldrb	r2, [r3, #0]
 c00497e:	68fb      	ldr	r3, [r7, #12]
 c004980:	3307      	adds	r3, #7
 c004982:	404a      	eors	r2, r1
 c004984:	b2d2      	uxtb	r2, r2
 c004986:	701a      	strb	r2, [r3, #0]
 c004988:	68fb      	ldr	r3, [r7, #12]
 c00498a:	3308      	adds	r3, #8
 c00498c:	7819      	ldrb	r1, [r3, #0]
 c00498e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004992:	3308      	adds	r3, #8
 c004994:	781a      	ldrb	r2, [r3, #0]
 c004996:	68fb      	ldr	r3, [r7, #12]
 c004998:	3308      	adds	r3, #8
 c00499a:	404a      	eors	r2, r1
 c00499c:	b2d2      	uxtb	r2, r2
 c00499e:	701a      	strb	r2, [r3, #0]
 c0049a0:	68fb      	ldr	r3, [r7, #12]
 c0049a2:	3309      	adds	r3, #9
 c0049a4:	7819      	ldrb	r1, [r3, #0]
 c0049a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0049aa:	3309      	adds	r3, #9
 c0049ac:	781a      	ldrb	r2, [r3, #0]
 c0049ae:	68fb      	ldr	r3, [r7, #12]
 c0049b0:	3309      	adds	r3, #9
 c0049b2:	404a      	eors	r2, r1
 c0049b4:	b2d2      	uxtb	r2, r2
 c0049b6:	701a      	strb	r2, [r3, #0]
 c0049b8:	68fb      	ldr	r3, [r7, #12]
 c0049ba:	330a      	adds	r3, #10
 c0049bc:	7819      	ldrb	r1, [r3, #0]
 c0049be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0049c2:	330a      	adds	r3, #10
 c0049c4:	781a      	ldrb	r2, [r3, #0]
 c0049c6:	68fb      	ldr	r3, [r7, #12]
 c0049c8:	330a      	adds	r3, #10
 c0049ca:	404a      	eors	r2, r1
 c0049cc:	b2d2      	uxtb	r2, r2
 c0049ce:	701a      	strb	r2, [r3, #0]
 c0049d0:	68fb      	ldr	r3, [r7, #12]
 c0049d2:	330b      	adds	r3, #11
 c0049d4:	7819      	ldrb	r1, [r3, #0]
 c0049d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0049da:	330b      	adds	r3, #11
 c0049dc:	781a      	ldrb	r2, [r3, #0]
 c0049de:	68fb      	ldr	r3, [r7, #12]
 c0049e0:	330b      	adds	r3, #11
 c0049e2:	404a      	eors	r2, r1
 c0049e4:	b2d2      	uxtb	r2, r2
 c0049e6:	701a      	strb	r2, [r3, #0]
 c0049e8:	68fb      	ldr	r3, [r7, #12]
 c0049ea:	330c      	adds	r3, #12
 c0049ec:	7819      	ldrb	r1, [r3, #0]
 c0049ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0049f2:	330c      	adds	r3, #12
 c0049f4:	781a      	ldrb	r2, [r3, #0]
 c0049f6:	68fb      	ldr	r3, [r7, #12]
 c0049f8:	330c      	adds	r3, #12
 c0049fa:	404a      	eors	r2, r1
 c0049fc:	b2d2      	uxtb	r2, r2
 c0049fe:	701a      	strb	r2, [r3, #0]
 c004a00:	68fb      	ldr	r3, [r7, #12]
 c004a02:	330d      	adds	r3, #13
 c004a04:	7819      	ldrb	r1, [r3, #0]
 c004a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004a0a:	330d      	adds	r3, #13
 c004a0c:	781a      	ldrb	r2, [r3, #0]
 c004a0e:	68fb      	ldr	r3, [r7, #12]
 c004a10:	330d      	adds	r3, #13
 c004a12:	404a      	eors	r2, r1
 c004a14:	b2d2      	uxtb	r2, r2
 c004a16:	701a      	strb	r2, [r3, #0]
 c004a18:	68fb      	ldr	r3, [r7, #12]
 c004a1a:	330e      	adds	r3, #14
 c004a1c:	7819      	ldrb	r1, [r3, #0]
 c004a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004a22:	330e      	adds	r3, #14
 c004a24:	781a      	ldrb	r2, [r3, #0]
 c004a26:	68fb      	ldr	r3, [r7, #12]
 c004a28:	330e      	adds	r3, #14
 c004a2a:	404a      	eors	r2, r1
 c004a2c:	b2d2      	uxtb	r2, r2
 c004a2e:	701a      	strb	r2, [r3, #0]
 c004a30:	68fb      	ldr	r3, [r7, #12]
 c004a32:	330f      	adds	r3, #15
 c004a34:	7819      	ldrb	r1, [r3, #0]
 c004a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c004a3a:	330f      	adds	r3, #15
 c004a3c:	781a      	ldrb	r2, [r3, #0]
 c004a3e:	68fb      	ldr	r3, [r7, #12]
 c004a40:	330f      	adds	r3, #15
 c004a42:	404a      	eors	r2, r1
 c004a44:	b2d2      	uxtb	r2, r2
 c004a46:	701a      	strb	r2, [r3, #0]

		remainBlock -= 1;
 c004a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c004a4c:	3b01      	subs	r3, #1
 c004a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while (remainBlock > 1){ // > 1, not >= 1.
 c004a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c004a56:	2b01      	cmp	r3, #1
 c004a58:	f63f af29 	bhi.w	c0048ae <lea_cbc_dec+0x64>
	}
	
	pt -= 0x10;
 c004a5c:	68fb      	ldr	r3, [r7, #12]
 c004a5e:	3b10      	subs	r3, #16
 c004a60:	60fb      	str	r3, [r7, #12]
	ct -= 0x10;
 c004a62:	68bb      	ldr	r3, [r7, #8]
 c004a64:	3b10      	subs	r3, #16
 c004a66:	60bb      	str	r3, [r7, #8]
	lea_decrypt_1block(pt, ct, key);
 c004a68:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 c004a6c:	68b9      	ldr	r1, [r7, #8]
 c004a6e:	68f8      	ldr	r0, [r7, #12]
 c004a70:	f7fe ff72 	bl	c003958 <lea_decrypt>

	XOR8x16(pt, pt, iv);
 c004a74:	68fb      	ldr	r3, [r7, #12]
 c004a76:	781a      	ldrb	r2, [r3, #0]
 c004a78:	683b      	ldr	r3, [r7, #0]
 c004a7a:	781b      	ldrb	r3, [r3, #0]
 c004a7c:	4053      	eors	r3, r2
 c004a7e:	b2da      	uxtb	r2, r3
 c004a80:	68fb      	ldr	r3, [r7, #12]
 c004a82:	701a      	strb	r2, [r3, #0]
 c004a84:	68fb      	ldr	r3, [r7, #12]
 c004a86:	3301      	adds	r3, #1
 c004a88:	7819      	ldrb	r1, [r3, #0]
 c004a8a:	683b      	ldr	r3, [r7, #0]
 c004a8c:	3301      	adds	r3, #1
 c004a8e:	781a      	ldrb	r2, [r3, #0]
 c004a90:	68fb      	ldr	r3, [r7, #12]
 c004a92:	3301      	adds	r3, #1
 c004a94:	404a      	eors	r2, r1
 c004a96:	b2d2      	uxtb	r2, r2
 c004a98:	701a      	strb	r2, [r3, #0]
 c004a9a:	68fb      	ldr	r3, [r7, #12]
 c004a9c:	3302      	adds	r3, #2
 c004a9e:	7819      	ldrb	r1, [r3, #0]
 c004aa0:	683b      	ldr	r3, [r7, #0]
 c004aa2:	3302      	adds	r3, #2
 c004aa4:	781a      	ldrb	r2, [r3, #0]
 c004aa6:	68fb      	ldr	r3, [r7, #12]
 c004aa8:	3302      	adds	r3, #2
 c004aaa:	404a      	eors	r2, r1
 c004aac:	b2d2      	uxtb	r2, r2
 c004aae:	701a      	strb	r2, [r3, #0]
 c004ab0:	68fb      	ldr	r3, [r7, #12]
 c004ab2:	3303      	adds	r3, #3
 c004ab4:	7819      	ldrb	r1, [r3, #0]
 c004ab6:	683b      	ldr	r3, [r7, #0]
 c004ab8:	3303      	adds	r3, #3
 c004aba:	781a      	ldrb	r2, [r3, #0]
 c004abc:	68fb      	ldr	r3, [r7, #12]
 c004abe:	3303      	adds	r3, #3
 c004ac0:	404a      	eors	r2, r1
 c004ac2:	b2d2      	uxtb	r2, r2
 c004ac4:	701a      	strb	r2, [r3, #0]
 c004ac6:	68fb      	ldr	r3, [r7, #12]
 c004ac8:	3304      	adds	r3, #4
 c004aca:	7819      	ldrb	r1, [r3, #0]
 c004acc:	683b      	ldr	r3, [r7, #0]
 c004ace:	3304      	adds	r3, #4
 c004ad0:	781a      	ldrb	r2, [r3, #0]
 c004ad2:	68fb      	ldr	r3, [r7, #12]
 c004ad4:	3304      	adds	r3, #4
 c004ad6:	404a      	eors	r2, r1
 c004ad8:	b2d2      	uxtb	r2, r2
 c004ada:	701a      	strb	r2, [r3, #0]
 c004adc:	68fb      	ldr	r3, [r7, #12]
 c004ade:	3305      	adds	r3, #5
 c004ae0:	7819      	ldrb	r1, [r3, #0]
 c004ae2:	683b      	ldr	r3, [r7, #0]
 c004ae4:	3305      	adds	r3, #5
 c004ae6:	781a      	ldrb	r2, [r3, #0]
 c004ae8:	68fb      	ldr	r3, [r7, #12]
 c004aea:	3305      	adds	r3, #5
 c004aec:	404a      	eors	r2, r1
 c004aee:	b2d2      	uxtb	r2, r2
 c004af0:	701a      	strb	r2, [r3, #0]
 c004af2:	68fb      	ldr	r3, [r7, #12]
 c004af4:	3306      	adds	r3, #6
 c004af6:	7819      	ldrb	r1, [r3, #0]
 c004af8:	683b      	ldr	r3, [r7, #0]
 c004afa:	3306      	adds	r3, #6
 c004afc:	781a      	ldrb	r2, [r3, #0]
 c004afe:	68fb      	ldr	r3, [r7, #12]
 c004b00:	3306      	adds	r3, #6
 c004b02:	404a      	eors	r2, r1
 c004b04:	b2d2      	uxtb	r2, r2
 c004b06:	701a      	strb	r2, [r3, #0]
 c004b08:	68fb      	ldr	r3, [r7, #12]
 c004b0a:	3307      	adds	r3, #7
 c004b0c:	7819      	ldrb	r1, [r3, #0]
 c004b0e:	683b      	ldr	r3, [r7, #0]
 c004b10:	3307      	adds	r3, #7
 c004b12:	781a      	ldrb	r2, [r3, #0]
 c004b14:	68fb      	ldr	r3, [r7, #12]
 c004b16:	3307      	adds	r3, #7
 c004b18:	404a      	eors	r2, r1
 c004b1a:	b2d2      	uxtb	r2, r2
 c004b1c:	701a      	strb	r2, [r3, #0]
 c004b1e:	68fb      	ldr	r3, [r7, #12]
 c004b20:	3308      	adds	r3, #8
 c004b22:	7819      	ldrb	r1, [r3, #0]
 c004b24:	683b      	ldr	r3, [r7, #0]
 c004b26:	3308      	adds	r3, #8
 c004b28:	781a      	ldrb	r2, [r3, #0]
 c004b2a:	68fb      	ldr	r3, [r7, #12]
 c004b2c:	3308      	adds	r3, #8
 c004b2e:	404a      	eors	r2, r1
 c004b30:	b2d2      	uxtb	r2, r2
 c004b32:	701a      	strb	r2, [r3, #0]
 c004b34:	68fb      	ldr	r3, [r7, #12]
 c004b36:	3309      	adds	r3, #9
 c004b38:	7819      	ldrb	r1, [r3, #0]
 c004b3a:	683b      	ldr	r3, [r7, #0]
 c004b3c:	3309      	adds	r3, #9
 c004b3e:	781a      	ldrb	r2, [r3, #0]
 c004b40:	68fb      	ldr	r3, [r7, #12]
 c004b42:	3309      	adds	r3, #9
 c004b44:	404a      	eors	r2, r1
 c004b46:	b2d2      	uxtb	r2, r2
 c004b48:	701a      	strb	r2, [r3, #0]
 c004b4a:	68fb      	ldr	r3, [r7, #12]
 c004b4c:	330a      	adds	r3, #10
 c004b4e:	7819      	ldrb	r1, [r3, #0]
 c004b50:	683b      	ldr	r3, [r7, #0]
 c004b52:	330a      	adds	r3, #10
 c004b54:	781a      	ldrb	r2, [r3, #0]
 c004b56:	68fb      	ldr	r3, [r7, #12]
 c004b58:	330a      	adds	r3, #10
 c004b5a:	404a      	eors	r2, r1
 c004b5c:	b2d2      	uxtb	r2, r2
 c004b5e:	701a      	strb	r2, [r3, #0]
 c004b60:	68fb      	ldr	r3, [r7, #12]
 c004b62:	330b      	adds	r3, #11
 c004b64:	7819      	ldrb	r1, [r3, #0]
 c004b66:	683b      	ldr	r3, [r7, #0]
 c004b68:	330b      	adds	r3, #11
 c004b6a:	781a      	ldrb	r2, [r3, #0]
 c004b6c:	68fb      	ldr	r3, [r7, #12]
 c004b6e:	330b      	adds	r3, #11
 c004b70:	404a      	eors	r2, r1
 c004b72:	b2d2      	uxtb	r2, r2
 c004b74:	701a      	strb	r2, [r3, #0]
 c004b76:	68fb      	ldr	r3, [r7, #12]
 c004b78:	330c      	adds	r3, #12
 c004b7a:	7819      	ldrb	r1, [r3, #0]
 c004b7c:	683b      	ldr	r3, [r7, #0]
 c004b7e:	330c      	adds	r3, #12
 c004b80:	781a      	ldrb	r2, [r3, #0]
 c004b82:	68fb      	ldr	r3, [r7, #12]
 c004b84:	330c      	adds	r3, #12
 c004b86:	404a      	eors	r2, r1
 c004b88:	b2d2      	uxtb	r2, r2
 c004b8a:	701a      	strb	r2, [r3, #0]
 c004b8c:	68fb      	ldr	r3, [r7, #12]
 c004b8e:	330d      	adds	r3, #13
 c004b90:	7819      	ldrb	r1, [r3, #0]
 c004b92:	683b      	ldr	r3, [r7, #0]
 c004b94:	330d      	adds	r3, #13
 c004b96:	781a      	ldrb	r2, [r3, #0]
 c004b98:	68fb      	ldr	r3, [r7, #12]
 c004b9a:	330d      	adds	r3, #13
 c004b9c:	404a      	eors	r2, r1
 c004b9e:	b2d2      	uxtb	r2, r2
 c004ba0:	701a      	strb	r2, [r3, #0]
 c004ba2:	68fb      	ldr	r3, [r7, #12]
 c004ba4:	330e      	adds	r3, #14
 c004ba6:	7819      	ldrb	r1, [r3, #0]
 c004ba8:	683b      	ldr	r3, [r7, #0]
 c004baa:	330e      	adds	r3, #14
 c004bac:	781a      	ldrb	r2, [r3, #0]
 c004bae:	68fb      	ldr	r3, [r7, #12]
 c004bb0:	330e      	adds	r3, #14
 c004bb2:	404a      	eors	r2, r1
 c004bb4:	b2d2      	uxtb	r2, r2
 c004bb6:	701a      	strb	r2, [r3, #0]
 c004bb8:	68fb      	ldr	r3, [r7, #12]
 c004bba:	330f      	adds	r3, #15
 c004bbc:	7819      	ldrb	r1, [r3, #0]
 c004bbe:	683b      	ldr	r3, [r7, #0]
 c004bc0:	330f      	adds	r3, #15
 c004bc2:	781a      	ldrb	r2, [r3, #0]
 c004bc4:	68fb      	ldr	r3, [r7, #12]
 c004bc6:	330f      	adds	r3, #15
 c004bc8:	404a      	eors	r2, r1
 c004bca:	b2d2      	uxtb	r2, r2
 c004bcc:	701a      	strb	r2, [r3, #0]
 c004bce:	e008      	b.n	c004be2 <lea_cbc_dec+0x398>
		return;
 c004bd0:	bf00      	nop
 c004bd2:	e006      	b.n	c004be2 <lea_cbc_dec+0x398>
		return;
 c004bd4:	bf00      	nop
 c004bd6:	e004      	b.n	c004be2 <lea_cbc_dec+0x398>
		return;
 c004bd8:	bf00      	nop
 c004bda:	e002      	b.n	c004be2 <lea_cbc_dec+0x398>
		return;
 c004bdc:	bf00      	nop
 c004bde:	e000      	b.n	c004be2 <lea_cbc_dec+0x398>
		return;
 c004be0:	bf00      	nop

}
 c004be2:	3798      	adds	r7, #152	; 0x98
 c004be4:	46bd      	mov	sp, r7
 c004be6:	bd80      	pop	{r7, pc}

0c004be8 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c004be8:	b480      	push	{r7}
 c004bea:	b083      	sub	sp, #12
 c004bec:	af00      	add	r7, sp, #0
 c004bee:	4603      	mov	r3, r0
 c004bf0:	6039      	str	r1, [r7, #0]
 c004bf2:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c004bf4:	683b      	ldr	r3, [r7, #0]
 c004bf6:	2b00      	cmp	r3, #0
 c004bf8:	d00d      	beq.n	c004c16 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c004bfa:	79fb      	ldrb	r3, [r7, #7]
 c004bfc:	2b00      	cmp	r3, #0
 c004bfe:	d002      	beq.n	c004c06 <__acle_se_SECURE_RegisterCallback+0x1e>
 c004c00:	2b01      	cmp	r3, #1
 c004c02:	d004      	beq.n	c004c0e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c004c04:	e007      	b.n	c004c16 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c004c06:	4a20      	ldr	r2, [pc, #128]	; (c004c88 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c004c08:	683b      	ldr	r3, [r7, #0]
 c004c0a:	6013      	str	r3, [r2, #0]
        break;
 c004c0c:	e003      	b.n	c004c16 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c004c0e:	4a1f      	ldr	r2, [pc, #124]	; (c004c8c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c004c10:	683b      	ldr	r3, [r7, #0]
 c004c12:	6013      	str	r3, [r2, #0]
        break;
 c004c14:	bf00      	nop
    }
  }
}
 c004c16:	bf00      	nop
 c004c18:	370c      	adds	r7, #12
 c004c1a:	46bd      	mov	sp, r7
 c004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004c20:	4670      	mov	r0, lr
 c004c22:	4671      	mov	r1, lr
 c004c24:	4672      	mov	r2, lr
 c004c26:	4673      	mov	r3, lr
 c004c28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c004c2c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c004c30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c004c34:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c004c38:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c004c3c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c004c40:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c004c44:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c004c48:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c004c4c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c004c50:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c004c54:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c004c58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c004c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c004c64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c004c68:	f38e 8c00 	msr	CPSR_fs, lr
 c004c6c:	b410      	push	{r4}
 c004c6e:	eef1 ca10 	vmrs	ip, fpscr
 c004c72:	f64f 7460 	movw	r4, #65376	; 0xff60
 c004c76:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c004c7a:	ea0c 0c04 	and.w	ip, ip, r4
 c004c7e:	eee1 ca10 	vmsr	fpscr, ip
 c004c82:	bc10      	pop	{r4}
 c004c84:	46f4      	mov	ip, lr
 c004c86:	4774      	bxns	lr
 c004c88:	30000028 	.word	0x30000028
 c004c8c:	3000002c 	.word	0x3000002c

0c004c90 <__acle_se_set_key>:

CMSE_NS_ENTRY void set_key(uint8_t* key){
 c004c90:	b590      	push	{r4, r7, lr}
 c004c92:	b087      	sub	sp, #28
 c004c94:	af00      	add	r7, sp, #0
 c004c96:	6078      	str	r0, [r7, #4]
	uint8_t key_temp[16];
	memcpy(key_temp, key, 16);
 c004c98:	687b      	ldr	r3, [r7, #4]
 c004c9a:	f107 0408 	add.w	r4, r7, #8
 c004c9e:	6818      	ldr	r0, [r3, #0]
 c004ca0:	6859      	ldr	r1, [r3, #4]
 c004ca2:	689a      	ldr	r2, [r3, #8]
 c004ca4:	68db      	ldr	r3, [r3, #12]
 c004ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* set LEA key */
	lea_set_key(&lea_key, key_temp, 16);
 c004ca8:	f107 0308 	add.w	r3, r7, #8
 c004cac:	2210      	movs	r2, #16
 c004cae:	4619      	mov	r1, r3
 c004cb0:	481d      	ldr	r0, [pc, #116]	; (c004d28 <__acle_se_set_key+0x98>)
 c004cb2:	f7fb faed 	bl	c000290 <lea_set_key>
	return;
 c004cb6:	bf00      	nop
}
 c004cb8:	371c      	adds	r7, #28
 c004cba:	46bd      	mov	sp, r7
 c004cbc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 c004cc0:	4670      	mov	r0, lr
 c004cc2:	4671      	mov	r1, lr
 c004cc4:	4672      	mov	r2, lr
 c004cc6:	4673      	mov	r3, lr
 c004cc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c004ccc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c004cd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c004cd4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c004cd8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c004cdc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c004ce0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c004ce4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c004ce8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c004cec:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c004cf0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c004cf4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c004cf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c004cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c004d04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c004d08:	f38e 8c00 	msr	CPSR_fs, lr
 c004d0c:	b410      	push	{r4}
 c004d0e:	eef1 ca10 	vmrs	ip, fpscr
 c004d12:	f64f 7460 	movw	r4, #65376	; 0xff60
 c004d16:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c004d1a:	ea0c 0c04 	and.w	ip, ip, r4
 c004d1e:	eee1 ca10 	vmsr	fpscr, ip
 c004d22:	bc10      	pop	{r4}
 c004d24:	46f4      	mov	ip, lr
 c004d26:	4774      	bxns	lr
 c004d28:	30000030 	.word	0x30000030

0c004d2c <__acle_se_encrypt>:

CMSE_NS_ENTRY void encrypt(uint8_t* plain, uint8_t* iv){
 c004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c004d2e:	b099      	sub	sp, #100	; 0x64
 c004d30:	af02      	add	r7, sp, #8
 c004d32:	6078      	str	r0, [r7, #4]
 c004d34:	6039      	str	r1, [r7, #0]
	uint8_t plain_temp[STRING_LENGTH];
	uint8_t iv_temp[16];
	memcpy(plain_temp, plain, STRING_LENGTH);
 c004d36:	687b      	ldr	r3, [r7, #4]
 c004d38:	461c      	mov	r4, r3
 c004d3a:	f107 0618 	add.w	r6, r7, #24
 c004d3e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c004d42:	4635      	mov	r5, r6
 c004d44:	4623      	mov	r3, r4
 c004d46:	6818      	ldr	r0, [r3, #0]
 c004d48:	6859      	ldr	r1, [r3, #4]
 c004d4a:	689a      	ldr	r2, [r3, #8]
 c004d4c:	68db      	ldr	r3, [r3, #12]
 c004d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c004d50:	3410      	adds	r4, #16
 c004d52:	3610      	adds	r6, #16
 c004d54:	4564      	cmp	r4, ip
 c004d56:	d1f4      	bne.n	c004d42 <__acle_se_encrypt+0x16>
	lea_cbc_enc(plain_temp, plain_temp, STRING_LENGTH, iv_temp, &lea_key);
 c004d58:	f107 0308 	add.w	r3, r7, #8
 c004d5c:	f107 0118 	add.w	r1, r7, #24
 c004d60:	f107 0018 	add.w	r0, r7, #24
 c004d64:	4a27      	ldr	r2, [pc, #156]	; (c004e04 <__acle_se_encrypt+0xd8>)
 c004d66:	9200      	str	r2, [sp, #0]
 c004d68:	2240      	movs	r2, #64	; 0x40
 c004d6a:	f7ff fc76 	bl	c00465a <lea_cbc_enc>
	memcpy(plain, plain_temp, STRING_LENGTH);
 c004d6e:	687b      	ldr	r3, [r7, #4]
 c004d70:	f107 0418 	add.w	r4, r7, #24
 c004d74:	469c      	mov	ip, r3
 c004d76:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 c004d7a:	4665      	mov	r5, ip
 c004d7c:	4626      	mov	r6, r4
 c004d7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c004d80:	6028      	str	r0, [r5, #0]
 c004d82:	6069      	str	r1, [r5, #4]
 c004d84:	60aa      	str	r2, [r5, #8]
 c004d86:	60eb      	str	r3, [r5, #12]
 c004d88:	3410      	adds	r4, #16
 c004d8a:	f10c 0c10 	add.w	ip, ip, #16
 c004d8e:	4574      	cmp	r4, lr
 c004d90:	d1f3      	bne.n	c004d7a <__acle_se_encrypt+0x4e>
	return;
 c004d92:	bf00      	nop
}
 c004d94:	375c      	adds	r7, #92	; 0x5c
 c004d96:	46bd      	mov	sp, r7
 c004d98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 c004d9c:	4670      	mov	r0, lr
 c004d9e:	4671      	mov	r1, lr
 c004da0:	4672      	mov	r2, lr
 c004da2:	4673      	mov	r3, lr
 c004da4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c004da8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c004dac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c004db0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c004db4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c004db8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c004dbc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c004dc0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c004dc4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c004dc8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c004dcc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c004dd0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c004dd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c004dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c004de0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c004de4:	f38e 8c00 	msr	CPSR_fs, lr
 c004de8:	b410      	push	{r4}
 c004dea:	eef1 ca10 	vmrs	ip, fpscr
 c004dee:	f64f 7460 	movw	r4, #65376	; 0xff60
 c004df2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c004df6:	ea0c 0c04 	and.w	ip, ip, r4
 c004dfa:	eee1 ca10 	vmsr	fpscr, ip
 c004dfe:	bc10      	pop	{r4}
 c004e00:	46f4      	mov	ip, lr
 c004e02:	4774      	bxns	lr
 c004e04:	30000030 	.word	0x30000030

0c004e08 <__acle_se_decrypt>:

CMSE_NS_ENTRY void decrypt(uint8_t* plain, uint8_t* iv){
 c004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 c004e0a:	b099      	sub	sp, #100	; 0x64
 c004e0c:	af02      	add	r7, sp, #8
 c004e0e:	6078      	str	r0, [r7, #4]
 c004e10:	6039      	str	r1, [r7, #0]
	uint8_t plain_temp[STRING_LENGTH];
	uint8_t iv_temp[16];
	memcpy(plain_temp, plain, STRING_LENGTH);
 c004e12:	687b      	ldr	r3, [r7, #4]
 c004e14:	461c      	mov	r4, r3
 c004e16:	f107 0618 	add.w	r6, r7, #24
 c004e1a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c004e1e:	4635      	mov	r5, r6
 c004e20:	4623      	mov	r3, r4
 c004e22:	6818      	ldr	r0, [r3, #0]
 c004e24:	6859      	ldr	r1, [r3, #4]
 c004e26:	689a      	ldr	r2, [r3, #8]
 c004e28:	68db      	ldr	r3, [r3, #12]
 c004e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c004e2c:	3410      	adds	r4, #16
 c004e2e:	3610      	adds	r6, #16
 c004e30:	4564      	cmp	r4, ip
 c004e32:	d1f4      	bne.n	c004e1e <__acle_se_decrypt+0x16>
	lea_cbc_dec(plain_temp, plain_temp, STRING_LENGTH, iv_temp, &lea_key);
 c004e34:	f107 0308 	add.w	r3, r7, #8
 c004e38:	f107 0118 	add.w	r1, r7, #24
 c004e3c:	f107 0018 	add.w	r0, r7, #24
 c004e40:	4a27      	ldr	r2, [pc, #156]	; (c004ee0 <__acle_se_decrypt+0xd8>)
 c004e42:	9200      	str	r2, [sp, #0]
 c004e44:	2240      	movs	r2, #64	; 0x40
 c004e46:	f7ff fd00 	bl	c00484a <lea_cbc_dec>
	memcpy(plain, plain_temp, STRING_LENGTH);
 c004e4a:	687b      	ldr	r3, [r7, #4]
 c004e4c:	f107 0418 	add.w	r4, r7, #24
 c004e50:	469c      	mov	ip, r3
 c004e52:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 c004e56:	4665      	mov	r5, ip
 c004e58:	4626      	mov	r6, r4
 c004e5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c004e5c:	6028      	str	r0, [r5, #0]
 c004e5e:	6069      	str	r1, [r5, #4]
 c004e60:	60aa      	str	r2, [r5, #8]
 c004e62:	60eb      	str	r3, [r5, #12]
 c004e64:	3410      	adds	r4, #16
 c004e66:	f10c 0c10 	add.w	ip, ip, #16
 c004e6a:	4574      	cmp	r4, lr
 c004e6c:	d1f3      	bne.n	c004e56 <__acle_se_decrypt+0x4e>
	return;
 c004e6e:	bf00      	nop
}
 c004e70:	375c      	adds	r7, #92	; 0x5c
 c004e72:	46bd      	mov	sp, r7
 c004e74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 c004e78:	4670      	mov	r0, lr
 c004e7a:	4671      	mov	r1, lr
 c004e7c:	4672      	mov	r2, lr
 c004e7e:	4673      	mov	r3, lr
 c004e80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c004e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c004e88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c004e8c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c004e90:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c004e94:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c004e98:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c004e9c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c004ea0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c004ea4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c004ea8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c004eac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c004eb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c004eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c004ebc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c004ec0:	f38e 8c00 	msr	CPSR_fs, lr
 c004ec4:	b410      	push	{r4}
 c004ec6:	eef1 ca10 	vmrs	ip, fpscr
 c004eca:	f64f 7460 	movw	r4, #65376	; 0xff60
 c004ece:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c004ed2:	ea0c 0c04 	and.w	ip, ip, r4
 c004ed6:	eee1 ca10 	vmsr	fpscr, ip
 c004eda:	bc10      	pop	{r4}
 c004edc:	46f4      	mov	ip, lr
 c004ede:	4774      	bxns	lr
 c004ee0:	30000030 	.word	0x30000030

0c004ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c004ee4:	b480      	push	{r7}
 c004ee6:	b085      	sub	sp, #20
 c004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c004eea:	4b15      	ldr	r3, [pc, #84]	; (c004f40 <HAL_MspInit+0x5c>)
 c004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004eee:	4a14      	ldr	r2, [pc, #80]	; (c004f40 <HAL_MspInit+0x5c>)
 c004ef0:	f043 0301 	orr.w	r3, r3, #1
 c004ef4:	6613      	str	r3, [r2, #96]	; 0x60
 c004ef6:	4b12      	ldr	r3, [pc, #72]	; (c004f40 <HAL_MspInit+0x5c>)
 c004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004efa:	f003 0301 	and.w	r3, r3, #1
 c004efe:	60fb      	str	r3, [r7, #12]
 c004f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c004f02:	4b0f      	ldr	r3, [pc, #60]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004f06:	4a0e      	ldr	r2, [pc, #56]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004f0c:	6593      	str	r3, [r2, #88]	; 0x58
 c004f0e:	4b0c      	ldr	r3, [pc, #48]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004f16:	60bb      	str	r3, [r7, #8]
 c004f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c004f1a:	4b09      	ldr	r3, [pc, #36]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c004f1e:	4a08      	ldr	r2, [pc, #32]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c004f24:	6493      	str	r3, [r2, #72]	; 0x48
 c004f26:	4b06      	ldr	r3, [pc, #24]	; (c004f40 <HAL_MspInit+0x5c>)
 c004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c004f2e:	607b      	str	r3, [r7, #4]
 c004f30:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c004f32:	bf00      	nop
 c004f34:	3714      	adds	r7, #20
 c004f36:	46bd      	mov	sp, r7
 c004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f3c:	4770      	bx	lr
 c004f3e:	bf00      	nop
 c004f40:	50021000 	.word	0x50021000

0c004f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c004f44:	b480      	push	{r7}
 c004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c004f48:	e7fe      	b.n	c004f48 <NMI_Handler+0x4>

0c004f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c004f4a:	b480      	push	{r7}
 c004f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c004f4e:	e7fe      	b.n	c004f4e <HardFault_Handler+0x4>

0c004f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c004f50:	b480      	push	{r7}
 c004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c004f54:	e7fe      	b.n	c004f54 <MemManage_Handler+0x4>

0c004f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c004f56:	b480      	push	{r7}
 c004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c004f5a:	e7fe      	b.n	c004f5a <BusFault_Handler+0x4>

0c004f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c004f5c:	b480      	push	{r7}
 c004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c004f60:	e7fe      	b.n	c004f60 <UsageFault_Handler+0x4>

0c004f62 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c004f62:	b480      	push	{r7}
 c004f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c004f66:	e7fe      	b.n	c004f66 <SecureFault_Handler+0x4>

0c004f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c004f68:	b480      	push	{r7}
 c004f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c004f6c:	bf00      	nop
 c004f6e:	46bd      	mov	sp, r7
 c004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f74:	4770      	bx	lr

0c004f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c004f76:	b480      	push	{r7}
 c004f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c004f7a:	bf00      	nop
 c004f7c:	46bd      	mov	sp, r7
 c004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f82:	4770      	bx	lr

0c004f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c004f84:	b480      	push	{r7}
 c004f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c004f88:	bf00      	nop
 c004f8a:	46bd      	mov	sp, r7
 c004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f90:	4770      	bx	lr

0c004f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c004f92:	b580      	push	{r7, lr}
 c004f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c004f96:	f000 fa07 	bl	c0053a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c004f9a:	bf00      	nop
 c004f9c:	bd80      	pop	{r7, pc}
	...

0c004fa0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c004fa0:	b480      	push	{r7}
 c004fa2:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c004fa4:	4b2f      	ldr	r3, [pc, #188]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fa6:	2200      	movs	r2, #0
 c004fa8:	609a      	str	r2, [r3, #8]
 c004faa:	4b2e      	ldr	r3, [pc, #184]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fac:	4a2e      	ldr	r2, [pc, #184]	; (c005068 <TZ_SAU_Setup+0xc8>)
 c004fae:	60da      	str	r2, [r3, #12]
 c004fb0:	4b2c      	ldr	r3, [pc, #176]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fb2:	4a2e      	ldr	r2, [pc, #184]	; (c00506c <TZ_SAU_Setup+0xcc>)
 c004fb4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c004fb6:	4b2b      	ldr	r3, [pc, #172]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fb8:	2201      	movs	r2, #1
 c004fba:	609a      	str	r2, [r3, #8]
 c004fbc:	4b29      	ldr	r3, [pc, #164]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fbe:	4a2c      	ldr	r2, [pc, #176]	; (c005070 <TZ_SAU_Setup+0xd0>)
 c004fc0:	60da      	str	r2, [r3, #12]
 c004fc2:	4b28      	ldr	r3, [pc, #160]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fc4:	4a2b      	ldr	r2, [pc, #172]	; (c005074 <TZ_SAU_Setup+0xd4>)
 c004fc6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c004fc8:	4b26      	ldr	r3, [pc, #152]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fca:	2202      	movs	r2, #2
 c004fcc:	609a      	str	r2, [r3, #8]
 c004fce:	4b25      	ldr	r3, [pc, #148]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fd0:	4a29      	ldr	r2, [pc, #164]	; (c005078 <TZ_SAU_Setup+0xd8>)
 c004fd2:	60da      	str	r2, [r3, #12]
 c004fd4:	4b23      	ldr	r3, [pc, #140]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fd6:	4a29      	ldr	r2, [pc, #164]	; (c00507c <TZ_SAU_Setup+0xdc>)
 c004fd8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c004fda:	4b22      	ldr	r3, [pc, #136]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fdc:	2203      	movs	r2, #3
 c004fde:	609a      	str	r2, [r3, #8]
 c004fe0:	4b20      	ldr	r3, [pc, #128]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c004fe6:	60da      	str	r2, [r3, #12]
 c004fe8:	4b1e      	ldr	r3, [pc, #120]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004fea:	4a25      	ldr	r2, [pc, #148]	; (c005080 <TZ_SAU_Setup+0xe0>)
 c004fec:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c004fee:	4b1d      	ldr	r3, [pc, #116]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004ff0:	2204      	movs	r2, #4
 c004ff2:	609a      	str	r2, [r3, #8]
 c004ff4:	4b1b      	ldr	r3, [pc, #108]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004ff6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c004ffa:	60da      	str	r2, [r3, #12]
 c004ffc:	4b19      	ldr	r3, [pc, #100]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c004ffe:	4a21      	ldr	r2, [pc, #132]	; (c005084 <TZ_SAU_Setup+0xe4>)
 c005000:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c005002:	4b18      	ldr	r3, [pc, #96]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c005004:	2205      	movs	r2, #5
 c005006:	609a      	str	r2, [r3, #8]
 c005008:	4b16      	ldr	r3, [pc, #88]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c00500a:	4a1f      	ldr	r2, [pc, #124]	; (c005088 <TZ_SAU_Setup+0xe8>)
 c00500c:	60da      	str	r2, [r3, #12]
 c00500e:	4b15      	ldr	r3, [pc, #84]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c005010:	4a1e      	ldr	r2, [pc, #120]	; (c00508c <TZ_SAU_Setup+0xec>)
 c005012:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c005014:	4b13      	ldr	r3, [pc, #76]	; (c005064 <TZ_SAU_Setup+0xc4>)
 c005016:	2201      	movs	r2, #1
 c005018:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00501a:	4b1d      	ldr	r3, [pc, #116]	; (c005090 <TZ_SAU_Setup+0xf0>)
 c00501c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c005020:	4a1b      	ldr	r2, [pc, #108]	; (c005090 <TZ_SAU_Setup+0xf0>)
 c005022:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c005026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00502a:	4b1a      	ldr	r3, [pc, #104]	; (c005094 <TZ_SAU_Setup+0xf4>)
 c00502c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00502e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c005032:	4a18      	ldr	r2, [pc, #96]	; (c005094 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c005034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c005038:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00503a:	4b17      	ldr	r3, [pc, #92]	; (c005098 <TZ_SAU_Setup+0xf8>)
 c00503c:	2200      	movs	r2, #0
 c00503e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c005042:	4b15      	ldr	r3, [pc, #84]	; (c005098 <TZ_SAU_Setup+0xf8>)
 c005044:	2200      	movs	r2, #0
 c005046:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c00504a:	4b13      	ldr	r3, [pc, #76]	; (c005098 <TZ_SAU_Setup+0xf8>)
 c00504c:	2200      	movs	r2, #0
 c00504e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c005052:	4b11      	ldr	r3, [pc, #68]	; (c005098 <TZ_SAU_Setup+0xf8>)
 c005054:	2200      	movs	r2, #0
 c005056:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c00505a:	bf00      	nop
 c00505c:	46bd      	mov	sp, r7
 c00505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005062:	4770      	bx	lr
 c005064:	e000edd0 	.word	0xe000edd0
 c005068:	0c03e000 	.word	0x0c03e000
 c00506c:	0c03ffe3 	.word	0x0c03ffe3
 c005070:	08040000 	.word	0x08040000
 c005074:	0807ffe1 	.word	0x0807ffe1
 c005078:	20018000 	.word	0x20018000
 c00507c:	2003ffe1 	.word	0x2003ffe1
 c005080:	4fffffe1 	.word	0x4fffffe1
 c005084:	9fffffe1 	.word	0x9fffffe1
 c005088:	0bf90000 	.word	0x0bf90000
 c00508c:	0bfa8fe1 	.word	0x0bfa8fe1
 c005090:	e000ed00 	.word	0xe000ed00
 c005094:	e000ef30 	.word	0xe000ef30
 c005098:	e000e100 	.word	0xe000e100

0c00509c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c00509c:	b580      	push	{r7, lr}
 c00509e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0050a0:	f7ff ff7e 	bl	c004fa0 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0050a4:	4b08      	ldr	r3, [pc, #32]	; (c0050c8 <SystemInit+0x2c>)
 c0050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0050aa:	4a07      	ldr	r2, [pc, #28]	; (c0050c8 <SystemInit+0x2c>)
 c0050ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0050b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0050b4:	4b05      	ldr	r3, [pc, #20]	; (c0050cc <SystemInit+0x30>)
 c0050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0050ba:	4a04      	ldr	r2, [pc, #16]	; (c0050cc <SystemInit+0x30>)
 c0050bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0050c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0050c4:	bf00      	nop
 c0050c6:	bd80      	pop	{r7, pc}
 c0050c8:	e000ed00 	.word	0xe000ed00
 c0050cc:	e002ed00 	.word	0xe002ed00

0c0050d0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0050d0:	b480      	push	{r7}
 c0050d2:	b087      	sub	sp, #28
 c0050d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0050d6:	4b4f      	ldr	r3, [pc, #316]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0050d8:	681b      	ldr	r3, [r3, #0]
 c0050da:	f003 0308 	and.w	r3, r3, #8
 c0050de:	2b00      	cmp	r3, #0
 c0050e0:	d107      	bne.n	c0050f2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0050e2:	4b4c      	ldr	r3, [pc, #304]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0050e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0050e8:	0a1b      	lsrs	r3, r3, #8
 c0050ea:	f003 030f 	and.w	r3, r3, #15
 c0050ee:	617b      	str	r3, [r7, #20]
 c0050f0:	e005      	b.n	c0050fe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0050f2:	4b48      	ldr	r3, [pc, #288]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0050f4:	681b      	ldr	r3, [r3, #0]
 c0050f6:	091b      	lsrs	r3, r3, #4
 c0050f8:	f003 030f 	and.w	r3, r3, #15
 c0050fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0050fe:	4a46      	ldr	r2, [pc, #280]	; (c005218 <SystemCoreClockUpdate+0x148>)
 c005100:	697b      	ldr	r3, [r7, #20]
 c005102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005106:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c005108:	4b42      	ldr	r3, [pc, #264]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c00510a:	689b      	ldr	r3, [r3, #8]
 c00510c:	f003 030c 	and.w	r3, r3, #12
 c005110:	2b0c      	cmp	r3, #12
 c005112:	d866      	bhi.n	c0051e2 <SystemCoreClockUpdate+0x112>
 c005114:	a201      	add	r2, pc, #4	; (adr r2, c00511c <SystemCoreClockUpdate+0x4c>)
 c005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00511a:	bf00      	nop
 c00511c:	0c005151 	.word	0x0c005151
 c005120:	0c0051e3 	.word	0x0c0051e3
 c005124:	0c0051e3 	.word	0x0c0051e3
 c005128:	0c0051e3 	.word	0x0c0051e3
 c00512c:	0c005159 	.word	0x0c005159
 c005130:	0c0051e3 	.word	0x0c0051e3
 c005134:	0c0051e3 	.word	0x0c0051e3
 c005138:	0c0051e3 	.word	0x0c0051e3
 c00513c:	0c005161 	.word	0x0c005161
 c005140:	0c0051e3 	.word	0x0c0051e3
 c005144:	0c0051e3 	.word	0x0c0051e3
 c005148:	0c0051e3 	.word	0x0c0051e3
 c00514c:	0c005169 	.word	0x0c005169
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c005150:	4a32      	ldr	r2, [pc, #200]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c005152:	697b      	ldr	r3, [r7, #20]
 c005154:	6013      	str	r3, [r2, #0]
      break;
 c005156:	e048      	b.n	c0051ea <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c005158:	4b30      	ldr	r3, [pc, #192]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c00515a:	4a31      	ldr	r2, [pc, #196]	; (c005220 <SystemCoreClockUpdate+0x150>)
 c00515c:	601a      	str	r2, [r3, #0]
      break;
 c00515e:	e044      	b.n	c0051ea <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c005160:	4b2e      	ldr	r3, [pc, #184]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c005162:	4a2f      	ldr	r2, [pc, #188]	; (c005220 <SystemCoreClockUpdate+0x150>)
 c005164:	601a      	str	r2, [r3, #0]
      break;
 c005166:	e040      	b.n	c0051ea <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c005168:	4b2a      	ldr	r3, [pc, #168]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c00516a:	68db      	ldr	r3, [r3, #12]
 c00516c:	f003 0303 	and.w	r3, r3, #3
 c005170:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c005172:	4b28      	ldr	r3, [pc, #160]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c005174:	68db      	ldr	r3, [r3, #12]
 c005176:	091b      	lsrs	r3, r3, #4
 c005178:	f003 030f 	and.w	r3, r3, #15
 c00517c:	3301      	adds	r3, #1
 c00517e:	60bb      	str	r3, [r7, #8]
 c005180:	68fb      	ldr	r3, [r7, #12]
 c005182:	2b02      	cmp	r3, #2
 c005184:	d003      	beq.n	c00518e <SystemCoreClockUpdate+0xbe>
 c005186:	68fb      	ldr	r3, [r7, #12]
 c005188:	2b03      	cmp	r3, #3
 c00518a:	d006      	beq.n	c00519a <SystemCoreClockUpdate+0xca>
 c00518c:	e00b      	b.n	c0051a6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00518e:	4a24      	ldr	r2, [pc, #144]	; (c005220 <SystemCoreClockUpdate+0x150>)
 c005190:	68bb      	ldr	r3, [r7, #8]
 c005192:	fbb2 f3f3 	udiv	r3, r2, r3
 c005196:	613b      	str	r3, [r7, #16]
          break;
 c005198:	e00b      	b.n	c0051b2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00519a:	4a21      	ldr	r2, [pc, #132]	; (c005220 <SystemCoreClockUpdate+0x150>)
 c00519c:	68bb      	ldr	r3, [r7, #8]
 c00519e:	fbb2 f3f3 	udiv	r3, r2, r3
 c0051a2:	613b      	str	r3, [r7, #16]
          break;
 c0051a4:	e005      	b.n	c0051b2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0051a6:	697a      	ldr	r2, [r7, #20]
 c0051a8:	68bb      	ldr	r3, [r7, #8]
 c0051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0051ae:	613b      	str	r3, [r7, #16]
          break;
 c0051b0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0051b2:	4b18      	ldr	r3, [pc, #96]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0051b4:	68db      	ldr	r3, [r3, #12]
 c0051b6:	0a1b      	lsrs	r3, r3, #8
 c0051b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0051bc:	693b      	ldr	r3, [r7, #16]
 c0051be:	fb02 f303 	mul.w	r3, r2, r3
 c0051c2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0051c4:	4b13      	ldr	r3, [pc, #76]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0051c6:	68db      	ldr	r3, [r3, #12]
 c0051c8:	0e5b      	lsrs	r3, r3, #25
 c0051ca:	f003 0303 	and.w	r3, r3, #3
 c0051ce:	3301      	adds	r3, #1
 c0051d0:	005b      	lsls	r3, r3, #1
 c0051d2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0051d4:	693a      	ldr	r2, [r7, #16]
 c0051d6:	687b      	ldr	r3, [r7, #4]
 c0051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0051dc:	4a0f      	ldr	r2, [pc, #60]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c0051de:	6013      	str	r3, [r2, #0]
      break;
 c0051e0:	e003      	b.n	c0051ea <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0051e2:	4a0e      	ldr	r2, [pc, #56]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c0051e4:	697b      	ldr	r3, [r7, #20]
 c0051e6:	6013      	str	r3, [r2, #0]
      break;
 c0051e8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0051ea:	4b0a      	ldr	r3, [pc, #40]	; (c005214 <SystemCoreClockUpdate+0x144>)
 c0051ec:	689b      	ldr	r3, [r3, #8]
 c0051ee:	091b      	lsrs	r3, r3, #4
 c0051f0:	f003 030f 	and.w	r3, r3, #15
 c0051f4:	4a0b      	ldr	r2, [pc, #44]	; (c005224 <SystemCoreClockUpdate+0x154>)
 c0051f6:	5cd3      	ldrb	r3, [r2, r3]
 c0051f8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0051fa:	4b08      	ldr	r3, [pc, #32]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c0051fc:	681a      	ldr	r2, [r3, #0]
 c0051fe:	683b      	ldr	r3, [r7, #0]
 c005200:	fa22 f303 	lsr.w	r3, r2, r3
 c005204:	4a05      	ldr	r2, [pc, #20]	; (c00521c <SystemCoreClockUpdate+0x14c>)
 c005206:	6013      	str	r3, [r2, #0]
}
 c005208:	bf00      	nop
 c00520a:	371c      	adds	r7, #28
 c00520c:	46bd      	mov	sp, r7
 c00520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005212:	4770      	bx	lr
 c005214:	50021000 	.word	0x50021000
 c005218:	0c005ac0 	.word	0x0c005ac0
 c00521c:	30000000 	.word	0x30000000
 c005220:	00f42400 	.word	0x00f42400
 c005224:	0c005ab0 	.word	0x0c005ab0

0c005228 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c005228:	b580      	push	{r7, lr}
 c00522a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00522c:	f7ff ff50 	bl	c0050d0 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c005230:	4b1c      	ldr	r3, [pc, #112]	; (c0052a4 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c005232:	681b      	ldr	r3, [r3, #0]
}
 c005234:	4618      	mov	r0, r3
 c005236:	46bd      	mov	sp, r7
 c005238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00523c:	4671      	mov	r1, lr
 c00523e:	4672      	mov	r2, lr
 c005240:	4673      	mov	r3, lr
 c005242:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c005246:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00524a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00524e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c005252:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c005256:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00525a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00525e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c005262:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c005266:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00526a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00526e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c005272:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c005276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00527a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00527e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c005282:	f38e 8c00 	msr	CPSR_fs, lr
 c005286:	b410      	push	{r4}
 c005288:	eef1 ca10 	vmrs	ip, fpscr
 c00528c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c005290:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c005294:	ea0c 0c04 	and.w	ip, ip, r4
 c005298:	eee1 ca10 	vmsr	fpscr, ip
 c00529c:	bc10      	pop	{r4}
 c00529e:	46f4      	mov	ip, lr
 c0052a0:	4774      	bxns	lr
 c0052a2:	bf00      	nop
 c0052a4:	30000000 	.word	0x30000000

0c0052a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0052a8:	f8df d034 	ldr.w	sp, [pc, #52]	; c0052e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c0052ac:	f7ff fef6 	bl	c00509c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0052b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0052b2:	e003      	b.n	c0052bc <LoopCopyDataInit>

0c0052b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0052b4:	4b0b      	ldr	r3, [pc, #44]	; (c0052e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0052b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0052b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0052ba:	3104      	adds	r1, #4

0c0052bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0052bc:	480a      	ldr	r0, [pc, #40]	; (c0052e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0052be:	4b0b      	ldr	r3, [pc, #44]	; (c0052ec <LoopForever+0xe>)
	adds	r2, r0, r1
 c0052c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0052c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0052c4:	d3f6      	bcc.n	c0052b4 <CopyDataInit>
	ldr	r2, =_sbss
 c0052c6:	4a0a      	ldr	r2, [pc, #40]	; (c0052f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 c0052c8:	e002      	b.n	c0052d0 <LoopFillZerobss>

0c0052ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0052ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0052cc:	f842 3b04 	str.w	r3, [r2], #4

0c0052d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0052d0:	4b08      	ldr	r3, [pc, #32]	; (c0052f4 <LoopForever+0x16>)
	cmp	r2, r3
 c0052d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0052d4:	d3f9      	bcc.n	c0052ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0052d6:	f000 fbbb 	bl	c005a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0052da:	f7ff f897 	bl	c00440c <main>

0c0052de <LoopForever>:

LoopForever:
    b LoopForever
 c0052de:	e7fe      	b.n	c0052de <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0052e0:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0052e4:	0c005b08 	.word	0x0c005b08
	ldr	r0, =_sdata
 c0052e8:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0052ec:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c0052f0:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c0052f4:	30000338 	.word	0x30000338

0c0052f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0052f8:	e7fe      	b.n	c0052f8 <ADC1_2_IRQHandler>

0c0052fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0052fa:	b580      	push	{r7, lr}
 c0052fc:	b082      	sub	sp, #8
 c0052fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c005300:	2300      	movs	r3, #0
 c005302:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c005304:	2004      	movs	r0, #4
 c005306:	f000 f915 	bl	c005534 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c00530a:	f7ff fee1 	bl	c0050d0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c00530e:	2007      	movs	r0, #7
 c005310:	f000 f80e 	bl	c005330 <HAL_InitTick>
 c005314:	4603      	mov	r3, r0
 c005316:	2b00      	cmp	r3, #0
 c005318:	d002      	beq.n	c005320 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c00531a:	2301      	movs	r3, #1
 c00531c:	71fb      	strb	r3, [r7, #7]
 c00531e:	e001      	b.n	c005324 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c005320:	f7ff fde0 	bl	c004ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c005324:	79fb      	ldrb	r3, [r7, #7]
}
 c005326:	4618      	mov	r0, r3
 c005328:	3708      	adds	r7, #8
 c00532a:	46bd      	mov	sp, r7
 c00532c:	bd80      	pop	{r7, pc}
	...

0c005330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c005330:	b580      	push	{r7, lr}
 c005332:	b084      	sub	sp, #16
 c005334:	af00      	add	r7, sp, #0
 c005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c005338:	2300      	movs	r3, #0
 c00533a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c00533c:	4b17      	ldr	r3, [pc, #92]	; (c00539c <HAL_InitTick+0x6c>)
 c00533e:	781b      	ldrb	r3, [r3, #0]
 c005340:	2b00      	cmp	r3, #0
 c005342:	d023      	beq.n	c00538c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c005344:	4b16      	ldr	r3, [pc, #88]	; (c0053a0 <HAL_InitTick+0x70>)
 c005346:	681a      	ldr	r2, [r3, #0]
 c005348:	4b14      	ldr	r3, [pc, #80]	; (c00539c <HAL_InitTick+0x6c>)
 c00534a:	781b      	ldrb	r3, [r3, #0]
 c00534c:	4619      	mov	r1, r3
 c00534e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c005352:	fbb3 f3f1 	udiv	r3, r3, r1
 c005356:	fbb2 f3f3 	udiv	r3, r2, r3
 c00535a:	4618      	mov	r0, r3
 c00535c:	f000 f90f 	bl	c00557e <HAL_SYSTICK_Config>
 c005360:	4603      	mov	r3, r0
 c005362:	2b00      	cmp	r3, #0
 c005364:	d10f      	bne.n	c005386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c005366:	687b      	ldr	r3, [r7, #4]
 c005368:	2b07      	cmp	r3, #7
 c00536a:	d809      	bhi.n	c005380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00536c:	2200      	movs	r2, #0
 c00536e:	6879      	ldr	r1, [r7, #4]
 c005370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c005374:	f000 f8e9 	bl	c00554a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c005378:	4a0a      	ldr	r2, [pc, #40]	; (c0053a4 <HAL_InitTick+0x74>)
 c00537a:	687b      	ldr	r3, [r7, #4]
 c00537c:	6013      	str	r3, [r2, #0]
 c00537e:	e007      	b.n	c005390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c005380:	2301      	movs	r3, #1
 c005382:	73fb      	strb	r3, [r7, #15]
 c005384:	e004      	b.n	c005390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c005386:	2301      	movs	r3, #1
 c005388:	73fb      	strb	r3, [r7, #15]
 c00538a:	e001      	b.n	c005390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c00538c:	2301      	movs	r3, #1
 c00538e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c005390:	7bfb      	ldrb	r3, [r7, #15]
}
 c005392:	4618      	mov	r0, r3
 c005394:	3710      	adds	r7, #16
 c005396:	46bd      	mov	sp, r7
 c005398:	bd80      	pop	{r7, pc}
 c00539a:	bf00      	nop
 c00539c:	30000008 	.word	0x30000008
 c0053a0:	30000000 	.word	0x30000000
 c0053a4:	30000004 	.word	0x30000004

0c0053a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0053a8:	b480      	push	{r7}
 c0053aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0053ac:	4b06      	ldr	r3, [pc, #24]	; (c0053c8 <HAL_IncTick+0x20>)
 c0053ae:	781b      	ldrb	r3, [r3, #0]
 c0053b0:	461a      	mov	r2, r3
 c0053b2:	4b06      	ldr	r3, [pc, #24]	; (c0053cc <HAL_IncTick+0x24>)
 c0053b4:	681b      	ldr	r3, [r3, #0]
 c0053b6:	4413      	add	r3, r2
 c0053b8:	4a04      	ldr	r2, [pc, #16]	; (c0053cc <HAL_IncTick+0x24>)
 c0053ba:	6013      	str	r3, [r2, #0]
}
 c0053bc:	bf00      	nop
 c0053be:	46bd      	mov	sp, r7
 c0053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0053c4:	4770      	bx	lr
 c0053c6:	bf00      	nop
 c0053c8:	30000008 	.word	0x30000008
 c0053cc:	30000334 	.word	0x30000334

0c0053d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0053d0:	b480      	push	{r7}
 c0053d2:	b085      	sub	sp, #20
 c0053d4:	af00      	add	r7, sp, #0
 c0053d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0053d8:	687b      	ldr	r3, [r7, #4]
 c0053da:	f003 0307 	and.w	r3, r3, #7
 c0053de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0053e0:	4b0c      	ldr	r3, [pc, #48]	; (c005414 <__NVIC_SetPriorityGrouping+0x44>)
 c0053e2:	68db      	ldr	r3, [r3, #12]
 c0053e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0053e6:	68ba      	ldr	r2, [r7, #8]
 c0053e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0053ec:	4013      	ands	r3, r2
 c0053ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0053f0:	68fb      	ldr	r3, [r7, #12]
 c0053f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0053f4:	68bb      	ldr	r3, [r7, #8]
 c0053f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0053f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0053fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c005402:	4a04      	ldr	r2, [pc, #16]	; (c005414 <__NVIC_SetPriorityGrouping+0x44>)
 c005404:	68bb      	ldr	r3, [r7, #8]
 c005406:	60d3      	str	r3, [r2, #12]
}
 c005408:	bf00      	nop
 c00540a:	3714      	adds	r7, #20
 c00540c:	46bd      	mov	sp, r7
 c00540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005412:	4770      	bx	lr
 c005414:	e000ed00 	.word	0xe000ed00

0c005418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c005418:	b480      	push	{r7}
 c00541a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c00541c:	4b04      	ldr	r3, [pc, #16]	; (c005430 <__NVIC_GetPriorityGrouping+0x18>)
 c00541e:	68db      	ldr	r3, [r3, #12]
 c005420:	0a1b      	lsrs	r3, r3, #8
 c005422:	f003 0307 	and.w	r3, r3, #7
}
 c005426:	4618      	mov	r0, r3
 c005428:	46bd      	mov	sp, r7
 c00542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00542e:	4770      	bx	lr
 c005430:	e000ed00 	.word	0xe000ed00

0c005434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c005434:	b480      	push	{r7}
 c005436:	b083      	sub	sp, #12
 c005438:	af00      	add	r7, sp, #0
 c00543a:	4603      	mov	r3, r0
 c00543c:	6039      	str	r1, [r7, #0]
 c00543e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c005440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005444:	2b00      	cmp	r3, #0
 c005446:	db0a      	blt.n	c00545e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005448:	683b      	ldr	r3, [r7, #0]
 c00544a:	b2da      	uxtb	r2, r3
 c00544c:	490c      	ldr	r1, [pc, #48]	; (c005480 <__NVIC_SetPriority+0x4c>)
 c00544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005452:	0152      	lsls	r2, r2, #5
 c005454:	b2d2      	uxtb	r2, r2
 c005456:	440b      	add	r3, r1
 c005458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c00545c:	e00a      	b.n	c005474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00545e:	683b      	ldr	r3, [r7, #0]
 c005460:	b2da      	uxtb	r2, r3
 c005462:	4908      	ldr	r1, [pc, #32]	; (c005484 <__NVIC_SetPriority+0x50>)
 c005464:	79fb      	ldrb	r3, [r7, #7]
 c005466:	f003 030f 	and.w	r3, r3, #15
 c00546a:	3b04      	subs	r3, #4
 c00546c:	0152      	lsls	r2, r2, #5
 c00546e:	b2d2      	uxtb	r2, r2
 c005470:	440b      	add	r3, r1
 c005472:	761a      	strb	r2, [r3, #24]
}
 c005474:	bf00      	nop
 c005476:	370c      	adds	r7, #12
 c005478:	46bd      	mov	sp, r7
 c00547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00547e:	4770      	bx	lr
 c005480:	e000e100 	.word	0xe000e100
 c005484:	e000ed00 	.word	0xe000ed00

0c005488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005488:	b480      	push	{r7}
 c00548a:	b089      	sub	sp, #36	; 0x24
 c00548c:	af00      	add	r7, sp, #0
 c00548e:	60f8      	str	r0, [r7, #12]
 c005490:	60b9      	str	r1, [r7, #8]
 c005492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c005494:	68fb      	ldr	r3, [r7, #12]
 c005496:	f003 0307 	and.w	r3, r3, #7
 c00549a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c00549c:	69fb      	ldr	r3, [r7, #28]
 c00549e:	f1c3 0307 	rsb	r3, r3, #7
 c0054a2:	2b03      	cmp	r3, #3
 c0054a4:	bf28      	it	cs
 c0054a6:	2303      	movcs	r3, #3
 c0054a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0054aa:	69fb      	ldr	r3, [r7, #28]
 c0054ac:	3303      	adds	r3, #3
 c0054ae:	2b06      	cmp	r3, #6
 c0054b0:	d902      	bls.n	c0054b8 <NVIC_EncodePriority+0x30>
 c0054b2:	69fb      	ldr	r3, [r7, #28]
 c0054b4:	3b04      	subs	r3, #4
 c0054b6:	e000      	b.n	c0054ba <NVIC_EncodePriority+0x32>
 c0054b8:	2300      	movs	r3, #0
 c0054ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0054bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0054c0:	69bb      	ldr	r3, [r7, #24]
 c0054c2:	fa02 f303 	lsl.w	r3, r2, r3
 c0054c6:	43da      	mvns	r2, r3
 c0054c8:	68bb      	ldr	r3, [r7, #8]
 c0054ca:	401a      	ands	r2, r3
 c0054cc:	697b      	ldr	r3, [r7, #20]
 c0054ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0054d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c0054d4:	697b      	ldr	r3, [r7, #20]
 c0054d6:	fa01 f303 	lsl.w	r3, r1, r3
 c0054da:	43d9      	mvns	r1, r3
 c0054dc:	687b      	ldr	r3, [r7, #4]
 c0054de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0054e0:	4313      	orrs	r3, r2
         );
}
 c0054e2:	4618      	mov	r0, r3
 c0054e4:	3724      	adds	r7, #36	; 0x24
 c0054e6:	46bd      	mov	sp, r7
 c0054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054ec:	4770      	bx	lr
	...

0c0054f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0054f0:	b580      	push	{r7, lr}
 c0054f2:	b082      	sub	sp, #8
 c0054f4:	af00      	add	r7, sp, #0
 c0054f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0054f8:	687b      	ldr	r3, [r7, #4]
 c0054fa:	3b01      	subs	r3, #1
 c0054fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c005500:	d301      	bcc.n	c005506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c005502:	2301      	movs	r3, #1
 c005504:	e00f      	b.n	c005526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c005506:	4a0a      	ldr	r2, [pc, #40]	; (c005530 <SysTick_Config+0x40>)
 c005508:	687b      	ldr	r3, [r7, #4]
 c00550a:	3b01      	subs	r3, #1
 c00550c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00550e:	2107      	movs	r1, #7
 c005510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c005514:	f7ff ff8e 	bl	c005434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c005518:	4b05      	ldr	r3, [pc, #20]	; (c005530 <SysTick_Config+0x40>)
 c00551a:	2200      	movs	r2, #0
 c00551c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00551e:	4b04      	ldr	r3, [pc, #16]	; (c005530 <SysTick_Config+0x40>)
 c005520:	2207      	movs	r2, #7
 c005522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c005524:	2300      	movs	r3, #0
}
 c005526:	4618      	mov	r0, r3
 c005528:	3708      	adds	r7, #8
 c00552a:	46bd      	mov	sp, r7
 c00552c:	bd80      	pop	{r7, pc}
 c00552e:	bf00      	nop
 c005530:	e000e010 	.word	0xe000e010

0c005534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005534:	b580      	push	{r7, lr}
 c005536:	b082      	sub	sp, #8
 c005538:	af00      	add	r7, sp, #0
 c00553a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00553c:	6878      	ldr	r0, [r7, #4]
 c00553e:	f7ff ff47 	bl	c0053d0 <__NVIC_SetPriorityGrouping>
}
 c005542:	bf00      	nop
 c005544:	3708      	adds	r7, #8
 c005546:	46bd      	mov	sp, r7
 c005548:	bd80      	pop	{r7, pc}

0c00554a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00554a:	b580      	push	{r7, lr}
 c00554c:	b086      	sub	sp, #24
 c00554e:	af00      	add	r7, sp, #0
 c005550:	4603      	mov	r3, r0
 c005552:	60b9      	str	r1, [r7, #8]
 c005554:	607a      	str	r2, [r7, #4]
 c005556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c005558:	f7ff ff5e 	bl	c005418 <__NVIC_GetPriorityGrouping>
 c00555c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00555e:	687a      	ldr	r2, [r7, #4]
 c005560:	68b9      	ldr	r1, [r7, #8]
 c005562:	6978      	ldr	r0, [r7, #20]
 c005564:	f7ff ff90 	bl	c005488 <NVIC_EncodePriority>
 c005568:	4602      	mov	r2, r0
 c00556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00556e:	4611      	mov	r1, r2
 c005570:	4618      	mov	r0, r3
 c005572:	f7ff ff5f 	bl	c005434 <__NVIC_SetPriority>
}
 c005576:	bf00      	nop
 c005578:	3718      	adds	r7, #24
 c00557a:	46bd      	mov	sp, r7
 c00557c:	bd80      	pop	{r7, pc}

0c00557e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00557e:	b580      	push	{r7, lr}
 c005580:	b082      	sub	sp, #8
 c005582:	af00      	add	r7, sp, #0
 c005584:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c005586:	6878      	ldr	r0, [r7, #4]
 c005588:	f7ff ffb2 	bl	c0054f0 <SysTick_Config>
 c00558c:	4603      	mov	r3, r0
}
 c00558e:	4618      	mov	r0, r3
 c005590:	3708      	adds	r7, #8
 c005592:	46bd      	mov	sp, r7
 c005594:	bd80      	pop	{r7, pc}
	...

0c005598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c005598:	b480      	push	{r7}
 c00559a:	b087      	sub	sp, #28
 c00559c:	af00      	add	r7, sp, #0
 c00559e:	6078      	str	r0, [r7, #4]
 c0055a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0055a2:	2300      	movs	r3, #0
 c0055a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0055a6:	e158      	b.n	c00585a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0055a8:	683b      	ldr	r3, [r7, #0]
 c0055aa:	681a      	ldr	r2, [r3, #0]
 c0055ac:	2101      	movs	r1, #1
 c0055ae:	697b      	ldr	r3, [r7, #20]
 c0055b0:	fa01 f303 	lsl.w	r3, r1, r3
 c0055b4:	4013      	ands	r3, r2
 c0055b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0055b8:	68fb      	ldr	r3, [r7, #12]
 c0055ba:	2b00      	cmp	r3, #0
 c0055bc:	f000 814a 	beq.w	c005854 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c0055c0:	683b      	ldr	r3, [r7, #0]
 c0055c2:	685b      	ldr	r3, [r3, #4]
 c0055c4:	f003 0303 	and.w	r3, r3, #3
 c0055c8:	2b01      	cmp	r3, #1
 c0055ca:	d005      	beq.n	c0055d8 <HAL_GPIO_Init+0x40>
 c0055cc:	683b      	ldr	r3, [r7, #0]
 c0055ce:	685b      	ldr	r3, [r3, #4]
 c0055d0:	f003 0303 	and.w	r3, r3, #3
 c0055d4:	2b02      	cmp	r3, #2
 c0055d6:	d130      	bne.n	c00563a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c0055d8:	687b      	ldr	r3, [r7, #4]
 c0055da:	689b      	ldr	r3, [r3, #8]
 c0055dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0055de:	697b      	ldr	r3, [r7, #20]
 c0055e0:	005b      	lsls	r3, r3, #1
 c0055e2:	2203      	movs	r2, #3
 c0055e4:	fa02 f303 	lsl.w	r3, r2, r3
 c0055e8:	43db      	mvns	r3, r3
 c0055ea:	693a      	ldr	r2, [r7, #16]
 c0055ec:	4013      	ands	r3, r2
 c0055ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0055f0:	683b      	ldr	r3, [r7, #0]
 c0055f2:	68da      	ldr	r2, [r3, #12]
 c0055f4:	697b      	ldr	r3, [r7, #20]
 c0055f6:	005b      	lsls	r3, r3, #1
 c0055f8:	fa02 f303 	lsl.w	r3, r2, r3
 c0055fc:	693a      	ldr	r2, [r7, #16]
 c0055fe:	4313      	orrs	r3, r2
 c005600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c005602:	687b      	ldr	r3, [r7, #4]
 c005604:	693a      	ldr	r2, [r7, #16]
 c005606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c005608:	687b      	ldr	r3, [r7, #4]
 c00560a:	685b      	ldr	r3, [r3, #4]
 c00560c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00560e:	2201      	movs	r2, #1
 c005610:	697b      	ldr	r3, [r7, #20]
 c005612:	fa02 f303 	lsl.w	r3, r2, r3
 c005616:	43db      	mvns	r3, r3
 c005618:	693a      	ldr	r2, [r7, #16]
 c00561a:	4013      	ands	r3, r2
 c00561c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c00561e:	683b      	ldr	r3, [r7, #0]
 c005620:	685b      	ldr	r3, [r3, #4]
 c005622:	091b      	lsrs	r3, r3, #4
 c005624:	f003 0201 	and.w	r2, r3, #1
 c005628:	697b      	ldr	r3, [r7, #20]
 c00562a:	fa02 f303 	lsl.w	r3, r2, r3
 c00562e:	693a      	ldr	r2, [r7, #16]
 c005630:	4313      	orrs	r3, r2
 c005632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c005634:	687b      	ldr	r3, [r7, #4]
 c005636:	693a      	ldr	r2, [r7, #16]
 c005638:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c00563a:	683b      	ldr	r3, [r7, #0]
 c00563c:	685b      	ldr	r3, [r3, #4]
 c00563e:	f003 0303 	and.w	r3, r3, #3
 c005642:	2b03      	cmp	r3, #3
 c005644:	d017      	beq.n	c005676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c005646:	687b      	ldr	r3, [r7, #4]
 c005648:	68db      	ldr	r3, [r3, #12]
 c00564a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c00564c:	697b      	ldr	r3, [r7, #20]
 c00564e:	005b      	lsls	r3, r3, #1
 c005650:	2203      	movs	r2, #3
 c005652:	fa02 f303 	lsl.w	r3, r2, r3
 c005656:	43db      	mvns	r3, r3
 c005658:	693a      	ldr	r2, [r7, #16]
 c00565a:	4013      	ands	r3, r2
 c00565c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c00565e:	683b      	ldr	r3, [r7, #0]
 c005660:	689a      	ldr	r2, [r3, #8]
 c005662:	697b      	ldr	r3, [r7, #20]
 c005664:	005b      	lsls	r3, r3, #1
 c005666:	fa02 f303 	lsl.w	r3, r2, r3
 c00566a:	693a      	ldr	r2, [r7, #16]
 c00566c:	4313      	orrs	r3, r2
 c00566e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c005670:	687b      	ldr	r3, [r7, #4]
 c005672:	693a      	ldr	r2, [r7, #16]
 c005674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c005676:	683b      	ldr	r3, [r7, #0]
 c005678:	685b      	ldr	r3, [r3, #4]
 c00567a:	f003 0303 	and.w	r3, r3, #3
 c00567e:	2b02      	cmp	r3, #2
 c005680:	d123      	bne.n	c0056ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c005682:	697b      	ldr	r3, [r7, #20]
 c005684:	08da      	lsrs	r2, r3, #3
 c005686:	687b      	ldr	r3, [r7, #4]
 c005688:	3208      	adds	r2, #8
 c00568a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00568e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c005690:	697b      	ldr	r3, [r7, #20]
 c005692:	f003 0307 	and.w	r3, r3, #7
 c005696:	009b      	lsls	r3, r3, #2
 c005698:	220f      	movs	r2, #15
 c00569a:	fa02 f303 	lsl.w	r3, r2, r3
 c00569e:	43db      	mvns	r3, r3
 c0056a0:	693a      	ldr	r2, [r7, #16]
 c0056a2:	4013      	ands	r3, r2
 c0056a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0056a6:	683b      	ldr	r3, [r7, #0]
 c0056a8:	691a      	ldr	r2, [r3, #16]
 c0056aa:	697b      	ldr	r3, [r7, #20]
 c0056ac:	f003 0307 	and.w	r3, r3, #7
 c0056b0:	009b      	lsls	r3, r3, #2
 c0056b2:	fa02 f303 	lsl.w	r3, r2, r3
 c0056b6:	693a      	ldr	r2, [r7, #16]
 c0056b8:	4313      	orrs	r3, r2
 c0056ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0056bc:	697b      	ldr	r3, [r7, #20]
 c0056be:	08da      	lsrs	r2, r3, #3
 c0056c0:	687b      	ldr	r3, [r7, #4]
 c0056c2:	3208      	adds	r2, #8
 c0056c4:	6939      	ldr	r1, [r7, #16]
 c0056c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c0056ca:	687b      	ldr	r3, [r7, #4]
 c0056cc:	681b      	ldr	r3, [r3, #0]
 c0056ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0056d0:	697b      	ldr	r3, [r7, #20]
 c0056d2:	005b      	lsls	r3, r3, #1
 c0056d4:	2203      	movs	r2, #3
 c0056d6:	fa02 f303 	lsl.w	r3, r2, r3
 c0056da:	43db      	mvns	r3, r3
 c0056dc:	693a      	ldr	r2, [r7, #16]
 c0056de:	4013      	ands	r3, r2
 c0056e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0056e2:	683b      	ldr	r3, [r7, #0]
 c0056e4:	685b      	ldr	r3, [r3, #4]
 c0056e6:	f003 0203 	and.w	r2, r3, #3
 c0056ea:	697b      	ldr	r3, [r7, #20]
 c0056ec:	005b      	lsls	r3, r3, #1
 c0056ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0056f2:	693a      	ldr	r2, [r7, #16]
 c0056f4:	4313      	orrs	r3, r2
 c0056f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c0056f8:	687b      	ldr	r3, [r7, #4]
 c0056fa:	693a      	ldr	r2, [r7, #16]
 c0056fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c0056fe:	683b      	ldr	r3, [r7, #0]
 c005700:	685b      	ldr	r3, [r3, #4]
 c005702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c005706:	2b00      	cmp	r3, #0
 c005708:	f000 80a4 	beq.w	c005854 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c00570c:	4a5a      	ldr	r2, [pc, #360]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c00570e:	697b      	ldr	r3, [r7, #20]
 c005710:	089b      	lsrs	r3, r3, #2
 c005712:	3318      	adds	r3, #24
 c005714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005718:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00571a:	697b      	ldr	r3, [r7, #20]
 c00571c:	f003 0303 	and.w	r3, r3, #3
 c005720:	00db      	lsls	r3, r3, #3
 c005722:	220f      	movs	r2, #15
 c005724:	fa02 f303 	lsl.w	r3, r2, r3
 c005728:	43db      	mvns	r3, r3
 c00572a:	693a      	ldr	r2, [r7, #16]
 c00572c:	4013      	ands	r3, r2
 c00572e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c005730:	687b      	ldr	r3, [r7, #4]
 c005732:	4a52      	ldr	r2, [pc, #328]	; (c00587c <HAL_GPIO_Init+0x2e4>)
 c005734:	4293      	cmp	r3, r2
 c005736:	d025      	beq.n	c005784 <HAL_GPIO_Init+0x1ec>
 c005738:	687b      	ldr	r3, [r7, #4]
 c00573a:	4a51      	ldr	r2, [pc, #324]	; (c005880 <HAL_GPIO_Init+0x2e8>)
 c00573c:	4293      	cmp	r3, r2
 c00573e:	d01f      	beq.n	c005780 <HAL_GPIO_Init+0x1e8>
 c005740:	687b      	ldr	r3, [r7, #4]
 c005742:	4a50      	ldr	r2, [pc, #320]	; (c005884 <HAL_GPIO_Init+0x2ec>)
 c005744:	4293      	cmp	r3, r2
 c005746:	d019      	beq.n	c00577c <HAL_GPIO_Init+0x1e4>
 c005748:	687b      	ldr	r3, [r7, #4]
 c00574a:	4a4f      	ldr	r2, [pc, #316]	; (c005888 <HAL_GPIO_Init+0x2f0>)
 c00574c:	4293      	cmp	r3, r2
 c00574e:	d013      	beq.n	c005778 <HAL_GPIO_Init+0x1e0>
 c005750:	687b      	ldr	r3, [r7, #4]
 c005752:	4a4e      	ldr	r2, [pc, #312]	; (c00588c <HAL_GPIO_Init+0x2f4>)
 c005754:	4293      	cmp	r3, r2
 c005756:	d00d      	beq.n	c005774 <HAL_GPIO_Init+0x1dc>
 c005758:	687b      	ldr	r3, [r7, #4]
 c00575a:	4a4d      	ldr	r2, [pc, #308]	; (c005890 <HAL_GPIO_Init+0x2f8>)
 c00575c:	4293      	cmp	r3, r2
 c00575e:	d007      	beq.n	c005770 <HAL_GPIO_Init+0x1d8>
 c005760:	687b      	ldr	r3, [r7, #4]
 c005762:	4a4c      	ldr	r2, [pc, #304]	; (c005894 <HAL_GPIO_Init+0x2fc>)
 c005764:	4293      	cmp	r3, r2
 c005766:	d101      	bne.n	c00576c <HAL_GPIO_Init+0x1d4>
 c005768:	2306      	movs	r3, #6
 c00576a:	e00c      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c00576c:	2307      	movs	r3, #7
 c00576e:	e00a      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c005770:	2305      	movs	r3, #5
 c005772:	e008      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c005774:	2304      	movs	r3, #4
 c005776:	e006      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c005778:	2303      	movs	r3, #3
 c00577a:	e004      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c00577c:	2302      	movs	r3, #2
 c00577e:	e002      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c005780:	2301      	movs	r3, #1
 c005782:	e000      	b.n	c005786 <HAL_GPIO_Init+0x1ee>
 c005784:	2300      	movs	r3, #0
 c005786:	697a      	ldr	r2, [r7, #20]
 c005788:	f002 0203 	and.w	r2, r2, #3
 c00578c:	00d2      	lsls	r2, r2, #3
 c00578e:	4093      	lsls	r3, r2
 c005790:	693a      	ldr	r2, [r7, #16]
 c005792:	4313      	orrs	r3, r2
 c005794:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c005796:	4938      	ldr	r1, [pc, #224]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c005798:	697b      	ldr	r3, [r7, #20]
 c00579a:	089b      	lsrs	r3, r3, #2
 c00579c:	3318      	adds	r3, #24
 c00579e:	693a      	ldr	r2, [r7, #16]
 c0057a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c0057a4:	4b34      	ldr	r3, [pc, #208]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c0057a6:	681b      	ldr	r3, [r3, #0]
 c0057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0057aa:	68fb      	ldr	r3, [r7, #12]
 c0057ac:	43db      	mvns	r3, r3
 c0057ae:	693a      	ldr	r2, [r7, #16]
 c0057b0:	4013      	ands	r3, r2
 c0057b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c0057b4:	683b      	ldr	r3, [r7, #0]
 c0057b6:	685b      	ldr	r3, [r3, #4]
 c0057b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0057bc:	2b00      	cmp	r3, #0
 c0057be:	d003      	beq.n	c0057c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c0057c0:	693a      	ldr	r2, [r7, #16]
 c0057c2:	68fb      	ldr	r3, [r7, #12]
 c0057c4:	4313      	orrs	r3, r2
 c0057c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0057c8:	4a2b      	ldr	r2, [pc, #172]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c0057ca:	693b      	ldr	r3, [r7, #16]
 c0057cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0057ce:	4b2a      	ldr	r3, [pc, #168]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c0057d0:	685b      	ldr	r3, [r3, #4]
 c0057d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0057d4:	68fb      	ldr	r3, [r7, #12]
 c0057d6:	43db      	mvns	r3, r3
 c0057d8:	693a      	ldr	r2, [r7, #16]
 c0057da:	4013      	ands	r3, r2
 c0057dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c0057de:	683b      	ldr	r3, [r7, #0]
 c0057e0:	685b      	ldr	r3, [r3, #4]
 c0057e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0057e6:	2b00      	cmp	r3, #0
 c0057e8:	d003      	beq.n	c0057f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c0057ea:	693a      	ldr	r2, [r7, #16]
 c0057ec:	68fb      	ldr	r3, [r7, #12]
 c0057ee:	4313      	orrs	r3, r2
 c0057f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0057f2:	4a21      	ldr	r2, [pc, #132]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c0057f4:	693b      	ldr	r3, [r7, #16]
 c0057f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c0057f8:	4b1f      	ldr	r3, [pc, #124]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c0057fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0057fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005800:	68fb      	ldr	r3, [r7, #12]
 c005802:	43db      	mvns	r3, r3
 c005804:	693a      	ldr	r2, [r7, #16]
 c005806:	4013      	ands	r3, r2
 c005808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c00580a:	683b      	ldr	r3, [r7, #0]
 c00580c:	685b      	ldr	r3, [r3, #4]
 c00580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005812:	2b00      	cmp	r3, #0
 c005814:	d003      	beq.n	c00581e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c005816:	693a      	ldr	r2, [r7, #16]
 c005818:	68fb      	ldr	r3, [r7, #12]
 c00581a:	4313      	orrs	r3, r2
 c00581c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00581e:	4a16      	ldr	r2, [pc, #88]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c005820:	693b      	ldr	r3, [r7, #16]
 c005822:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c005826:	4b14      	ldr	r3, [pc, #80]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c005828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00582c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00582e:	68fb      	ldr	r3, [r7, #12]
 c005830:	43db      	mvns	r3, r3
 c005832:	693a      	ldr	r2, [r7, #16]
 c005834:	4013      	ands	r3, r2
 c005836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c005838:	683b      	ldr	r3, [r7, #0]
 c00583a:	685b      	ldr	r3, [r3, #4]
 c00583c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c005840:	2b00      	cmp	r3, #0
 c005842:	d003      	beq.n	c00584c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c005844:	693a      	ldr	r2, [r7, #16]
 c005846:	68fb      	ldr	r3, [r7, #12]
 c005848:	4313      	orrs	r3, r2
 c00584a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c00584c:	4a0a      	ldr	r2, [pc, #40]	; (c005878 <HAL_GPIO_Init+0x2e0>)
 c00584e:	693b      	ldr	r3, [r7, #16]
 c005850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c005854:	697b      	ldr	r3, [r7, #20]
 c005856:	3301      	adds	r3, #1
 c005858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00585a:	683b      	ldr	r3, [r7, #0]
 c00585c:	681a      	ldr	r2, [r3, #0]
 c00585e:	697b      	ldr	r3, [r7, #20]
 c005860:	fa22 f303 	lsr.w	r3, r2, r3
 c005864:	2b00      	cmp	r3, #0
 c005866:	f47f ae9f 	bne.w	c0055a8 <HAL_GPIO_Init+0x10>
  }
}
 c00586a:	bf00      	nop
 c00586c:	bf00      	nop
 c00586e:	371c      	adds	r7, #28
 c005870:	46bd      	mov	sp, r7
 c005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005876:	4770      	bx	lr
 c005878:	5002f400 	.word	0x5002f400
 c00587c:	52020000 	.word	0x52020000
 c005880:	52020400 	.word	0x52020400
 c005884:	52020800 	.word	0x52020800
 c005888:	52020c00 	.word	0x52020c00
 c00588c:	52021000 	.word	0x52021000
 c005890:	52021400 	.word	0x52021400
 c005894:	52021800 	.word	0x52021800

0c005898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c005898:	b480      	push	{r7}
 c00589a:	b083      	sub	sp, #12
 c00589c:	af00      	add	r7, sp, #0
 c00589e:	6078      	str	r0, [r7, #4]
 c0058a0:	460b      	mov	r3, r1
 c0058a2:	807b      	strh	r3, [r7, #2]
 c0058a4:	4613      	mov	r3, r2
 c0058a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c0058a8:	787b      	ldrb	r3, [r7, #1]
 c0058aa:	2b00      	cmp	r3, #0
 c0058ac:	d003      	beq.n	c0058b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c0058ae:	887a      	ldrh	r2, [r7, #2]
 c0058b0:	687b      	ldr	r3, [r7, #4]
 c0058b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c0058b4:	e002      	b.n	c0058bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c0058b6:	887a      	ldrh	r2, [r7, #2]
 c0058b8:	687b      	ldr	r3, [r7, #4]
 c0058ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 c0058bc:	bf00      	nop
 c0058be:	370c      	adds	r7, #12
 c0058c0:	46bd      	mov	sp, r7
 c0058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0058c6:	4770      	bx	lr

0c0058c8 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0058c8:	b480      	push	{r7}
 c0058ca:	b089      	sub	sp, #36	; 0x24
 c0058cc:	af00      	add	r7, sp, #0
 c0058ce:	60f8      	str	r0, [r7, #12]
 c0058d0:	460b      	mov	r3, r1
 c0058d2:	607a      	str	r2, [r7, #4]
 c0058d4:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0058d6:	2300      	movs	r3, #0
 c0058d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0058da:	68fb      	ldr	r3, [r7, #12]
 c0058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0058de:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0058e0:	e01b      	b.n	c00591a <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0058e2:	897a      	ldrh	r2, [r7, #10]
 c0058e4:	2101      	movs	r1, #1
 c0058e6:	69fb      	ldr	r3, [r7, #28]
 c0058e8:	fa01 f303 	lsl.w	r3, r1, r3
 c0058ec:	4013      	ands	r3, r2
 c0058ee:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c0058f0:	697b      	ldr	r3, [r7, #20]
 c0058f2:	2b00      	cmp	r3, #0
 c0058f4:	d00e      	beq.n	c005914 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0058f6:	2201      	movs	r2, #1
 c0058f8:	69fb      	ldr	r3, [r7, #28]
 c0058fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0058fe:	43db      	mvns	r3, r3
 c005900:	69ba      	ldr	r2, [r7, #24]
 c005902:	4013      	ands	r3, r2
 c005904:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c005906:	687a      	ldr	r2, [r7, #4]
 c005908:	69fb      	ldr	r3, [r7, #28]
 c00590a:	fa02 f303 	lsl.w	r3, r2, r3
 c00590e:	69ba      	ldr	r2, [r7, #24]
 c005910:	4313      	orrs	r3, r2
 c005912:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c005914:	69fb      	ldr	r3, [r7, #28]
 c005916:	3301      	adds	r3, #1
 c005918:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c00591a:	897a      	ldrh	r2, [r7, #10]
 c00591c:	69fb      	ldr	r3, [r7, #28]
 c00591e:	fa42 f303 	asr.w	r3, r2, r3
 c005922:	2b00      	cmp	r3, #0
 c005924:	d1dd      	bne.n	c0058e2 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c005926:	68fb      	ldr	r3, [r7, #12]
 c005928:	69ba      	ldr	r2, [r7, #24]
 c00592a:	631a      	str	r2, [r3, #48]	; 0x30
}
 c00592c:	bf00      	nop
 c00592e:	3724      	adds	r7, #36	; 0x24
 c005930:	46bd      	mov	sp, r7
 c005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005936:	4770      	bx	lr

0c005938 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c005938:	b480      	push	{r7}
 c00593a:	b089      	sub	sp, #36	; 0x24
 c00593c:	af00      	add	r7, sp, #0
 c00593e:	6078      	str	r0, [r7, #4]
 c005940:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c005942:	687b      	ldr	r3, [r7, #4]
 c005944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c005948:	d00b      	beq.n	c005962 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00594a:	687b      	ldr	r3, [r7, #4]
 c00594c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c005950:	d007      	beq.n	c005962 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c005952:	687b      	ldr	r3, [r7, #4]
 c005954:	4a36      	ldr	r2, [pc, #216]	; (c005a30 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c005956:	4293      	cmp	r3, r2
 c005958:	d003      	beq.n	c005962 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00595a:	687b      	ldr	r3, [r7, #4]
 c00595c:	4a35      	ldr	r2, [pc, #212]	; (c005a34 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00595e:	4293      	cmp	r3, r2
 c005960:	d111      	bne.n	c005986 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c005962:	683b      	ldr	r3, [r7, #0]
 c005964:	681b      	ldr	r3, [r3, #0]
 c005966:	2b00      	cmp	r3, #0
 c005968:	d004      	beq.n	c005974 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00596a:	683b      	ldr	r3, [r7, #0]
 c00596c:	681b      	ldr	r3, [r3, #0]
 c00596e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c005972:	d108      	bne.n	c005986 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c005974:	683b      	ldr	r3, [r7, #0]
 c005976:	685b      	ldr	r3, [r3, #4]
 c005978:	2b00      	cmp	r3, #0
 c00597a:	d006      	beq.n	c00598a <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c00597c:	683b      	ldr	r3, [r7, #0]
 c00597e:	685b      	ldr	r3, [r3, #4]
 c005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c005984:	d001      	beq.n	c00598a <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c005986:	2301      	movs	r3, #1
 c005988:	e04b      	b.n	c005a22 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00598a:	683b      	ldr	r3, [r7, #0]
 c00598c:	685b      	ldr	r3, [r3, #4]
 c00598e:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c005990:	683b      	ldr	r3, [r7, #0]
 c005992:	681b      	ldr	r3, [r3, #0]
 c005994:	693a      	ldr	r2, [r7, #16]
 c005996:	4313      	orrs	r3, r2
 c005998:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00599a:	687b      	ldr	r3, [r7, #4]
 c00599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0059a0:	d003      	beq.n	c0059aa <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0059a2:	687b      	ldr	r3, [r7, #4]
 c0059a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0059a8:	d105      	bne.n	c0059b6 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0059aa:	4b23      	ldr	r3, [pc, #140]	; (c005a38 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0059ac:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0059ae:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0059b2:	61bb      	str	r3, [r7, #24]
 c0059b4:	e004      	b.n	c0059c0 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0059b6:	4b21      	ldr	r3, [pc, #132]	; (c005a3c <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0059b8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0059ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0059be:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0059c0:	69bb      	ldr	r3, [r7, #24]
 c0059c2:	0b5b      	lsrs	r3, r3, #13
 c0059c4:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c0059c6:	2300      	movs	r3, #0
 c0059c8:	617b      	str	r3, [r7, #20]
 c0059ca:	e00c      	b.n	c0059e6 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0059cc:	683b      	ldr	r3, [r7, #0]
 c0059ce:	697a      	ldr	r2, [r7, #20]
 c0059d0:	3202      	adds	r2, #2
 c0059d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0059d6:	69fb      	ldr	r3, [r7, #28]
 c0059d8:	697a      	ldr	r2, [r7, #20]
 c0059da:	3240      	adds	r2, #64	; 0x40
 c0059dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0059e0:	697b      	ldr	r3, [r7, #20]
 c0059e2:	3301      	adds	r3, #1
 c0059e4:	617b      	str	r3, [r7, #20]
 c0059e6:	697a      	ldr	r2, [r7, #20]
 c0059e8:	68fb      	ldr	r3, [r7, #12]
 c0059ea:	429a      	cmp	r2, r3
 c0059ec:	d3ee      	bcc.n	c0059cc <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0059ee:	69fb      	ldr	r3, [r7, #28]
 c0059f0:	681b      	ldr	r3, [r3, #0]
 c0059f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0059f6:	693b      	ldr	r3, [r7, #16]
 c0059f8:	431a      	orrs	r2, r3
 c0059fa:	69fb      	ldr	r3, [r7, #28]
 c0059fc:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0059fe:	69bb      	ldr	r3, [r7, #24]
 c005a00:	0b5b      	lsrs	r3, r3, #13
 c005a02:	2201      	movs	r2, #1
 c005a04:	fa02 f303 	lsl.w	r3, r2, r3
 c005a08:	3b01      	subs	r3, #1
 c005a0a:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c005a0c:	69fb      	ldr	r3, [r7, #28]
 c005a0e:	691a      	ldr	r2, [r3, #16]
 c005a10:	68bb      	ldr	r3, [r7, #8]
 c005a12:	43db      	mvns	r3, r3
 c005a14:	401a      	ands	r2, r3
 c005a16:	683b      	ldr	r3, [r7, #0]
 c005a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c005a1a:	431a      	orrs	r2, r3
 c005a1c:	69fb      	ldr	r3, [r7, #28]
 c005a1e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c005a20:	2300      	movs	r3, #0
}
 c005a22:	4618      	mov	r0, r3
 c005a24:	3724      	adds	r7, #36	; 0x24
 c005a26:	46bd      	mov	sp, r7
 c005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a2c:	4770      	bx	lr
 c005a2e:	bf00      	nop
 c005a30:	20030000 	.word	0x20030000
 c005a34:	30030000 	.word	0x30030000
 c005a38:	50032c00 	.word	0x50032c00
 c005a3c:	50033000 	.word	0x50033000

0c005a40 <memset>:
 c005a40:	4402      	add	r2, r0
 c005a42:	4603      	mov	r3, r0
 c005a44:	4293      	cmp	r3, r2
 c005a46:	d100      	bne.n	c005a4a <memset+0xa>
 c005a48:	4770      	bx	lr
 c005a4a:	f803 1b01 	strb.w	r1, [r3], #1
 c005a4e:	e7f9      	b.n	c005a44 <memset+0x4>

0c005a50 <__libc_init_array>:
 c005a50:	b570      	push	{r4, r5, r6, lr}
 c005a52:	4d0d      	ldr	r5, [pc, #52]	; (c005a88 <__libc_init_array+0x38>)
 c005a54:	2600      	movs	r6, #0
 c005a56:	4c0d      	ldr	r4, [pc, #52]	; (c005a8c <__libc_init_array+0x3c>)
 c005a58:	1b64      	subs	r4, r4, r5
 c005a5a:	10a4      	asrs	r4, r4, #2
 c005a5c:	42a6      	cmp	r6, r4
 c005a5e:	d109      	bne.n	c005a74 <__libc_init_array+0x24>
 c005a60:	4d0b      	ldr	r5, [pc, #44]	; (c005a90 <__libc_init_array+0x40>)
 c005a62:	2600      	movs	r6, #0
 c005a64:	4c0b      	ldr	r4, [pc, #44]	; (c005a94 <__libc_init_array+0x44>)
 c005a66:	f000 f817 	bl	c005a98 <_init>
 c005a6a:	1b64      	subs	r4, r4, r5
 c005a6c:	10a4      	asrs	r4, r4, #2
 c005a6e:	42a6      	cmp	r6, r4
 c005a70:	d105      	bne.n	c005a7e <__libc_init_array+0x2e>
 c005a72:	bd70      	pop	{r4, r5, r6, pc}
 c005a74:	f855 3b04 	ldr.w	r3, [r5], #4
 c005a78:	3601      	adds	r6, #1
 c005a7a:	4798      	blx	r3
 c005a7c:	e7ee      	b.n	c005a5c <__libc_init_array+0xc>
 c005a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 c005a82:	3601      	adds	r6, #1
 c005a84:	4798      	blx	r3
 c005a86:	e7f2      	b.n	c005a6e <__libc_init_array+0x1e>
 c005a88:	0c005b00 	.word	0x0c005b00
 c005a8c:	0c005b00 	.word	0x0c005b00
 c005a90:	0c005b00 	.word	0x0c005b00
 c005a94:	0c005b04 	.word	0x0c005b04

0c005a98 <_init>:
 c005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005a9a:	bf00      	nop
 c005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c005a9e:	bc08      	pop	{r3}
 c005aa0:	469e      	mov	lr, r3
 c005aa2:	4770      	bx	lr

0c005aa4 <_fini>:
 c005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005aa6:	bf00      	nop
 c005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c005aaa:	bc08      	pop	{r3}
 c005aac:	469e      	mov	lr, r3
 c005aae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <decrypt>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c6 bf00 	b.w	c004e08 <__acle_se_decrypt>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c7 b90c 	b.w	c005228 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <encrypt>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c6 be8a 	b.w	c004d2c <__acle_se_encrypt>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c6 bde4 	b.w	c004be8 <__acle_se_SECURE_RegisterCallback>

0c03e020 <set_key>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c6 be34 	b.w	c004c90 <__acle_se_set_key>
	...
