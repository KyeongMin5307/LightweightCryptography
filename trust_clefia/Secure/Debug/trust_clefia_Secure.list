
trust_clefia_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa8  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c00219c  0c00219c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0021ec  0c0021ec  0002e020  2**0
                  CONTENTS
  4 .ARM          00000000  0c0021ec  0c0021ec  0002e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c0021ec  0c0021ec  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0021ec  0c0021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0021f0  0c0021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  30000000  0c0021f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000028  300002fc  300002fc  000302fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000324  30000324  000302fc  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005772  00000000  00000000  0002e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011ba  00000000  00000000  0003380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005b8  00000000  00000000  000349c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000043a  00000000  00000000  00034f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027711  00000000  00000000  000353ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000071bb  00000000  00000000  0005cacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa24d  00000000  00000000  00063c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000015c4  00000000  00000000  0015ded4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0015f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	300002fc 	.word	0x300002fc
 c000210:	00000000 	.word	0x00000000
 c000214:	0c002184 	.word	0x0c002184

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000300 	.word	0x30000300
 c000230:	0c002184 	.word	0x0c002184

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <byte_from_word>:
  unsigned int res = 0;
  res = ((a << 24) | 0x00ffffff) & ((b << 16) | 0xff00ffff ) & ((c << 8) | 0xffff00ff) & (d | 0xffffff00);
  return res;
}

char byte_from_word(unsigned int x, int off) {
 c000290:	b480      	push	{r7}
 c000292:	b083      	sub	sp, #12
 c000294:	af00      	add	r7, sp, #0
 c000296:	6078      	str	r0, [r7, #4]
 c000298:	6039      	str	r1, [r7, #0]
  if (off == 3) {
 c00029a:	683b      	ldr	r3, [r7, #0]
 c00029c:	2b03      	cmp	r3, #3
 c00029e:	d102      	bne.n	c0002a6 <byte_from_word+0x16>
    return x & W24_32;
 c0002a0:	687b      	ldr	r3, [r7, #4]
 c0002a2:	b2db      	uxtb	r3, r3
 c0002a4:	e010      	b.n	c0002c8 <byte_from_word+0x38>
  }
  if (off == 2) {
 c0002a6:	683b      	ldr	r3, [r7, #0]
 c0002a8:	2b02      	cmp	r3, #2
 c0002aa:	d103      	bne.n	c0002b4 <byte_from_word+0x24>
    return (x & W16_24)	>> 8;
 c0002ac:	687b      	ldr	r3, [r7, #4]
 c0002ae:	0a1b      	lsrs	r3, r3, #8
 c0002b0:	b2db      	uxtb	r3, r3
 c0002b2:	e009      	b.n	c0002c8 <byte_from_word+0x38>
  }
  if (off == 1) {
 c0002b4:	683b      	ldr	r3, [r7, #0]
 c0002b6:	2b01      	cmp	r3, #1
 c0002b8:	d103      	bne.n	c0002c2 <byte_from_word+0x32>
    return (x & W8_16) >> 16;
 c0002ba:	687b      	ldr	r3, [r7, #4]
 c0002bc:	0c1b      	lsrs	r3, r3, #16
 c0002be:	b2db      	uxtb	r3, r3
 c0002c0:	e002      	b.n	c0002c8 <byte_from_word+0x38>
  }
  return (x & W0_8) >> 24;
 c0002c2:	687b      	ldr	r3, [r7, #4]
 c0002c4:	0e1b      	lsrs	r3, r3, #24
 c0002c6:	b2db      	uxtb	r3, r3
}
 c0002c8:	4618      	mov	r0, r3
 c0002ca:	370c      	adds	r7, #12
 c0002cc:	46bd      	mov	sp, r7
 c0002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0002d2:	4770      	bx	lr

0c0002d4 <mul2>:

unsigned char mul2(unsigned char x) {
 c0002d4:	b480      	push	{r7}
 c0002d6:	b083      	sub	sp, #12
 c0002d8:	af00      	add	r7, sp, #0
 c0002da:	4603      	mov	r3, r0
 c0002dc:	71fb      	strb	r3, [r7, #7]
  /* multiplicacao em GF(2^8) (p(x) = '11d') */
  if(x & 0x80U){
 c0002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0002e2:	2b00      	cmp	r3, #0
 c0002e4:	da03      	bge.n	c0002ee <mul2+0x1a>
    x ^= 0x0eU;
 c0002e6:	79fb      	ldrb	r3, [r7, #7]
 c0002e8:	f083 030e 	eor.w	r3, r3, #14
 c0002ec:	71fb      	strb	r3, [r7, #7]
  }
  return ((x << 1) | (x >> 7));
 c0002ee:	79fb      	ldrb	r3, [r7, #7]
 c0002f0:	005b      	lsls	r3, r3, #1
 c0002f2:	b25a      	sxtb	r2, r3
 c0002f4:	79fb      	ldrb	r3, [r7, #7]
 c0002f6:	09db      	lsrs	r3, r3, #7
 c0002f8:	b2db      	uxtb	r3, r3
 c0002fa:	b25b      	sxtb	r3, r3
 c0002fc:	4313      	orrs	r3, r2
 c0002fe:	b25b      	sxtb	r3, r3
 c000300:	b2db      	uxtb	r3, r3
}
 c000302:	4618      	mov	r0, r3
 c000304:	370c      	adds	r7, #12
 c000306:	46bd      	mov	sp, r7
 c000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00030c:	4770      	bx	lr
	...

0c000310 <f0>:
#define mul4(_x) (mul2(mul2((_x))))
#define mul6(_x) (mul2((_x)) ^ mul4((_x)))
#define mul8(_x) (mul2(mul4((_x))))
#define mulA(_x) (mul2((_x)) ^ mul8((_x)))

unsigned int f0(unsigned int rk, unsigned int x) {
 c000310:	b5b0      	push	{r4, r5, r7, lr}
 c000312:	b086      	sub	sp, #24
 c000314:	af00      	add	r7, sp, #0
 c000316:	6078      	str	r0, [r7, #4]
 c000318:	6039      	str	r1, [r7, #0]
  /* Step 1 */
  unsigned int t = rk ^ x;
 c00031a:	687a      	ldr	r2, [r7, #4]
 c00031c:	683b      	ldr	r3, [r7, #0]
 c00031e:	4053      	eors	r3, r2
 c000320:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  char t0 = (t & W0_8) >> 24;
 c000322:	697b      	ldr	r3, [r7, #20]
 c000324:	0e1b      	lsrs	r3, r3, #24
 c000326:	74fb      	strb	r3, [r7, #19]
  char t1 = (t & W8_16) >> 16;
 c000328:	697b      	ldr	r3, [r7, #20]
 c00032a:	0c1b      	lsrs	r3, r3, #16
 c00032c:	74bb      	strb	r3, [r7, #18]
  char t2 = (t & W16_24) >> 8;
 c00032e:	697b      	ldr	r3, [r7, #20]
 c000330:	0a1b      	lsrs	r3, r3, #8
 c000332:	747b      	strb	r3, [r7, #17]
  char t3 = t & W24_32;
 c000334:	697b      	ldr	r3, [r7, #20]
 c000336:	743b      	strb	r3, [r7, #16]
  t0 = s0[(t0 & B0_4) >> 4][t0 & B4_8];
 c000338:	7cfb      	ldrb	r3, [r7, #19]
 c00033a:	091b      	lsrs	r3, r3, #4
 c00033c:	b2db      	uxtb	r3, r3
 c00033e:	461a      	mov	r2, r3
 c000340:	7cfb      	ldrb	r3, [r7, #19]
 c000342:	f003 030f 	and.w	r3, r3, #15
 c000346:	4970      	ldr	r1, [pc, #448]	; (c000508 <f0+0x1f8>)
 c000348:	0112      	lsls	r2, r2, #4
 c00034a:	440a      	add	r2, r1
 c00034c:	4413      	add	r3, r2
 c00034e:	781b      	ldrb	r3, [r3, #0]
 c000350:	74fb      	strb	r3, [r7, #19]
  t1 = s1[(t1 & B0_4) >> 4][t1 & B4_8];
 c000352:	7cbb      	ldrb	r3, [r7, #18]
 c000354:	091b      	lsrs	r3, r3, #4
 c000356:	b2db      	uxtb	r3, r3
 c000358:	461a      	mov	r2, r3
 c00035a:	7cbb      	ldrb	r3, [r7, #18]
 c00035c:	f003 030f 	and.w	r3, r3, #15
 c000360:	496a      	ldr	r1, [pc, #424]	; (c00050c <f0+0x1fc>)
 c000362:	0112      	lsls	r2, r2, #4
 c000364:	440a      	add	r2, r1
 c000366:	4413      	add	r3, r2
 c000368:	781b      	ldrb	r3, [r3, #0]
 c00036a:	74bb      	strb	r3, [r7, #18]
  t2 = s0[(t2 & B0_4) >> 4][t2 & B4_8];
 c00036c:	7c7b      	ldrb	r3, [r7, #17]
 c00036e:	091b      	lsrs	r3, r3, #4
 c000370:	b2db      	uxtb	r3, r3
 c000372:	461a      	mov	r2, r3
 c000374:	7c7b      	ldrb	r3, [r7, #17]
 c000376:	f003 030f 	and.w	r3, r3, #15
 c00037a:	4963      	ldr	r1, [pc, #396]	; (c000508 <f0+0x1f8>)
 c00037c:	0112      	lsls	r2, r2, #4
 c00037e:	440a      	add	r2, r1
 c000380:	4413      	add	r3, r2
 c000382:	781b      	ldrb	r3, [r3, #0]
 c000384:	747b      	strb	r3, [r7, #17]
  t3 = s1[(t3 & B0_4) >> 4][t3 & B4_8];
 c000386:	7c3b      	ldrb	r3, [r7, #16]
 c000388:	091b      	lsrs	r3, r3, #4
 c00038a:	b2db      	uxtb	r3, r3
 c00038c:	461a      	mov	r2, r3
 c00038e:	7c3b      	ldrb	r3, [r7, #16]
 c000390:	f003 030f 	and.w	r3, r3, #15
 c000394:	495d      	ldr	r1, [pc, #372]	; (c00050c <f0+0x1fc>)
 c000396:	0112      	lsls	r2, r2, #4
 c000398:	440a      	add	r2, r1
 c00039a:	4413      	add	r3, r2
 c00039c:	781b      	ldrb	r3, [r3, #0]
 c00039e:	743b      	strb	r3, [r7, #16]
  /* Step 3 */
  char y0 =      t0  ^ mul2(t1) ^ mul4(t2) ^ mul6(t3);
 c0003a0:	7cbb      	ldrb	r3, [r7, #18]
 c0003a2:	4618      	mov	r0, r3
 c0003a4:	f7ff ff96 	bl	c0002d4 <mul2>
 c0003a8:	4603      	mov	r3, r0
 c0003aa:	461a      	mov	r2, r3
 c0003ac:	7cfb      	ldrb	r3, [r7, #19]
 c0003ae:	4053      	eors	r3, r2
 c0003b0:	b2dc      	uxtb	r4, r3
 c0003b2:	7c7b      	ldrb	r3, [r7, #17]
 c0003b4:	4618      	mov	r0, r3
 c0003b6:	f7ff ff8d 	bl	c0002d4 <mul2>
 c0003ba:	4603      	mov	r3, r0
 c0003bc:	4618      	mov	r0, r3
 c0003be:	f7ff ff89 	bl	c0002d4 <mul2>
 c0003c2:	4603      	mov	r3, r0
 c0003c4:	4063      	eors	r3, r4
 c0003c6:	b2dc      	uxtb	r4, r3
 c0003c8:	7c3b      	ldrb	r3, [r7, #16]
 c0003ca:	4618      	mov	r0, r3
 c0003cc:	f7ff ff82 	bl	c0002d4 <mul2>
 c0003d0:	4603      	mov	r3, r0
 c0003d2:	461d      	mov	r5, r3
 c0003d4:	7c3b      	ldrb	r3, [r7, #16]
 c0003d6:	4618      	mov	r0, r3
 c0003d8:	f7ff ff7c 	bl	c0002d4 <mul2>
 c0003dc:	4603      	mov	r3, r0
 c0003de:	4618      	mov	r0, r3
 c0003e0:	f7ff ff78 	bl	c0002d4 <mul2>
 c0003e4:	4603      	mov	r3, r0
 c0003e6:	406b      	eors	r3, r5
 c0003e8:	b2db      	uxtb	r3, r3
 c0003ea:	4063      	eors	r3, r4
 c0003ec:	73fb      	strb	r3, [r7, #15]
  char y1 = mul2(t0) ^      t1  ^ mul6(t2) ^ mul4(t3);
 c0003ee:	7cfb      	ldrb	r3, [r7, #19]
 c0003f0:	4618      	mov	r0, r3
 c0003f2:	f7ff ff6f 	bl	c0002d4 <mul2>
 c0003f6:	4603      	mov	r3, r0
 c0003f8:	461a      	mov	r2, r3
 c0003fa:	7cbb      	ldrb	r3, [r7, #18]
 c0003fc:	4053      	eors	r3, r2
 c0003fe:	b2dc      	uxtb	r4, r3
 c000400:	7c7b      	ldrb	r3, [r7, #17]
 c000402:	4618      	mov	r0, r3
 c000404:	f7ff ff66 	bl	c0002d4 <mul2>
 c000408:	4603      	mov	r3, r0
 c00040a:	461d      	mov	r5, r3
 c00040c:	7c7b      	ldrb	r3, [r7, #17]
 c00040e:	4618      	mov	r0, r3
 c000410:	f7ff ff60 	bl	c0002d4 <mul2>
 c000414:	4603      	mov	r3, r0
 c000416:	4618      	mov	r0, r3
 c000418:	f7ff ff5c 	bl	c0002d4 <mul2>
 c00041c:	4603      	mov	r3, r0
 c00041e:	406b      	eors	r3, r5
 c000420:	b2db      	uxtb	r3, r3
 c000422:	4063      	eors	r3, r4
 c000424:	b2dc      	uxtb	r4, r3
 c000426:	7c3b      	ldrb	r3, [r7, #16]
 c000428:	4618      	mov	r0, r3
 c00042a:	f7ff ff53 	bl	c0002d4 <mul2>
 c00042e:	4603      	mov	r3, r0
 c000430:	4618      	mov	r0, r3
 c000432:	f7ff ff4f 	bl	c0002d4 <mul2>
 c000436:	4603      	mov	r3, r0
 c000438:	4063      	eors	r3, r4
 c00043a:	73bb      	strb	r3, [r7, #14]
  char y2 = mul4(t0) ^ mul6(t1) ^      t2  ^ mul2(t3);
 c00043c:	7cfb      	ldrb	r3, [r7, #19]
 c00043e:	4618      	mov	r0, r3
 c000440:	f7ff ff48 	bl	c0002d4 <mul2>
 c000444:	4603      	mov	r3, r0
 c000446:	4618      	mov	r0, r3
 c000448:	f7ff ff44 	bl	c0002d4 <mul2>
 c00044c:	4603      	mov	r3, r0
 c00044e:	461c      	mov	r4, r3
 c000450:	7cbb      	ldrb	r3, [r7, #18]
 c000452:	4618      	mov	r0, r3
 c000454:	f7ff ff3e 	bl	c0002d4 <mul2>
 c000458:	4603      	mov	r3, r0
 c00045a:	461d      	mov	r5, r3
 c00045c:	7cbb      	ldrb	r3, [r7, #18]
 c00045e:	4618      	mov	r0, r3
 c000460:	f7ff ff38 	bl	c0002d4 <mul2>
 c000464:	4603      	mov	r3, r0
 c000466:	4618      	mov	r0, r3
 c000468:	f7ff ff34 	bl	c0002d4 <mul2>
 c00046c:	4603      	mov	r3, r0
 c00046e:	406b      	eors	r3, r5
 c000470:	b2db      	uxtb	r3, r3
 c000472:	4063      	eors	r3, r4
 c000474:	b2da      	uxtb	r2, r3
 c000476:	7c7b      	ldrb	r3, [r7, #17]
 c000478:	4053      	eors	r3, r2
 c00047a:	b2dc      	uxtb	r4, r3
 c00047c:	7c3b      	ldrb	r3, [r7, #16]
 c00047e:	4618      	mov	r0, r3
 c000480:	f7ff ff28 	bl	c0002d4 <mul2>
 c000484:	4603      	mov	r3, r0
 c000486:	4063      	eors	r3, r4
 c000488:	737b      	strb	r3, [r7, #13]
  char y3 = mul6(t0) ^ mul4(t1) ^ mul2(t2) ^       t3;
 c00048a:	7cfb      	ldrb	r3, [r7, #19]
 c00048c:	4618      	mov	r0, r3
 c00048e:	f7ff ff21 	bl	c0002d4 <mul2>
 c000492:	4603      	mov	r3, r0
 c000494:	461c      	mov	r4, r3
 c000496:	7cfb      	ldrb	r3, [r7, #19]
 c000498:	4618      	mov	r0, r3
 c00049a:	f7ff ff1b 	bl	c0002d4 <mul2>
 c00049e:	4603      	mov	r3, r0
 c0004a0:	4618      	mov	r0, r3
 c0004a2:	f7ff ff17 	bl	c0002d4 <mul2>
 c0004a6:	4603      	mov	r3, r0
 c0004a8:	4063      	eors	r3, r4
 c0004aa:	b2dc      	uxtb	r4, r3
 c0004ac:	7cbb      	ldrb	r3, [r7, #18]
 c0004ae:	4618      	mov	r0, r3
 c0004b0:	f7ff ff10 	bl	c0002d4 <mul2>
 c0004b4:	4603      	mov	r3, r0
 c0004b6:	4618      	mov	r0, r3
 c0004b8:	f7ff ff0c 	bl	c0002d4 <mul2>
 c0004bc:	4603      	mov	r3, r0
 c0004be:	4063      	eors	r3, r4
 c0004c0:	b2dc      	uxtb	r4, r3
 c0004c2:	7c7b      	ldrb	r3, [r7, #17]
 c0004c4:	4618      	mov	r0, r3
 c0004c6:	f7ff ff05 	bl	c0002d4 <mul2>
 c0004ca:	4603      	mov	r3, r0
 c0004cc:	4063      	eors	r3, r4
 c0004ce:	b2da      	uxtb	r2, r3
 c0004d0:	7c3b      	ldrb	r3, [r7, #16]
 c0004d2:	4053      	eors	r3, r2
 c0004d4:	733b      	strb	r3, [r7, #12]
  unsigned int y = WORD_FROM_BYTES(y0, y1, y2, y3);
 c0004d6:	7bfb      	ldrb	r3, [r7, #15]
 c0004d8:	061b      	lsls	r3, r3, #24
 c0004da:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c0004de:	461a      	mov	r2, r3
 c0004e0:	7bbb      	ldrb	r3, [r7, #14]
 c0004e2:	041b      	lsls	r3, r3, #16
 c0004e4:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c0004e8:	401a      	ands	r2, r3
 c0004ea:	7b7b      	ldrb	r3, [r7, #13]
 c0004ec:	021b      	lsls	r3, r3, #8
 c0004ee:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c0004f2:	401a      	ands	r2, r3
 c0004f4:	7b3b      	ldrb	r3, [r7, #12]
 c0004f6:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c0004fa:	4013      	ands	r3, r2
 c0004fc:	60bb      	str	r3, [r7, #8]
  return y;
 c0004fe:	68bb      	ldr	r3, [r7, #8]
}
 c000500:	4618      	mov	r0, r3
 c000502:	3718      	adds	r7, #24
 c000504:	46bd      	mov	sp, r7
 c000506:	bdb0      	pop	{r4, r5, r7, pc}
 c000508:	30000000 	.word	0x30000000
 c00050c:	30000100 	.word	0x30000100

0c000510 <f1>:

unsigned int f1(unsigned int rk, unsigned int x) {
 c000510:	b5b0      	push	{r4, r5, r7, lr}
 c000512:	b086      	sub	sp, #24
 c000514:	af00      	add	r7, sp, #0
 c000516:	6078      	str	r0, [r7, #4]
 c000518:	6039      	str	r1, [r7, #0]
  /* Step 1 */
  unsigned int t = rk ^ x;
 c00051a:	687a      	ldr	r2, [r7, #4]
 c00051c:	683b      	ldr	r3, [r7, #0]
 c00051e:	4053      	eors	r3, r2
 c000520:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  char t0 = (t & W0_8) >> 24;
 c000522:	697b      	ldr	r3, [r7, #20]
 c000524:	0e1b      	lsrs	r3, r3, #24
 c000526:	74fb      	strb	r3, [r7, #19]
  char t1 = (t & W8_16) >> 16;
 c000528:	697b      	ldr	r3, [r7, #20]
 c00052a:	0c1b      	lsrs	r3, r3, #16
 c00052c:	74bb      	strb	r3, [r7, #18]
  char t2 = (t & W16_24) >> 8;
 c00052e:	697b      	ldr	r3, [r7, #20]
 c000530:	0a1b      	lsrs	r3, r3, #8
 c000532:	747b      	strb	r3, [r7, #17]
  char t3 = t & W24_32;
 c000534:	697b      	ldr	r3, [r7, #20]
 c000536:	743b      	strb	r3, [r7, #16]
  t0 = s1[(t0 & B0_4) >> 4][t0 & B4_8];
 c000538:	7cfb      	ldrb	r3, [r7, #19]
 c00053a:	091b      	lsrs	r3, r3, #4
 c00053c:	b2db      	uxtb	r3, r3
 c00053e:	461a      	mov	r2, r3
 c000540:	7cfb      	ldrb	r3, [r7, #19]
 c000542:	f003 030f 	and.w	r3, r3, #15
 c000546:	497f      	ldr	r1, [pc, #508]	; (c000744 <f1+0x234>)
 c000548:	0112      	lsls	r2, r2, #4
 c00054a:	440a      	add	r2, r1
 c00054c:	4413      	add	r3, r2
 c00054e:	781b      	ldrb	r3, [r3, #0]
 c000550:	74fb      	strb	r3, [r7, #19]
  t1 = s0[(t1 & B0_4) >> 4][t1 & B4_8];
 c000552:	7cbb      	ldrb	r3, [r7, #18]
 c000554:	091b      	lsrs	r3, r3, #4
 c000556:	b2db      	uxtb	r3, r3
 c000558:	461a      	mov	r2, r3
 c00055a:	7cbb      	ldrb	r3, [r7, #18]
 c00055c:	f003 030f 	and.w	r3, r3, #15
 c000560:	4979      	ldr	r1, [pc, #484]	; (c000748 <f1+0x238>)
 c000562:	0112      	lsls	r2, r2, #4
 c000564:	440a      	add	r2, r1
 c000566:	4413      	add	r3, r2
 c000568:	781b      	ldrb	r3, [r3, #0]
 c00056a:	74bb      	strb	r3, [r7, #18]
  t2 = s1[(t2 & B0_4) >> 4][t2 & B4_8];
 c00056c:	7c7b      	ldrb	r3, [r7, #17]
 c00056e:	091b      	lsrs	r3, r3, #4
 c000570:	b2db      	uxtb	r3, r3
 c000572:	461a      	mov	r2, r3
 c000574:	7c7b      	ldrb	r3, [r7, #17]
 c000576:	f003 030f 	and.w	r3, r3, #15
 c00057a:	4972      	ldr	r1, [pc, #456]	; (c000744 <f1+0x234>)
 c00057c:	0112      	lsls	r2, r2, #4
 c00057e:	440a      	add	r2, r1
 c000580:	4413      	add	r3, r2
 c000582:	781b      	ldrb	r3, [r3, #0]
 c000584:	747b      	strb	r3, [r7, #17]
  t3 = s0[(t3 & B0_4) >> 4][t3 & B4_8];
 c000586:	7c3b      	ldrb	r3, [r7, #16]
 c000588:	091b      	lsrs	r3, r3, #4
 c00058a:	b2db      	uxtb	r3, r3
 c00058c:	461a      	mov	r2, r3
 c00058e:	7c3b      	ldrb	r3, [r7, #16]
 c000590:	f003 030f 	and.w	r3, r3, #15
 c000594:	496c      	ldr	r1, [pc, #432]	; (c000748 <f1+0x238>)
 c000596:	0112      	lsls	r2, r2, #4
 c000598:	440a      	add	r2, r1
 c00059a:	4413      	add	r3, r2
 c00059c:	781b      	ldrb	r3, [r3, #0]
 c00059e:	743b      	strb	r3, [r7, #16]
  /* Step 3 */
  char y0 =      t0  ^ mul8(t1) ^ mul2(t2) ^ mulA(t3);
 c0005a0:	7cbb      	ldrb	r3, [r7, #18]
 c0005a2:	4618      	mov	r0, r3
 c0005a4:	f7ff fe96 	bl	c0002d4 <mul2>
 c0005a8:	4603      	mov	r3, r0
 c0005aa:	4618      	mov	r0, r3
 c0005ac:	f7ff fe92 	bl	c0002d4 <mul2>
 c0005b0:	4603      	mov	r3, r0
 c0005b2:	4618      	mov	r0, r3
 c0005b4:	f7ff fe8e 	bl	c0002d4 <mul2>
 c0005b8:	4603      	mov	r3, r0
 c0005ba:	461a      	mov	r2, r3
 c0005bc:	7cfb      	ldrb	r3, [r7, #19]
 c0005be:	4053      	eors	r3, r2
 c0005c0:	b2dc      	uxtb	r4, r3
 c0005c2:	7c7b      	ldrb	r3, [r7, #17]
 c0005c4:	4618      	mov	r0, r3
 c0005c6:	f7ff fe85 	bl	c0002d4 <mul2>
 c0005ca:	4603      	mov	r3, r0
 c0005cc:	4063      	eors	r3, r4
 c0005ce:	b2dc      	uxtb	r4, r3
 c0005d0:	7c3b      	ldrb	r3, [r7, #16]
 c0005d2:	4618      	mov	r0, r3
 c0005d4:	f7ff fe7e 	bl	c0002d4 <mul2>
 c0005d8:	4603      	mov	r3, r0
 c0005da:	461d      	mov	r5, r3
 c0005dc:	7c3b      	ldrb	r3, [r7, #16]
 c0005de:	4618      	mov	r0, r3
 c0005e0:	f7ff fe78 	bl	c0002d4 <mul2>
 c0005e4:	4603      	mov	r3, r0
 c0005e6:	4618      	mov	r0, r3
 c0005e8:	f7ff fe74 	bl	c0002d4 <mul2>
 c0005ec:	4603      	mov	r3, r0
 c0005ee:	4618      	mov	r0, r3
 c0005f0:	f7ff fe70 	bl	c0002d4 <mul2>
 c0005f4:	4603      	mov	r3, r0
 c0005f6:	406b      	eors	r3, r5
 c0005f8:	b2db      	uxtb	r3, r3
 c0005fa:	4063      	eors	r3, r4
 c0005fc:	73fb      	strb	r3, [r7, #15]
  char y1 = mul8(t0) ^      t1  ^ mulA(t2) ^ mul2(t3);
 c0005fe:	7cfb      	ldrb	r3, [r7, #19]
 c000600:	4618      	mov	r0, r3
 c000602:	f7ff fe67 	bl	c0002d4 <mul2>
 c000606:	4603      	mov	r3, r0
 c000608:	4618      	mov	r0, r3
 c00060a:	f7ff fe63 	bl	c0002d4 <mul2>
 c00060e:	4603      	mov	r3, r0
 c000610:	4618      	mov	r0, r3
 c000612:	f7ff fe5f 	bl	c0002d4 <mul2>
 c000616:	4603      	mov	r3, r0
 c000618:	461a      	mov	r2, r3
 c00061a:	7cbb      	ldrb	r3, [r7, #18]
 c00061c:	4053      	eors	r3, r2
 c00061e:	b2dc      	uxtb	r4, r3
 c000620:	7c7b      	ldrb	r3, [r7, #17]
 c000622:	4618      	mov	r0, r3
 c000624:	f7ff fe56 	bl	c0002d4 <mul2>
 c000628:	4603      	mov	r3, r0
 c00062a:	461d      	mov	r5, r3
 c00062c:	7c7b      	ldrb	r3, [r7, #17]
 c00062e:	4618      	mov	r0, r3
 c000630:	f7ff fe50 	bl	c0002d4 <mul2>
 c000634:	4603      	mov	r3, r0
 c000636:	4618      	mov	r0, r3
 c000638:	f7ff fe4c 	bl	c0002d4 <mul2>
 c00063c:	4603      	mov	r3, r0
 c00063e:	4618      	mov	r0, r3
 c000640:	f7ff fe48 	bl	c0002d4 <mul2>
 c000644:	4603      	mov	r3, r0
 c000646:	406b      	eors	r3, r5
 c000648:	b2db      	uxtb	r3, r3
 c00064a:	4063      	eors	r3, r4
 c00064c:	b2dc      	uxtb	r4, r3
 c00064e:	7c3b      	ldrb	r3, [r7, #16]
 c000650:	4618      	mov	r0, r3
 c000652:	f7ff fe3f 	bl	c0002d4 <mul2>
 c000656:	4603      	mov	r3, r0
 c000658:	4063      	eors	r3, r4
 c00065a:	73bb      	strb	r3, [r7, #14]
  char y2 = mul2(t0) ^ mulA(t1) ^      t2  ^ mul8(t3);
 c00065c:	7cfb      	ldrb	r3, [r7, #19]
 c00065e:	4618      	mov	r0, r3
 c000660:	f7ff fe38 	bl	c0002d4 <mul2>
 c000664:	4603      	mov	r3, r0
 c000666:	461c      	mov	r4, r3
 c000668:	7cbb      	ldrb	r3, [r7, #18]
 c00066a:	4618      	mov	r0, r3
 c00066c:	f7ff fe32 	bl	c0002d4 <mul2>
 c000670:	4603      	mov	r3, r0
 c000672:	461d      	mov	r5, r3
 c000674:	7cbb      	ldrb	r3, [r7, #18]
 c000676:	4618      	mov	r0, r3
 c000678:	f7ff fe2c 	bl	c0002d4 <mul2>
 c00067c:	4603      	mov	r3, r0
 c00067e:	4618      	mov	r0, r3
 c000680:	f7ff fe28 	bl	c0002d4 <mul2>
 c000684:	4603      	mov	r3, r0
 c000686:	4618      	mov	r0, r3
 c000688:	f7ff fe24 	bl	c0002d4 <mul2>
 c00068c:	4603      	mov	r3, r0
 c00068e:	406b      	eors	r3, r5
 c000690:	b2db      	uxtb	r3, r3
 c000692:	4063      	eors	r3, r4
 c000694:	b2da      	uxtb	r2, r3
 c000696:	7c7b      	ldrb	r3, [r7, #17]
 c000698:	4053      	eors	r3, r2
 c00069a:	b2dc      	uxtb	r4, r3
 c00069c:	7c3b      	ldrb	r3, [r7, #16]
 c00069e:	4618      	mov	r0, r3
 c0006a0:	f7ff fe18 	bl	c0002d4 <mul2>
 c0006a4:	4603      	mov	r3, r0
 c0006a6:	4618      	mov	r0, r3
 c0006a8:	f7ff fe14 	bl	c0002d4 <mul2>
 c0006ac:	4603      	mov	r3, r0
 c0006ae:	4618      	mov	r0, r3
 c0006b0:	f7ff fe10 	bl	c0002d4 <mul2>
 c0006b4:	4603      	mov	r3, r0
 c0006b6:	4063      	eors	r3, r4
 c0006b8:	737b      	strb	r3, [r7, #13]
  char y3 = mulA(t0) ^ mul2(t1) ^ mul8(t2) ^       t3;
 c0006ba:	7cfb      	ldrb	r3, [r7, #19]
 c0006bc:	4618      	mov	r0, r3
 c0006be:	f7ff fe09 	bl	c0002d4 <mul2>
 c0006c2:	4603      	mov	r3, r0
 c0006c4:	461c      	mov	r4, r3
 c0006c6:	7cfb      	ldrb	r3, [r7, #19]
 c0006c8:	4618      	mov	r0, r3
 c0006ca:	f7ff fe03 	bl	c0002d4 <mul2>
 c0006ce:	4603      	mov	r3, r0
 c0006d0:	4618      	mov	r0, r3
 c0006d2:	f7ff fdff 	bl	c0002d4 <mul2>
 c0006d6:	4603      	mov	r3, r0
 c0006d8:	4618      	mov	r0, r3
 c0006da:	f7ff fdfb 	bl	c0002d4 <mul2>
 c0006de:	4603      	mov	r3, r0
 c0006e0:	4063      	eors	r3, r4
 c0006e2:	b2dc      	uxtb	r4, r3
 c0006e4:	7cbb      	ldrb	r3, [r7, #18]
 c0006e6:	4618      	mov	r0, r3
 c0006e8:	f7ff fdf4 	bl	c0002d4 <mul2>
 c0006ec:	4603      	mov	r3, r0
 c0006ee:	4063      	eors	r3, r4
 c0006f0:	b2dc      	uxtb	r4, r3
 c0006f2:	7c7b      	ldrb	r3, [r7, #17]
 c0006f4:	4618      	mov	r0, r3
 c0006f6:	f7ff fded 	bl	c0002d4 <mul2>
 c0006fa:	4603      	mov	r3, r0
 c0006fc:	4618      	mov	r0, r3
 c0006fe:	f7ff fde9 	bl	c0002d4 <mul2>
 c000702:	4603      	mov	r3, r0
 c000704:	4618      	mov	r0, r3
 c000706:	f7ff fde5 	bl	c0002d4 <mul2>
 c00070a:	4603      	mov	r3, r0
 c00070c:	4063      	eors	r3, r4
 c00070e:	b2da      	uxtb	r2, r3
 c000710:	7c3b      	ldrb	r3, [r7, #16]
 c000712:	4053      	eors	r3, r2
 c000714:	733b      	strb	r3, [r7, #12]
  return WORD_FROM_BYTES(y0, y1, y2, y3);
 c000716:	7bfb      	ldrb	r3, [r7, #15]
 c000718:	061b      	lsls	r3, r3, #24
 c00071a:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c00071e:	461a      	mov	r2, r3
 c000720:	7bbb      	ldrb	r3, [r7, #14]
 c000722:	041b      	lsls	r3, r3, #16
 c000724:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000728:	401a      	ands	r2, r3
 c00072a:	7b7b      	ldrb	r3, [r7, #13]
 c00072c:	021b      	lsls	r3, r3, #8
 c00072e:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000732:	401a      	ands	r2, r3
 c000734:	7b3b      	ldrb	r3, [r7, #12]
 c000736:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c00073a:	4013      	ands	r3, r2
}
 c00073c:	4618      	mov	r0, r3
 c00073e:	3718      	adds	r7, #24
 c000740:	46bd      	mov	sp, r7
 c000742:	bdb0      	pop	{r4, r5, r7, pc}
 c000744:	30000100 	.word	0x30000100
 c000748:	30000000 	.word	0x30000000

0c00074c <gfn4>:

void gfn4(int r, unsigned int* rk, unsigned int *x, unsigned int *y) {
 c00074c:	b580      	push	{r7, lr}
 c00074e:	b08a      	sub	sp, #40	; 0x28
 c000750:	af00      	add	r7, sp, #0
 c000752:	60f8      	str	r0, [r7, #12]
 c000754:	60b9      	str	r1, [r7, #8]
 c000756:	607a      	str	r2, [r7, #4]
 c000758:	603b      	str	r3, [r7, #0]
  int i;
  unsigned int temp;
  /* Step 1 */
  unsigned int t0 = x[0];
 c00075a:	687b      	ldr	r3, [r7, #4]
 c00075c:	681b      	ldr	r3, [r3, #0]
 c00075e:	623b      	str	r3, [r7, #32]
  unsigned int t1 = x[1];
 c000760:	687b      	ldr	r3, [r7, #4]
 c000762:	685b      	ldr	r3, [r3, #4]
 c000764:	61fb      	str	r3, [r7, #28]
  unsigned int t2 = x[2];
 c000766:	687b      	ldr	r3, [r7, #4]
 c000768:	689b      	ldr	r3, [r3, #8]
 c00076a:	61bb      	str	r3, [r7, #24]
  unsigned int t3 = x[3];
 c00076c:	687b      	ldr	r3, [r7, #4]
 c00076e:	68db      	ldr	r3, [r3, #12]
 c000770:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  for (i = 0; i < r; i++) {
 c000772:	2300      	movs	r3, #0
 c000774:	627b      	str	r3, [r7, #36]	; 0x24
 c000776:	e027      	b.n	c0007c8 <gfn4+0x7c>
    /* Step 2.1 */
    t1 ^= f0(rk[2*i], t0);
 c000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00077a:	00db      	lsls	r3, r3, #3
 c00077c:	68ba      	ldr	r2, [r7, #8]
 c00077e:	4413      	add	r3, r2
 c000780:	681b      	ldr	r3, [r3, #0]
 c000782:	6a39      	ldr	r1, [r7, #32]
 c000784:	4618      	mov	r0, r3
 c000786:	f7ff fdc3 	bl	c000310 <f0>
 c00078a:	4602      	mov	r2, r0
 c00078c:	69fb      	ldr	r3, [r7, #28]
 c00078e:	4053      	eors	r3, r2
 c000790:	61fb      	str	r3, [r7, #28]
    t3 ^= f1(rk[2*i + 1], t2);
 c000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000794:	00db      	lsls	r3, r3, #3
 c000796:	3304      	adds	r3, #4
 c000798:	68ba      	ldr	r2, [r7, #8]
 c00079a:	4413      	add	r3, r2
 c00079c:	681b      	ldr	r3, [r3, #0]
 c00079e:	69b9      	ldr	r1, [r7, #24]
 c0007a0:	4618      	mov	r0, r3
 c0007a2:	f7ff feb5 	bl	c000510 <f1>
 c0007a6:	4602      	mov	r2, r0
 c0007a8:	697b      	ldr	r3, [r7, #20]
 c0007aa:	4053      	eors	r3, r2
 c0007ac:	617b      	str	r3, [r7, #20]
    /* Step 2.2 */
    temp = t0;
 c0007ae:	6a3b      	ldr	r3, [r7, #32]
 c0007b0:	613b      	str	r3, [r7, #16]
    t0 = t1;
 c0007b2:	69fb      	ldr	r3, [r7, #28]
 c0007b4:	623b      	str	r3, [r7, #32]
    t1 = t2;
 c0007b6:	69bb      	ldr	r3, [r7, #24]
 c0007b8:	61fb      	str	r3, [r7, #28]
    t2 = t3;
 c0007ba:	697b      	ldr	r3, [r7, #20]
 c0007bc:	61bb      	str	r3, [r7, #24]
    t3 = temp;
 c0007be:	693b      	ldr	r3, [r7, #16]
 c0007c0:	617b      	str	r3, [r7, #20]
  for (i = 0; i < r; i++) {
 c0007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0007c4:	3301      	adds	r3, #1
 c0007c6:	627b      	str	r3, [r7, #36]	; 0x24
 c0007c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0007ca:	68fb      	ldr	r3, [r7, #12]
 c0007cc:	429a      	cmp	r2, r3
 c0007ce:	dbd3      	blt.n	c000778 <gfn4+0x2c>
  }
  /* Step 3 */
  y[0] = t3;
 c0007d0:	683b      	ldr	r3, [r7, #0]
 c0007d2:	697a      	ldr	r2, [r7, #20]
 c0007d4:	601a      	str	r2, [r3, #0]
  y[1] = t0;
 c0007d6:	683b      	ldr	r3, [r7, #0]
 c0007d8:	3304      	adds	r3, #4
 c0007da:	6a3a      	ldr	r2, [r7, #32]
 c0007dc:	601a      	str	r2, [r3, #0]
  y[2] = t1;
 c0007de:	683b      	ldr	r3, [r7, #0]
 c0007e0:	3308      	adds	r3, #8
 c0007e2:	69fa      	ldr	r2, [r7, #28]
 c0007e4:	601a      	str	r2, [r3, #0]
  y[3] = t2;
 c0007e6:	683b      	ldr	r3, [r7, #0]
 c0007e8:	330c      	adds	r3, #12
 c0007ea:	69ba      	ldr	r2, [r7, #24]
 c0007ec:	601a      	str	r2, [r3, #0]
}
 c0007ee:	bf00      	nop
 c0007f0:	3728      	adds	r7, #40	; 0x28
 c0007f2:	46bd      	mov	sp, r7
 c0007f4:	bd80      	pop	{r7, pc}

0c0007f6 <gfn_inv4>:
  y[5] = t4;
  y[6] = t5;
  y[7] = t6;
}

void gfn_inv4(int r, unsigned int* rk, unsigned int *x, unsigned int *y) {
 c0007f6:	b580      	push	{r7, lr}
 c0007f8:	b08e      	sub	sp, #56	; 0x38
 c0007fa:	af00      	add	r7, sp, #0
 c0007fc:	60f8      	str	r0, [r7, #12]
 c0007fe:	60b9      	str	r1, [r7, #8]
 c000800:	607a      	str	r2, [r7, #4]
 c000802:	603b      	str	r3, [r7, #0]
  unsigned int temp0;
  unsigned int temp1;
  unsigned int temp2;
  unsigned int temp3;
  /* Step 1 */
  unsigned int t0 = x[0];
 c000804:	687b      	ldr	r3, [r7, #4]
 c000806:	681b      	ldr	r3, [r3, #0]
 c000808:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned int t1 = x[1];
 c00080a:	687b      	ldr	r3, [r7, #4]
 c00080c:	685b      	ldr	r3, [r3, #4]
 c00080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  unsigned int t2 = x[2];
 c000810:	687b      	ldr	r3, [r7, #4]
 c000812:	689b      	ldr	r3, [r3, #8]
 c000814:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int t3 = x[3];
 c000816:	687b      	ldr	r3, [r7, #4]
 c000818:	68db      	ldr	r3, [r3, #12]
 c00081a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Step 2 */
  for (i = 0; i < r; i++) {
 c00081c:	2300      	movs	r3, #0
 c00081e:	637b      	str	r3, [r7, #52]	; 0x34
 c000820:	e034      	b.n	c00088c <gfn_inv4+0x96>
    /* Step 2.1 */
    t1 ^= f0(rk[2*(r-i) - 2], t0);
 c000822:	68fa      	ldr	r2, [r7, #12]
 c000824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000826:	1ad3      	subs	r3, r2, r3
 c000828:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 c00082c:	3b01      	subs	r3, #1
 c00082e:	00db      	lsls	r3, r3, #3
 c000830:	68ba      	ldr	r2, [r7, #8]
 c000832:	4413      	add	r3, r2
 c000834:	681b      	ldr	r3, [r3, #0]
 c000836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 c000838:	4618      	mov	r0, r3
 c00083a:	f7ff fd69 	bl	c000310 <f0>
 c00083e:	4602      	mov	r2, r0
 c000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c000842:	4053      	eors	r3, r2
 c000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    t3 ^= f1(rk[2*(r-i) - 1], t2);
 c000846:	68fa      	ldr	r2, [r7, #12]
 c000848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00084a:	1ad3      	subs	r3, r2, r3
 c00084c:	00db      	lsls	r3, r3, #3
 c00084e:	3b04      	subs	r3, #4
 c000850:	68ba      	ldr	r2, [r7, #8]
 c000852:	4413      	add	r3, r2
 c000854:	681b      	ldr	r3, [r3, #0]
 c000856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c000858:	4618      	mov	r0, r3
 c00085a:	f7ff fe59 	bl	c000510 <f1>
 c00085e:	4602      	mov	r2, r0
 c000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000862:	4053      	eors	r3, r2
 c000864:	627b      	str	r3, [r7, #36]	; 0x24
    /* Step 2.2 */
    temp0 = t0;
 c000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000868:	623b      	str	r3, [r7, #32]
    temp1 = t1;
 c00086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00086c:	61fb      	str	r3, [r7, #28]
    temp2 = t2;
 c00086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000870:	61bb      	str	r3, [r7, #24]
    temp3 = t3;
 c000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000874:	617b      	str	r3, [r7, #20]
    t0 = temp3;
 c000876:	697b      	ldr	r3, [r7, #20]
 c000878:	633b      	str	r3, [r7, #48]	; 0x30
    t1 = temp0;
 c00087a:	6a3b      	ldr	r3, [r7, #32]
 c00087c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2 = temp1;
 c00087e:	69fb      	ldr	r3, [r7, #28]
 c000880:	62bb      	str	r3, [r7, #40]	; 0x28
    t3 = temp2;
 c000882:	69bb      	ldr	r3, [r7, #24]
 c000884:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < r; i++) {
 c000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000888:	3301      	adds	r3, #1
 c00088a:	637b      	str	r3, [r7, #52]	; 0x34
 c00088c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c00088e:	68fb      	ldr	r3, [r7, #12]
 c000890:	429a      	cmp	r2, r3
 c000892:	dbc6      	blt.n	c000822 <gfn_inv4+0x2c>
  }
  /* Step 3 */
  y[0] = t1;
 c000894:	683b      	ldr	r3, [r7, #0]
 c000896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c000898:	601a      	str	r2, [r3, #0]
  y[1] = t2;
 c00089a:	683b      	ldr	r3, [r7, #0]
 c00089c:	3304      	adds	r3, #4
 c00089e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c0008a0:	601a      	str	r2, [r3, #0]
  y[2] = t3;
 c0008a2:	683b      	ldr	r3, [r7, #0]
 c0008a4:	3308      	adds	r3, #8
 c0008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0008a8:	601a      	str	r2, [r3, #0]
  y[3] = t0;
 c0008aa:	683b      	ldr	r3, [r7, #0]
 c0008ac:	330c      	adds	r3, #12
 c0008ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c0008b0:	601a      	str	r2, [r3, #0]
}
 c0008b2:	bf00      	nop
 c0008b4:	3738      	adds	r7, #56	; 0x38
 c0008b6:	46bd      	mov	sp, r7
 c0008b8:	bd80      	pop	{r7, pc}

0c0008ba <sigma>:

void sigma(unsigned int *x, unsigned int* y) {
 c0008ba:	b480      	push	{r7}
 c0008bc:	b083      	sub	sp, #12
 c0008be:	af00      	add	r7, sp, #0
 c0008c0:	6078      	str	r0, [r7, #4]
 c0008c2:	6039      	str	r1, [r7, #0]

  y[0] = ((x[0] & W7_31) << 7)   | ((x[1] & W0_6) >> 25);
 c0008c4:	687b      	ldr	r3, [r7, #4]
 c0008c6:	681b      	ldr	r3, [r3, #0]
 c0008c8:	01da      	lsls	r2, r3, #7
 c0008ca:	687b      	ldr	r3, [r7, #4]
 c0008cc:	3304      	adds	r3, #4
 c0008ce:	681b      	ldr	r3, [r3, #0]
 c0008d0:	0e5b      	lsrs	r3, r3, #25
 c0008d2:	431a      	orrs	r2, r3
 c0008d4:	683b      	ldr	r3, [r7, #0]
 c0008d6:	601a      	str	r2, [r3, #0]
  y[1] = ((x[1] & W7_31) << 7)   | (x[3]  & W25_31);
 c0008d8:	687b      	ldr	r3, [r7, #4]
 c0008da:	3304      	adds	r3, #4
 c0008dc:	681b      	ldr	r3, [r3, #0]
 c0008de:	01d9      	lsls	r1, r3, #7
 c0008e0:	687b      	ldr	r3, [r7, #4]
 c0008e2:	330c      	adds	r3, #12
 c0008e4:	681b      	ldr	r3, [r3, #0]
 c0008e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0008ea:	683b      	ldr	r3, [r7, #0]
 c0008ec:	3304      	adds	r3, #4
 c0008ee:	430a      	orrs	r2, r1
 c0008f0:	601a      	str	r2, [r3, #0]
  y[2] = (x[0]  & W0_6)          | ((x[2] & W0_24) >> 7);
 c0008f2:	687b      	ldr	r3, [r7, #4]
 c0008f4:	681b      	ldr	r3, [r3, #0]
 c0008f6:	f003 417e 	and.w	r1, r3, #4261412864	; 0xfe000000
 c0008fa:	687b      	ldr	r3, [r7, #4]
 c0008fc:	3308      	adds	r3, #8
 c0008fe:	681b      	ldr	r3, [r3, #0]
 c000900:	09da      	lsrs	r2, r3, #7
 c000902:	683b      	ldr	r3, [r7, #0]
 c000904:	3308      	adds	r3, #8
 c000906:	430a      	orrs	r2, r1
 c000908:	601a      	str	r2, [r3, #0]
  y[3] = ((x[2] & W25_31) << 25) | ((x[3] & W0_24) >> 7);
 c00090a:	687b      	ldr	r3, [r7, #4]
 c00090c:	3308      	adds	r3, #8
 c00090e:	681b      	ldr	r3, [r3, #0]
 c000910:	0659      	lsls	r1, r3, #25
 c000912:	687b      	ldr	r3, [r7, #4]
 c000914:	330c      	adds	r3, #12
 c000916:	681b      	ldr	r3, [r3, #0]
 c000918:	09da      	lsrs	r2, r3, #7
 c00091a:	683b      	ldr	r3, [r7, #0]
 c00091c:	330c      	adds	r3, #12
 c00091e:	430a      	orrs	r2, r1
 c000920:	601a      	str	r2, [r3, #0]
}
 c000922:	bf00      	nop
 c000924:	370c      	adds	r7, #12
 c000926:	46bd      	mov	sp, r7
 c000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00092c:	4770      	bx	lr
	...

0c000930 <key_scheduling_128>:
  p[1] = t[1] ^ wk[0];
  p[2] = t[2];
  p[3] = t[3] ^ wk[1];
}

void key_scheduling_128(unsigned int *k, unsigned int *wk, unsigned int *rk) {
 c000930:	b580      	push	{r7, lr}
 c000932:	b092      	sub	sp, #72	; 0x48
 c000934:	af00      	add	r7, sp, #0
 c000936:	60f8      	str	r0, [r7, #12]
 c000938:	60b9      	str	r1, [r7, #8]
 c00093a:	607a      	str	r2, [r7, #4]
  unsigned int l[4];
  unsigned int t[4];
  int i;

  /* step 1 */
  gfn4(12, con_128, k, y);
 c00093c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c000940:	68fa      	ldr	r2, [r7, #12]
 c000942:	494f      	ldr	r1, [pc, #316]	; (c000a80 <key_scheduling_128+0x150>)
 c000944:	200c      	movs	r0, #12
 c000946:	f7ff ff01 	bl	c00074c <gfn4>
  l[0] = y[0];
 c00094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00094c:	627b      	str	r3, [r7, #36]	; 0x24
  l[1] = y[1];
 c00094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c000950:	62bb      	str	r3, [r7, #40]	; 0x28
  l[2] = y[2];
 c000952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  l[3] = y[3];
 c000956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000958:	633b      	str	r3, [r7, #48]	; 0x30

  /* step 2 */
  wk[0] = k[0];
 c00095a:	68fb      	ldr	r3, [r7, #12]
 c00095c:	681a      	ldr	r2, [r3, #0]
 c00095e:	68bb      	ldr	r3, [r7, #8]
 c000960:	601a      	str	r2, [r3, #0]
  wk[1] = k[1];
 c000962:	68bb      	ldr	r3, [r7, #8]
 c000964:	3304      	adds	r3, #4
 c000966:	68fa      	ldr	r2, [r7, #12]
 c000968:	6852      	ldr	r2, [r2, #4]
 c00096a:	601a      	str	r2, [r3, #0]
  wk[2] = k[2];
 c00096c:	68bb      	ldr	r3, [r7, #8]
 c00096e:	3308      	adds	r3, #8
 c000970:	68fa      	ldr	r2, [r7, #12]
 c000972:	6892      	ldr	r2, [r2, #8]
 c000974:	601a      	str	r2, [r3, #0]
  wk[3] = k[3];
 c000976:	68bb      	ldr	r3, [r7, #8]
 c000978:	330c      	adds	r3, #12
 c00097a:	68fa      	ldr	r2, [r7, #12]
 c00097c:	68d2      	ldr	r2, [r2, #12]
 c00097e:	601a      	str	r2, [r3, #0]

  /* step 3 */
  for (i = 0; i < 9; i++) {
 c000980:	2300      	movs	r3, #0
 c000982:	647b      	str	r3, [r7, #68]	; 0x44
 c000984:	e073      	b.n	c000a6e <key_scheduling_128+0x13e>
    t[0] = l[0] ^ con_128[24 + 4 * i];
 c000986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c000988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00098a:	3306      	adds	r3, #6
 c00098c:	009b      	lsls	r3, r3, #2
 c00098e:	493c      	ldr	r1, [pc, #240]	; (c000a80 <key_scheduling_128+0x150>)
 c000990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c000994:	4053      	eors	r3, r2
 c000996:	617b      	str	r3, [r7, #20]
    t[1] = l[1] ^ con_128[24 + 4 * i + 1];
 c000998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00099a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00099c:	3306      	adds	r3, #6
 c00099e:	009b      	lsls	r3, r3, #2
 c0009a0:	3301      	adds	r3, #1
 c0009a2:	4937      	ldr	r1, [pc, #220]	; (c000a80 <key_scheduling_128+0x150>)
 c0009a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0009a8:	4053      	eors	r3, r2
 c0009aa:	61bb      	str	r3, [r7, #24]
    t[2] = l[2] ^ con_128[24 + 4 * i + 2];
 c0009ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c0009ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c0009b0:	3306      	adds	r3, #6
 c0009b2:	009b      	lsls	r3, r3, #2
 c0009b4:	3302      	adds	r3, #2
 c0009b6:	4932      	ldr	r1, [pc, #200]	; (c000a80 <key_scheduling_128+0x150>)
 c0009b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0009bc:	4053      	eors	r3, r2
 c0009be:	61fb      	str	r3, [r7, #28]
    t[3] = l[3] ^ con_128[24 + 4 * i + 3];
 c0009c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c0009c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c0009c4:	3306      	adds	r3, #6
 c0009c6:	009b      	lsls	r3, r3, #2
 c0009c8:	3303      	adds	r3, #3
 c0009ca:	492d      	ldr	r1, [pc, #180]	; (c000a80 <key_scheduling_128+0x150>)
 c0009cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0009d0:	4053      	eors	r3, r2
 c0009d2:	623b      	str	r3, [r7, #32]

    sigma(l, y);
 c0009d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c0009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 c0009dc:	4611      	mov	r1, r2
 c0009de:	4618      	mov	r0, r3
 c0009e0:	f7ff ff6b 	bl	c0008ba <sigma>
    l[0] = y[0];
 c0009e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0009e6:	627b      	str	r3, [r7, #36]	; 0x24
    l[1] = y[1];
 c0009e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0009ea:	62bb      	str	r3, [r7, #40]	; 0x28
    l[2] = y[2];
 c0009ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c0009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    l[3] = y[3];
 c0009f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0009f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (i % 2 == 1) {
 c0009f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c0009f6:	2b00      	cmp	r3, #0
 c0009f8:	f003 0301 	and.w	r3, r3, #1
 c0009fc:	bfb8      	it	lt
 c0009fe:	425b      	neglt	r3, r3
 c000a00:	2b01      	cmp	r3, #1
 c000a02:	d116      	bne.n	c000a32 <key_scheduling_128+0x102>
      t[0] = t[0] ^ k[0];
 c000a04:	697a      	ldr	r2, [r7, #20]
 c000a06:	68fb      	ldr	r3, [r7, #12]
 c000a08:	681b      	ldr	r3, [r3, #0]
 c000a0a:	4053      	eors	r3, r2
 c000a0c:	617b      	str	r3, [r7, #20]
      t[1] = t[1] ^ k[1];
 c000a0e:	69ba      	ldr	r2, [r7, #24]
 c000a10:	68fb      	ldr	r3, [r7, #12]
 c000a12:	3304      	adds	r3, #4
 c000a14:	681b      	ldr	r3, [r3, #0]
 c000a16:	4053      	eors	r3, r2
 c000a18:	61bb      	str	r3, [r7, #24]
      t[2] = t[2] ^ k[2];
 c000a1a:	69fa      	ldr	r2, [r7, #28]
 c000a1c:	68fb      	ldr	r3, [r7, #12]
 c000a1e:	3308      	adds	r3, #8
 c000a20:	681b      	ldr	r3, [r3, #0]
 c000a22:	4053      	eors	r3, r2
 c000a24:	61fb      	str	r3, [r7, #28]
      t[3] = t[3] ^ k[3];
 c000a26:	6a3a      	ldr	r2, [r7, #32]
 c000a28:	68fb      	ldr	r3, [r7, #12]
 c000a2a:	330c      	adds	r3, #12
 c000a2c:	681b      	ldr	r3, [r3, #0]
 c000a2e:	4053      	eors	r3, r2
 c000a30:	623b      	str	r3, [r7, #32]
    }

    rk[4*i] = t[0];
 c000a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a34:	011b      	lsls	r3, r3, #4
 c000a36:	687a      	ldr	r2, [r7, #4]
 c000a38:	4413      	add	r3, r2
 c000a3a:	697a      	ldr	r2, [r7, #20]
 c000a3c:	601a      	str	r2, [r3, #0]
    rk[4*i+1] = t[1];
 c000a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a40:	011b      	lsls	r3, r3, #4
 c000a42:	3304      	adds	r3, #4
 c000a44:	687a      	ldr	r2, [r7, #4]
 c000a46:	4413      	add	r3, r2
 c000a48:	69ba      	ldr	r2, [r7, #24]
 c000a4a:	601a      	str	r2, [r3, #0]
    rk[4*i+2] = t[2];
 c000a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a4e:	011b      	lsls	r3, r3, #4
 c000a50:	3308      	adds	r3, #8
 c000a52:	687a      	ldr	r2, [r7, #4]
 c000a54:	4413      	add	r3, r2
 c000a56:	69fa      	ldr	r2, [r7, #28]
 c000a58:	601a      	str	r2, [r3, #0]
    rk[4*i+3] = t[3];
 c000a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a5c:	011b      	lsls	r3, r3, #4
 c000a5e:	330c      	adds	r3, #12
 c000a60:	687a      	ldr	r2, [r7, #4]
 c000a62:	4413      	add	r3, r2
 c000a64:	6a3a      	ldr	r2, [r7, #32]
 c000a66:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 c000a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a6a:	3301      	adds	r3, #1
 c000a6c:	647b      	str	r3, [r7, #68]	; 0x44
 c000a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000a70:	2b08      	cmp	r3, #8
 c000a72:	dd88      	ble.n	c000986 <key_scheduling_128+0x56>
  }
}
 c000a74:	bf00      	nop
 c000a76:	bf00      	nop
 c000a78:	3748      	adds	r7, #72	; 0x48
 c000a7a:	46bd      	mov	sp, r7
 c000a7c:	bd80      	pop	{r7, pc}
 c000a7e:	bf00      	nop
 c000a80:	30000200 	.word	0x30000200

0c000a84 <encryption_128>:

void encryption_128(unsigned int *p, unsigned int *c, unsigned int *wk, unsigned int* rk) {
 c000a84:	b580      	push	{r7, lr}
 c000a86:	b08c      	sub	sp, #48	; 0x30
 c000a88:	af00      	add	r7, sp, #0
 c000a8a:	60f8      	str	r0, [r7, #12]
 c000a8c:	60b9      	str	r1, [r7, #8]
 c000a8e:	607a      	str	r2, [r7, #4]
 c000a90:	603b      	str	r3, [r7, #0]
  unsigned int t[4];
  unsigned int y[4];


  /* step 1 */
  t[0] = p[0];
 c000a92:	68fb      	ldr	r3, [r7, #12]
 c000a94:	681b      	ldr	r3, [r3, #0]
 c000a96:	623b      	str	r3, [r7, #32]
  t[1] = p[1] ^ wk[0];
 c000a98:	68fb      	ldr	r3, [r7, #12]
 c000a9a:	3304      	adds	r3, #4
 c000a9c:	681a      	ldr	r2, [r3, #0]
 c000a9e:	687b      	ldr	r3, [r7, #4]
 c000aa0:	681b      	ldr	r3, [r3, #0]
 c000aa2:	4053      	eors	r3, r2
 c000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = p[2];
 c000aa6:	68fb      	ldr	r3, [r7, #12]
 c000aa8:	689b      	ldr	r3, [r3, #8]
 c000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = p[3] ^ wk[1];
 c000aac:	68fb      	ldr	r3, [r7, #12]
 c000aae:	330c      	adds	r3, #12
 c000ab0:	681a      	ldr	r2, [r3, #0]
 c000ab2:	687b      	ldr	r3, [r7, #4]
 c000ab4:	3304      	adds	r3, #4
 c000ab6:	681b      	ldr	r3, [r3, #0]
 c000ab8:	4053      	eors	r3, r2
 c000aba:	62fb      	str	r3, [r7, #44]	; 0x2c



  /* step 2 */
  gfn4(18, rk, t, y);
 c000abc:	f107 0310 	add.w	r3, r7, #16
 c000ac0:	f107 0220 	add.w	r2, r7, #32
 c000ac4:	6839      	ldr	r1, [r7, #0]
 c000ac6:	2012      	movs	r0, #18
 c000ac8:	f7ff fe40 	bl	c00074c <gfn4>
  t[0] = y[0];
 c000acc:	693b      	ldr	r3, [r7, #16]
 c000ace:	623b      	str	r3, [r7, #32]
  t[1] = y[1];
 c000ad0:	697b      	ldr	r3, [r7, #20]
 c000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = y[2];
 c000ad4:	69bb      	ldr	r3, [r7, #24]
 c000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = y[3];
 c000ad8:	69fb      	ldr	r3, [r7, #28]
 c000ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 3 */
  c[0] = t[0];
 c000adc:	6a3a      	ldr	r2, [r7, #32]
 c000ade:	68bb      	ldr	r3, [r7, #8]
 c000ae0:	601a      	str	r2, [r3, #0]
  c[1] = t[1] ^ wk[2];
 c000ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c000ae4:	687b      	ldr	r3, [r7, #4]
 c000ae6:	3308      	adds	r3, #8
 c000ae8:	681a      	ldr	r2, [r3, #0]
 c000aea:	68bb      	ldr	r3, [r7, #8]
 c000aec:	3304      	adds	r3, #4
 c000aee:	404a      	eors	r2, r1
 c000af0:	601a      	str	r2, [r3, #0]
  c[2] = t[2];
 c000af2:	68bb      	ldr	r3, [r7, #8]
 c000af4:	3308      	adds	r3, #8
 c000af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c000af8:	601a      	str	r2, [r3, #0]
  c[3] = t[3] ^ wk[3];
 c000afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c000afc:	687b      	ldr	r3, [r7, #4]
 c000afe:	330c      	adds	r3, #12
 c000b00:	681a      	ldr	r2, [r3, #0]
 c000b02:	68bb      	ldr	r3, [r7, #8]
 c000b04:	330c      	adds	r3, #12
 c000b06:	404a      	eors	r2, r1
 c000b08:	601a      	str	r2, [r3, #0]
}
 c000b0a:	bf00      	nop
 c000b0c:	3730      	adds	r7, #48	; 0x30
 c000b0e:	46bd      	mov	sp, r7
 c000b10:	bd80      	pop	{r7, pc}

0c000b12 <decryption_128>:

void decryption_128(unsigned int *p, unsigned int *c, unsigned int *wk, unsigned int* rk) {
 c000b12:	b580      	push	{r7, lr}
 c000b14:	b08c      	sub	sp, #48	; 0x30
 c000b16:	af00      	add	r7, sp, #0
 c000b18:	60f8      	str	r0, [r7, #12]
 c000b1a:	60b9      	str	r1, [r7, #8]
 c000b1c:	607a      	str	r2, [r7, #4]
 c000b1e:	603b      	str	r3, [r7, #0]
  unsigned int t[4];
  unsigned int y[4];


  /* step 1 */
  t[0] = c[0];
 c000b20:	68bb      	ldr	r3, [r7, #8]
 c000b22:	681b      	ldr	r3, [r3, #0]
 c000b24:	623b      	str	r3, [r7, #32]
  t[1] = c[1] ^ wk[2];
 c000b26:	68bb      	ldr	r3, [r7, #8]
 c000b28:	3304      	adds	r3, #4
 c000b2a:	681a      	ldr	r2, [r3, #0]
 c000b2c:	687b      	ldr	r3, [r7, #4]
 c000b2e:	3308      	adds	r3, #8
 c000b30:	681b      	ldr	r3, [r3, #0]
 c000b32:	4053      	eors	r3, r2
 c000b34:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = c[2];
 c000b36:	68bb      	ldr	r3, [r7, #8]
 c000b38:	689b      	ldr	r3, [r3, #8]
 c000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = c[3] ^ wk[3];
 c000b3c:	68bb      	ldr	r3, [r7, #8]
 c000b3e:	330c      	adds	r3, #12
 c000b40:	681a      	ldr	r2, [r3, #0]
 c000b42:	687b      	ldr	r3, [r7, #4]
 c000b44:	330c      	adds	r3, #12
 c000b46:	681b      	ldr	r3, [r3, #0]
 c000b48:	4053      	eors	r3, r2
 c000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 2 */
  gfn_inv4(18, rk, t, y);
 c000b4c:	f107 0310 	add.w	r3, r7, #16
 c000b50:	f107 0220 	add.w	r2, r7, #32
 c000b54:	6839      	ldr	r1, [r7, #0]
 c000b56:	2012      	movs	r0, #18
 c000b58:	f7ff fe4d 	bl	c0007f6 <gfn_inv4>
  t[0] = y[0];
 c000b5c:	693b      	ldr	r3, [r7, #16]
 c000b5e:	623b      	str	r3, [r7, #32]
  t[1] = y[1];
 c000b60:	697b      	ldr	r3, [r7, #20]
 c000b62:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = y[2];
 c000b64:	69bb      	ldr	r3, [r7, #24]
 c000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = y[3];
 c000b68:	69fb      	ldr	r3, [r7, #28]
 c000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 3 */
  p[0] = t[0];
 c000b6c:	6a3a      	ldr	r2, [r7, #32]
 c000b6e:	68fb      	ldr	r3, [r7, #12]
 c000b70:	601a      	str	r2, [r3, #0]
  p[1] = t[1] ^ wk[0];
 c000b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c000b74:	687b      	ldr	r3, [r7, #4]
 c000b76:	681a      	ldr	r2, [r3, #0]
 c000b78:	68fb      	ldr	r3, [r7, #12]
 c000b7a:	3304      	adds	r3, #4
 c000b7c:	404a      	eors	r2, r1
 c000b7e:	601a      	str	r2, [r3, #0]
  p[2] = t[2];
 c000b80:	68fb      	ldr	r3, [r7, #12]
 c000b82:	3308      	adds	r3, #8
 c000b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c000b86:	601a      	str	r2, [r3, #0]
  p[3] = t[3] ^ wk[1];
 c000b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c000b8a:	687b      	ldr	r3, [r7, #4]
 c000b8c:	3304      	adds	r3, #4
 c000b8e:	681a      	ldr	r2, [r3, #0]
 c000b90:	68fb      	ldr	r3, [r7, #12]
 c000b92:	330c      	adds	r3, #12
 c000b94:	404a      	eors	r2, r1
 c000b96:	601a      	str	r2, [r3, #0]
}
 c000b98:	bf00      	nop
 c000b9a:	3730      	adds	r7, #48	; 0x30
 c000b9c:	46bd      	mov	sp, r7
 c000b9e:	bd80      	pop	{r7, pc}

0c000ba0 <clefia_cbc_128_dec>:

void clefia_cbc_128_dec(char * plain, char * cipher, int length, unsigned int* iv, unsigned int *k) {
 c000ba0:	b590      	push	{r4, r7, lr}
 c000ba2:	b0bd      	sub	sp, #244	; 0xf4
 c000ba4:	af00      	add	r7, sp, #0
 c000ba6:	60f8      	str	r0, [r7, #12]
 c000ba8:	60b9      	str	r1, [r7, #8]
 c000baa:	607a      	str	r2, [r7, #4]
 c000bac:	603b      	str	r3, [r7, #0]
  unsigned int wk[4];
  unsigned int rk[36];


  int j;
  int i = 0;
 c000bae:	2300      	movs	r3, #0
 c000bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  int tam = length;
 c000bb4:	687b      	ldr	r3, [r7, #4]
 c000bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (tam % 16 != 0) {
 c000bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000bbe:	f003 030f 	and.w	r3, r3, #15
 c000bc2:	2b00      	cmp	r3, #0
 c000bc4:	d01e      	beq.n	c000c04 <clefia_cbc_128_dec+0x64>
    for (j = tam % 16; j < 16; j++) {
 c000bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000bca:	425a      	negs	r2, r3
 c000bcc:	f003 030f 	and.w	r3, r3, #15
 c000bd0:	f002 020f 	and.w	r2, r2, #15
 c000bd4:	bf58      	it	pl
 c000bd6:	4253      	negpl	r3, r2
 c000bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000bdc:	e00e      	b.n	c000bfc <clefia_cbc_128_dec+0x5c>
      cipher[tam++] = 0;
 c000bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000be2:	1c5a      	adds	r2, r3, #1
 c000be4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 c000be8:	461a      	mov	r2, r3
 c000bea:	68bb      	ldr	r3, [r7, #8]
 c000bec:	4413      	add	r3, r2
 c000bee:	2200      	movs	r2, #0
 c000bf0:	701a      	strb	r2, [r3, #0]
    for (j = tam % 16; j < 16; j++) {
 c000bf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000bf6:	3301      	adds	r3, #1
 c000bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000bfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c00:	2b0f      	cmp	r3, #15
 c000c02:	ddec      	ble.n	c000bde <clefia_cbc_128_dec+0x3e>
    }
  }

  for (j = 0; j < 4; j++) {
 c000c04:	2300      	movs	r3, #0
 c000c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000c0a:	e011      	b.n	c000c30 <clefia_cbc_128_dec+0x90>
    aux[j] = iv[j];
 c000c0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c10:	009b      	lsls	r3, r3, #2
 c000c12:	683a      	ldr	r2, [r7, #0]
 c000c14:	4413      	add	r3, r2
 c000c16:	681a      	ldr	r2, [r3, #0]
 c000c18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c1c:	009b      	lsls	r3, r3, #2
 c000c1e:	33f0      	adds	r3, #240	; 0xf0
 c000c20:	443b      	add	r3, r7
 c000c22:	f843 2c3c 	str.w	r2, [r3, #-60]
  for (j = 0; j < 4; j++) {
 c000c26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c2a:	3301      	adds	r3, #1
 c000c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000c30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c34:	2b03      	cmp	r3, #3
 c000c36:	dde9      	ble.n	c000c0c <clefia_cbc_128_dec+0x6c>
  }

  key_scheduling_128(k, wk, rk);
 c000c38:	f107 0214 	add.w	r2, r7, #20
 c000c3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000c40:	4619      	mov	r1, r3
 c000c42:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 c000c46:	f7ff fe73 	bl	c000930 <key_scheduling_128>

  while (i < tam) {
 c000c4a:	e0c0      	b.n	c000dce <clefia_cbc_128_dec+0x22e>
    for (j = 0; j < 4; j++) {
 c000c4c:	2300      	movs	r3, #0
 c000c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000c52:	e043      	b.n	c000cdc <clefia_cbc_128_dec+0x13c>
      c[j] = WORD_FROM_BYTES(cipher[i+4*j], cipher[i+4*j+1], cipher[i+4*j+2], cipher[i+4*j+3]);
 c000c54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c58:	009a      	lsls	r2, r3, #2
 c000c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c5e:	4413      	add	r3, r2
 c000c60:	461a      	mov	r2, r3
 c000c62:	68bb      	ldr	r3, [r7, #8]
 c000c64:	4413      	add	r3, r2
 c000c66:	781b      	ldrb	r3, [r3, #0]
 c000c68:	061b      	lsls	r3, r3, #24
 c000c6a:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c000c6e:	4619      	mov	r1, r3
 c000c70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c74:	009a      	lsls	r2, r3, #2
 c000c76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c7a:	4413      	add	r3, r2
 c000c7c:	3301      	adds	r3, #1
 c000c7e:	68ba      	ldr	r2, [r7, #8]
 c000c80:	4413      	add	r3, r2
 c000c82:	781b      	ldrb	r3, [r3, #0]
 c000c84:	041b      	lsls	r3, r3, #16
 c000c86:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000c8a:	ea01 0203 	and.w	r2, r1, r3
 c000c8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000c92:	0099      	lsls	r1, r3, #2
 c000c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c98:	440b      	add	r3, r1
 c000c9a:	3302      	adds	r3, #2
 c000c9c:	68b9      	ldr	r1, [r7, #8]
 c000c9e:	440b      	add	r3, r1
 c000ca0:	781b      	ldrb	r3, [r3, #0]
 c000ca2:	021b      	lsls	r3, r3, #8
 c000ca4:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000ca8:	401a      	ands	r2, r3
 c000caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000cae:	0099      	lsls	r1, r3, #2
 c000cb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000cb4:	440b      	add	r3, r1
 c000cb6:	3303      	adds	r3, #3
 c000cb8:	68b9      	ldr	r1, [r7, #8]
 c000cba:	440b      	add	r3, r1
 c000cbc:	781b      	ldrb	r3, [r3, #0]
 c000cbe:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c000cc2:	401a      	ands	r2, r3
 c000cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000cc8:	009b      	lsls	r3, r3, #2
 c000cca:	33f0      	adds	r3, #240	; 0xf0
 c000ccc:	443b      	add	r3, r7
 c000cce:	f843 2c2c 	str.w	r2, [r3, #-44]
    for (j = 0; j < 4; j++) {
 c000cd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000cd6:	3301      	adds	r3, #1
 c000cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000ce0:	2b03      	cmp	r3, #3
 c000ce2:	ddb7      	ble.n	c000c54 <clefia_cbc_128_dec+0xb4>
    }
    decryption_128(p, c, wk, rk);
 c000ce4:	f107 0314 	add.w	r3, r7, #20
 c000ce8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 c000cec:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 c000cf0:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 c000cf4:	f7ff ff0d 	bl	c000b12 <decryption_128>

    for (j = 0; j < 16; j++) {
 c000cf8:	2300      	movs	r3, #0
 c000cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000cfe:	e042      	b.n	c000d86 <clefia_cbc_128_dec+0x1e6>
      plain[i+j] = byte_from_word(p[j/4], j%4) ^ byte_from_word(aux[j/4], j%4);
 c000d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d04:	2b00      	cmp	r3, #0
 c000d06:	da00      	bge.n	c000d0a <clefia_cbc_128_dec+0x16a>
 c000d08:	3303      	adds	r3, #3
 c000d0a:	109b      	asrs	r3, r3, #2
 c000d0c:	009b      	lsls	r3, r3, #2
 c000d0e:	33f0      	adds	r3, #240	; 0xf0
 c000d10:	443b      	add	r3, r7
 c000d12:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 c000d16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d1a:	425a      	negs	r2, r3
 c000d1c:	f003 0303 	and.w	r3, r3, #3
 c000d20:	f002 0203 	and.w	r2, r2, #3
 c000d24:	bf58      	it	pl
 c000d26:	4253      	negpl	r3, r2
 c000d28:	4619      	mov	r1, r3
 c000d2a:	f7ff fab1 	bl	c000290 <byte_from_word>
 c000d2e:	4603      	mov	r3, r0
 c000d30:	461c      	mov	r4, r3
 c000d32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d36:	2b00      	cmp	r3, #0
 c000d38:	da00      	bge.n	c000d3c <clefia_cbc_128_dec+0x19c>
 c000d3a:	3303      	adds	r3, #3
 c000d3c:	109b      	asrs	r3, r3, #2
 c000d3e:	009b      	lsls	r3, r3, #2
 c000d40:	33f0      	adds	r3, #240	; 0xf0
 c000d42:	443b      	add	r3, r7
 c000d44:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 c000d48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d4c:	425a      	negs	r2, r3
 c000d4e:	f003 0303 	and.w	r3, r3, #3
 c000d52:	f002 0203 	and.w	r2, r2, #3
 c000d56:	bf58      	it	pl
 c000d58:	4253      	negpl	r3, r2
 c000d5a:	4619      	mov	r1, r3
 c000d5c:	f7ff fa98 	bl	c000290 <byte_from_word>
 c000d60:	4603      	mov	r3, r0
 c000d62:	4619      	mov	r1, r3
 c000d64:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 c000d68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d6c:	4413      	add	r3, r2
 c000d6e:	461a      	mov	r2, r3
 c000d70:	68fb      	ldr	r3, [r7, #12]
 c000d72:	4413      	add	r3, r2
 c000d74:	ea84 0201 	eor.w	r2, r4, r1
 c000d78:	b2d2      	uxtb	r2, r2
 c000d7a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 16; j++) {
 c000d7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d80:	3301      	adds	r3, #1
 c000d82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d8a:	2b0f      	cmp	r3, #15
 c000d8c:	ddb8      	ble.n	c000d00 <clefia_cbc_128_dec+0x160>
    }

    for (j = 0; j < 4; j++) {
 c000d8e:	2300      	movs	r3, #0
 c000d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000d94:	e012      	b.n	c000dbc <clefia_cbc_128_dec+0x21c>
      aux[j] = c[j];
 c000d96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000d9a:	009b      	lsls	r3, r3, #2
 c000d9c:	33f0      	adds	r3, #240	; 0xf0
 c000d9e:	443b      	add	r3, r7
 c000da0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 c000da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000da8:	009b      	lsls	r3, r3, #2
 c000daa:	33f0      	adds	r3, #240	; 0xf0
 c000dac:	443b      	add	r3, r7
 c000dae:	f843 2c3c 	str.w	r2, [r3, #-60]
    for (j = 0; j < 4; j++) {
 c000db2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000db6:	3301      	adds	r3, #1
 c000db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000dc0:	2b03      	cmp	r3, #3
 c000dc2:	dde8      	ble.n	c000d96 <clefia_cbc_128_dec+0x1f6>
    }

    i = i + 16;
 c000dc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000dc8:	3310      	adds	r3, #16
 c000dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  while (i < tam) {
 c000dce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 c000dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dd6:	429a      	cmp	r2, r3
 c000dd8:	f6ff af38 	blt.w	c000c4c <clefia_cbc_128_dec+0xac>
  }
}
 c000ddc:	bf00      	nop
 c000dde:	bf00      	nop
 c000de0:	37f4      	adds	r7, #244	; 0xf4
 c000de2:	46bd      	mov	sp, r7
 c000de4:	bd90      	pop	{r4, r7, pc}

0c000de6 <clefia_cbc_128_enc>:

void clefia_cbc_128_enc(char* plain, char * cipher, int length, unsigned int* iv, unsigned int *k) {
 c000de6:	b590      	push	{r4, r7, lr}
 c000de8:	b0bd      	sub	sp, #244	; 0xf4
 c000dea:	af00      	add	r7, sp, #0
 c000dec:	60f8      	str	r0, [r7, #12]
 c000dee:	60b9      	str	r1, [r7, #8]
 c000df0:	607a      	str	r2, [r7, #4]
 c000df2:	603b      	str	r3, [r7, #0]
  unsigned int c[4];
  unsigned int wk[4];
  unsigned int rk[36];

  int j;
  int i = 0;
 c000df4:	2300      	movs	r3, #0
 c000df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  int tam = length;
 c000dfa:	687b      	ldr	r3, [r7, #4]
 c000dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (tam % 16 != 0) {
 c000e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000e04:	f003 030f 	and.w	r3, r3, #15
 c000e08:	2b00      	cmp	r3, #0
 c000e0a:	d01e      	beq.n	c000e4a <clefia_cbc_128_enc+0x64>
    for (j = tam % 16; j < 16; j++) {
 c000e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000e10:	425a      	negs	r2, r3
 c000e12:	f003 030f 	and.w	r3, r3, #15
 c000e16:	f002 020f 	and.w	r2, r2, #15
 c000e1a:	bf58      	it	pl
 c000e1c:	4253      	negpl	r3, r2
 c000e1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000e22:	e00e      	b.n	c000e42 <clefia_cbc_128_enc+0x5c>
      plain[tam++] = 0;
 c000e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000e28:	1c5a      	adds	r2, r3, #1
 c000e2a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 c000e2e:	461a      	mov	r2, r3
 c000e30:	68fb      	ldr	r3, [r7, #12]
 c000e32:	4413      	add	r3, r2
 c000e34:	2200      	movs	r2, #0
 c000e36:	701a      	strb	r2, [r3, #0]
    for (j = tam % 16; j < 16; j++) {
 c000e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000e3c:	3301      	adds	r3, #1
 c000e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000e42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000e46:	2b0f      	cmp	r3, #15
 c000e48:	ddec      	ble.n	c000e24 <clefia_cbc_128_enc+0x3e>
    }
  }

  c[0] = iv[0];
 c000e4a:	683b      	ldr	r3, [r7, #0]
 c000e4c:	681b      	ldr	r3, [r3, #0]
 c000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  c[1] = iv[1];
 c000e52:	683b      	ldr	r3, [r7, #0]
 c000e54:	685b      	ldr	r3, [r3, #4]
 c000e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  c[2] = iv[2];
 c000e5a:	683b      	ldr	r3, [r7, #0]
 c000e5c:	689b      	ldr	r3, [r3, #8]
 c000e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  c[3] = iv[3];
 c000e62:	683b      	ldr	r3, [r7, #0]
 c000e64:	68db      	ldr	r3, [r3, #12]
 c000e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  key_scheduling_128(k, wk, rk);
 c000e6a:	f107 0214 	add.w	r2, r7, #20
 c000e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000e72:	4619      	mov	r1, r3
 c000e74:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 c000e78:	f7ff fd5a 	bl	c000930 <key_scheduling_128>

  while (i < tam) {
 c000e7c:	e190      	b.n	c0011a0 <clefia_cbc_128_enc+0x3ba>

    unsigned int bla0 = WORD_FROM_BYTES(plain[i+4*0],plain[i+4*0+1],plain[i+4*0+2],plain[i+4*0+3]);
 c000e7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000e82:	68fa      	ldr	r2, [r7, #12]
 c000e84:	4413      	add	r3, r2
 c000e86:	781b      	ldrb	r3, [r3, #0]
 c000e88:	061b      	lsls	r3, r3, #24
 c000e8a:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c000e8e:	4619      	mov	r1, r3
 c000e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000e94:	3301      	adds	r3, #1
 c000e96:	68fa      	ldr	r2, [r7, #12]
 c000e98:	4413      	add	r3, r2
 c000e9a:	781b      	ldrb	r3, [r3, #0]
 c000e9c:	041b      	lsls	r3, r3, #16
 c000e9e:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000ea2:	ea01 0203 	and.w	r2, r1, r3
 c000ea6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000eaa:	3302      	adds	r3, #2
 c000eac:	68f9      	ldr	r1, [r7, #12]
 c000eae:	440b      	add	r3, r1
 c000eb0:	781b      	ldrb	r3, [r3, #0]
 c000eb2:	021b      	lsls	r3, r3, #8
 c000eb4:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000eb8:	401a      	ands	r2, r3
 c000eba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000ebe:	3303      	adds	r3, #3
 c000ec0:	68f9      	ldr	r1, [r7, #12]
 c000ec2:	440b      	add	r3, r1
 c000ec4:	781b      	ldrb	r3, [r3, #0]
 c000ec6:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c000eca:	4013      	ands	r3, r2
 c000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    unsigned int bla1 = WORD_FROM_BYTES(plain[i+4*1],plain[i+4*1+1],plain[i+4*1+2],plain[i+4*1+3]);
 c000ed0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000ed4:	3304      	adds	r3, #4
 c000ed6:	68fa      	ldr	r2, [r7, #12]
 c000ed8:	4413      	add	r3, r2
 c000eda:	781b      	ldrb	r3, [r3, #0]
 c000edc:	061b      	lsls	r3, r3, #24
 c000ede:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c000ee2:	4619      	mov	r1, r3
 c000ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000ee8:	3305      	adds	r3, #5
 c000eea:	68fa      	ldr	r2, [r7, #12]
 c000eec:	4413      	add	r3, r2
 c000eee:	781b      	ldrb	r3, [r3, #0]
 c000ef0:	041b      	lsls	r3, r3, #16
 c000ef2:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000ef6:	ea01 0203 	and.w	r2, r1, r3
 c000efa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000efe:	3306      	adds	r3, #6
 c000f00:	68f9      	ldr	r1, [r7, #12]
 c000f02:	440b      	add	r3, r1
 c000f04:	781b      	ldrb	r3, [r3, #0]
 c000f06:	021b      	lsls	r3, r3, #8
 c000f08:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000f0c:	401a      	ands	r2, r3
 c000f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f12:	3307      	adds	r3, #7
 c000f14:	68f9      	ldr	r1, [r7, #12]
 c000f16:	440b      	add	r3, r1
 c000f18:	781b      	ldrb	r3, [r3, #0]
 c000f1a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c000f1e:	4013      	ands	r3, r2
 c000f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    unsigned int bla2 = WORD_FROM_BYTES(plain[i+4*2],plain[i+4*2+1],plain[i+4*2+2],plain[i+4*2+3]);
 c000f24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f28:	3308      	adds	r3, #8
 c000f2a:	68fa      	ldr	r2, [r7, #12]
 c000f2c:	4413      	add	r3, r2
 c000f2e:	781b      	ldrb	r3, [r3, #0]
 c000f30:	061b      	lsls	r3, r3, #24
 c000f32:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c000f36:	4619      	mov	r1, r3
 c000f38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f3c:	3309      	adds	r3, #9
 c000f3e:	68fa      	ldr	r2, [r7, #12]
 c000f40:	4413      	add	r3, r2
 c000f42:	781b      	ldrb	r3, [r3, #0]
 c000f44:	041b      	lsls	r3, r3, #16
 c000f46:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000f4a:	ea01 0203 	and.w	r2, r1, r3
 c000f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f52:	330a      	adds	r3, #10
 c000f54:	68f9      	ldr	r1, [r7, #12]
 c000f56:	440b      	add	r3, r1
 c000f58:	781b      	ldrb	r3, [r3, #0]
 c000f5a:	021b      	lsls	r3, r3, #8
 c000f5c:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000f60:	401a      	ands	r2, r3
 c000f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f66:	330b      	adds	r3, #11
 c000f68:	68f9      	ldr	r1, [r7, #12]
 c000f6a:	440b      	add	r3, r1
 c000f6c:	781b      	ldrb	r3, [r3, #0]
 c000f6e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c000f72:	4013      	ands	r3, r2
 c000f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    unsigned int bla3 = WORD_FROM_BYTES(plain[i+4*3],plain[i+4*3+1],plain[i+4*3+2],plain[i+4*3+3]);
 c000f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f7c:	330c      	adds	r3, #12
 c000f7e:	68fa      	ldr	r2, [r7, #12]
 c000f80:	4413      	add	r3, r2
 c000f82:	781b      	ldrb	r3, [r3, #0]
 c000f84:	061b      	lsls	r3, r3, #24
 c000f86:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 c000f8a:	4619      	mov	r1, r3
 c000f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000f90:	330d      	adds	r3, #13
 c000f92:	68fa      	ldr	r2, [r7, #12]
 c000f94:	4413      	add	r3, r2
 c000f96:	781b      	ldrb	r3, [r3, #0]
 c000f98:	041b      	lsls	r3, r3, #16
 c000f9a:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 c000f9e:	ea01 0203 	and.w	r2, r1, r3
 c000fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000fa6:	330e      	adds	r3, #14
 c000fa8:	68f9      	ldr	r1, [r7, #12]
 c000faa:	440b      	add	r3, r1
 c000fac:	781b      	ldrb	r3, [r3, #0]
 c000fae:	021b      	lsls	r3, r3, #8
 c000fb0:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 c000fb4:	401a      	ands	r2, r3
 c000fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000fba:	330f      	adds	r3, #15
 c000fbc:	68f9      	ldr	r1, [r7, #12]
 c000fbe:	440b      	add	r3, r1
 c000fc0:	781b      	ldrb	r3, [r3, #0]
 c000fc2:	f063 03ff 	orn	r3, r3, #255	; 0xff
 c000fc6:	4013      	ands	r3, r2
 c000fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    p[0] = bla0 ^ c[0];
 c000fcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000fd4:	4053      	eors	r3, r2
 c000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    p[1] = bla1 ^ c[1];
 c000fda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000fe2:	4053      	eors	r3, r2
 c000fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    p[2] = bla2 ^ c[2];
 c000fe8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000ff0:	4053      	eors	r3, r2
 c000ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    p[3] = bla3 ^ c[3];
 c000ff6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000ffe:	4053      	eors	r3, r2
 c001000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


    encryption_128(p, c, wk, rk);
 c001004:	f107 0314 	add.w	r3, r7, #20
 c001008:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 c00100c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 c001010:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 c001014:	f7ff fd36 	bl	c000a84 <encryption_128>

    cipher[i+0] = byte_from_word(c[0/4], 0 % 4);
 c001018:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 c00101c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001020:	68ba      	ldr	r2, [r7, #8]
 c001022:	18d4      	adds	r4, r2, r3
 c001024:	2100      	movs	r1, #0
 c001026:	f7ff f933 	bl	c000290 <byte_from_word>
 c00102a:	4603      	mov	r3, r0
 c00102c:	7023      	strb	r3, [r4, #0]
    cipher[i+1] = byte_from_word(c[1/4], 1 % 4);
 c00102e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 c001032:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001036:	3301      	adds	r3, #1
 c001038:	68ba      	ldr	r2, [r7, #8]
 c00103a:	18d4      	adds	r4, r2, r3
 c00103c:	2101      	movs	r1, #1
 c00103e:	f7ff f927 	bl	c000290 <byte_from_word>
 c001042:	4603      	mov	r3, r0
 c001044:	7023      	strb	r3, [r4, #0]
    cipher[i+2] = byte_from_word(c[2/4], 2 % 4);
 c001046:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 c00104a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00104e:	3302      	adds	r3, #2
 c001050:	68ba      	ldr	r2, [r7, #8]
 c001052:	18d4      	adds	r4, r2, r3
 c001054:	2102      	movs	r1, #2
 c001056:	f7ff f91b 	bl	c000290 <byte_from_word>
 c00105a:	4603      	mov	r3, r0
 c00105c:	7023      	strb	r3, [r4, #0]
    cipher[i+3] = byte_from_word(c[3/4], 3 % 4);
 c00105e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 c001062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001066:	3303      	adds	r3, #3
 c001068:	68ba      	ldr	r2, [r7, #8]
 c00106a:	18d4      	adds	r4, r2, r3
 c00106c:	2103      	movs	r1, #3
 c00106e:	f7ff f90f 	bl	c000290 <byte_from_word>
 c001072:	4603      	mov	r3, r0
 c001074:	7023      	strb	r3, [r4, #0]
    cipher[i+4] = byte_from_word(c[4/4], 4 % 4);
 c001076:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c00107a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00107e:	3304      	adds	r3, #4
 c001080:	68ba      	ldr	r2, [r7, #8]
 c001082:	18d4      	adds	r4, r2, r3
 c001084:	2100      	movs	r1, #0
 c001086:	f7ff f903 	bl	c000290 <byte_from_word>
 c00108a:	4603      	mov	r3, r0
 c00108c:	7023      	strb	r3, [r4, #0]
    cipher[i+5] = byte_from_word(c[5/4], 5 % 4);
 c00108e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c001092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001096:	3305      	adds	r3, #5
 c001098:	68ba      	ldr	r2, [r7, #8]
 c00109a:	18d4      	adds	r4, r2, r3
 c00109c:	2101      	movs	r1, #1
 c00109e:	f7ff f8f7 	bl	c000290 <byte_from_word>
 c0010a2:	4603      	mov	r3, r0
 c0010a4:	7023      	strb	r3, [r4, #0]
    cipher[i+6] = byte_from_word(c[6/4], 6 % 4);
 c0010a6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c0010aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0010ae:	3306      	adds	r3, #6
 c0010b0:	68ba      	ldr	r2, [r7, #8]
 c0010b2:	18d4      	adds	r4, r2, r3
 c0010b4:	2102      	movs	r1, #2
 c0010b6:	f7ff f8eb 	bl	c000290 <byte_from_word>
 c0010ba:	4603      	mov	r3, r0
 c0010bc:	7023      	strb	r3, [r4, #0]
    cipher[i+7] = byte_from_word(c[7/4], 7 % 4);
 c0010be:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c0010c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0010c6:	3307      	adds	r3, #7
 c0010c8:	68ba      	ldr	r2, [r7, #8]
 c0010ca:	18d4      	adds	r4, r2, r3
 c0010cc:	2103      	movs	r1, #3
 c0010ce:	f7ff f8df 	bl	c000290 <byte_from_word>
 c0010d2:	4603      	mov	r3, r0
 c0010d4:	7023      	strb	r3, [r4, #0]
    cipher[i+8] = byte_from_word(c[8/4], 8 % 4);
 c0010d6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c0010da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0010de:	3308      	adds	r3, #8
 c0010e0:	68ba      	ldr	r2, [r7, #8]
 c0010e2:	18d4      	adds	r4, r2, r3
 c0010e4:	2100      	movs	r1, #0
 c0010e6:	f7ff f8d3 	bl	c000290 <byte_from_word>
 c0010ea:	4603      	mov	r3, r0
 c0010ec:	7023      	strb	r3, [r4, #0]
    cipher[i+9] = byte_from_word(c[9/4], 9 % 4);
 c0010ee:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c0010f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0010f6:	3309      	adds	r3, #9
 c0010f8:	68ba      	ldr	r2, [r7, #8]
 c0010fa:	18d4      	adds	r4, r2, r3
 c0010fc:	2101      	movs	r1, #1
 c0010fe:	f7ff f8c7 	bl	c000290 <byte_from_word>
 c001102:	4603      	mov	r3, r0
 c001104:	7023      	strb	r3, [r4, #0]
    cipher[i+10] = byte_from_word(c[10/4], 10 % 4);
 c001106:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c00110a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00110e:	330a      	adds	r3, #10
 c001110:	68ba      	ldr	r2, [r7, #8]
 c001112:	18d4      	adds	r4, r2, r3
 c001114:	2102      	movs	r1, #2
 c001116:	f7ff f8bb 	bl	c000290 <byte_from_word>
 c00111a:	4603      	mov	r3, r0
 c00111c:	7023      	strb	r3, [r4, #0]
    cipher[i+11] = byte_from_word(c[11/4], 11 % 4);
 c00111e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c001122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001126:	330b      	adds	r3, #11
 c001128:	68ba      	ldr	r2, [r7, #8]
 c00112a:	18d4      	adds	r4, r2, r3
 c00112c:	2103      	movs	r1, #3
 c00112e:	f7ff f8af 	bl	c000290 <byte_from_word>
 c001132:	4603      	mov	r3, r0
 c001134:	7023      	strb	r3, [r4, #0]
    cipher[i+12] = byte_from_word(c[12/4], 12 % 4);
 c001136:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 c00113a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00113e:	330c      	adds	r3, #12
 c001140:	68ba      	ldr	r2, [r7, #8]
 c001142:	18d4      	adds	r4, r2, r3
 c001144:	2100      	movs	r1, #0
 c001146:	f7ff f8a3 	bl	c000290 <byte_from_word>
 c00114a:	4603      	mov	r3, r0
 c00114c:	7023      	strb	r3, [r4, #0]
    cipher[i+13] = byte_from_word(c[13/4], 13 % 4);
 c00114e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 c001152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001156:	330d      	adds	r3, #13
 c001158:	68ba      	ldr	r2, [r7, #8]
 c00115a:	18d4      	adds	r4, r2, r3
 c00115c:	2101      	movs	r1, #1
 c00115e:	f7ff f897 	bl	c000290 <byte_from_word>
 c001162:	4603      	mov	r3, r0
 c001164:	7023      	strb	r3, [r4, #0]
    cipher[i+14] = byte_from_word(c[14/4], 14 % 4);
 c001166:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 c00116a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00116e:	330e      	adds	r3, #14
 c001170:	68ba      	ldr	r2, [r7, #8]
 c001172:	18d4      	adds	r4, r2, r3
 c001174:	2102      	movs	r1, #2
 c001176:	f7ff f88b 	bl	c000290 <byte_from_word>
 c00117a:	4603      	mov	r3, r0
 c00117c:	7023      	strb	r3, [r4, #0]
    cipher[i+15] = byte_from_word(c[15/4], 15 % 4);
 c00117e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 c001182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001186:	330f      	adds	r3, #15
 c001188:	68ba      	ldr	r2, [r7, #8]
 c00118a:	18d4      	adds	r4, r2, r3
 c00118c:	2103      	movs	r1, #3
 c00118e:	f7ff f87f 	bl	c000290 <byte_from_word>
 c001192:	4603      	mov	r3, r0
 c001194:	7023      	strb	r3, [r4, #0]
    i = i + 16;
 c001196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c00119a:	3310      	adds	r3, #16
 c00119c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  while (i < tam) {
 c0011a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 c0011a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c0011a8:	429a      	cmp	r2, r3
 c0011aa:	f6ff ae68 	blt.w	c000e7e <clefia_cbc_128_enc+0x98>
  }
}
 c0011ae:	bf00      	nop
 c0011b0:	bf00      	nop
 c0011b2:	37f4      	adds	r7, #244	; 0xf4
 c0011b4:	46bd      	mov	sp, r7
 c0011b6:	bd90      	pop	{r4, r7, pc}

0c0011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0011b8:	b580      	push	{r7, lr}
 c0011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0011bc:	f000 fc13 	bl	c0019e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0011c0:	f000 f84a 	bl	c001258 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0011c4:	f000 f8c0 	bl	c001348 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0011c8:	f000 f802 	bl	c0011d0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0011cc:	e7fe      	b.n	c0011cc <main+0x14>
	...

0c0011d0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0011d0:	b590      	push	{r4, r7, lr}
 c0011d2:	b083      	sub	sp, #12
 c0011d4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0011d6:	4b1d      	ldr	r3, [pc, #116]	; (c00124c <NonSecure_Init+0x7c>)
 c0011d8:	4a1d      	ldr	r2, [pc, #116]	; (c001250 <NonSecure_Init+0x80>)
 c0011da:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0011dc:	4b1c      	ldr	r3, [pc, #112]	; (c001250 <NonSecure_Init+0x80>)
 c0011de:	681b      	ldr	r3, [r3, #0]
 c0011e0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0011e2:	683b      	ldr	r3, [r7, #0]
 c0011e4:	f383 8888 	msr	MSP_NS, r3
}
 c0011e8:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0011ea:	4b1a      	ldr	r3, [pc, #104]	; (c001254 <NonSecure_Init+0x84>)
 c0011ec:	681b      	ldr	r3, [r3, #0]
 c0011ee:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0011f0:	687b      	ldr	r3, [r7, #4]
 c0011f2:	461c      	mov	r4, r3
 c0011f4:	0864      	lsrs	r4, r4, #1
 c0011f6:	0064      	lsls	r4, r4, #1
 c0011f8:	4620      	mov	r0, r4
 c0011fa:	4621      	mov	r1, r4
 c0011fc:	4622      	mov	r2, r4
 c0011fe:	4623      	mov	r3, r4
 c001200:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001204:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001208:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00120c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001210:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001214:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001218:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00121c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001220:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001224:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001228:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00122c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001230:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00123c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001240:	f7fe fff8 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c001244:	bf00      	nop
 c001246:	370c      	adds	r7, #12
 c001248:	46bd      	mov	sp, r7
 c00124a:	bd90      	pop	{r4, r7, pc}
 c00124c:	e002ed00 	.word	0xe002ed00
 c001250:	08040000 	.word	0x08040000
 c001254:	08040004 	.word	0x08040004

0c001258 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c001258:	b580      	push	{r7, lr}
 c00125a:	b09c      	sub	sp, #112	; 0x70
 c00125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c00125e:	1d3b      	adds	r3, r7, #4
 c001260:	226c      	movs	r2, #108	; 0x6c
 c001262:	2100      	movs	r1, #0
 c001264:	4618      	mov	r0, r3
 c001266:	f000 ff61 	bl	c00212c <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00126a:	2300      	movs	r3, #0
 c00126c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00126e:	2300      	movs	r3, #0
 c001270:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001276:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00127c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001282:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001288:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c00128a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00128e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001294:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00129a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00129c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0012a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0012ac:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0012ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0012b2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0012b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0012ba:	2300      	movs	r3, #0
 c0012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0012be:	2300      	movs	r3, #0
 c0012c0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0012c2:	2300      	movs	r3, #0
 c0012c4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0012c6:	2300      	movs	r3, #0
 c0012c8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0012ca:	2300      	movs	r3, #0
 c0012cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0012ce:	2300      	movs	r3, #0
 c0012d0:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0012d2:	2300      	movs	r3, #0
 c0012d4:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0012d6:	2300      	movs	r3, #0
 c0012d8:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0012da:	2300      	movs	r3, #0
 c0012dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0012de:	2300      	movs	r3, #0
 c0012e0:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0012e2:	2300      	movs	r3, #0
 c0012e4:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0012e6:	2300      	movs	r3, #0
 c0012e8:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0012ea:	2300      	movs	r3, #0
 c0012ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0012ee:	1d3b      	adds	r3, r7, #4
 c0012f0:	4619      	mov	r1, r3
 c0012f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0012f6:	f000 fe95 	bl	c002024 <HAL_GTZC_MPCBB_ConfigMem>
 c0012fa:	4603      	mov	r3, r0
 c0012fc:	2b00      	cmp	r3, #0
 c0012fe:	d001      	beq.n	c001304 <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c001300:	f000 f87c 	bl	c0013fc <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001304:	2300      	movs	r3, #0
 c001306:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001308:	2300      	movs	r3, #0
 c00130a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00130c:	2300      	movs	r3, #0
 c00130e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001310:	2300      	movs	r3, #0
 c001312:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001314:	2300      	movs	r3, #0
 c001316:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001318:	2300      	movs	r3, #0
 c00131a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00131c:	2300      	movs	r3, #0
 c00131e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001320:	2300      	movs	r3, #0
 c001322:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001324:	2300      	movs	r3, #0
 c001326:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001328:	1d3b      	adds	r3, r7, #4
 c00132a:	4619      	mov	r1, r3
 c00132c:	4805      	ldr	r0, [pc, #20]	; (c001344 <MX_GTZC_S_Init+0xec>)
 c00132e:	f000 fe79 	bl	c002024 <HAL_GTZC_MPCBB_ConfigMem>
 c001332:	4603      	mov	r3, r0
 c001334:	2b00      	cmp	r3, #0
 c001336:	d001      	beq.n	c00133c <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c001338:	f000 f860 	bl	c0013fc <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00133c:	bf00      	nop
 c00133e:	3770      	adds	r7, #112	; 0x70
 c001340:	46bd      	mov	sp, r7
 c001342:	bd80      	pop	{r7, pc}
 c001344:	30030000 	.word	0x30030000

0c001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c001348:	b580      	push	{r7, lr}
 c00134a:	b088      	sub	sp, #32
 c00134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00134e:	f107 030c 	add.w	r3, r7, #12
 c001352:	2200      	movs	r2, #0
 c001354:	601a      	str	r2, [r3, #0]
 c001356:	605a      	str	r2, [r3, #4]
 c001358:	609a      	str	r2, [r3, #8]
 c00135a:	60da      	str	r2, [r3, #12]
 c00135c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00135e:	4b23      	ldr	r3, [pc, #140]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001362:	4a22      	ldr	r2, [pc, #136]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001364:	f043 0304 	orr.w	r3, r3, #4
 c001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00136a:	4b20      	ldr	r3, [pc, #128]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c00136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00136e:	f003 0304 	and.w	r3, r3, #4
 c001372:	60bb      	str	r3, [r7, #8]
 c001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c001376:	4b1d      	ldr	r3, [pc, #116]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00137a:	4a1c      	ldr	r2, [pc, #112]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c00137c:	f043 0301 	orr.w	r3, r3, #1
 c001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001382:	4b1a      	ldr	r3, [pc, #104]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001386:	f003 0301 	and.w	r3, r3, #1
 c00138a:	607b      	str	r3, [r7, #4]
 c00138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00138e:	4b17      	ldr	r3, [pc, #92]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001392:	4a16      	ldr	r2, [pc, #88]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c001394:	f043 0302 	orr.w	r3, r3, #2
 c001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00139a:	4b14      	ldr	r3, [pc, #80]	; (c0013ec <MX_GPIO_Init+0xa4>)
 c00139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00139e:	f003 0302 	and.w	r3, r3, #2
 c0013a2:	603b      	str	r3, [r7, #0]
 c0013a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c0013a6:	2200      	movs	r2, #0
 c0013a8:	2180      	movs	r1, #128	; 0x80
 c0013aa:	4811      	ldr	r0, [pc, #68]	; (c0013f0 <MX_GPIO_Init+0xa8>)
 c0013ac:	f000 fdea 	bl	c001f84 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_7, GPIO_PIN_NSEC);
 c0013b0:	2200      	movs	r2, #0
 c0013b2:	2180      	movs	r1, #128	; 0x80
 c0013b4:	480f      	ldr	r0, [pc, #60]	; (c0013f4 <MX_GPIO_Init+0xac>)
 c0013b6:	f000 fdfd 	bl	c001fb4 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c0013ba:	2200      	movs	r2, #0
 c0013bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0013c0:	480d      	ldr	r0, [pc, #52]	; (c0013f8 <MX_GPIO_Init+0xb0>)
 c0013c2:	f000 fdf7 	bl	c001fb4 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c0013c6:	2380      	movs	r3, #128	; 0x80
 c0013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0013ca:	2301      	movs	r3, #1
 c0013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0013ce:	2300      	movs	r3, #0
 c0013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0013d2:	2300      	movs	r3, #0
 c0013d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c0013d6:	f107 030c 	add.w	r3, r7, #12
 c0013da:	4619      	mov	r1, r3
 c0013dc:	4804      	ldr	r0, [pc, #16]	; (c0013f0 <MX_GPIO_Init+0xa8>)
 c0013de:	f000 fc51 	bl	c001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0013e2:	bf00      	nop
 c0013e4:	3720      	adds	r7, #32
 c0013e6:	46bd      	mov	sp, r7
 c0013e8:	bd80      	pop	{r7, pc}
 c0013ea:	bf00      	nop
 c0013ec:	50021000 	.word	0x50021000
 c0013f0:	52020400 	.word	0x52020400
 c0013f4:	52020800 	.word	0x52020800
 c0013f8:	52020000 	.word	0x52020000

0c0013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0013fc:	b480      	push	{r7}
 c0013fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c001400:	b672      	cpsid	i
}
 c001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c001404:	e7fe      	b.n	c001404 <Error_Handler+0x8>
	...

0c001408 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001408:	b480      	push	{r7}
 c00140a:	b083      	sub	sp, #12
 c00140c:	af00      	add	r7, sp, #0
 c00140e:	4603      	mov	r3, r0
 c001410:	6039      	str	r1, [r7, #0]
 c001412:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001414:	683b      	ldr	r3, [r7, #0]
 c001416:	2b00      	cmp	r3, #0
 c001418:	d00d      	beq.n	c001436 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00141a:	79fb      	ldrb	r3, [r7, #7]
 c00141c:	2b00      	cmp	r3, #0
 c00141e:	d002      	beq.n	c001426 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001420:	2b01      	cmp	r3, #1
 c001422:	d004      	beq.n	c00142e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001424:	e007      	b.n	c001436 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c001426:	4a20      	ldr	r2, [pc, #128]	; (c0014a8 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c001428:	683b      	ldr	r3, [r7, #0]
 c00142a:	6013      	str	r3, [r2, #0]
        break;
 c00142c:	e003      	b.n	c001436 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c00142e:	4a1f      	ldr	r2, [pc, #124]	; (c0014ac <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001430:	683b      	ldr	r3, [r7, #0]
 c001432:	6013      	str	r3, [r2, #0]
        break;
 c001434:	bf00      	nop
    }
  }
}
 c001436:	bf00      	nop
 c001438:	370c      	adds	r7, #12
 c00143a:	46bd      	mov	sp, r7
 c00143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001440:	4670      	mov	r0, lr
 c001442:	4671      	mov	r1, lr
 c001444:	4672      	mov	r2, lr
 c001446:	4673      	mov	r3, lr
 c001448:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00144c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001450:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001454:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001458:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00145c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001460:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001464:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001468:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00146c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001470:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001474:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001478:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00147c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001484:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001488:	f38e 8c00 	msr	CPSR_fs, lr
 c00148c:	b410      	push	{r4}
 c00148e:	eef1 ca10 	vmrs	ip, fpscr
 c001492:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001496:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00149a:	ea0c 0c04 	and.w	ip, ip, r4
 c00149e:	eee1 ca10 	vmsr	fpscr, ip
 c0014a2:	bc10      	pop	{r4}
 c0014a4:	46f4      	mov	ip, lr
 c0014a6:	4774      	bxns	lr
 c0014a8:	30000318 	.word	0x30000318
 c0014ac:	3000031c 	.word	0x3000031c

0c0014b0 <__acle_se_encrypt>:

CMSE_NS_ENTRY void encrypt(uint8_t* plain, uint8_t* cipher, uint8_t* iv, uint8_t* key){
 c0014b0:	b580      	push	{r7, lr}
 c0014b2:	b086      	sub	sp, #24
 c0014b4:	af02      	add	r7, sp, #8
 c0014b6:	60f8      	str	r0, [r7, #12]
 c0014b8:	60b9      	str	r1, [r7, #8]
 c0014ba:	607a      	str	r2, [r7, #4]
 c0014bc:	603b      	str	r3, [r7, #0]
	clefia_cbc_128_enc(plain, cipher, STRING_LENGTH, (uint32_t*)iv, (uint32_t*)key);
 c0014be:	683b      	ldr	r3, [r7, #0]
 c0014c0:	9300      	str	r3, [sp, #0]
 c0014c2:	687b      	ldr	r3, [r7, #4]
 c0014c4:	2240      	movs	r2, #64	; 0x40
 c0014c6:	68b9      	ldr	r1, [r7, #8]
 c0014c8:	68f8      	ldr	r0, [r7, #12]
 c0014ca:	f7ff fc8c 	bl	c000de6 <clefia_cbc_128_enc>
}
 c0014ce:	bf00      	nop
 c0014d0:	3710      	adds	r7, #16
 c0014d2:	46bd      	mov	sp, r7
 c0014d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0014d8:	4670      	mov	r0, lr
 c0014da:	4671      	mov	r1, lr
 c0014dc:	4672      	mov	r2, lr
 c0014de:	4673      	mov	r3, lr
 c0014e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0014e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0014e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0014ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0014f0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0014f4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0014f8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0014fc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001500:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001504:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001508:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00150c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001510:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00151c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001520:	f38e 8c00 	msr	CPSR_fs, lr
 c001524:	b410      	push	{r4}
 c001526:	eef1 ca10 	vmrs	ip, fpscr
 c00152a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00152e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001532:	ea0c 0c04 	and.w	ip, ip, r4
 c001536:	eee1 ca10 	vmsr	fpscr, ip
 c00153a:	bc10      	pop	{r4}
 c00153c:	46f4      	mov	ip, lr
 c00153e:	4774      	bxns	lr

0c001540 <__acle_se_decrypt>:

CMSE_NS_ENTRY void decrypt(uint8_t* plain, uint8_t* cipher, uint8_t* iv, uint8_t* key){
 c001540:	b580      	push	{r7, lr}
 c001542:	b086      	sub	sp, #24
 c001544:	af02      	add	r7, sp, #8
 c001546:	60f8      	str	r0, [r7, #12]
 c001548:	60b9      	str	r1, [r7, #8]
 c00154a:	607a      	str	r2, [r7, #4]
 c00154c:	603b      	str	r3, [r7, #0]
	clefia_cbc_128_dec(plain, cipher, STRING_LENGTH, (uint32_t*)iv, (uint32_t*)key);
 c00154e:	683b      	ldr	r3, [r7, #0]
 c001550:	9300      	str	r3, [sp, #0]
 c001552:	687b      	ldr	r3, [r7, #4]
 c001554:	2240      	movs	r2, #64	; 0x40
 c001556:	68b9      	ldr	r1, [r7, #8]
 c001558:	68f8      	ldr	r0, [r7, #12]
 c00155a:	f7ff fb21 	bl	c000ba0 <clefia_cbc_128_dec>
}
 c00155e:	bf00      	nop
 c001560:	3710      	adds	r7, #16
 c001562:	46bd      	mov	sp, r7
 c001564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001568:	4670      	mov	r0, lr
 c00156a:	4671      	mov	r1, lr
 c00156c:	4672      	mov	r2, lr
 c00156e:	4673      	mov	r3, lr
 c001570:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001574:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001578:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00157c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001580:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001584:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001588:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00158c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001590:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001594:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001598:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00159c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0015a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0015a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0015a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0015ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0015b0:	f38e 8c00 	msr	CPSR_fs, lr
 c0015b4:	b410      	push	{r4}
 c0015b6:	eef1 ca10 	vmrs	ip, fpscr
 c0015ba:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0015be:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0015c2:	ea0c 0c04 	and.w	ip, ip, r4
 c0015c6:	eee1 ca10 	vmsr	fpscr, ip
 c0015ca:	bc10      	pop	{r4}
 c0015cc:	46f4      	mov	ip, lr
 c0015ce:	4774      	bxns	lr

0c0015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0015d0:	b480      	push	{r7}
 c0015d2:	b085      	sub	sp, #20
 c0015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0015d6:	4b15      	ldr	r3, [pc, #84]	; (c00162c <HAL_MspInit+0x5c>)
 c0015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0015da:	4a14      	ldr	r2, [pc, #80]	; (c00162c <HAL_MspInit+0x5c>)
 c0015dc:	f043 0301 	orr.w	r3, r3, #1
 c0015e0:	6613      	str	r3, [r2, #96]	; 0x60
 c0015e2:	4b12      	ldr	r3, [pc, #72]	; (c00162c <HAL_MspInit+0x5c>)
 c0015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0015e6:	f003 0301 	and.w	r3, r3, #1
 c0015ea:	60fb      	str	r3, [r7, #12]
 c0015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0015ee:	4b0f      	ldr	r3, [pc, #60]	; (c00162c <HAL_MspInit+0x5c>)
 c0015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0015f2:	4a0e      	ldr	r2, [pc, #56]	; (c00162c <HAL_MspInit+0x5c>)
 c0015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0015f8:	6593      	str	r3, [r2, #88]	; 0x58
 c0015fa:	4b0c      	ldr	r3, [pc, #48]	; (c00162c <HAL_MspInit+0x5c>)
 c0015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001602:	60bb      	str	r3, [r7, #8]
 c001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c001606:	4b09      	ldr	r3, [pc, #36]	; (c00162c <HAL_MspInit+0x5c>)
 c001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00160a:	4a08      	ldr	r2, [pc, #32]	; (c00162c <HAL_MspInit+0x5c>)
 c00160c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c001610:	6493      	str	r3, [r2, #72]	; 0x48
 c001612:	4b06      	ldr	r3, [pc, #24]	; (c00162c <HAL_MspInit+0x5c>)
 c001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00161a:	607b      	str	r3, [r7, #4]
 c00161c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c00161e:	bf00      	nop
 c001620:	3714      	adds	r7, #20
 c001622:	46bd      	mov	sp, r7
 c001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001628:	4770      	bx	lr
 c00162a:	bf00      	nop
 c00162c:	50021000 	.word	0x50021000

0c001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001630:	b480      	push	{r7}
 c001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c001634:	e7fe      	b.n	c001634 <NMI_Handler+0x4>

0c001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001636:	b480      	push	{r7}
 c001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00163a:	e7fe      	b.n	c00163a <HardFault_Handler+0x4>

0c00163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c00163c:	b480      	push	{r7}
 c00163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001640:	e7fe      	b.n	c001640 <MemManage_Handler+0x4>

0c001642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001642:	b480      	push	{r7}
 c001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001646:	e7fe      	b.n	c001646 <BusFault_Handler+0x4>

0c001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001648:	b480      	push	{r7}
 c00164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00164c:	e7fe      	b.n	c00164c <UsageFault_Handler+0x4>

0c00164e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00164e:	b480      	push	{r7}
 c001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001652:	e7fe      	b.n	c001652 <SecureFault_Handler+0x4>

0c001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001654:	b480      	push	{r7}
 c001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001658:	bf00      	nop
 c00165a:	46bd      	mov	sp, r7
 c00165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001660:	4770      	bx	lr

0c001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001662:	b480      	push	{r7}
 c001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001666:	bf00      	nop
 c001668:	46bd      	mov	sp, r7
 c00166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00166e:	4770      	bx	lr

0c001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001670:	b480      	push	{r7}
 c001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001674:	bf00      	nop
 c001676:	46bd      	mov	sp, r7
 c001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00167c:	4770      	bx	lr

0c00167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00167e:	b580      	push	{r7, lr}
 c001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001682:	f000 fa07 	bl	c001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001686:	bf00      	nop
 c001688:	bd80      	pop	{r7, pc}
	...

0c00168c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c00168c:	b480      	push	{r7}
 c00168e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001690:	4b2f      	ldr	r3, [pc, #188]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c001692:	2200      	movs	r2, #0
 c001694:	609a      	str	r2, [r3, #8]
 c001696:	4b2e      	ldr	r3, [pc, #184]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c001698:	4a2e      	ldr	r2, [pc, #184]	; (c001754 <TZ_SAU_Setup+0xc8>)
 c00169a:	60da      	str	r2, [r3, #12]
 c00169c:	4b2c      	ldr	r3, [pc, #176]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c00169e:	4a2e      	ldr	r2, [pc, #184]	; (c001758 <TZ_SAU_Setup+0xcc>)
 c0016a0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0016a2:	4b2b      	ldr	r3, [pc, #172]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016a4:	2201      	movs	r2, #1
 c0016a6:	609a      	str	r2, [r3, #8]
 c0016a8:	4b29      	ldr	r3, [pc, #164]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016aa:	4a2c      	ldr	r2, [pc, #176]	; (c00175c <TZ_SAU_Setup+0xd0>)
 c0016ac:	60da      	str	r2, [r3, #12]
 c0016ae:	4b28      	ldr	r3, [pc, #160]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016b0:	4a2b      	ldr	r2, [pc, #172]	; (c001760 <TZ_SAU_Setup+0xd4>)
 c0016b2:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0016b4:	4b26      	ldr	r3, [pc, #152]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016b6:	2202      	movs	r2, #2
 c0016b8:	609a      	str	r2, [r3, #8]
 c0016ba:	4b25      	ldr	r3, [pc, #148]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016bc:	4a29      	ldr	r2, [pc, #164]	; (c001764 <TZ_SAU_Setup+0xd8>)
 c0016be:	60da      	str	r2, [r3, #12]
 c0016c0:	4b23      	ldr	r3, [pc, #140]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016c2:	4a29      	ldr	r2, [pc, #164]	; (c001768 <TZ_SAU_Setup+0xdc>)
 c0016c4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0016c6:	4b22      	ldr	r3, [pc, #136]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016c8:	2203      	movs	r2, #3
 c0016ca:	609a      	str	r2, [r3, #8]
 c0016cc:	4b20      	ldr	r3, [pc, #128]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0016d2:	60da      	str	r2, [r3, #12]
 c0016d4:	4b1e      	ldr	r3, [pc, #120]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016d6:	4a25      	ldr	r2, [pc, #148]	; (c00176c <TZ_SAU_Setup+0xe0>)
 c0016d8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0016da:	4b1d      	ldr	r3, [pc, #116]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016dc:	2204      	movs	r2, #4
 c0016de:	609a      	str	r2, [r3, #8]
 c0016e0:	4b1b      	ldr	r3, [pc, #108]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016e2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c0016e6:	60da      	str	r2, [r3, #12]
 c0016e8:	4b19      	ldr	r3, [pc, #100]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016ea:	4a21      	ldr	r2, [pc, #132]	; (c001770 <TZ_SAU_Setup+0xe4>)
 c0016ec:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c0016ee:	4b18      	ldr	r3, [pc, #96]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016f0:	2205      	movs	r2, #5
 c0016f2:	609a      	str	r2, [r3, #8]
 c0016f4:	4b16      	ldr	r3, [pc, #88]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016f6:	4a1f      	ldr	r2, [pc, #124]	; (c001774 <TZ_SAU_Setup+0xe8>)
 c0016f8:	60da      	str	r2, [r3, #12]
 c0016fa:	4b15      	ldr	r3, [pc, #84]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c0016fc:	4a1e      	ldr	r2, [pc, #120]	; (c001778 <TZ_SAU_Setup+0xec>)
 c0016fe:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001700:	4b13      	ldr	r3, [pc, #76]	; (c001750 <TZ_SAU_Setup+0xc4>)
 c001702:	2201      	movs	r2, #1
 c001704:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001706:	4b1d      	ldr	r3, [pc, #116]	; (c00177c <TZ_SAU_Setup+0xf0>)
 c001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00170c:	4a1b      	ldr	r2, [pc, #108]	; (c00177c <TZ_SAU_Setup+0xf0>)
 c00170e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001712:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001716:	4b1a      	ldr	r3, [pc, #104]	; (c001780 <TZ_SAU_Setup+0xf4>)
 c001718:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00171a:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00171e:	4a18      	ldr	r2, [pc, #96]	; (c001780 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001724:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001726:	4b17      	ldr	r3, [pc, #92]	; (c001784 <TZ_SAU_Setup+0xf8>)
 c001728:	2200      	movs	r2, #0
 c00172a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00172e:	4b15      	ldr	r3, [pc, #84]	; (c001784 <TZ_SAU_Setup+0xf8>)
 c001730:	2200      	movs	r2, #0
 c001732:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001736:	4b13      	ldr	r3, [pc, #76]	; (c001784 <TZ_SAU_Setup+0xf8>)
 c001738:	2200      	movs	r2, #0
 c00173a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c00173e:	4b11      	ldr	r3, [pc, #68]	; (c001784 <TZ_SAU_Setup+0xf8>)
 c001740:	2200      	movs	r2, #0
 c001742:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001746:	bf00      	nop
 c001748:	46bd      	mov	sp, r7
 c00174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00174e:	4770      	bx	lr
 c001750:	e000edd0 	.word	0xe000edd0
 c001754:	0c03e000 	.word	0x0c03e000
 c001758:	0c03ffe3 	.word	0x0c03ffe3
 c00175c:	08040000 	.word	0x08040000
 c001760:	0807ffe1 	.word	0x0807ffe1
 c001764:	20018000 	.word	0x20018000
 c001768:	2003ffe1 	.word	0x2003ffe1
 c00176c:	4fffffe1 	.word	0x4fffffe1
 c001770:	9fffffe1 	.word	0x9fffffe1
 c001774:	0bf90000 	.word	0x0bf90000
 c001778:	0bfa8fe1 	.word	0x0bfa8fe1
 c00177c:	e000ed00 	.word	0xe000ed00
 c001780:	e000ef30 	.word	0xe000ef30
 c001784:	e000e100 	.word	0xe000e100

0c001788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001788:	b580      	push	{r7, lr}
 c00178a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c00178c:	f7ff ff7e 	bl	c00168c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001790:	4b08      	ldr	r3, [pc, #32]	; (c0017b4 <SystemInit+0x2c>)
 c001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001796:	4a07      	ldr	r2, [pc, #28]	; (c0017b4 <SystemInit+0x2c>)
 c001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c00179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0017a0:	4b05      	ldr	r3, [pc, #20]	; (c0017b8 <SystemInit+0x30>)
 c0017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0017a6:	4a04      	ldr	r2, [pc, #16]	; (c0017b8 <SystemInit+0x30>)
 c0017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0017b0:	bf00      	nop
 c0017b2:	bd80      	pop	{r7, pc}
 c0017b4:	e000ed00 	.word	0xe000ed00
 c0017b8:	e002ed00 	.word	0xe002ed00

0c0017bc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0017bc:	b480      	push	{r7}
 c0017be:	b087      	sub	sp, #28
 c0017c0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0017c2:	4b4f      	ldr	r3, [pc, #316]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0017c4:	681b      	ldr	r3, [r3, #0]
 c0017c6:	f003 0308 	and.w	r3, r3, #8
 c0017ca:	2b00      	cmp	r3, #0
 c0017cc:	d107      	bne.n	c0017de <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0017ce:	4b4c      	ldr	r3, [pc, #304]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0017d4:	0a1b      	lsrs	r3, r3, #8
 c0017d6:	f003 030f 	and.w	r3, r3, #15
 c0017da:	617b      	str	r3, [r7, #20]
 c0017dc:	e005      	b.n	c0017ea <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0017de:	4b48      	ldr	r3, [pc, #288]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0017e0:	681b      	ldr	r3, [r3, #0]
 c0017e2:	091b      	lsrs	r3, r3, #4
 c0017e4:	f003 030f 	and.w	r3, r3, #15
 c0017e8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0017ea:	4a46      	ldr	r2, [pc, #280]	; (c001904 <SystemCoreClockUpdate+0x148>)
 c0017ec:	697b      	ldr	r3, [r7, #20]
 c0017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0017f2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0017f4:	4b42      	ldr	r3, [pc, #264]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0017f6:	689b      	ldr	r3, [r3, #8]
 c0017f8:	f003 030c 	and.w	r3, r3, #12
 c0017fc:	2b0c      	cmp	r3, #12
 c0017fe:	d866      	bhi.n	c0018ce <SystemCoreClockUpdate+0x112>
 c001800:	a201      	add	r2, pc, #4	; (adr r2, c001808 <SystemCoreClockUpdate+0x4c>)
 c001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001806:	bf00      	nop
 c001808:	0c00183d 	.word	0x0c00183d
 c00180c:	0c0018cf 	.word	0x0c0018cf
 c001810:	0c0018cf 	.word	0x0c0018cf
 c001814:	0c0018cf 	.word	0x0c0018cf
 c001818:	0c001845 	.word	0x0c001845
 c00181c:	0c0018cf 	.word	0x0c0018cf
 c001820:	0c0018cf 	.word	0x0c0018cf
 c001824:	0c0018cf 	.word	0x0c0018cf
 c001828:	0c00184d 	.word	0x0c00184d
 c00182c:	0c0018cf 	.word	0x0c0018cf
 c001830:	0c0018cf 	.word	0x0c0018cf
 c001834:	0c0018cf 	.word	0x0c0018cf
 c001838:	0c001855 	.word	0x0c001855
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c00183c:	4a32      	ldr	r2, [pc, #200]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c00183e:	697b      	ldr	r3, [r7, #20]
 c001840:	6013      	str	r3, [r2, #0]
      break;
 c001842:	e048      	b.n	c0018d6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c001844:	4b30      	ldr	r3, [pc, #192]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c001846:	4a31      	ldr	r2, [pc, #196]	; (c00190c <SystemCoreClockUpdate+0x150>)
 c001848:	601a      	str	r2, [r3, #0]
      break;
 c00184a:	e044      	b.n	c0018d6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c00184c:	4b2e      	ldr	r3, [pc, #184]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c00184e:	4a2f      	ldr	r2, [pc, #188]	; (c00190c <SystemCoreClockUpdate+0x150>)
 c001850:	601a      	str	r2, [r3, #0]
      break;
 c001852:	e040      	b.n	c0018d6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001854:	4b2a      	ldr	r3, [pc, #168]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c001856:	68db      	ldr	r3, [r3, #12]
 c001858:	f003 0303 	and.w	r3, r3, #3
 c00185c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00185e:	4b28      	ldr	r3, [pc, #160]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c001860:	68db      	ldr	r3, [r3, #12]
 c001862:	091b      	lsrs	r3, r3, #4
 c001864:	f003 030f 	and.w	r3, r3, #15
 c001868:	3301      	adds	r3, #1
 c00186a:	60bb      	str	r3, [r7, #8]
 c00186c:	68fb      	ldr	r3, [r7, #12]
 c00186e:	2b02      	cmp	r3, #2
 c001870:	d003      	beq.n	c00187a <SystemCoreClockUpdate+0xbe>
 c001872:	68fb      	ldr	r3, [r7, #12]
 c001874:	2b03      	cmp	r3, #3
 c001876:	d006      	beq.n	c001886 <SystemCoreClockUpdate+0xca>
 c001878:	e00b      	b.n	c001892 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00187a:	4a24      	ldr	r2, [pc, #144]	; (c00190c <SystemCoreClockUpdate+0x150>)
 c00187c:	68bb      	ldr	r3, [r7, #8]
 c00187e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001882:	613b      	str	r3, [r7, #16]
          break;
 c001884:	e00b      	b.n	c00189e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c001886:	4a21      	ldr	r2, [pc, #132]	; (c00190c <SystemCoreClockUpdate+0x150>)
 c001888:	68bb      	ldr	r3, [r7, #8]
 c00188a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00188e:	613b      	str	r3, [r7, #16]
          break;
 c001890:	e005      	b.n	c00189e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001892:	697a      	ldr	r2, [r7, #20]
 c001894:	68bb      	ldr	r3, [r7, #8]
 c001896:	fbb2 f3f3 	udiv	r3, r2, r3
 c00189a:	613b      	str	r3, [r7, #16]
          break;
 c00189c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c00189e:	4b18      	ldr	r3, [pc, #96]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0018a0:	68db      	ldr	r3, [r3, #12]
 c0018a2:	0a1b      	lsrs	r3, r3, #8
 c0018a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0018a8:	693b      	ldr	r3, [r7, #16]
 c0018aa:	fb02 f303 	mul.w	r3, r2, r3
 c0018ae:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0018b0:	4b13      	ldr	r3, [pc, #76]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0018b2:	68db      	ldr	r3, [r3, #12]
 c0018b4:	0e5b      	lsrs	r3, r3, #25
 c0018b6:	f003 0303 	and.w	r3, r3, #3
 c0018ba:	3301      	adds	r3, #1
 c0018bc:	005b      	lsls	r3, r3, #1
 c0018be:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0018c0:	693a      	ldr	r2, [r7, #16]
 c0018c2:	687b      	ldr	r3, [r7, #4]
 c0018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0018c8:	4a0f      	ldr	r2, [pc, #60]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c0018ca:	6013      	str	r3, [r2, #0]
      break;
 c0018cc:	e003      	b.n	c0018d6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0018ce:	4a0e      	ldr	r2, [pc, #56]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c0018d0:	697b      	ldr	r3, [r7, #20]
 c0018d2:	6013      	str	r3, [r2, #0]
      break;
 c0018d4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0018d6:	4b0a      	ldr	r3, [pc, #40]	; (c001900 <SystemCoreClockUpdate+0x144>)
 c0018d8:	689b      	ldr	r3, [r3, #8]
 c0018da:	091b      	lsrs	r3, r3, #4
 c0018dc:	f003 030f 	and.w	r3, r3, #15
 c0018e0:	4a0b      	ldr	r2, [pc, #44]	; (c001910 <SystemCoreClockUpdate+0x154>)
 c0018e2:	5cd3      	ldrb	r3, [r2, r3]
 c0018e4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0018e6:	4b08      	ldr	r3, [pc, #32]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c0018e8:	681a      	ldr	r2, [r3, #0]
 c0018ea:	683b      	ldr	r3, [r7, #0]
 c0018ec:	fa22 f303 	lsr.w	r3, r2, r3
 c0018f0:	4a05      	ldr	r2, [pc, #20]	; (c001908 <SystemCoreClockUpdate+0x14c>)
 c0018f2:	6013      	str	r3, [r2, #0]
}
 c0018f4:	bf00      	nop
 c0018f6:	371c      	adds	r7, #28
 c0018f8:	46bd      	mov	sp, r7
 c0018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018fe:	4770      	bx	lr
 c001900:	50021000 	.word	0x50021000
 c001904:	0c0021ac 	.word	0x0c0021ac
 c001908:	300002f0 	.word	0x300002f0
 c00190c:	00f42400 	.word	0x00f42400
 c001910:	0c00219c 	.word	0x0c00219c

0c001914 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001914:	b580      	push	{r7, lr}
 c001916:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c001918:	f7ff ff50 	bl	c0017bc <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c00191c:	4b1c      	ldr	r3, [pc, #112]	; (c001990 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00191e:	681b      	ldr	r3, [r3, #0]
}
 c001920:	4618      	mov	r0, r3
 c001922:	46bd      	mov	sp, r7
 c001924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001928:	4671      	mov	r1, lr
 c00192a:	4672      	mov	r2, lr
 c00192c:	4673      	mov	r3, lr
 c00192e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001932:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001936:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00193a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00193e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001942:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001946:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00194a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00194e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001952:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001956:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00195a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00195e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00196a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00196e:	f38e 8c00 	msr	CPSR_fs, lr
 c001972:	b410      	push	{r4}
 c001974:	eef1 ca10 	vmrs	ip, fpscr
 c001978:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00197c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001980:	ea0c 0c04 	and.w	ip, ip, r4
 c001984:	eee1 ca10 	vmsr	fpscr, ip
 c001988:	bc10      	pop	{r4}
 c00198a:	46f4      	mov	ip, lr
 c00198c:	4774      	bxns	lr
 c00198e:	bf00      	nop
 c001990:	300002f0 	.word	0x300002f0

0c001994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001994:	f8df d034 	ldr.w	sp, [pc, #52]	; c0019cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001998:	f7ff fef6 	bl	c001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00199c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00199e:	e003      	b.n	c0019a8 <LoopCopyDataInit>

0c0019a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0019a0:	4b0b      	ldr	r3, [pc, #44]	; (c0019d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0019a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0019a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0019a6:	3104      	adds	r1, #4

0c0019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0019a8:	480a      	ldr	r0, [pc, #40]	; (c0019d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0019aa:	4b0b      	ldr	r3, [pc, #44]	; (c0019d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0019ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0019ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0019b0:	d3f6      	bcc.n	c0019a0 <CopyDataInit>
	ldr	r2, =_sbss
 c0019b2:	4a0a      	ldr	r2, [pc, #40]	; (c0019dc <LoopForever+0x12>)
	b	LoopFillZerobss
 c0019b4:	e002      	b.n	c0019bc <LoopFillZerobss>

0c0019b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0019b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0019b8:	f842 3b04 	str.w	r3, [r2], #4

0c0019bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0019bc:	4b08      	ldr	r3, [pc, #32]	; (c0019e0 <LoopForever+0x16>)
	cmp	r2, r3
 c0019be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0019c0:	d3f9      	bcc.n	c0019b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0019c2:	f000 fbbb 	bl	c00213c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0019c6:	f7ff fbf7 	bl	c0011b8 <main>

0c0019ca <LoopForever>:

LoopForever:
    b LoopForever
 c0019ca:	e7fe      	b.n	c0019ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0019cc:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0019d0:	0c0021f4 	.word	0x0c0021f4
	ldr	r0, =_sdata
 c0019d4:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0019d8:	300002fc 	.word	0x300002fc
	ldr	r2, =_sbss
 c0019dc:	300002fc 	.word	0x300002fc
	ldr	r3, = _ebss
 c0019e0:	30000324 	.word	0x30000324

0c0019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0019e4:	e7fe      	b.n	c0019e4 <ADC1_2_IRQHandler>

0c0019e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0019e6:	b580      	push	{r7, lr}
 c0019e8:	b082      	sub	sp, #8
 c0019ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0019ec:	2300      	movs	r3, #0
 c0019ee:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0019f0:	2004      	movs	r0, #4
 c0019f2:	f000 f915 	bl	c001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0019f6:	f7ff fee1 	bl	c0017bc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0019fa:	2007      	movs	r0, #7
 c0019fc:	f000 f80e 	bl	c001a1c <HAL_InitTick>
 c001a00:	4603      	mov	r3, r0
 c001a02:	2b00      	cmp	r3, #0
 c001a04:	d002      	beq.n	c001a0c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c001a06:	2301      	movs	r3, #1
 c001a08:	71fb      	strb	r3, [r7, #7]
 c001a0a:	e001      	b.n	c001a10 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c001a0c:	f7ff fde0 	bl	c0015d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c001a10:	79fb      	ldrb	r3, [r7, #7]
}
 c001a12:	4618      	mov	r0, r3
 c001a14:	3708      	adds	r7, #8
 c001a16:	46bd      	mov	sp, r7
 c001a18:	bd80      	pop	{r7, pc}
	...

0c001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001a1c:	b580      	push	{r7, lr}
 c001a1e:	b084      	sub	sp, #16
 c001a20:	af00      	add	r7, sp, #0
 c001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c001a24:	2300      	movs	r3, #0
 c001a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001a28:	4b17      	ldr	r3, [pc, #92]	; (c001a88 <HAL_InitTick+0x6c>)
 c001a2a:	781b      	ldrb	r3, [r3, #0]
 c001a2c:	2b00      	cmp	r3, #0
 c001a2e:	d023      	beq.n	c001a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c001a30:	4b16      	ldr	r3, [pc, #88]	; (c001a8c <HAL_InitTick+0x70>)
 c001a32:	681a      	ldr	r2, [r3, #0]
 c001a34:	4b14      	ldr	r3, [pc, #80]	; (c001a88 <HAL_InitTick+0x6c>)
 c001a36:	781b      	ldrb	r3, [r3, #0]
 c001a38:	4619      	mov	r1, r3
 c001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 c001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 c001a46:	4618      	mov	r0, r3
 c001a48:	f000 f90f 	bl	c001c6a <HAL_SYSTICK_Config>
 c001a4c:	4603      	mov	r3, r0
 c001a4e:	2b00      	cmp	r3, #0
 c001a50:	d10f      	bne.n	c001a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001a52:	687b      	ldr	r3, [r7, #4]
 c001a54:	2b07      	cmp	r3, #7
 c001a56:	d809      	bhi.n	c001a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001a58:	2200      	movs	r2, #0
 c001a5a:	6879      	ldr	r1, [r7, #4]
 c001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001a60:	f000 f8e9 	bl	c001c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001a64:	4a0a      	ldr	r2, [pc, #40]	; (c001a90 <HAL_InitTick+0x74>)
 c001a66:	687b      	ldr	r3, [r7, #4]
 c001a68:	6013      	str	r3, [r2, #0]
 c001a6a:	e007      	b.n	c001a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c001a6c:	2301      	movs	r3, #1
 c001a6e:	73fb      	strb	r3, [r7, #15]
 c001a70:	e004      	b.n	c001a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001a72:	2301      	movs	r3, #1
 c001a74:	73fb      	strb	r3, [r7, #15]
 c001a76:	e001      	b.n	c001a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001a78:	2301      	movs	r3, #1
 c001a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 c001a7e:	4618      	mov	r0, r3
 c001a80:	3710      	adds	r7, #16
 c001a82:	46bd      	mov	sp, r7
 c001a84:	bd80      	pop	{r7, pc}
 c001a86:	bf00      	nop
 c001a88:	300002f8 	.word	0x300002f8
 c001a8c:	300002f0 	.word	0x300002f0
 c001a90:	300002f4 	.word	0x300002f4

0c001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001a94:	b480      	push	{r7}
 c001a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001a98:	4b06      	ldr	r3, [pc, #24]	; (c001ab4 <HAL_IncTick+0x20>)
 c001a9a:	781b      	ldrb	r3, [r3, #0]
 c001a9c:	461a      	mov	r2, r3
 c001a9e:	4b06      	ldr	r3, [pc, #24]	; (c001ab8 <HAL_IncTick+0x24>)
 c001aa0:	681b      	ldr	r3, [r3, #0]
 c001aa2:	4413      	add	r3, r2
 c001aa4:	4a04      	ldr	r2, [pc, #16]	; (c001ab8 <HAL_IncTick+0x24>)
 c001aa6:	6013      	str	r3, [r2, #0]
}
 c001aa8:	bf00      	nop
 c001aaa:	46bd      	mov	sp, r7
 c001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ab0:	4770      	bx	lr
 c001ab2:	bf00      	nop
 c001ab4:	300002f8 	.word	0x300002f8
 c001ab8:	30000320 	.word	0x30000320

0c001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001abc:	b480      	push	{r7}
 c001abe:	b085      	sub	sp, #20
 c001ac0:	af00      	add	r7, sp, #0
 c001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001ac4:	687b      	ldr	r3, [r7, #4]
 c001ac6:	f003 0307 	and.w	r3, r3, #7
 c001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001acc:	4b0c      	ldr	r3, [pc, #48]	; (c001b00 <__NVIC_SetPriorityGrouping+0x44>)
 c001ace:	68db      	ldr	r3, [r3, #12]
 c001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001ad2:	68ba      	ldr	r2, [r7, #8]
 c001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001ad8:	4013      	ands	r3, r2
 c001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001adc:	68fb      	ldr	r3, [r7, #12]
 c001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001ae0:	68bb      	ldr	r3, [r7, #8]
 c001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001aee:	4a04      	ldr	r2, [pc, #16]	; (c001b00 <__NVIC_SetPriorityGrouping+0x44>)
 c001af0:	68bb      	ldr	r3, [r7, #8]
 c001af2:	60d3      	str	r3, [r2, #12]
}
 c001af4:	bf00      	nop
 c001af6:	3714      	adds	r7, #20
 c001af8:	46bd      	mov	sp, r7
 c001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001afe:	4770      	bx	lr
 c001b00:	e000ed00 	.word	0xe000ed00

0c001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001b04:	b480      	push	{r7}
 c001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001b08:	4b04      	ldr	r3, [pc, #16]	; (c001b1c <__NVIC_GetPriorityGrouping+0x18>)
 c001b0a:	68db      	ldr	r3, [r3, #12]
 c001b0c:	0a1b      	lsrs	r3, r3, #8
 c001b0e:	f003 0307 	and.w	r3, r3, #7
}
 c001b12:	4618      	mov	r0, r3
 c001b14:	46bd      	mov	sp, r7
 c001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b1a:	4770      	bx	lr
 c001b1c:	e000ed00 	.word	0xe000ed00

0c001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001b20:	b480      	push	{r7}
 c001b22:	b083      	sub	sp, #12
 c001b24:	af00      	add	r7, sp, #0
 c001b26:	4603      	mov	r3, r0
 c001b28:	6039      	str	r1, [r7, #0]
 c001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001b30:	2b00      	cmp	r3, #0
 c001b32:	db0a      	blt.n	c001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001b34:	683b      	ldr	r3, [r7, #0]
 c001b36:	b2da      	uxtb	r2, r3
 c001b38:	490c      	ldr	r1, [pc, #48]	; (c001b6c <__NVIC_SetPriority+0x4c>)
 c001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001b3e:	0152      	lsls	r2, r2, #5
 c001b40:	b2d2      	uxtb	r2, r2
 c001b42:	440b      	add	r3, r1
 c001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001b48:	e00a      	b.n	c001b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001b4a:	683b      	ldr	r3, [r7, #0]
 c001b4c:	b2da      	uxtb	r2, r3
 c001b4e:	4908      	ldr	r1, [pc, #32]	; (c001b70 <__NVIC_SetPriority+0x50>)
 c001b50:	79fb      	ldrb	r3, [r7, #7]
 c001b52:	f003 030f 	and.w	r3, r3, #15
 c001b56:	3b04      	subs	r3, #4
 c001b58:	0152      	lsls	r2, r2, #5
 c001b5a:	b2d2      	uxtb	r2, r2
 c001b5c:	440b      	add	r3, r1
 c001b5e:	761a      	strb	r2, [r3, #24]
}
 c001b60:	bf00      	nop
 c001b62:	370c      	adds	r7, #12
 c001b64:	46bd      	mov	sp, r7
 c001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b6a:	4770      	bx	lr
 c001b6c:	e000e100 	.word	0xe000e100
 c001b70:	e000ed00 	.word	0xe000ed00

0c001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001b74:	b480      	push	{r7}
 c001b76:	b089      	sub	sp, #36	; 0x24
 c001b78:	af00      	add	r7, sp, #0
 c001b7a:	60f8      	str	r0, [r7, #12]
 c001b7c:	60b9      	str	r1, [r7, #8]
 c001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001b80:	68fb      	ldr	r3, [r7, #12]
 c001b82:	f003 0307 	and.w	r3, r3, #7
 c001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001b88:	69fb      	ldr	r3, [r7, #28]
 c001b8a:	f1c3 0307 	rsb	r3, r3, #7
 c001b8e:	2b03      	cmp	r3, #3
 c001b90:	bf28      	it	cs
 c001b92:	2303      	movcs	r3, #3
 c001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001b96:	69fb      	ldr	r3, [r7, #28]
 c001b98:	3303      	adds	r3, #3
 c001b9a:	2b06      	cmp	r3, #6
 c001b9c:	d902      	bls.n	c001ba4 <NVIC_EncodePriority+0x30>
 c001b9e:	69fb      	ldr	r3, [r7, #28]
 c001ba0:	3b04      	subs	r3, #4
 c001ba2:	e000      	b.n	c001ba6 <NVIC_EncodePriority+0x32>
 c001ba4:	2300      	movs	r3, #0
 c001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c001bac:	69bb      	ldr	r3, [r7, #24]
 c001bae:	fa02 f303 	lsl.w	r3, r2, r3
 c001bb2:	43da      	mvns	r2, r3
 c001bb4:	68bb      	ldr	r3, [r7, #8]
 c001bb6:	401a      	ands	r2, r3
 c001bb8:	697b      	ldr	r3, [r7, #20]
 c001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c001bc0:	697b      	ldr	r3, [r7, #20]
 c001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 c001bc6:	43d9      	mvns	r1, r3
 c001bc8:	687b      	ldr	r3, [r7, #4]
 c001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001bcc:	4313      	orrs	r3, r2
         );
}
 c001bce:	4618      	mov	r0, r3
 c001bd0:	3724      	adds	r7, #36	; 0x24
 c001bd2:	46bd      	mov	sp, r7
 c001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bd8:	4770      	bx	lr
	...

0c001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001bdc:	b580      	push	{r7, lr}
 c001bde:	b082      	sub	sp, #8
 c001be0:	af00      	add	r7, sp, #0
 c001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001be4:	687b      	ldr	r3, [r7, #4]
 c001be6:	3b01      	subs	r3, #1
 c001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001bec:	d301      	bcc.n	c001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001bee:	2301      	movs	r3, #1
 c001bf0:	e00f      	b.n	c001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001bf2:	4a0a      	ldr	r2, [pc, #40]	; (c001c1c <SysTick_Config+0x40>)
 c001bf4:	687b      	ldr	r3, [r7, #4]
 c001bf6:	3b01      	subs	r3, #1
 c001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001bfa:	2107      	movs	r1, #7
 c001bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001c00:	f7ff ff8e 	bl	c001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001c04:	4b05      	ldr	r3, [pc, #20]	; (c001c1c <SysTick_Config+0x40>)
 c001c06:	2200      	movs	r2, #0
 c001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001c0a:	4b04      	ldr	r3, [pc, #16]	; (c001c1c <SysTick_Config+0x40>)
 c001c0c:	2207      	movs	r2, #7
 c001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001c10:	2300      	movs	r3, #0
}
 c001c12:	4618      	mov	r0, r3
 c001c14:	3708      	adds	r7, #8
 c001c16:	46bd      	mov	sp, r7
 c001c18:	bd80      	pop	{r7, pc}
 c001c1a:	bf00      	nop
 c001c1c:	e000e010 	.word	0xe000e010

0c001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001c20:	b580      	push	{r7, lr}
 c001c22:	b082      	sub	sp, #8
 c001c24:	af00      	add	r7, sp, #0
 c001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001c28:	6878      	ldr	r0, [r7, #4]
 c001c2a:	f7ff ff47 	bl	c001abc <__NVIC_SetPriorityGrouping>
}
 c001c2e:	bf00      	nop
 c001c30:	3708      	adds	r7, #8
 c001c32:	46bd      	mov	sp, r7
 c001c34:	bd80      	pop	{r7, pc}

0c001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001c36:	b580      	push	{r7, lr}
 c001c38:	b086      	sub	sp, #24
 c001c3a:	af00      	add	r7, sp, #0
 c001c3c:	4603      	mov	r3, r0
 c001c3e:	60b9      	str	r1, [r7, #8]
 c001c40:	607a      	str	r2, [r7, #4]
 c001c42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001c44:	f7ff ff5e 	bl	c001b04 <__NVIC_GetPriorityGrouping>
 c001c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001c4a:	687a      	ldr	r2, [r7, #4]
 c001c4c:	68b9      	ldr	r1, [r7, #8]
 c001c4e:	6978      	ldr	r0, [r7, #20]
 c001c50:	f7ff ff90 	bl	c001b74 <NVIC_EncodePriority>
 c001c54:	4602      	mov	r2, r0
 c001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001c5a:	4611      	mov	r1, r2
 c001c5c:	4618      	mov	r0, r3
 c001c5e:	f7ff ff5f 	bl	c001b20 <__NVIC_SetPriority>
}
 c001c62:	bf00      	nop
 c001c64:	3718      	adds	r7, #24
 c001c66:	46bd      	mov	sp, r7
 c001c68:	bd80      	pop	{r7, pc}

0c001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001c6a:	b580      	push	{r7, lr}
 c001c6c:	b082      	sub	sp, #8
 c001c6e:	af00      	add	r7, sp, #0
 c001c70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001c72:	6878      	ldr	r0, [r7, #4]
 c001c74:	f7ff ffb2 	bl	c001bdc <SysTick_Config>
 c001c78:	4603      	mov	r3, r0
}
 c001c7a:	4618      	mov	r0, r3
 c001c7c:	3708      	adds	r7, #8
 c001c7e:	46bd      	mov	sp, r7
 c001c80:	bd80      	pop	{r7, pc}
	...

0c001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001c84:	b480      	push	{r7}
 c001c86:	b087      	sub	sp, #28
 c001c88:	af00      	add	r7, sp, #0
 c001c8a:	6078      	str	r0, [r7, #4]
 c001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001c8e:	2300      	movs	r3, #0
 c001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001c92:	e158      	b.n	c001f46 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001c94:	683b      	ldr	r3, [r7, #0]
 c001c96:	681a      	ldr	r2, [r3, #0]
 c001c98:	2101      	movs	r1, #1
 c001c9a:	697b      	ldr	r3, [r7, #20]
 c001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 c001ca0:	4013      	ands	r3, r2
 c001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001ca4:	68fb      	ldr	r3, [r7, #12]
 c001ca6:	2b00      	cmp	r3, #0
 c001ca8:	f000 814a 	beq.w	c001f40 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c001cac:	683b      	ldr	r3, [r7, #0]
 c001cae:	685b      	ldr	r3, [r3, #4]
 c001cb0:	f003 0303 	and.w	r3, r3, #3
 c001cb4:	2b01      	cmp	r3, #1
 c001cb6:	d005      	beq.n	c001cc4 <HAL_GPIO_Init+0x40>
 c001cb8:	683b      	ldr	r3, [r7, #0]
 c001cba:	685b      	ldr	r3, [r3, #4]
 c001cbc:	f003 0303 	and.w	r3, r3, #3
 c001cc0:	2b02      	cmp	r3, #2
 c001cc2:	d130      	bne.n	c001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001cc4:	687b      	ldr	r3, [r7, #4]
 c001cc6:	689b      	ldr	r3, [r3, #8]
 c001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001cca:	697b      	ldr	r3, [r7, #20]
 c001ccc:	005b      	lsls	r3, r3, #1
 c001cce:	2203      	movs	r2, #3
 c001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 c001cd4:	43db      	mvns	r3, r3
 c001cd6:	693a      	ldr	r2, [r7, #16]
 c001cd8:	4013      	ands	r3, r2
 c001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001cdc:	683b      	ldr	r3, [r7, #0]
 c001cde:	68da      	ldr	r2, [r3, #12]
 c001ce0:	697b      	ldr	r3, [r7, #20]
 c001ce2:	005b      	lsls	r3, r3, #1
 c001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 c001ce8:	693a      	ldr	r2, [r7, #16]
 c001cea:	4313      	orrs	r3, r2
 c001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c001cee:	687b      	ldr	r3, [r7, #4]
 c001cf0:	693a      	ldr	r2, [r7, #16]
 c001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001cf4:	687b      	ldr	r3, [r7, #4]
 c001cf6:	685b      	ldr	r3, [r3, #4]
 c001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001cfa:	2201      	movs	r2, #1
 c001cfc:	697b      	ldr	r3, [r7, #20]
 c001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 c001d02:	43db      	mvns	r3, r3
 c001d04:	693a      	ldr	r2, [r7, #16]
 c001d06:	4013      	ands	r3, r2
 c001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c001d0a:	683b      	ldr	r3, [r7, #0]
 c001d0c:	685b      	ldr	r3, [r3, #4]
 c001d0e:	091b      	lsrs	r3, r3, #4
 c001d10:	f003 0201 	and.w	r2, r3, #1
 c001d14:	697b      	ldr	r3, [r7, #20]
 c001d16:	fa02 f303 	lsl.w	r3, r2, r3
 c001d1a:	693a      	ldr	r2, [r7, #16]
 c001d1c:	4313      	orrs	r3, r2
 c001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001d20:	687b      	ldr	r3, [r7, #4]
 c001d22:	693a      	ldr	r2, [r7, #16]
 c001d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c001d26:	683b      	ldr	r3, [r7, #0]
 c001d28:	685b      	ldr	r3, [r3, #4]
 c001d2a:	f003 0303 	and.w	r3, r3, #3
 c001d2e:	2b03      	cmp	r3, #3
 c001d30:	d017      	beq.n	c001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c001d32:	687b      	ldr	r3, [r7, #4]
 c001d34:	68db      	ldr	r3, [r3, #12]
 c001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001d38:	697b      	ldr	r3, [r7, #20]
 c001d3a:	005b      	lsls	r3, r3, #1
 c001d3c:	2203      	movs	r2, #3
 c001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 c001d42:	43db      	mvns	r3, r3
 c001d44:	693a      	ldr	r2, [r7, #16]
 c001d46:	4013      	ands	r3, r2
 c001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001d4a:	683b      	ldr	r3, [r7, #0]
 c001d4c:	689a      	ldr	r2, [r3, #8]
 c001d4e:	697b      	ldr	r3, [r7, #20]
 c001d50:	005b      	lsls	r3, r3, #1
 c001d52:	fa02 f303 	lsl.w	r3, r2, r3
 c001d56:	693a      	ldr	r2, [r7, #16]
 c001d58:	4313      	orrs	r3, r2
 c001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c001d5c:	687b      	ldr	r3, [r7, #4]
 c001d5e:	693a      	ldr	r2, [r7, #16]
 c001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001d62:	683b      	ldr	r3, [r7, #0]
 c001d64:	685b      	ldr	r3, [r3, #4]
 c001d66:	f003 0303 	and.w	r3, r3, #3
 c001d6a:	2b02      	cmp	r3, #2
 c001d6c:	d123      	bne.n	c001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c001d6e:	697b      	ldr	r3, [r7, #20]
 c001d70:	08da      	lsrs	r2, r3, #3
 c001d72:	687b      	ldr	r3, [r7, #4]
 c001d74:	3208      	adds	r2, #8
 c001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001d7c:	697b      	ldr	r3, [r7, #20]
 c001d7e:	f003 0307 	and.w	r3, r3, #7
 c001d82:	009b      	lsls	r3, r3, #2
 c001d84:	220f      	movs	r2, #15
 c001d86:	fa02 f303 	lsl.w	r3, r2, r3
 c001d8a:	43db      	mvns	r3, r3
 c001d8c:	693a      	ldr	r2, [r7, #16]
 c001d8e:	4013      	ands	r3, r2
 c001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001d92:	683b      	ldr	r3, [r7, #0]
 c001d94:	691a      	ldr	r2, [r3, #16]
 c001d96:	697b      	ldr	r3, [r7, #20]
 c001d98:	f003 0307 	and.w	r3, r3, #7
 c001d9c:	009b      	lsls	r3, r3, #2
 c001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 c001da2:	693a      	ldr	r2, [r7, #16]
 c001da4:	4313      	orrs	r3, r2
 c001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001da8:	697b      	ldr	r3, [r7, #20]
 c001daa:	08da      	lsrs	r2, r3, #3
 c001dac:	687b      	ldr	r3, [r7, #4]
 c001dae:	3208      	adds	r2, #8
 c001db0:	6939      	ldr	r1, [r7, #16]
 c001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001db6:	687b      	ldr	r3, [r7, #4]
 c001db8:	681b      	ldr	r3, [r3, #0]
 c001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001dbc:	697b      	ldr	r3, [r7, #20]
 c001dbe:	005b      	lsls	r3, r3, #1
 c001dc0:	2203      	movs	r2, #3
 c001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 c001dc6:	43db      	mvns	r3, r3
 c001dc8:	693a      	ldr	r2, [r7, #16]
 c001dca:	4013      	ands	r3, r2
 c001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001dce:	683b      	ldr	r3, [r7, #0]
 c001dd0:	685b      	ldr	r3, [r3, #4]
 c001dd2:	f003 0203 	and.w	r2, r3, #3
 c001dd6:	697b      	ldr	r3, [r7, #20]
 c001dd8:	005b      	lsls	r3, r3, #1
 c001dda:	fa02 f303 	lsl.w	r3, r2, r3
 c001dde:	693a      	ldr	r2, [r7, #16]
 c001de0:	4313      	orrs	r3, r2
 c001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001de4:	687b      	ldr	r3, [r7, #4]
 c001de6:	693a      	ldr	r2, [r7, #16]
 c001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c001dea:	683b      	ldr	r3, [r7, #0]
 c001dec:	685b      	ldr	r3, [r3, #4]
 c001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c001df2:	2b00      	cmp	r3, #0
 c001df4:	f000 80a4 	beq.w	c001f40 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001df8:	4a5a      	ldr	r2, [pc, #360]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001dfa:	697b      	ldr	r3, [r7, #20]
 c001dfc:	089b      	lsrs	r3, r3, #2
 c001dfe:	3318      	adds	r3, #24
 c001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001e04:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001e06:	697b      	ldr	r3, [r7, #20]
 c001e08:	f003 0303 	and.w	r3, r3, #3
 c001e0c:	00db      	lsls	r3, r3, #3
 c001e0e:	220f      	movs	r2, #15
 c001e10:	fa02 f303 	lsl.w	r3, r2, r3
 c001e14:	43db      	mvns	r3, r3
 c001e16:	693a      	ldr	r2, [r7, #16]
 c001e18:	4013      	ands	r3, r2
 c001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001e1c:	687b      	ldr	r3, [r7, #4]
 c001e1e:	4a52      	ldr	r2, [pc, #328]	; (c001f68 <HAL_GPIO_Init+0x2e4>)
 c001e20:	4293      	cmp	r3, r2
 c001e22:	d025      	beq.n	c001e70 <HAL_GPIO_Init+0x1ec>
 c001e24:	687b      	ldr	r3, [r7, #4]
 c001e26:	4a51      	ldr	r2, [pc, #324]	; (c001f6c <HAL_GPIO_Init+0x2e8>)
 c001e28:	4293      	cmp	r3, r2
 c001e2a:	d01f      	beq.n	c001e6c <HAL_GPIO_Init+0x1e8>
 c001e2c:	687b      	ldr	r3, [r7, #4]
 c001e2e:	4a50      	ldr	r2, [pc, #320]	; (c001f70 <HAL_GPIO_Init+0x2ec>)
 c001e30:	4293      	cmp	r3, r2
 c001e32:	d019      	beq.n	c001e68 <HAL_GPIO_Init+0x1e4>
 c001e34:	687b      	ldr	r3, [r7, #4]
 c001e36:	4a4f      	ldr	r2, [pc, #316]	; (c001f74 <HAL_GPIO_Init+0x2f0>)
 c001e38:	4293      	cmp	r3, r2
 c001e3a:	d013      	beq.n	c001e64 <HAL_GPIO_Init+0x1e0>
 c001e3c:	687b      	ldr	r3, [r7, #4]
 c001e3e:	4a4e      	ldr	r2, [pc, #312]	; (c001f78 <HAL_GPIO_Init+0x2f4>)
 c001e40:	4293      	cmp	r3, r2
 c001e42:	d00d      	beq.n	c001e60 <HAL_GPIO_Init+0x1dc>
 c001e44:	687b      	ldr	r3, [r7, #4]
 c001e46:	4a4d      	ldr	r2, [pc, #308]	; (c001f7c <HAL_GPIO_Init+0x2f8>)
 c001e48:	4293      	cmp	r3, r2
 c001e4a:	d007      	beq.n	c001e5c <HAL_GPIO_Init+0x1d8>
 c001e4c:	687b      	ldr	r3, [r7, #4]
 c001e4e:	4a4c      	ldr	r2, [pc, #304]	; (c001f80 <HAL_GPIO_Init+0x2fc>)
 c001e50:	4293      	cmp	r3, r2
 c001e52:	d101      	bne.n	c001e58 <HAL_GPIO_Init+0x1d4>
 c001e54:	2306      	movs	r3, #6
 c001e56:	e00c      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e58:	2307      	movs	r3, #7
 c001e5a:	e00a      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e5c:	2305      	movs	r3, #5
 c001e5e:	e008      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e60:	2304      	movs	r3, #4
 c001e62:	e006      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e64:	2303      	movs	r3, #3
 c001e66:	e004      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e68:	2302      	movs	r3, #2
 c001e6a:	e002      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e6c:	2301      	movs	r3, #1
 c001e6e:	e000      	b.n	c001e72 <HAL_GPIO_Init+0x1ee>
 c001e70:	2300      	movs	r3, #0
 c001e72:	697a      	ldr	r2, [r7, #20]
 c001e74:	f002 0203 	and.w	r2, r2, #3
 c001e78:	00d2      	lsls	r2, r2, #3
 c001e7a:	4093      	lsls	r3, r2
 c001e7c:	693a      	ldr	r2, [r7, #16]
 c001e7e:	4313      	orrs	r3, r2
 c001e80:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001e82:	4938      	ldr	r1, [pc, #224]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001e84:	697b      	ldr	r3, [r7, #20]
 c001e86:	089b      	lsrs	r3, r3, #2
 c001e88:	3318      	adds	r3, #24
 c001e8a:	693a      	ldr	r2, [r7, #16]
 c001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001e90:	4b34      	ldr	r3, [pc, #208]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001e92:	681b      	ldr	r3, [r3, #0]
 c001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001e96:	68fb      	ldr	r3, [r7, #12]
 c001e98:	43db      	mvns	r3, r3
 c001e9a:	693a      	ldr	r2, [r7, #16]
 c001e9c:	4013      	ands	r3, r2
 c001e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c001ea0:	683b      	ldr	r3, [r7, #0]
 c001ea2:	685b      	ldr	r3, [r3, #4]
 c001ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001ea8:	2b00      	cmp	r3, #0
 c001eaa:	d003      	beq.n	c001eb4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c001eac:	693a      	ldr	r2, [r7, #16]
 c001eae:	68fb      	ldr	r3, [r7, #12]
 c001eb0:	4313      	orrs	r3, r2
 c001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001eb4:	4a2b      	ldr	r2, [pc, #172]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001eb6:	693b      	ldr	r3, [r7, #16]
 c001eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c001eba:	4b2a      	ldr	r3, [pc, #168]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001ebc:	685b      	ldr	r3, [r3, #4]
 c001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001ec0:	68fb      	ldr	r3, [r7, #12]
 c001ec2:	43db      	mvns	r3, r3
 c001ec4:	693a      	ldr	r2, [r7, #16]
 c001ec6:	4013      	ands	r3, r2
 c001ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c001eca:	683b      	ldr	r3, [r7, #0]
 c001ecc:	685b      	ldr	r3, [r3, #4]
 c001ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001ed2:	2b00      	cmp	r3, #0
 c001ed4:	d003      	beq.n	c001ede <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c001ed6:	693a      	ldr	r2, [r7, #16]
 c001ed8:	68fb      	ldr	r3, [r7, #12]
 c001eda:	4313      	orrs	r3, r2
 c001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c001ede:	4a21      	ldr	r2, [pc, #132]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001ee0:	693b      	ldr	r3, [r7, #16]
 c001ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c001ee4:	4b1f      	ldr	r3, [pc, #124]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001eec:	68fb      	ldr	r3, [r7, #12]
 c001eee:	43db      	mvns	r3, r3
 c001ef0:	693a      	ldr	r2, [r7, #16]
 c001ef2:	4013      	ands	r3, r2
 c001ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c001ef6:	683b      	ldr	r3, [r7, #0]
 c001ef8:	685b      	ldr	r3, [r3, #4]
 c001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001efe:	2b00      	cmp	r3, #0
 c001f00:	d003      	beq.n	c001f0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c001f02:	693a      	ldr	r2, [r7, #16]
 c001f04:	68fb      	ldr	r3, [r7, #12]
 c001f06:	4313      	orrs	r3, r2
 c001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c001f0a:	4a16      	ldr	r2, [pc, #88]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001f0c:	693b      	ldr	r3, [r7, #16]
 c001f0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c001f12:	4b14      	ldr	r3, [pc, #80]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001f1a:	68fb      	ldr	r3, [r7, #12]
 c001f1c:	43db      	mvns	r3, r3
 c001f1e:	693a      	ldr	r2, [r7, #16]
 c001f20:	4013      	ands	r3, r2
 c001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c001f24:	683b      	ldr	r3, [r7, #0]
 c001f26:	685b      	ldr	r3, [r3, #4]
 c001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001f2c:	2b00      	cmp	r3, #0
 c001f2e:	d003      	beq.n	c001f38 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c001f30:	693a      	ldr	r2, [r7, #16]
 c001f32:	68fb      	ldr	r3, [r7, #12]
 c001f34:	4313      	orrs	r3, r2
 c001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001f38:	4a0a      	ldr	r2, [pc, #40]	; (c001f64 <HAL_GPIO_Init+0x2e0>)
 c001f3a:	693b      	ldr	r3, [r7, #16]
 c001f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001f40:	697b      	ldr	r3, [r7, #20]
 c001f42:	3301      	adds	r3, #1
 c001f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001f46:	683b      	ldr	r3, [r7, #0]
 c001f48:	681a      	ldr	r2, [r3, #0]
 c001f4a:	697b      	ldr	r3, [r7, #20]
 c001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 c001f50:	2b00      	cmp	r3, #0
 c001f52:	f47f ae9f 	bne.w	c001c94 <HAL_GPIO_Init+0x10>
  }
}
 c001f56:	bf00      	nop
 c001f58:	bf00      	nop
 c001f5a:	371c      	adds	r7, #28
 c001f5c:	46bd      	mov	sp, r7
 c001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f62:	4770      	bx	lr
 c001f64:	5002f400 	.word	0x5002f400
 c001f68:	52020000 	.word	0x52020000
 c001f6c:	52020400 	.word	0x52020400
 c001f70:	52020800 	.word	0x52020800
 c001f74:	52020c00 	.word	0x52020c00
 c001f78:	52021000 	.word	0x52021000
 c001f7c:	52021400 	.word	0x52021400
 c001f80:	52021800 	.word	0x52021800

0c001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001f84:	b480      	push	{r7}
 c001f86:	b083      	sub	sp, #12
 c001f88:	af00      	add	r7, sp, #0
 c001f8a:	6078      	str	r0, [r7, #4]
 c001f8c:	460b      	mov	r3, r1
 c001f8e:	807b      	strh	r3, [r7, #2]
 c001f90:	4613      	mov	r3, r2
 c001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001f94:	787b      	ldrb	r3, [r7, #1]
 c001f96:	2b00      	cmp	r3, #0
 c001f98:	d003      	beq.n	c001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001f9a:	887a      	ldrh	r2, [r7, #2]
 c001f9c:	687b      	ldr	r3, [r7, #4]
 c001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001fa0:	e002      	b.n	c001fa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001fa2:	887a      	ldrh	r2, [r7, #2]
 c001fa4:	687b      	ldr	r3, [r7, #4]
 c001fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001fa8:	bf00      	nop
 c001faa:	370c      	adds	r7, #12
 c001fac:	46bd      	mov	sp, r7
 c001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fb2:	4770      	bx	lr

0c001fb4 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001fb4:	b480      	push	{r7}
 c001fb6:	b089      	sub	sp, #36	; 0x24
 c001fb8:	af00      	add	r7, sp, #0
 c001fba:	60f8      	str	r0, [r7, #12]
 c001fbc:	460b      	mov	r3, r1
 c001fbe:	607a      	str	r2, [r7, #4]
 c001fc0:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001fc2:	2300      	movs	r3, #0
 c001fc4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001fc6:	68fb      	ldr	r3, [r7, #12]
 c001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001fca:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001fcc:	e01b      	b.n	c002006 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001fce:	897a      	ldrh	r2, [r7, #10]
 c001fd0:	2101      	movs	r1, #1
 c001fd2:	69fb      	ldr	r3, [r7, #28]
 c001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 c001fd8:	4013      	ands	r3, r2
 c001fda:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001fdc:	697b      	ldr	r3, [r7, #20]
 c001fde:	2b00      	cmp	r3, #0
 c001fe0:	d00e      	beq.n	c002000 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001fe2:	2201      	movs	r2, #1
 c001fe4:	69fb      	ldr	r3, [r7, #28]
 c001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 c001fea:	43db      	mvns	r3, r3
 c001fec:	69ba      	ldr	r2, [r7, #24]
 c001fee:	4013      	ands	r3, r2
 c001ff0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001ff2:	687a      	ldr	r2, [r7, #4]
 c001ff4:	69fb      	ldr	r3, [r7, #28]
 c001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 c001ffa:	69ba      	ldr	r2, [r7, #24]
 c001ffc:	4313      	orrs	r3, r2
 c001ffe:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c002000:	69fb      	ldr	r3, [r7, #28]
 c002002:	3301      	adds	r3, #1
 c002004:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c002006:	897a      	ldrh	r2, [r7, #10]
 c002008:	69fb      	ldr	r3, [r7, #28]
 c00200a:	fa42 f303 	asr.w	r3, r2, r3
 c00200e:	2b00      	cmp	r3, #0
 c002010:	d1dd      	bne.n	c001fce <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c002012:	68fb      	ldr	r3, [r7, #12]
 c002014:	69ba      	ldr	r2, [r7, #24]
 c002016:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002018:	bf00      	nop
 c00201a:	3724      	adds	r7, #36	; 0x24
 c00201c:	46bd      	mov	sp, r7
 c00201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002022:	4770      	bx	lr

0c002024 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002024:	b480      	push	{r7}
 c002026:	b089      	sub	sp, #36	; 0x24
 c002028:	af00      	add	r7, sp, #0
 c00202a:	6078      	str	r0, [r7, #4]
 c00202c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00202e:	687b      	ldr	r3, [r7, #4]
 c002030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002034:	d00b      	beq.n	c00204e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002036:	687b      	ldr	r3, [r7, #4]
 c002038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00203c:	d007      	beq.n	c00204e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00203e:	687b      	ldr	r3, [r7, #4]
 c002040:	4a36      	ldr	r2, [pc, #216]	; (c00211c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c002042:	4293      	cmp	r3, r2
 c002044:	d003      	beq.n	c00204e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002046:	687b      	ldr	r3, [r7, #4]
 c002048:	4a35      	ldr	r2, [pc, #212]	; (c002120 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00204a:	4293      	cmp	r3, r2
 c00204c:	d111      	bne.n	c002072 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00204e:	683b      	ldr	r3, [r7, #0]
 c002050:	681b      	ldr	r3, [r3, #0]
 c002052:	2b00      	cmp	r3, #0
 c002054:	d004      	beq.n	c002060 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002056:	683b      	ldr	r3, [r7, #0]
 c002058:	681b      	ldr	r3, [r3, #0]
 c00205a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00205e:	d108      	bne.n	c002072 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002060:	683b      	ldr	r3, [r7, #0]
 c002062:	685b      	ldr	r3, [r3, #4]
 c002064:	2b00      	cmp	r3, #0
 c002066:	d006      	beq.n	c002076 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002068:	683b      	ldr	r3, [r7, #0]
 c00206a:	685b      	ldr	r3, [r3, #4]
 c00206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002070:	d001      	beq.n	c002076 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c002072:	2301      	movs	r3, #1
 c002074:	e04b      	b.n	c00210e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002076:	683b      	ldr	r3, [r7, #0]
 c002078:	685b      	ldr	r3, [r3, #4]
 c00207a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00207c:	683b      	ldr	r3, [r7, #0]
 c00207e:	681b      	ldr	r3, [r3, #0]
 c002080:	693a      	ldr	r2, [r7, #16]
 c002082:	4313      	orrs	r3, r2
 c002084:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002086:	687b      	ldr	r3, [r7, #4]
 c002088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00208c:	d003      	beq.n	c002096 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00208e:	687b      	ldr	r3, [r7, #4]
 c002090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002094:	d105      	bne.n	c0020a2 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002096:	4b23      	ldr	r3, [pc, #140]	; (c002124 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002098:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00209a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00209e:	61bb      	str	r3, [r7, #24]
 c0020a0:	e004      	b.n	c0020ac <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0020a2:	4b21      	ldr	r3, [pc, #132]	; (c002128 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0020a4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0020a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0020aa:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0020ac:	69bb      	ldr	r3, [r7, #24]
 c0020ae:	0b5b      	lsrs	r3, r3, #13
 c0020b0:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c0020b2:	2300      	movs	r3, #0
 c0020b4:	617b      	str	r3, [r7, #20]
 c0020b6:	e00c      	b.n	c0020d2 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0020b8:	683b      	ldr	r3, [r7, #0]
 c0020ba:	697a      	ldr	r2, [r7, #20]
 c0020bc:	3202      	adds	r2, #2
 c0020be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0020c2:	69fb      	ldr	r3, [r7, #28]
 c0020c4:	697a      	ldr	r2, [r7, #20]
 c0020c6:	3240      	adds	r2, #64	; 0x40
 c0020c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0020cc:	697b      	ldr	r3, [r7, #20]
 c0020ce:	3301      	adds	r3, #1
 c0020d0:	617b      	str	r3, [r7, #20]
 c0020d2:	697a      	ldr	r2, [r7, #20]
 c0020d4:	68fb      	ldr	r3, [r7, #12]
 c0020d6:	429a      	cmp	r2, r3
 c0020d8:	d3ee      	bcc.n	c0020b8 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0020da:	69fb      	ldr	r3, [r7, #28]
 c0020dc:	681b      	ldr	r3, [r3, #0]
 c0020de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0020e2:	693b      	ldr	r3, [r7, #16]
 c0020e4:	431a      	orrs	r2, r3
 c0020e6:	69fb      	ldr	r3, [r7, #28]
 c0020e8:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0020ea:	69bb      	ldr	r3, [r7, #24]
 c0020ec:	0b5b      	lsrs	r3, r3, #13
 c0020ee:	2201      	movs	r2, #1
 c0020f0:	fa02 f303 	lsl.w	r3, r2, r3
 c0020f4:	3b01      	subs	r3, #1
 c0020f6:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0020f8:	69fb      	ldr	r3, [r7, #28]
 c0020fa:	691a      	ldr	r2, [r3, #16]
 c0020fc:	68bb      	ldr	r3, [r7, #8]
 c0020fe:	43db      	mvns	r3, r3
 c002100:	401a      	ands	r2, r3
 c002102:	683b      	ldr	r3, [r7, #0]
 c002104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002106:	431a      	orrs	r2, r3
 c002108:	69fb      	ldr	r3, [r7, #28]
 c00210a:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c00210c:	2300      	movs	r3, #0
}
 c00210e:	4618      	mov	r0, r3
 c002110:	3724      	adds	r7, #36	; 0x24
 c002112:	46bd      	mov	sp, r7
 c002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002118:	4770      	bx	lr
 c00211a:	bf00      	nop
 c00211c:	20030000 	.word	0x20030000
 c002120:	30030000 	.word	0x30030000
 c002124:	50032c00 	.word	0x50032c00
 c002128:	50033000 	.word	0x50033000

0c00212c <memset>:
 c00212c:	4402      	add	r2, r0
 c00212e:	4603      	mov	r3, r0
 c002130:	4293      	cmp	r3, r2
 c002132:	d100      	bne.n	c002136 <memset+0xa>
 c002134:	4770      	bx	lr
 c002136:	f803 1b01 	strb.w	r1, [r3], #1
 c00213a:	e7f9      	b.n	c002130 <memset+0x4>

0c00213c <__libc_init_array>:
 c00213c:	b570      	push	{r4, r5, r6, lr}
 c00213e:	4d0d      	ldr	r5, [pc, #52]	; (c002174 <__libc_init_array+0x38>)
 c002140:	2600      	movs	r6, #0
 c002142:	4c0d      	ldr	r4, [pc, #52]	; (c002178 <__libc_init_array+0x3c>)
 c002144:	1b64      	subs	r4, r4, r5
 c002146:	10a4      	asrs	r4, r4, #2
 c002148:	42a6      	cmp	r6, r4
 c00214a:	d109      	bne.n	c002160 <__libc_init_array+0x24>
 c00214c:	4d0b      	ldr	r5, [pc, #44]	; (c00217c <__libc_init_array+0x40>)
 c00214e:	2600      	movs	r6, #0
 c002150:	4c0b      	ldr	r4, [pc, #44]	; (c002180 <__libc_init_array+0x44>)
 c002152:	f000 f817 	bl	c002184 <_init>
 c002156:	1b64      	subs	r4, r4, r5
 c002158:	10a4      	asrs	r4, r4, #2
 c00215a:	42a6      	cmp	r6, r4
 c00215c:	d105      	bne.n	c00216a <__libc_init_array+0x2e>
 c00215e:	bd70      	pop	{r4, r5, r6, pc}
 c002160:	f855 3b04 	ldr.w	r3, [r5], #4
 c002164:	3601      	adds	r6, #1
 c002166:	4798      	blx	r3
 c002168:	e7ee      	b.n	c002148 <__libc_init_array+0xc>
 c00216a:	f855 3b04 	ldr.w	r3, [r5], #4
 c00216e:	3601      	adds	r6, #1
 c002170:	4798      	blx	r3
 c002172:	e7f2      	b.n	c00215a <__libc_init_array+0x1e>
 c002174:	0c0021ec 	.word	0x0c0021ec
 c002178:	0c0021ec 	.word	0x0c0021ec
 c00217c:	0c0021ec 	.word	0x0c0021ec
 c002180:	0c0021f0 	.word	0x0c0021f0

0c002184 <_init>:
 c002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002186:	bf00      	nop
 c002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00218a:	bc08      	pop	{r3}
 c00218c:	469e      	mov	lr, r3
 c00218e:	4770      	bx	lr

0c002190 <_fini>:
 c002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002192:	bf00      	nop
 c002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002196:	bc08      	pop	{r3}
 c002198:	469e      	mov	lr, r3
 c00219a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <decrypt>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 ba9c 	b.w	c001540 <__acle_se_decrypt>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 bc82 	b.w	c001914 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <encrypt>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 ba4c 	b.w	c0014b0 <__acle_se_encrypt>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 b9f4 	b.w	c001408 <__acle_se_SECURE_RegisterCallback>
