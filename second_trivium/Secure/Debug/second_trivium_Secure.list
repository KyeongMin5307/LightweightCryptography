
second_trivium_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f64  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0c002158  0c002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0021cc  0c0021cc  0002e020  2**0
                  CONTENTS
  4 .ARM          00000000  0c0021cc  0c0021cc  0002e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c0021cc  0c0021cc  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0021cc  0c0021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0021d0  0c0021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  30000000  0c0021d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000001bc  30000068  30000068  00030068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000224  30000224  00030068  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000591b  00000000  00000000  0002e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001460  00000000  00000000  000339b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000628  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000047a  00000000  00000000  00035440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028681  00000000  00000000  000358ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000769b  00000000  00000000  0005df3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc046  00000000  00000000  000655d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d7c  00000000  00000000  0016161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00163398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000068 	.word	0x30000068
 c000210:	00000000 	.word	0x00000000
 c000214:	0c002140 	.word	0x0c002140

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	3000006c 	.word	0x3000006c
 c000230:	0c002140 	.word	0x0c002140

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000290:	b580      	push	{r7, lr}
 c000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000294:	f000 feff 	bl	c001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000298:	f000 f84a 	bl	c000330 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c00029c:	f000 f8c0 	bl	c000420 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0002a0:	f000 f802 	bl	c0002a8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0002a4:	e7fe      	b.n	c0002a4 <main+0x14>
	...

0c0002a8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0002a8:	b590      	push	{r4, r7, lr}
 c0002aa:	b083      	sub	sp, #12
 c0002ac:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0002ae:	4b1d      	ldr	r3, [pc, #116]	; (c000324 <NonSecure_Init+0x7c>)
 c0002b0:	4a1d      	ldr	r2, [pc, #116]	; (c000328 <NonSecure_Init+0x80>)
 c0002b2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0002b4:	4b1c      	ldr	r3, [pc, #112]	; (c000328 <NonSecure_Init+0x80>)
 c0002b6:	681b      	ldr	r3, [r3, #0]
 c0002b8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0002ba:	683b      	ldr	r3, [r7, #0]
 c0002bc:	f383 8888 	msr	MSP_NS, r3
}
 c0002c0:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0002c2:	4b1a      	ldr	r3, [pc, #104]	; (c00032c <NonSecure_Init+0x84>)
 c0002c4:	681b      	ldr	r3, [r3, #0]
 c0002c6:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0002c8:	687b      	ldr	r3, [r7, #4]
 c0002ca:	461c      	mov	r4, r3
 c0002cc:	0864      	lsrs	r4, r4, #1
 c0002ce:	0064      	lsls	r4, r4, #1
 c0002d0:	4620      	mov	r0, r4
 c0002d2:	4621      	mov	r1, r4
 c0002d4:	4622      	mov	r2, r4
 c0002d6:	4623      	mov	r3, r4
 c0002d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0002dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0002e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0002e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0002e8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0002ec:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0002f0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0002f4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0002f8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0002fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000300:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000304:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000308:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00030c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000314:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000318:	f7ff ff8c 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c00031c:	bf00      	nop
 c00031e:	370c      	adds	r7, #12
 c000320:	46bd      	mov	sp, r7
 c000322:	bd90      	pop	{r4, r7, pc}
 c000324:	e002ed00 	.word	0xe002ed00
 c000328:	08040000 	.word	0x08040000
 c00032c:	08040004 	.word	0x08040004

0c000330 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000330:	b580      	push	{r7, lr}
 c000332:	b09c      	sub	sp, #112	; 0x70
 c000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000336:	1d3b      	adds	r3, r7, #4
 c000338:	226c      	movs	r2, #108	; 0x6c
 c00033a:	2100      	movs	r1, #0
 c00033c:	4618      	mov	r0, r3
 c00033e:	f001 fc1f 	bl	c001b80 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000342:	2300      	movs	r3, #0
 c000344:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000346:	2300      	movs	r3, #0
 c000348:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00034e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000354:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00035a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000360:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000366:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00036c:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c00036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000372:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000378:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00037a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00037e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000384:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00038a:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000390:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000392:	2300      	movs	r3, #0
 c000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000396:	2300      	movs	r3, #0
 c000398:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00039a:	2300      	movs	r3, #0
 c00039c:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c00039e:	2300      	movs	r3, #0
 c0003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0003a2:	2300      	movs	r3, #0
 c0003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0003a6:	2300      	movs	r3, #0
 c0003a8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0003aa:	2300      	movs	r3, #0
 c0003ac:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0003ae:	2300      	movs	r3, #0
 c0003b0:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0003b2:	2300      	movs	r3, #0
 c0003b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0003b6:	2300      	movs	r3, #0
 c0003b8:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0003ba:	2300      	movs	r3, #0
 c0003bc:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0003be:	2300      	movs	r3, #0
 c0003c0:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003c2:	2300      	movs	r3, #0
 c0003c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0003c6:	1d3b      	adds	r3, r7, #4
 c0003c8:	4619      	mov	r1, r3
 c0003ca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0003ce:	f001 f981 	bl	c0016d4 <HAL_GTZC_MPCBB_ConfigMem>
 c0003d2:	4603      	mov	r3, r0
 c0003d4:	2b00      	cmp	r3, #0
 c0003d6:	d001      	beq.n	c0003dc <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c0003d8:	f000 f868 	bl	c0004ac <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0003dc:	2300      	movs	r3, #0
 c0003de:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0003e0:	2300      	movs	r3, #0
 c0003e2:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0003e4:	2300      	movs	r3, #0
 c0003e6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0003e8:	2300      	movs	r3, #0
 c0003ea:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0003ec:	2300      	movs	r3, #0
 c0003ee:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0003f0:	2300      	movs	r3, #0
 c0003f2:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0003f4:	2300      	movs	r3, #0
 c0003f6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0003f8:	2300      	movs	r3, #0
 c0003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003fc:	2300      	movs	r3, #0
 c0003fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000400:	1d3b      	adds	r3, r7, #4
 c000402:	4619      	mov	r1, r3
 c000404:	4805      	ldr	r0, [pc, #20]	; (c00041c <MX_GTZC_S_Init+0xec>)
 c000406:	f001 f965 	bl	c0016d4 <HAL_GTZC_MPCBB_ConfigMem>
 c00040a:	4603      	mov	r3, r0
 c00040c:	2b00      	cmp	r3, #0
 c00040e:	d001      	beq.n	c000414 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c000410:	f000 f84c 	bl	c0004ac <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000414:	bf00      	nop
 c000416:	3770      	adds	r7, #112	; 0x70
 c000418:	46bd      	mov	sp, r7
 c00041a:	bd80      	pop	{r7, pc}
 c00041c:	30030000 	.word	0x30030000

0c000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000420:	b580      	push	{r7, lr}
 c000422:	b088      	sub	sp, #32
 c000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000426:	f107 030c 	add.w	r3, r7, #12
 c00042a:	2200      	movs	r2, #0
 c00042c:	601a      	str	r2, [r3, #0]
 c00042e:	605a      	str	r2, [r3, #4]
 c000430:	609a      	str	r2, [r3, #8]
 c000432:	60da      	str	r2, [r3, #12]
 c000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000436:	4b1a      	ldr	r3, [pc, #104]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00043a:	4a19      	ldr	r2, [pc, #100]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c00043c:	f043 0301 	orr.w	r3, r3, #1
 c000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000442:	4b17      	ldr	r3, [pc, #92]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000446:	f003 0301 	and.w	r3, r3, #1
 c00044a:	60bb      	str	r3, [r7, #8]
 c00044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00044e:	4b14      	ldr	r3, [pc, #80]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000452:	4a13      	ldr	r2, [pc, #76]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c000454:	f043 0302 	orr.w	r3, r3, #2
 c000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00045a:	4b11      	ldr	r3, [pc, #68]	; (c0004a0 <MX_GPIO_Init+0x80>)
 c00045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00045e:	f003 0302 	and.w	r3, r3, #2
 c000462:	607b      	str	r3, [r7, #4]
 c000464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c000466:	2200      	movs	r2, #0
 c000468:	2180      	movs	r1, #128	; 0x80
 c00046a:	480e      	ldr	r0, [pc, #56]	; (c0004a4 <MX_GPIO_Init+0x84>)
 c00046c:	f001 f8e2 	bl	c001634 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c000470:	2200      	movs	r2, #0
 c000472:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000476:	480c      	ldr	r0, [pc, #48]	; (c0004a8 <MX_GPIO_Init+0x88>)
 c000478:	f001 f8f4 	bl	c001664 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c00047c:	2380      	movs	r3, #128	; 0x80
 c00047e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000480:	2301      	movs	r3, #1
 c000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000484:	2300      	movs	r3, #0
 c000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000488:	2300      	movs	r3, #0
 c00048a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c00048c:	f107 030c 	add.w	r3, r7, #12
 c000490:	4619      	mov	r1, r3
 c000492:	4804      	ldr	r0, [pc, #16]	; (c0004a4 <MX_GPIO_Init+0x84>)
 c000494:	f000 ff4e 	bl	c001334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000498:	bf00      	nop
 c00049a:	3720      	adds	r7, #32
 c00049c:	46bd      	mov	sp, r7
 c00049e:	bd80      	pop	{r7, pc}
 c0004a0:	50021000 	.word	0x50021000
 c0004a4:	52020400 	.word	0x52020400
 c0004a8:	52020000 	.word	0x52020000

0c0004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0004ac:	b480      	push	{r7}
 c0004ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c0004b0:	b672      	cpsid	i
}
 c0004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c0004b4:	e7fe      	b.n	c0004b4 <Error_Handler+0x8>
	...

0c0004b8 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0004b8:	b480      	push	{r7}
 c0004ba:	b083      	sub	sp, #12
 c0004bc:	af00      	add	r7, sp, #0
 c0004be:	4603      	mov	r3, r0
 c0004c0:	6039      	str	r1, [r7, #0]
 c0004c2:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0004c4:	683b      	ldr	r3, [r7, #0]
 c0004c6:	2b00      	cmp	r3, #0
 c0004c8:	d00d      	beq.n	c0004e6 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c0004ca:	79fb      	ldrb	r3, [r7, #7]
 c0004cc:	2b00      	cmp	r3, #0
 c0004ce:	d002      	beq.n	c0004d6 <__acle_se_SECURE_RegisterCallback+0x1e>
 c0004d0:	2b01      	cmp	r3, #1
 c0004d2:	d004      	beq.n	c0004de <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0004d4:	e007      	b.n	c0004e6 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c0004d6:	4a20      	ldr	r2, [pc, #128]	; (c000558 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c0004d8:	683b      	ldr	r3, [r7, #0]
 c0004da:	6013      	str	r3, [r2, #0]
        break;
 c0004dc:	e003      	b.n	c0004e6 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c0004de:	4a1f      	ldr	r2, [pc, #124]	; (c00055c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c0004e0:	683b      	ldr	r3, [r7, #0]
 c0004e2:	6013      	str	r3, [r2, #0]
        break;
 c0004e4:	bf00      	nop
    }
  }
}
 c0004e6:	bf00      	nop
 c0004e8:	370c      	adds	r7, #12
 c0004ea:	46bd      	mov	sp, r7
 c0004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0004f0:	4670      	mov	r0, lr
 c0004f2:	4671      	mov	r1, lr
 c0004f4:	4672      	mov	r2, lr
 c0004f6:	4673      	mov	r3, lr
 c0004f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0004fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000500:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000504:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000508:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00050c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000510:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000514:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000518:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00051c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000520:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000524:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000528:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00052c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000534:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000538:	f38e 8c00 	msr	CPSR_fs, lr
 c00053c:	b410      	push	{r4}
 c00053e:	eef1 ca10 	vmrs	ip, fpscr
 c000542:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000546:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00054a:	ea0c 0c04 	and.w	ip, ip, r4
 c00054e:	eee1 ca10 	vmsr	fpscr, ip
 c000552:	bc10      	pop	{r4}
 c000554:	46f4      	mov	ip, lr
 c000556:	4774      	bxns	lr
 c000558:	30000084 	.word	0x30000084
 c00055c:	30000088 	.word	0x30000088

0c000560 <__acle_se_key_stream>:

CMSE_NS_ENTRY void key_stream(uint8_t* key, uint8_t* iv){
 c000560:	b590      	push	{r4, r7, lr}
 c000562:	b08d      	sub	sp, #52	; 0x34
 c000564:	af00      	add	r7, sp, #0
 c000566:	6078      	str	r0, [r7, #4]
 c000568:	6039      	str	r1, [r7, #0]
	uint8_t key_temp[16];
	uint8_t iv_temp[16];
	memcpy(key_temp, key, 16);
 c00056a:	687b      	ldr	r3, [r7, #4]
 c00056c:	f107 041c 	add.w	r4, r7, #28
 c000570:	6818      	ldr	r0, [r3, #0]
 c000572:	6859      	ldr	r1, [r3, #4]
 c000574:	689a      	ldr	r2, [r3, #8]
 c000576:	68db      	ldr	r3, [r3, #12]
 c000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	memcpy(iv_temp, iv, 16);
 c00057a:	683b      	ldr	r3, [r7, #0]
 c00057c:	f107 040c 	add.w	r4, r7, #12
 c000580:	6818      	ldr	r0, [r3, #0]
 c000582:	6859      	ldr	r1, [r3, #4]
 c000584:	689a      	ldr	r2, [r3, #8]
 c000586:	68db      	ldr	r3, [r3, #12]
 c000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	ctx = trivium_init(key_temp, iv_temp);
 c00058a:	f107 020c 	add.w	r2, r7, #12
 c00058e:	f107 031c 	add.w	r3, r7, #28
 c000592:	4611      	mov	r1, r2
 c000594:	4618      	mov	r0, r3
 c000596:	f000 fcd3 	bl	c000f40 <trivium_init>
 c00059a:	4603      	mov	r3, r0
 c00059c:	4a27      	ldr	r2, [pc, #156]	; (c00063c <__acle_se_key_stream+0xdc>)
 c00059e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c0005a0:	2300      	movs	r3, #0
 c0005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0005a4:	e00e      	b.n	c0005c4 <__acle_se_key_stream+0x64>
		keystream[i] = trivium_gen_keystream(ctx);
 c0005a6:	4b25      	ldr	r3, [pc, #148]	; (c00063c <__acle_se_key_stream+0xdc>)
 c0005a8:	681b      	ldr	r3, [r3, #0]
 c0005aa:	4618      	mov	r0, r3
 c0005ac:	f000 fd24 	bl	c000ff8 <trivium_gen_keystream>
 c0005b0:	4603      	mov	r3, r0
 c0005b2:	4619      	mov	r1, r3
 c0005b4:	4a22      	ldr	r2, [pc, #136]	; (c000640 <__acle_se_key_stream+0xe0>)
 c0005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0005b8:	4413      	add	r3, r2
 c0005ba:	460a      	mov	r2, r1
 c0005bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c0005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0005c0:	3301      	adds	r3, #1
 c0005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0005c6:	2b3f      	cmp	r3, #63	; 0x3f
 c0005c8:	dded      	ble.n	c0005a6 <__acle_se_key_stream+0x46>
	return;
 c0005ca:	bf00      	nop
}
 c0005cc:	3734      	adds	r7, #52	; 0x34
 c0005ce:	46bd      	mov	sp, r7
 c0005d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 c0005d4:	4670      	mov	r0, lr
 c0005d6:	4671      	mov	r1, lr
 c0005d8:	4672      	mov	r2, lr
 c0005da:	4673      	mov	r3, lr
 c0005dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0005e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0005e4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0005e8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0005ec:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0005f0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0005f4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0005f8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0005fc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000600:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000604:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000608:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00060c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00061c:	f38e 8c00 	msr	CPSR_fs, lr
 c000620:	b410      	push	{r4}
 c000622:	eef1 ca10 	vmrs	ip, fpscr
 c000626:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00062a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00062e:	ea0c 0c04 	and.w	ip, ip, r4
 c000632:	eee1 ca10 	vmsr	fpscr, ip
 c000636:	bc10      	pop	{r4}
 c000638:	46f4      	mov	ip, lr
 c00063a:	4774      	bxns	lr
 c00063c:	300000cc 	.word	0x300000cc
 c000640:	3000008c 	.word	0x3000008c

0c000644 <__acle_se_encrypt_decrypt>:

CMSE_NS_ENTRY void encrypt_decrypt(uint8_t* plain){
 c000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 c000646:	b095      	sub	sp, #84	; 0x54
 c000648:	af00      	add	r7, sp, #0
 c00064a:	6078      	str	r0, [r7, #4]
	uint8_t plain_temp[STRING_LENGTH];
	memcpy(plain_temp, plain, STRING_LENGTH);
 c00064c:	687b      	ldr	r3, [r7, #4]
 c00064e:	461c      	mov	r4, r3
 c000650:	f107 060c 	add.w	r6, r7, #12
 c000654:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c000658:	4635      	mov	r5, r6
 c00065a:	4623      	mov	r3, r4
 c00065c:	6818      	ldr	r0, [r3, #0]
 c00065e:	6859      	ldr	r1, [r3, #4]
 c000660:	689a      	ldr	r2, [r3, #8]
 c000662:	68db      	ldr	r3, [r3, #12]
 c000664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c000666:	3410      	adds	r4, #16
 c000668:	3610      	adds	r6, #16
 c00066a:	4564      	cmp	r4, ip
 c00066c:	d1f4      	bne.n	c000658 <__acle_se_encrypt_decrypt+0x14>
	for (int i = 0; i < STRING_LENGTH; i++)
 c00066e:	2300      	movs	r3, #0
 c000670:	64fb      	str	r3, [r7, #76]	; 0x4c
 c000672:	e013      	b.n	c00069c <__acle_se_encrypt_decrypt+0x58>
		plain_temp[i] ^= keystream[i];
 c000674:	f107 020c 	add.w	r2, r7, #12
 c000678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00067a:	4413      	add	r3, r2
 c00067c:	781a      	ldrb	r2, [r3, #0]
 c00067e:	492e      	ldr	r1, [pc, #184]	; (c000738 <__acle_se_encrypt_decrypt+0xf4>)
 c000680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c000682:	440b      	add	r3, r1
 c000684:	781b      	ldrb	r3, [r3, #0]
 c000686:	4053      	eors	r3, r2
 c000688:	b2d9      	uxtb	r1, r3
 c00068a:	f107 020c 	add.w	r2, r7, #12
 c00068e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c000690:	4413      	add	r3, r2
 c000692:	460a      	mov	r2, r1
 c000694:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c000696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c000698:	3301      	adds	r3, #1
 c00069a:	64fb      	str	r3, [r7, #76]	; 0x4c
 c00069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00069e:	2b3f      	cmp	r3, #63	; 0x3f
 c0006a0:	dde8      	ble.n	c000674 <__acle_se_encrypt_decrypt+0x30>
	memcpy(plain, plain_temp, STRING_LENGTH);
 c0006a2:	687b      	ldr	r3, [r7, #4]
 c0006a4:	f107 040c 	add.w	r4, r7, #12
 c0006a8:	469c      	mov	ip, r3
 c0006aa:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 c0006ae:	4665      	mov	r5, ip
 c0006b0:	4626      	mov	r6, r4
 c0006b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c0006b4:	6028      	str	r0, [r5, #0]
 c0006b6:	6069      	str	r1, [r5, #4]
 c0006b8:	60aa      	str	r2, [r5, #8]
 c0006ba:	60eb      	str	r3, [r5, #12]
 c0006bc:	3410      	adds	r4, #16
 c0006be:	f10c 0c10 	add.w	ip, ip, #16
 c0006c2:	4574      	cmp	r4, lr
 c0006c4:	d1f3      	bne.n	c0006ae <__acle_se_encrypt_decrypt+0x6a>
	return;
 c0006c6:	bf00      	nop
}
 c0006c8:	3754      	adds	r7, #84	; 0x54
 c0006ca:	46bd      	mov	sp, r7
 c0006cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 c0006d0:	4670      	mov	r0, lr
 c0006d2:	4671      	mov	r1, lr
 c0006d4:	4672      	mov	r2, lr
 c0006d6:	4673      	mov	r3, lr
 c0006d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0006dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0006e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0006e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0006e8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0006ec:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0006f0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0006f4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0006f8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0006fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000700:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000704:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000708:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00070c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000714:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000718:	f38e 8c00 	msr	CPSR_fs, lr
 c00071c:	b410      	push	{r4}
 c00071e:	eef1 ca10 	vmrs	ip, fpscr
 c000722:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000726:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00072a:	ea0c 0c04 	and.w	ip, ip, r4
 c00072e:	eee1 ca10 	vmsr	fpscr, ip
 c000732:	bc10      	pop	{r4}
 c000734:	46f4      	mov	ip, lr
 c000736:	4774      	bxns	lr
 c000738:	3000008c 	.word	0x3000008c

0c00073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c00073c:	b480      	push	{r7}
 c00073e:	b085      	sub	sp, #20
 c000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000742:	4b15      	ldr	r3, [pc, #84]	; (c000798 <HAL_MspInit+0x5c>)
 c000744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000746:	4a14      	ldr	r2, [pc, #80]	; (c000798 <HAL_MspInit+0x5c>)
 c000748:	f043 0301 	orr.w	r3, r3, #1
 c00074c:	6613      	str	r3, [r2, #96]	; 0x60
 c00074e:	4b12      	ldr	r3, [pc, #72]	; (c000798 <HAL_MspInit+0x5c>)
 c000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000752:	f003 0301 	and.w	r3, r3, #1
 c000756:	60fb      	str	r3, [r7, #12]
 c000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c00075a:	4b0f      	ldr	r3, [pc, #60]	; (c000798 <HAL_MspInit+0x5c>)
 c00075c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00075e:	4a0e      	ldr	r2, [pc, #56]	; (c000798 <HAL_MspInit+0x5c>)
 c000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000764:	6593      	str	r3, [r2, #88]	; 0x58
 c000766:	4b0c      	ldr	r3, [pc, #48]	; (c000798 <HAL_MspInit+0x5c>)
 c000768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00076e:	60bb      	str	r3, [r7, #8]
 c000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000772:	4b09      	ldr	r3, [pc, #36]	; (c000798 <HAL_MspInit+0x5c>)
 c000774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000776:	4a08      	ldr	r2, [pc, #32]	; (c000798 <HAL_MspInit+0x5c>)
 c000778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c00077c:	6493      	str	r3, [r2, #72]	; 0x48
 c00077e:	4b06      	ldr	r3, [pc, #24]	; (c000798 <HAL_MspInit+0x5c>)
 c000780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000786:	607b      	str	r3, [r7, #4]
 c000788:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c00078a:	bf00      	nop
 c00078c:	3714      	adds	r7, #20
 c00078e:	46bd      	mov	sp, r7
 c000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000794:	4770      	bx	lr
 c000796:	bf00      	nop
 c000798:	50021000 	.word	0x50021000

0c00079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c00079c:	b480      	push	{r7}
 c00079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0007a0:	e7fe      	b.n	c0007a0 <NMI_Handler+0x4>

0c0007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0007a2:	b480      	push	{r7}
 c0007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0007a6:	e7fe      	b.n	c0007a6 <HardFault_Handler+0x4>

0c0007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0007a8:	b480      	push	{r7}
 c0007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0007ac:	e7fe      	b.n	c0007ac <MemManage_Handler+0x4>

0c0007ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0007ae:	b480      	push	{r7}
 c0007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0007b2:	e7fe      	b.n	c0007b2 <BusFault_Handler+0x4>

0c0007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0007b4:	b480      	push	{r7}
 c0007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0007b8:	e7fe      	b.n	c0007b8 <UsageFault_Handler+0x4>

0c0007ba <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0007ba:	b480      	push	{r7}
 c0007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0007be:	e7fe      	b.n	c0007be <SecureFault_Handler+0x4>

0c0007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c0007c0:	b480      	push	{r7}
 c0007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0007c4:	bf00      	nop
 c0007c6:	46bd      	mov	sp, r7
 c0007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007cc:	4770      	bx	lr

0c0007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c0007ce:	b480      	push	{r7}
 c0007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c0007d2:	bf00      	nop
 c0007d4:	46bd      	mov	sp, r7
 c0007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007da:	4770      	bx	lr

0c0007dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c0007dc:	b480      	push	{r7}
 c0007de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c0007e0:	bf00      	nop
 c0007e2:	46bd      	mov	sp, r7
 c0007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007e8:	4770      	bx	lr

0c0007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c0007ea:	b580      	push	{r7, lr}
 c0007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0007ee:	f000 fca9 	bl	c001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0007f2:	bf00      	nop
 c0007f4:	bd80      	pop	{r7, pc}

0c0007f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c0007f6:	b580      	push	{r7, lr}
 c0007f8:	b086      	sub	sp, #24
 c0007fa:	af00      	add	r7, sp, #0
 c0007fc:	60f8      	str	r0, [r7, #12]
 c0007fe:	60b9      	str	r1, [r7, #8]
 c000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000802:	2300      	movs	r3, #0
 c000804:	617b      	str	r3, [r7, #20]
 c000806:	e00a      	b.n	c00081e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 c000808:	f3af 8000 	nop.w
 c00080c:	4601      	mov	r1, r0
 c00080e:	68bb      	ldr	r3, [r7, #8]
 c000810:	1c5a      	adds	r2, r3, #1
 c000812:	60ba      	str	r2, [r7, #8]
 c000814:	b2ca      	uxtb	r2, r1
 c000816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000818:	697b      	ldr	r3, [r7, #20]
 c00081a:	3301      	adds	r3, #1
 c00081c:	617b      	str	r3, [r7, #20]
 c00081e:	697a      	ldr	r2, [r7, #20]
 c000820:	687b      	ldr	r3, [r7, #4]
 c000822:	429a      	cmp	r2, r3
 c000824:	dbf0      	blt.n	c000808 <_read+0x12>
  }

  return len;
 c000826:	687b      	ldr	r3, [r7, #4]
}
 c000828:	4618      	mov	r0, r3
 c00082a:	3718      	adds	r7, #24
 c00082c:	46bd      	mov	sp, r7
 c00082e:	bd80      	pop	{r7, pc}

0c000830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c000830:	b580      	push	{r7, lr}
 c000832:	b086      	sub	sp, #24
 c000834:	af00      	add	r7, sp, #0
 c000836:	60f8      	str	r0, [r7, #12]
 c000838:	60b9      	str	r1, [r7, #8]
 c00083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00083c:	2300      	movs	r3, #0
 c00083e:	617b      	str	r3, [r7, #20]
 c000840:	e009      	b.n	c000856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 c000842:	68bb      	ldr	r3, [r7, #8]
 c000844:	1c5a      	adds	r2, r3, #1
 c000846:	60ba      	str	r2, [r7, #8]
 c000848:	781b      	ldrb	r3, [r3, #0]
 c00084a:	4618      	mov	r0, r3
 c00084c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000850:	697b      	ldr	r3, [r7, #20]
 c000852:	3301      	adds	r3, #1
 c000854:	617b      	str	r3, [r7, #20]
 c000856:	697a      	ldr	r2, [r7, #20]
 c000858:	687b      	ldr	r3, [r7, #4]
 c00085a:	429a      	cmp	r2, r3
 c00085c:	dbf1      	blt.n	c000842 <_write+0x12>
  }
  return len;
 c00085e:	687b      	ldr	r3, [r7, #4]
}
 c000860:	4618      	mov	r0, r3
 c000862:	3718      	adds	r7, #24
 c000864:	46bd      	mov	sp, r7
 c000866:	bd80      	pop	{r7, pc}

0c000868 <_close>:

int _close(int file)
{
 c000868:	b480      	push	{r7}
 c00086a:	b083      	sub	sp, #12
 c00086c:	af00      	add	r7, sp, #0
 c00086e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 c000870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c000874:	4618      	mov	r0, r3
 c000876:	370c      	adds	r7, #12
 c000878:	46bd      	mov	sp, r7
 c00087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00087e:	4770      	bx	lr

0c000880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c000880:	b480      	push	{r7}
 c000882:	b083      	sub	sp, #12
 c000884:	af00      	add	r7, sp, #0
 c000886:	6078      	str	r0, [r7, #4]
 c000888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 c00088a:	683b      	ldr	r3, [r7, #0]
 c00088c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c000890:	605a      	str	r2, [r3, #4]
  return 0;
 c000892:	2300      	movs	r3, #0
}
 c000894:	4618      	mov	r0, r3
 c000896:	370c      	adds	r7, #12
 c000898:	46bd      	mov	sp, r7
 c00089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00089e:	4770      	bx	lr

0c0008a0 <_isatty>:

int _isatty(int file)
{
 c0008a0:	b480      	push	{r7}
 c0008a2:	b083      	sub	sp, #12
 c0008a4:	af00      	add	r7, sp, #0
 c0008a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 c0008a8:	2301      	movs	r3, #1
}
 c0008aa:	4618      	mov	r0, r3
 c0008ac:	370c      	adds	r7, #12
 c0008ae:	46bd      	mov	sp, r7
 c0008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008b4:	4770      	bx	lr

0c0008b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c0008b6:	b480      	push	{r7}
 c0008b8:	b085      	sub	sp, #20
 c0008ba:	af00      	add	r7, sp, #0
 c0008bc:	60f8      	str	r0, [r7, #12]
 c0008be:	60b9      	str	r1, [r7, #8]
 c0008c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 c0008c2:	2300      	movs	r3, #0
}
 c0008c4:	4618      	mov	r0, r3
 c0008c6:	3714      	adds	r7, #20
 c0008c8:	46bd      	mov	sp, r7
 c0008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008ce:	4770      	bx	lr

0c0008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c0008d0:	b580      	push	{r7, lr}
 c0008d2:	b086      	sub	sp, #24
 c0008d4:	af00      	add	r7, sp, #0
 c0008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c0008d8:	4a14      	ldr	r2, [pc, #80]	; (c00092c <_sbrk+0x5c>)
 c0008da:	4b15      	ldr	r3, [pc, #84]	; (c000930 <_sbrk+0x60>)
 c0008dc:	1ad3      	subs	r3, r2, r3
 c0008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c0008e0:	697b      	ldr	r3, [r7, #20]
 c0008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c0008e4:	4b13      	ldr	r3, [pc, #76]	; (c000934 <_sbrk+0x64>)
 c0008e6:	681b      	ldr	r3, [r3, #0]
 c0008e8:	2b00      	cmp	r3, #0
 c0008ea:	d102      	bne.n	c0008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c0008ec:	4b11      	ldr	r3, [pc, #68]	; (c000934 <_sbrk+0x64>)
 c0008ee:	4a12      	ldr	r2, [pc, #72]	; (c000938 <_sbrk+0x68>)
 c0008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c0008f2:	4b10      	ldr	r3, [pc, #64]	; (c000934 <_sbrk+0x64>)
 c0008f4:	681a      	ldr	r2, [r3, #0]
 c0008f6:	687b      	ldr	r3, [r7, #4]
 c0008f8:	4413      	add	r3, r2
 c0008fa:	693a      	ldr	r2, [r7, #16]
 c0008fc:	429a      	cmp	r2, r3
 c0008fe:	d207      	bcs.n	c000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c000900:	f001 f956 	bl	c001bb0 <__errno>
 c000904:	4603      	mov	r3, r0
 c000906:	220c      	movs	r2, #12
 c000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c00090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00090e:	e009      	b.n	c000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c000910:	4b08      	ldr	r3, [pc, #32]	; (c000934 <_sbrk+0x64>)
 c000912:	681b      	ldr	r3, [r3, #0]
 c000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c000916:	4b07      	ldr	r3, [pc, #28]	; (c000934 <_sbrk+0x64>)
 c000918:	681a      	ldr	r2, [r3, #0]
 c00091a:	687b      	ldr	r3, [r7, #4]
 c00091c:	4413      	add	r3, r2
 c00091e:	4a05      	ldr	r2, [pc, #20]	; (c000934 <_sbrk+0x64>)
 c000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c000922:	68fb      	ldr	r3, [r7, #12]
}
 c000924:	4618      	mov	r0, r3
 c000926:	3718      	adds	r7, #24
 c000928:	46bd      	mov	sp, r7
 c00092a:	bd80      	pop	{r7, pc}
 c00092c:	30018000 	.word	0x30018000
 c000930:	00000400 	.word	0x00000400
 c000934:	300000d0 	.word	0x300000d0
 c000938:	30000228 	.word	0x30000228

0c00093c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c00093c:	b480      	push	{r7}
 c00093e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000940:	4b2f      	ldr	r3, [pc, #188]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000942:	2200      	movs	r2, #0
 c000944:	609a      	str	r2, [r3, #8]
 c000946:	4b2e      	ldr	r3, [pc, #184]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000948:	4a2e      	ldr	r2, [pc, #184]	; (c000a04 <TZ_SAU_Setup+0xc8>)
 c00094a:	60da      	str	r2, [r3, #12]
 c00094c:	4b2c      	ldr	r3, [pc, #176]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00094e:	4a2e      	ldr	r2, [pc, #184]	; (c000a08 <TZ_SAU_Setup+0xcc>)
 c000950:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000952:	4b2b      	ldr	r3, [pc, #172]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000954:	2201      	movs	r2, #1
 c000956:	609a      	str	r2, [r3, #8]
 c000958:	4b29      	ldr	r3, [pc, #164]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00095a:	4a2c      	ldr	r2, [pc, #176]	; (c000a0c <TZ_SAU_Setup+0xd0>)
 c00095c:	60da      	str	r2, [r3, #12]
 c00095e:	4b28      	ldr	r3, [pc, #160]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000960:	4a2b      	ldr	r2, [pc, #172]	; (c000a10 <TZ_SAU_Setup+0xd4>)
 c000962:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000964:	4b26      	ldr	r3, [pc, #152]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000966:	2202      	movs	r2, #2
 c000968:	609a      	str	r2, [r3, #8]
 c00096a:	4b25      	ldr	r3, [pc, #148]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00096c:	4a29      	ldr	r2, [pc, #164]	; (c000a14 <TZ_SAU_Setup+0xd8>)
 c00096e:	60da      	str	r2, [r3, #12]
 c000970:	4b23      	ldr	r3, [pc, #140]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000972:	4a29      	ldr	r2, [pc, #164]	; (c000a18 <TZ_SAU_Setup+0xdc>)
 c000974:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000976:	4b22      	ldr	r3, [pc, #136]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000978:	2203      	movs	r2, #3
 c00097a:	609a      	str	r2, [r3, #8]
 c00097c:	4b20      	ldr	r3, [pc, #128]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000982:	60da      	str	r2, [r3, #12]
 c000984:	4b1e      	ldr	r3, [pc, #120]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000986:	4a25      	ldr	r2, [pc, #148]	; (c000a1c <TZ_SAU_Setup+0xe0>)
 c000988:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00098a:	4b1d      	ldr	r3, [pc, #116]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00098c:	2204      	movs	r2, #4
 c00098e:	609a      	str	r2, [r3, #8]
 c000990:	4b1b      	ldr	r3, [pc, #108]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c000992:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c000996:	60da      	str	r2, [r3, #12]
 c000998:	4b19      	ldr	r3, [pc, #100]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c00099a:	4a21      	ldr	r2, [pc, #132]	; (c000a20 <TZ_SAU_Setup+0xe4>)
 c00099c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00099e:	4b18      	ldr	r3, [pc, #96]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c0009a0:	2205      	movs	r2, #5
 c0009a2:	609a      	str	r2, [r3, #8]
 c0009a4:	4b16      	ldr	r3, [pc, #88]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c0009a6:	4a1f      	ldr	r2, [pc, #124]	; (c000a24 <TZ_SAU_Setup+0xe8>)
 c0009a8:	60da      	str	r2, [r3, #12]
 c0009aa:	4b15      	ldr	r3, [pc, #84]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c0009ac:	4a1e      	ldr	r2, [pc, #120]	; (c000a28 <TZ_SAU_Setup+0xec>)
 c0009ae:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0009b0:	4b13      	ldr	r3, [pc, #76]	; (c000a00 <TZ_SAU_Setup+0xc4>)
 c0009b2:	2201      	movs	r2, #1
 c0009b4:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0009b6:	4b1d      	ldr	r3, [pc, #116]	; (c000a2c <TZ_SAU_Setup+0xf0>)
 c0009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0009bc:	4a1b      	ldr	r2, [pc, #108]	; (c000a2c <TZ_SAU_Setup+0xf0>)
 c0009be:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0009c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0009c6:	4b1a      	ldr	r3, [pc, #104]	; (c000a30 <TZ_SAU_Setup+0xf4>)
 c0009c8:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0009ca:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0009ce:	4a18      	ldr	r2, [pc, #96]	; (c000a30 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0009d4:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0009d6:	4b17      	ldr	r3, [pc, #92]	; (c000a34 <TZ_SAU_Setup+0xf8>)
 c0009d8:	2200      	movs	r2, #0
 c0009da:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0009de:	4b15      	ldr	r3, [pc, #84]	; (c000a34 <TZ_SAU_Setup+0xf8>)
 c0009e0:	2200      	movs	r2, #0
 c0009e2:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0009e6:	4b13      	ldr	r3, [pc, #76]	; (c000a34 <TZ_SAU_Setup+0xf8>)
 c0009e8:	2200      	movs	r2, #0
 c0009ea:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0009ee:	4b11      	ldr	r3, [pc, #68]	; (c000a34 <TZ_SAU_Setup+0xf8>)
 c0009f0:	2200      	movs	r2, #0
 c0009f2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c0009f6:	bf00      	nop
 c0009f8:	46bd      	mov	sp, r7
 c0009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009fe:	4770      	bx	lr
 c000a00:	e000edd0 	.word	0xe000edd0
 c000a04:	0c03e000 	.word	0x0c03e000
 c000a08:	0c03ffe3 	.word	0x0c03ffe3
 c000a0c:	08040000 	.word	0x08040000
 c000a10:	0807ffe1 	.word	0x0807ffe1
 c000a14:	20018000 	.word	0x20018000
 c000a18:	2003ffe1 	.word	0x2003ffe1
 c000a1c:	4fffffe1 	.word	0x4fffffe1
 c000a20:	9fffffe1 	.word	0x9fffffe1
 c000a24:	0bf90000 	.word	0x0bf90000
 c000a28:	0bfa8fe1 	.word	0x0bfa8fe1
 c000a2c:	e000ed00 	.word	0xe000ed00
 c000a30:	e000ef30 	.word	0xe000ef30
 c000a34:	e000e100 	.word	0xe000e100

0c000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000a38:	b580      	push	{r7, lr}
 c000a3a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000a3c:	f7ff ff7e 	bl	c00093c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000a40:	4b08      	ldr	r3, [pc, #32]	; (c000a64 <SystemInit+0x2c>)
 c000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000a46:	4a07      	ldr	r2, [pc, #28]	; (c000a64 <SystemInit+0x2c>)
 c000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000a50:	4b05      	ldr	r3, [pc, #20]	; (c000a68 <SystemInit+0x30>)
 c000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000a56:	4a04      	ldr	r2, [pc, #16]	; (c000a68 <SystemInit+0x30>)
 c000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000a60:	bf00      	nop
 c000a62:	bd80      	pop	{r7, pc}
 c000a64:	e000ed00 	.word	0xe000ed00
 c000a68:	e002ed00 	.word	0xe002ed00

0c000a6c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000a6c:	b480      	push	{r7}
 c000a6e:	b087      	sub	sp, #28
 c000a70:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000a72:	4b4f      	ldr	r3, [pc, #316]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000a74:	681b      	ldr	r3, [r3, #0]
 c000a76:	f003 0308 	and.w	r3, r3, #8
 c000a7a:	2b00      	cmp	r3, #0
 c000a7c:	d107      	bne.n	c000a8e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000a7e:	4b4c      	ldr	r3, [pc, #304]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000a84:	0a1b      	lsrs	r3, r3, #8
 c000a86:	f003 030f 	and.w	r3, r3, #15
 c000a8a:	617b      	str	r3, [r7, #20]
 c000a8c:	e005      	b.n	c000a9a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000a8e:	4b48      	ldr	r3, [pc, #288]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000a90:	681b      	ldr	r3, [r3, #0]
 c000a92:	091b      	lsrs	r3, r3, #4
 c000a94:	f003 030f 	and.w	r3, r3, #15
 c000a98:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000a9a:	4a46      	ldr	r2, [pc, #280]	; (c000bb4 <SystemCoreClockUpdate+0x148>)
 c000a9c:	697b      	ldr	r3, [r7, #20]
 c000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000aa2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000aa4:	4b42      	ldr	r3, [pc, #264]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000aa6:	689b      	ldr	r3, [r3, #8]
 c000aa8:	f003 030c 	and.w	r3, r3, #12
 c000aac:	2b0c      	cmp	r3, #12
 c000aae:	d866      	bhi.n	c000b7e <SystemCoreClockUpdate+0x112>
 c000ab0:	a201      	add	r2, pc, #4	; (adr r2, c000ab8 <SystemCoreClockUpdate+0x4c>)
 c000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000ab6:	bf00      	nop
 c000ab8:	0c000aed 	.word	0x0c000aed
 c000abc:	0c000b7f 	.word	0x0c000b7f
 c000ac0:	0c000b7f 	.word	0x0c000b7f
 c000ac4:	0c000b7f 	.word	0x0c000b7f
 c000ac8:	0c000af5 	.word	0x0c000af5
 c000acc:	0c000b7f 	.word	0x0c000b7f
 c000ad0:	0c000b7f 	.word	0x0c000b7f
 c000ad4:	0c000b7f 	.word	0x0c000b7f
 c000ad8:	0c000afd 	.word	0x0c000afd
 c000adc:	0c000b7f 	.word	0x0c000b7f
 c000ae0:	0c000b7f 	.word	0x0c000b7f
 c000ae4:	0c000b7f 	.word	0x0c000b7f
 c000ae8:	0c000b05 	.word	0x0c000b05
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000aec:	4a32      	ldr	r2, [pc, #200]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000aee:	697b      	ldr	r3, [r7, #20]
 c000af0:	6013      	str	r3, [r2, #0]
      break;
 c000af2:	e048      	b.n	c000b86 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000af4:	4b30      	ldr	r3, [pc, #192]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000af6:	4a31      	ldr	r2, [pc, #196]	; (c000bbc <SystemCoreClockUpdate+0x150>)
 c000af8:	601a      	str	r2, [r3, #0]
      break;
 c000afa:	e044      	b.n	c000b86 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000afc:	4b2e      	ldr	r3, [pc, #184]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000afe:	4a2f      	ldr	r2, [pc, #188]	; (c000bbc <SystemCoreClockUpdate+0x150>)
 c000b00:	601a      	str	r2, [r3, #0]
      break;
 c000b02:	e040      	b.n	c000b86 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000b04:	4b2a      	ldr	r3, [pc, #168]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000b06:	68db      	ldr	r3, [r3, #12]
 c000b08:	f003 0303 	and.w	r3, r3, #3
 c000b0c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000b0e:	4b28      	ldr	r3, [pc, #160]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000b10:	68db      	ldr	r3, [r3, #12]
 c000b12:	091b      	lsrs	r3, r3, #4
 c000b14:	f003 030f 	and.w	r3, r3, #15
 c000b18:	3301      	adds	r3, #1
 c000b1a:	60bb      	str	r3, [r7, #8]
 c000b1c:	68fb      	ldr	r3, [r7, #12]
 c000b1e:	2b02      	cmp	r3, #2
 c000b20:	d003      	beq.n	c000b2a <SystemCoreClockUpdate+0xbe>
 c000b22:	68fb      	ldr	r3, [r7, #12]
 c000b24:	2b03      	cmp	r3, #3
 c000b26:	d006      	beq.n	c000b36 <SystemCoreClockUpdate+0xca>
 c000b28:	e00b      	b.n	c000b42 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000b2a:	4a24      	ldr	r2, [pc, #144]	; (c000bbc <SystemCoreClockUpdate+0x150>)
 c000b2c:	68bb      	ldr	r3, [r7, #8]
 c000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b32:	613b      	str	r3, [r7, #16]
          break;
 c000b34:	e00b      	b.n	c000b4e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000b36:	4a21      	ldr	r2, [pc, #132]	; (c000bbc <SystemCoreClockUpdate+0x150>)
 c000b38:	68bb      	ldr	r3, [r7, #8]
 c000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b3e:	613b      	str	r3, [r7, #16]
          break;
 c000b40:	e005      	b.n	c000b4e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000b42:	697a      	ldr	r2, [r7, #20]
 c000b44:	68bb      	ldr	r3, [r7, #8]
 c000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b4a:	613b      	str	r3, [r7, #16]
          break;
 c000b4c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000b4e:	4b18      	ldr	r3, [pc, #96]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000b50:	68db      	ldr	r3, [r3, #12]
 c000b52:	0a1b      	lsrs	r3, r3, #8
 c000b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000b58:	693b      	ldr	r3, [r7, #16]
 c000b5a:	fb02 f303 	mul.w	r3, r2, r3
 c000b5e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000b60:	4b13      	ldr	r3, [pc, #76]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000b62:	68db      	ldr	r3, [r3, #12]
 c000b64:	0e5b      	lsrs	r3, r3, #25
 c000b66:	f003 0303 	and.w	r3, r3, #3
 c000b6a:	3301      	adds	r3, #1
 c000b6c:	005b      	lsls	r3, r3, #1
 c000b6e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000b70:	693a      	ldr	r2, [r7, #16]
 c000b72:	687b      	ldr	r3, [r7, #4]
 c000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b78:	4a0f      	ldr	r2, [pc, #60]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000b7a:	6013      	str	r3, [r2, #0]
      break;
 c000b7c:	e003      	b.n	c000b86 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000b7e:	4a0e      	ldr	r2, [pc, #56]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000b80:	697b      	ldr	r3, [r7, #20]
 c000b82:	6013      	str	r3, [r2, #0]
      break;
 c000b84:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000b86:	4b0a      	ldr	r3, [pc, #40]	; (c000bb0 <SystemCoreClockUpdate+0x144>)
 c000b88:	689b      	ldr	r3, [r3, #8]
 c000b8a:	091b      	lsrs	r3, r3, #4
 c000b8c:	f003 030f 	and.w	r3, r3, #15
 c000b90:	4a0b      	ldr	r2, [pc, #44]	; (c000bc0 <SystemCoreClockUpdate+0x154>)
 c000b92:	5cd3      	ldrb	r3, [r2, r3]
 c000b94:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000b96:	4b08      	ldr	r3, [pc, #32]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000b98:	681a      	ldr	r2, [r3, #0]
 c000b9a:	683b      	ldr	r3, [r7, #0]
 c000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 c000ba0:	4a05      	ldr	r2, [pc, #20]	; (c000bb8 <SystemCoreClockUpdate+0x14c>)
 c000ba2:	6013      	str	r3, [r2, #0]
}
 c000ba4:	bf00      	nop
 c000ba6:	371c      	adds	r7, #28
 c000ba8:	46bd      	mov	sp, r7
 c000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000bae:	4770      	bx	lr
 c000bb0:	50021000 	.word	0x50021000
 c000bb4:	0c00218c 	.word	0x0c00218c
 c000bb8:	30000000 	.word	0x30000000
 c000bbc:	00f42400 	.word	0x00f42400
 c000bc0:	0c00217c 	.word	0x0c00217c

0c000bc4 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000bc4:	b580      	push	{r7, lr}
 c000bc6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000bc8:	f7ff ff50 	bl	c000a6c <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000bcc:	4b1c      	ldr	r3, [pc, #112]	; (c000c40 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000bce:	681b      	ldr	r3, [r3, #0]
}
 c000bd0:	4618      	mov	r0, r3
 c000bd2:	46bd      	mov	sp, r7
 c000bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000bd8:	4671      	mov	r1, lr
 c000bda:	4672      	mov	r2, lr
 c000bdc:	4673      	mov	r3, lr
 c000bde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000be2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000be6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000bea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000bee:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000bf2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000bf6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000bfa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000bfe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000c02:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000c06:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000c0a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000c0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000c1e:	f38e 8c00 	msr	CPSR_fs, lr
 c000c22:	b410      	push	{r4}
 c000c24:	eef1 ca10 	vmrs	ip, fpscr
 c000c28:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000c2c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000c30:	ea0c 0c04 	and.w	ip, ip, r4
 c000c34:	eee1 ca10 	vmsr	fpscr, ip
 c000c38:	bc10      	pop	{r4}
 c000c3a:	46f4      	mov	ip, lr
 c000c3c:	4774      	bxns	lr
 c000c3e:	bf00      	nop
 c000c40:	30000000 	.word	0x30000000

0c000c44 <trivium_nbit>:
#include "trivium.h"

static uint8_t trivium_nbit(uint8_t *arr, uint16_t n)
{
 c000c44:	b480      	push	{r7}
 c000c46:	b085      	sub	sp, #20
 c000c48:	af00      	add	r7, sp, #0
 c000c4a:	6078      	str	r0, [r7, #4]
 c000c4c:	460b      	mov	r3, r1
 c000c4e:	807b      	strh	r3, [r7, #2]
    uint8_t nbyte = (n - 1) / 8;
 c000c50:	887b      	ldrh	r3, [r7, #2]
 c000c52:	3b01      	subs	r3, #1
 c000c54:	2b00      	cmp	r3, #0
 c000c56:	da00      	bge.n	c000c5a <trivium_nbit+0x16>
 c000c58:	3307      	adds	r3, #7
 c000c5a:	10db      	asrs	r3, r3, #3
 c000c5c:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 c000c5e:	887b      	ldrh	r3, [r7, #2]
 c000c60:	3b01      	subs	r3, #1
 c000c62:	425a      	negs	r2, r3
 c000c64:	f003 0307 	and.w	r3, r3, #7
 c000c68:	f002 0207 	and.w	r2, r2, #7
 c000c6c:	bf58      	it	pl
 c000c6e:	4253      	negpl	r3, r2
 c000c70:	b2db      	uxtb	r3, r3
 c000c72:	3301      	adds	r3, #1
 c000c74:	73bb      	strb	r3, [r7, #14]
    return (arr[nbyte] & (1 << (8 - trivium_nbit))) >> (8 - trivium_nbit);
 c000c76:	7bfb      	ldrb	r3, [r7, #15]
 c000c78:	687a      	ldr	r2, [r7, #4]
 c000c7a:	4413      	add	r3, r2
 c000c7c:	781b      	ldrb	r3, [r3, #0]
 c000c7e:	4619      	mov	r1, r3
 c000c80:	7bbb      	ldrb	r3, [r7, #14]
 c000c82:	f1c3 0308 	rsb	r3, r3, #8
 c000c86:	2201      	movs	r2, #1
 c000c88:	fa02 f303 	lsl.w	r3, r2, r3
 c000c8c:	ea01 0203 	and.w	r2, r1, r3
 c000c90:	7bbb      	ldrb	r3, [r7, #14]
 c000c92:	f1c3 0308 	rsb	r3, r3, #8
 c000c96:	fa42 f303 	asr.w	r3, r2, r3
 c000c9a:	b2db      	uxtb	r3, r3
}
 c000c9c:	4618      	mov	r0, r3
 c000c9e:	3714      	adds	r7, #20
 c000ca0:	46bd      	mov	sp, r7
 c000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ca6:	4770      	bx	lr

0c000ca8 <trivium_change_bit>:

static void trivium_change_bit(uint8_t *arr, uint16_t n, uint8_t value)
{
 c000ca8:	b480      	push	{r7}
 c000caa:	b085      	sub	sp, #20
 c000cac:	af00      	add	r7, sp, #0
 c000cae:	6078      	str	r0, [r7, #4]
 c000cb0:	460b      	mov	r3, r1
 c000cb2:	807b      	strh	r3, [r7, #2]
 c000cb4:	4613      	mov	r3, r2
 c000cb6:	707b      	strb	r3, [r7, #1]
    uint8_t nbyte = (n - 1) / 8;
 c000cb8:	887b      	ldrh	r3, [r7, #2]
 c000cba:	3b01      	subs	r3, #1
 c000cbc:	2b00      	cmp	r3, #0
 c000cbe:	da00      	bge.n	c000cc2 <trivium_change_bit+0x1a>
 c000cc0:	3307      	adds	r3, #7
 c000cc2:	10db      	asrs	r3, r3, #3
 c000cc4:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 c000cc6:	887b      	ldrh	r3, [r7, #2]
 c000cc8:	3b01      	subs	r3, #1
 c000cca:	425a      	negs	r2, r3
 c000ccc:	f003 0307 	and.w	r3, r3, #7
 c000cd0:	f002 0207 	and.w	r2, r2, #7
 c000cd4:	bf58      	it	pl
 c000cd6:	4253      	negpl	r3, r2
 c000cd8:	b2db      	uxtb	r3, r3
 c000cda:	3301      	adds	r3, #1
 c000cdc:	73bb      	strb	r3, [r7, #14]

    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000cde:	7bbb      	ldrb	r3, [r7, #14]
 c000ce0:	f1c3 0309 	rsb	r3, r3, #9
 c000ce4:	22ff      	movs	r2, #255	; 0xff
 c000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 c000cea:	b25a      	sxtb	r2, r3
 c000cec:	7bfb      	ldrb	r3, [r7, #15]
 c000cee:	6879      	ldr	r1, [r7, #4]
 c000cf0:	440b      	add	r3, r1
 c000cf2:	781b      	ldrb	r3, [r3, #0]
 c000cf4:	b25b      	sxtb	r3, r3
 c000cf6:	4013      	ands	r3, r2
 c000cf8:	b25a      	sxtb	r2, r3
                (value << (8 - trivium_nbit)) |
 c000cfa:	7879      	ldrb	r1, [r7, #1]
 c000cfc:	7bbb      	ldrb	r3, [r7, #14]
 c000cfe:	f1c3 0308 	rsb	r3, r3, #8
 c000d02:	fa01 f303 	lsl.w	r3, r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d06:	b25b      	sxtb	r3, r3
 c000d08:	4313      	orrs	r3, r2
 c000d0a:	b25a      	sxtb	r2, r3
                ((255 >> trivium_nbit) & arr[nbyte]);
 c000d0c:	7bbb      	ldrb	r3, [r7, #14]
 c000d0e:	21ff      	movs	r1, #255	; 0xff
 c000d10:	fa41 f303 	asr.w	r3, r1, r3
 c000d14:	b259      	sxtb	r1, r3
 c000d16:	7bfb      	ldrb	r3, [r7, #15]
 c000d18:	6878      	ldr	r0, [r7, #4]
 c000d1a:	4403      	add	r3, r0
 c000d1c:	781b      	ldrb	r3, [r3, #0]
 c000d1e:	b25b      	sxtb	r3, r3
 c000d20:	400b      	ands	r3, r1
 c000d22:	b25b      	sxtb	r3, r3
                (value << (8 - trivium_nbit)) |
 c000d24:	4313      	orrs	r3, r2
 c000d26:	b259      	sxtb	r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d28:	7bfb      	ldrb	r3, [r7, #15]
 c000d2a:	687a      	ldr	r2, [r7, #4]
 c000d2c:	4413      	add	r3, r2
                (value << (8 - trivium_nbit)) |
 c000d2e:	b2ca      	uxtb	r2, r1
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d30:	701a      	strb	r2, [r3, #0]
}
 c000d32:	bf00      	nop
 c000d34:	3714      	adds	r7, #20
 c000d36:	46bd      	mov	sp, r7
 c000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d3c:	4770      	bx	lr

0c000d3e <trivium_insert_bits>:

static void trivium_insert_bits(uint8_t *arr, uint16_t n, uint8_t *source, uint16_t ssize)
{
 c000d3e:	b590      	push	{r4, r7, lr}
 c000d40:	b087      	sub	sp, #28
 c000d42:	af00      	add	r7, sp, #0
 c000d44:	60f8      	str	r0, [r7, #12]
 c000d46:	607a      	str	r2, [r7, #4]
 c000d48:	461a      	mov	r2, r3
 c000d4a:	460b      	mov	r3, r1
 c000d4c:	817b      	strh	r3, [r7, #10]
 c000d4e:	4613      	mov	r3, r2
 c000d50:	813b      	strh	r3, [r7, #8]
    uint16_t i;
    for(i = 0; i < ssize; i++)
 c000d52:	2300      	movs	r3, #0
 c000d54:	82fb      	strh	r3, [r7, #22]
 c000d56:	e013      	b.n	c000d80 <trivium_insert_bits+0x42>
    {
        trivium_change_bit(arr, n + i, trivium_nbit(source, i + 1));
 c000d58:	897a      	ldrh	r2, [r7, #10]
 c000d5a:	8afb      	ldrh	r3, [r7, #22]
 c000d5c:	4413      	add	r3, r2
 c000d5e:	b29c      	uxth	r4, r3
 c000d60:	8afb      	ldrh	r3, [r7, #22]
 c000d62:	3301      	adds	r3, #1
 c000d64:	b29b      	uxth	r3, r3
 c000d66:	4619      	mov	r1, r3
 c000d68:	6878      	ldr	r0, [r7, #4]
 c000d6a:	f7ff ff6b 	bl	c000c44 <trivium_nbit>
 c000d6e:	4603      	mov	r3, r0
 c000d70:	461a      	mov	r2, r3
 c000d72:	4621      	mov	r1, r4
 c000d74:	68f8      	ldr	r0, [r7, #12]
 c000d76:	f7ff ff97 	bl	c000ca8 <trivium_change_bit>
    for(i = 0; i < ssize; i++)
 c000d7a:	8afb      	ldrh	r3, [r7, #22]
 c000d7c:	3301      	adds	r3, #1
 c000d7e:	82fb      	strh	r3, [r7, #22]
 c000d80:	8afa      	ldrh	r2, [r7, #22]
 c000d82:	893b      	ldrh	r3, [r7, #8]
 c000d84:	429a      	cmp	r2, r3
 c000d86:	d3e7      	bcc.n	c000d58 <trivium_insert_bits+0x1a>
    }
}
 c000d88:	bf00      	nop
 c000d8a:	bf00      	nop
 c000d8c:	371c      	adds	r7, #28
 c000d8e:	46bd      	mov	sp, r7
 c000d90:	bd90      	pop	{r4, r7, pc}

0c000d92 <trivium_rotate>:

static uint8_t trivium_rotate(uint8_t *arr, uint8_t arr_size)
{
 c000d92:	b590      	push	{r4, r7, lr}
 c000d94:	b087      	sub	sp, #28
 c000d96:	af00      	add	r7, sp, #0
 c000d98:	6078      	str	r0, [r7, #4]
 c000d9a:	460b      	mov	r3, r1
 c000d9c:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    uint8_t t1 = trivium_nbit(arr, 66) ^ trivium_nbit(arr, 93);
 c000d9e:	2142      	movs	r1, #66	; 0x42
 c000da0:	6878      	ldr	r0, [r7, #4]
 c000da2:	f7ff ff4f 	bl	c000c44 <trivium_nbit>
 c000da6:	4603      	mov	r3, r0
 c000da8:	461c      	mov	r4, r3
 c000daa:	215d      	movs	r1, #93	; 0x5d
 c000dac:	6878      	ldr	r0, [r7, #4]
 c000dae:	f7ff ff49 	bl	c000c44 <trivium_nbit>
 c000db2:	4603      	mov	r3, r0
 c000db4:	4063      	eors	r3, r4
 c000db6:	75bb      	strb	r3, [r7, #22]
    uint8_t t2 = trivium_nbit(arr, 162) ^ trivium_nbit(arr, 177);
 c000db8:	21a2      	movs	r1, #162	; 0xa2
 c000dba:	6878      	ldr	r0, [r7, #4]
 c000dbc:	f7ff ff42 	bl	c000c44 <trivium_nbit>
 c000dc0:	4603      	mov	r3, r0
 c000dc2:	461c      	mov	r4, r3
 c000dc4:	21b1      	movs	r1, #177	; 0xb1
 c000dc6:	6878      	ldr	r0, [r7, #4]
 c000dc8:	f7ff ff3c 	bl	c000c44 <trivium_nbit>
 c000dcc:	4603      	mov	r3, r0
 c000dce:	4063      	eors	r3, r4
 c000dd0:	757b      	strb	r3, [r7, #21]
    uint8_t t3 = trivium_nbit(arr, 243) ^ trivium_nbit(arr, 288);
 c000dd2:	21f3      	movs	r1, #243	; 0xf3
 c000dd4:	6878      	ldr	r0, [r7, #4]
 c000dd6:	f7ff ff35 	bl	c000c44 <trivium_nbit>
 c000dda:	4603      	mov	r3, r0
 c000ddc:	461c      	mov	r4, r3
 c000dde:	f44f 7190 	mov.w	r1, #288	; 0x120
 c000de2:	6878      	ldr	r0, [r7, #4]
 c000de4:	f7ff ff2e 	bl	c000c44 <trivium_nbit>
 c000de8:	4603      	mov	r3, r0
 c000dea:	4063      	eors	r3, r4
 c000dec:	753b      	strb	r3, [r7, #20]

    uint8_t out = t1 ^ t2 ^ t3;
 c000dee:	7dba      	ldrb	r2, [r7, #22]
 c000df0:	7d7b      	ldrb	r3, [r7, #21]
 c000df2:	4053      	eors	r3, r2
 c000df4:	b2da      	uxtb	r2, r3
 c000df6:	7d3b      	ldrb	r3, [r7, #20]
 c000df8:	4053      	eors	r3, r2
 c000dfa:	74fb      	strb	r3, [r7, #19]

    uint8_t a1 = trivium_nbit(arr, 91) & trivium_nbit(arr, 92);
 c000dfc:	215b      	movs	r1, #91	; 0x5b
 c000dfe:	6878      	ldr	r0, [r7, #4]
 c000e00:	f7ff ff20 	bl	c000c44 <trivium_nbit>
 c000e04:	4603      	mov	r3, r0
 c000e06:	461c      	mov	r4, r3
 c000e08:	215c      	movs	r1, #92	; 0x5c
 c000e0a:	6878      	ldr	r0, [r7, #4]
 c000e0c:	f7ff ff1a 	bl	c000c44 <trivium_nbit>
 c000e10:	4603      	mov	r3, r0
 c000e12:	4023      	ands	r3, r4
 c000e14:	74bb      	strb	r3, [r7, #18]
    uint8_t a2 = trivium_nbit(arr, 175) & trivium_nbit(arr, 176);
 c000e16:	21af      	movs	r1, #175	; 0xaf
 c000e18:	6878      	ldr	r0, [r7, #4]
 c000e1a:	f7ff ff13 	bl	c000c44 <trivium_nbit>
 c000e1e:	4603      	mov	r3, r0
 c000e20:	461c      	mov	r4, r3
 c000e22:	21b0      	movs	r1, #176	; 0xb0
 c000e24:	6878      	ldr	r0, [r7, #4]
 c000e26:	f7ff ff0d 	bl	c000c44 <trivium_nbit>
 c000e2a:	4603      	mov	r3, r0
 c000e2c:	4023      	ands	r3, r4
 c000e2e:	747b      	strb	r3, [r7, #17]
    uint8_t a3 = trivium_nbit(arr, 286) & trivium_nbit(arr, 287);
 c000e30:	f44f 718f 	mov.w	r1, #286	; 0x11e
 c000e34:	6878      	ldr	r0, [r7, #4]
 c000e36:	f7ff ff05 	bl	c000c44 <trivium_nbit>
 c000e3a:	4603      	mov	r3, r0
 c000e3c:	461c      	mov	r4, r3
 c000e3e:	f240 111f 	movw	r1, #287	; 0x11f
 c000e42:	6878      	ldr	r0, [r7, #4]
 c000e44:	f7ff fefe 	bl	c000c44 <trivium_nbit>
 c000e48:	4603      	mov	r3, r0
 c000e4a:	4023      	ands	r3, r4
 c000e4c:	743b      	strb	r3, [r7, #16]

    uint8_t s1 = a1 ^ trivium_nbit(arr, 171) ^ t1;
 c000e4e:	21ab      	movs	r1, #171	; 0xab
 c000e50:	6878      	ldr	r0, [r7, #4]
 c000e52:	f7ff fef7 	bl	c000c44 <trivium_nbit>
 c000e56:	4603      	mov	r3, r0
 c000e58:	461a      	mov	r2, r3
 c000e5a:	7cbb      	ldrb	r3, [r7, #18]
 c000e5c:	4053      	eors	r3, r2
 c000e5e:	b2da      	uxtb	r2, r3
 c000e60:	7dbb      	ldrb	r3, [r7, #22]
 c000e62:	4053      	eors	r3, r2
 c000e64:	73fb      	strb	r3, [r7, #15]
    uint8_t s2 = a2 ^ trivium_nbit(arr, 264) ^ t2;
 c000e66:	f44f 7184 	mov.w	r1, #264	; 0x108
 c000e6a:	6878      	ldr	r0, [r7, #4]
 c000e6c:	f7ff feea 	bl	c000c44 <trivium_nbit>
 c000e70:	4603      	mov	r3, r0
 c000e72:	461a      	mov	r2, r3
 c000e74:	7c7b      	ldrb	r3, [r7, #17]
 c000e76:	4053      	eors	r3, r2
 c000e78:	b2da      	uxtb	r2, r3
 c000e7a:	7d7b      	ldrb	r3, [r7, #21]
 c000e7c:	4053      	eors	r3, r2
 c000e7e:	73bb      	strb	r3, [r7, #14]
    uint8_t s3 = a3 ^ trivium_nbit(arr, 69) ^ t3;
 c000e80:	2145      	movs	r1, #69	; 0x45
 c000e82:	6878      	ldr	r0, [r7, #4]
 c000e84:	f7ff fede 	bl	c000c44 <trivium_nbit>
 c000e88:	4603      	mov	r3, r0
 c000e8a:	461a      	mov	r2, r3
 c000e8c:	7c3b      	ldrb	r3, [r7, #16]
 c000e8e:	4053      	eors	r3, r2
 c000e90:	b2da      	uxtb	r2, r3
 c000e92:	7d3b      	ldrb	r3, [r7, #20]
 c000e94:	4053      	eors	r3, r2
 c000e96:	737b      	strb	r3, [r7, #13]

    /* Begin trivium_rotate */

    for(i = arr_size - 1; i > 0; i--)
 c000e98:	78fb      	ldrb	r3, [r7, #3]
 c000e9a:	3b01      	subs	r3, #1
 c000e9c:	75fb      	strb	r3, [r7, #23]
 c000e9e:	e017      	b.n	c000ed0 <trivium_rotate+0x13e>
    {
        arr[i] = (arr[i - 1] << 7) | (arr[i] >> 1);
 c000ea0:	7dfb      	ldrb	r3, [r7, #23]
 c000ea2:	3b01      	subs	r3, #1
 c000ea4:	687a      	ldr	r2, [r7, #4]
 c000ea6:	4413      	add	r3, r2
 c000ea8:	781b      	ldrb	r3, [r3, #0]
 c000eaa:	01db      	lsls	r3, r3, #7
 c000eac:	b25a      	sxtb	r2, r3
 c000eae:	7dfb      	ldrb	r3, [r7, #23]
 c000eb0:	6879      	ldr	r1, [r7, #4]
 c000eb2:	440b      	add	r3, r1
 c000eb4:	781b      	ldrb	r3, [r3, #0]
 c000eb6:	085b      	lsrs	r3, r3, #1
 c000eb8:	b2db      	uxtb	r3, r3
 c000eba:	b25b      	sxtb	r3, r3
 c000ebc:	4313      	orrs	r3, r2
 c000ebe:	b259      	sxtb	r1, r3
 c000ec0:	7dfb      	ldrb	r3, [r7, #23]
 c000ec2:	687a      	ldr	r2, [r7, #4]
 c000ec4:	4413      	add	r3, r2
 c000ec6:	b2ca      	uxtb	r2, r1
 c000ec8:	701a      	strb	r2, [r3, #0]
    for(i = arr_size - 1; i > 0; i--)
 c000eca:	7dfb      	ldrb	r3, [r7, #23]
 c000ecc:	3b01      	subs	r3, #1
 c000ece:	75fb      	strb	r3, [r7, #23]
 c000ed0:	7dfb      	ldrb	r3, [r7, #23]
 c000ed2:	2b00      	cmp	r3, #0
 c000ed4:	d1e4      	bne.n	c000ea0 <trivium_rotate+0x10e>
    }
    arr[0] = arr[0] >> 1;
 c000ed6:	687b      	ldr	r3, [r7, #4]
 c000ed8:	781b      	ldrb	r3, [r3, #0]
 c000eda:	085b      	lsrs	r3, r3, #1
 c000edc:	b2da      	uxtb	r2, r3
 c000ede:	687b      	ldr	r3, [r7, #4]
 c000ee0:	701a      	strb	r2, [r3, #0]

    /* End trivium_rotate */

    trivium_change_bit(arr, 1, s3);
 c000ee2:	7b7b      	ldrb	r3, [r7, #13]
 c000ee4:	461a      	mov	r2, r3
 c000ee6:	2101      	movs	r1, #1
 c000ee8:	6878      	ldr	r0, [r7, #4]
 c000eea:	f7ff fedd 	bl	c000ca8 <trivium_change_bit>
    trivium_change_bit(arr, 94, s1);
 c000eee:	7bfb      	ldrb	r3, [r7, #15]
 c000ef0:	461a      	mov	r2, r3
 c000ef2:	215e      	movs	r1, #94	; 0x5e
 c000ef4:	6878      	ldr	r0, [r7, #4]
 c000ef6:	f7ff fed7 	bl	c000ca8 <trivium_change_bit>
    trivium_change_bit(arr, 178, s2);
 c000efa:	7bbb      	ldrb	r3, [r7, #14]
 c000efc:	461a      	mov	r2, r3
 c000efe:	21b2      	movs	r1, #178	; 0xb2
 c000f00:	6878      	ldr	r0, [r7, #4]
 c000f02:	f7ff fed1 	bl	c000ca8 <trivium_change_bit>

    return out;
 c000f06:	7cfb      	ldrb	r3, [r7, #19]
}
 c000f08:	4618      	mov	r0, r3
 c000f0a:	371c      	adds	r7, #28
 c000f0c:	46bd      	mov	sp, r7
 c000f0e:	bd90      	pop	{r4, r7, pc}

0c000f10 <trivium_init_state>:

static void trivium_init_state(uint8_t *arr)
{
 c000f10:	b580      	push	{r7, lr}
 c000f12:	b084      	sub	sp, #16
 c000f14:	af00      	add	r7, sp, #0
 c000f16:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = 0; i < 4*288; i++)
 c000f18:	2300      	movs	r3, #0
 c000f1a:	81fb      	strh	r3, [r7, #14]
 c000f1c:	e006      	b.n	c000f2c <trivium_init_state+0x1c>
    {
        trivium_rotate(arr, TRIVIUM_STATE_SIZE);
 c000f1e:	2124      	movs	r1, #36	; 0x24
 c000f20:	6878      	ldr	r0, [r7, #4]
 c000f22:	f7ff ff36 	bl	c000d92 <trivium_rotate>
    for(i = 0; i < 4*288; i++)
 c000f26:	89fb      	ldrh	r3, [r7, #14]
 c000f28:	3301      	adds	r3, #1
 c000f2a:	81fb      	strh	r3, [r7, #14]
 c000f2c:	89fb      	ldrh	r3, [r7, #14]
 c000f2e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 c000f32:	d3f4      	bcc.n	c000f1e <trivium_init_state+0xe>
    }
}
 c000f34:	bf00      	nop
 c000f36:	bf00      	nop
 c000f38:	3710      	adds	r7, #16
 c000f3a:	46bd      	mov	sp, r7
 c000f3c:	bd80      	pop	{r7, pc}
	...

0c000f40 <trivium_init>:

trivium_ctx* trivium_init(uint8_t *key, uint8_t *iv)
{
 c000f40:	b580      	push	{r7, lr}
 c000f42:	b084      	sub	sp, #16
 c000f44:	af00      	add	r7, sp, #0
 c000f46:	6078      	str	r0, [r7, #4]
 c000f48:	6039      	str	r1, [r7, #0]
    trivium_ctx *ctx = malloc(sizeof(struct _trivium_ctx));
 c000f4a:	202c      	movs	r0, #44	; 0x2c
 c000f4c:	f000 fc46 	bl	c0017dc <malloc>
 c000f50:	4603      	mov	r3, r0
 c000f52:	60bb      	str	r3, [r7, #8]

    if (ctx == NULL)
 c000f54:	68bb      	ldr	r3, [r7, #8]
 c000f56:	2b00      	cmp	r3, #0
 c000f58:	d104      	bne.n	c000f64 <trivium_init+0x24>
    {
        printf("Error: malloc trivium_ctx failed.\n");
 c000f5a:	4826      	ldr	r0, [pc, #152]	; (c000ff4 <trivium_init+0xb4>)
 c000f5c:	f000 fe08 	bl	c001b70 <puts>
        return NULL;
 c000f60:	2300      	movs	r3, #0
 c000f62:	e042      	b.n	c000fea <trivium_init+0xaa>
    }

    for(int i = 0; i < TRIVIUM_STATE_SIZE; i++) ctx->b[i] = 0;
 c000f64:	2300      	movs	r3, #0
 c000f66:	60fb      	str	r3, [r7, #12]
 c000f68:	e008      	b.n	c000f7c <trivium_init+0x3c>
 c000f6a:	68ba      	ldr	r2, [r7, #8]
 c000f6c:	68fb      	ldr	r3, [r7, #12]
 c000f6e:	4413      	add	r3, r2
 c000f70:	3308      	adds	r3, #8
 c000f72:	2200      	movs	r2, #0
 c000f74:	701a      	strb	r2, [r3, #0]
 c000f76:	68fb      	ldr	r3, [r7, #12]
 c000f78:	3301      	adds	r3, #1
 c000f7a:	60fb      	str	r3, [r7, #12]
 c000f7c:	68fb      	ldr	r3, [r7, #12]
 c000f7e:	2b23      	cmp	r3, #35	; 0x23
 c000f80:	ddf3      	ble.n	c000f6a <trivium_init+0x2a>

    ctx->key = key;
 c000f82:	68bb      	ldr	r3, [r7, #8]
 c000f84:	687a      	ldr	r2, [r7, #4]
 c000f86:	601a      	str	r2, [r3, #0]
    ctx->iv = iv;
 c000f88:	68bb      	ldr	r3, [r7, #8]
 c000f8a:	683a      	ldr	r2, [r7, #0]
 c000f8c:	605a      	str	r2, [r3, #4]

    trivium_insert_bits(ctx->b, 1, key, 80);
 c000f8e:	68bb      	ldr	r3, [r7, #8]
 c000f90:	f103 0008 	add.w	r0, r3, #8
 c000f94:	2350      	movs	r3, #80	; 0x50
 c000f96:	687a      	ldr	r2, [r7, #4]
 c000f98:	2101      	movs	r1, #1
 c000f9a:	f7ff fed0 	bl	c000d3e <trivium_insert_bits>
    trivium_insert_bits(ctx->b, 94, iv, 80);
 c000f9e:	68bb      	ldr	r3, [r7, #8]
 c000fa0:	f103 0008 	add.w	r0, r3, #8
 c000fa4:	2350      	movs	r3, #80	; 0x50
 c000fa6:	683a      	ldr	r2, [r7, #0]
 c000fa8:	215e      	movs	r1, #94	; 0x5e
 c000faa:	f7ff fec8 	bl	c000d3e <trivium_insert_bits>
    trivium_change_bit(ctx->b, 286, 1);
 c000fae:	68bb      	ldr	r3, [r7, #8]
 c000fb0:	3308      	adds	r3, #8
 c000fb2:	2201      	movs	r2, #1
 c000fb4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 c000fb8:	4618      	mov	r0, r3
 c000fba:	f7ff fe75 	bl	c000ca8 <trivium_change_bit>
    trivium_change_bit(ctx->b, 287, 1);
 c000fbe:	68bb      	ldr	r3, [r7, #8]
 c000fc0:	3308      	adds	r3, #8
 c000fc2:	2201      	movs	r2, #1
 c000fc4:	f240 111f 	movw	r1, #287	; 0x11f
 c000fc8:	4618      	mov	r0, r3
 c000fca:	f7ff fe6d 	bl	c000ca8 <trivium_change_bit>
    trivium_change_bit(ctx->b, 288, 1);
 c000fce:	68bb      	ldr	r3, [r7, #8]
 c000fd0:	3308      	adds	r3, #8
 c000fd2:	2201      	movs	r2, #1
 c000fd4:	f44f 7190 	mov.w	r1, #288	; 0x120
 c000fd8:	4618      	mov	r0, r3
 c000fda:	f7ff fe65 	bl	c000ca8 <trivium_change_bit>

    trivium_init_state(ctx->b);
 c000fde:	68bb      	ldr	r3, [r7, #8]
 c000fe0:	3308      	adds	r3, #8
 c000fe2:	4618      	mov	r0, r3
 c000fe4:	f7ff ff94 	bl	c000f10 <trivium_init_state>

    return ctx;
 c000fe8:	68bb      	ldr	r3, [r7, #8]
}
 c000fea:	4618      	mov	r0, r3
 c000fec:	3710      	adds	r7, #16
 c000fee:	46bd      	mov	sp, r7
 c000ff0:	bd80      	pop	{r7, pc}
 c000ff2:	bf00      	nop
 c000ff4:	0c002158 	.word	0x0c002158

0c000ff8 <trivium_gen_keystream>:

uint8_t trivium_gen_keystream(trivium_ctx* ctx)
{
 c000ff8:	b580      	push	{r7, lr}
 c000ffa:	b084      	sub	sp, #16
 c000ffc:	af00      	add	r7, sp, #0
 c000ffe:	6078      	str	r0, [r7, #4]
    uint8_t buf = 0;
 c001000:	2300      	movs	r3, #0
 c001002:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 c001004:	2300      	movs	r3, #0
 c001006:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 c001008:	e014      	b.n	c001034 <trivium_gen_keystream+0x3c>
    {
        uint8_t z = trivium_rotate(ctx->b, TRIVIUM_STATE_SIZE);
 c00100a:	687b      	ldr	r3, [r7, #4]
 c00100c:	3308      	adds	r3, #8
 c00100e:	2124      	movs	r1, #36	; 0x24
 c001010:	4618      	mov	r0, r3
 c001012:	f7ff febe 	bl	c000d92 <trivium_rotate>
 c001016:	4603      	mov	r3, r0
 c001018:	737b      	strb	r3, [r7, #13]
        buf = buf | (z << i);
 c00101a:	7b7a      	ldrb	r2, [r7, #13]
 c00101c:	7bbb      	ldrb	r3, [r7, #14]
 c00101e:	fa02 f303 	lsl.w	r3, r2, r3
 c001022:	b25a      	sxtb	r2, r3
 c001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001028:	4313      	orrs	r3, r2
 c00102a:	b25b      	sxtb	r3, r3
 c00102c:	73fb      	strb	r3, [r7, #15]
        i += 1;
 c00102e:	7bbb      	ldrb	r3, [r7, #14]
 c001030:	3301      	adds	r3, #1
 c001032:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 c001034:	7bbb      	ldrb	r3, [r7, #14]
 c001036:	2b08      	cmp	r3, #8
 c001038:	d1e7      	bne.n	c00100a <trivium_gen_keystream+0x12>
    }
    return buf;
 c00103a:	7bfb      	ldrb	r3, [r7, #15]
 c00103c:	4618      	mov	r0, r3
 c00103e:	3710      	adds	r7, #16
 c001040:	46bd      	mov	sp, r7
 c001042:	bd80      	pop	{r7, pc}

0c001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001044:	f8df d034 	ldr.w	sp, [pc, #52]	; c00107c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001048:	f7ff fcf6 	bl	c000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00104c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00104e:	e003      	b.n	c001058 <LoopCopyDataInit>

0c001050 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001050:	4b0b      	ldr	r3, [pc, #44]	; (c001080 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001052:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001054:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001056:	3104      	adds	r1, #4

0c001058 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001058:	480a      	ldr	r0, [pc, #40]	; (c001084 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00105a:	4b0b      	ldr	r3, [pc, #44]	; (c001088 <LoopForever+0xe>)
	adds	r2, r0, r1
 c00105c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00105e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001060:	d3f6      	bcc.n	c001050 <CopyDataInit>
	ldr	r2, =_sbss
 c001062:	4a0a      	ldr	r2, [pc, #40]	; (c00108c <LoopForever+0x12>)
	b	LoopFillZerobss
 c001064:	e002      	b.n	c00106c <LoopFillZerobss>

0c001066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001066:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001068:	f842 3b04 	str.w	r3, [r2], #4

0c00106c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c00106c:	4b08      	ldr	r3, [pc, #32]	; (c001090 <LoopForever+0x16>)
	cmp	r2, r3
 c00106e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001070:	d3f9      	bcc.n	c001066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001072:	f000 fda3 	bl	c001bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001076:	f7ff f90b 	bl	c000290 <main>

0c00107a <LoopForever>:

LoopForever:
    b LoopForever
 c00107a:	e7fe      	b.n	c00107a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c00107c:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001080:	0c0021d4 	.word	0x0c0021d4
	ldr	r0, =_sdata
 c001084:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001088:	30000068 	.word	0x30000068
	ldr	r2, =_sbss
 c00108c:	30000068 	.word	0x30000068
	ldr	r3, = _ebss
 c001090:	30000224 	.word	0x30000224

0c001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001094:	e7fe      	b.n	c001094 <ADC1_2_IRQHandler>

0c001096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001096:	b580      	push	{r7, lr}
 c001098:	b082      	sub	sp, #8
 c00109a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c00109c:	2300      	movs	r3, #0
 c00109e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0010a0:	2004      	movs	r0, #4
 c0010a2:	f000 f915 	bl	c0012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0010a6:	f7ff fce1 	bl	c000a6c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0010aa:	2007      	movs	r0, #7
 c0010ac:	f000 f80e 	bl	c0010cc <HAL_InitTick>
 c0010b0:	4603      	mov	r3, r0
 c0010b2:	2b00      	cmp	r3, #0
 c0010b4:	d002      	beq.n	c0010bc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0010b6:	2301      	movs	r3, #1
 c0010b8:	71fb      	strb	r3, [r7, #7]
 c0010ba:	e001      	b.n	c0010c0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0010bc:	f7ff fb3e 	bl	c00073c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0010c0:	79fb      	ldrb	r3, [r7, #7]
}
 c0010c2:	4618      	mov	r0, r3
 c0010c4:	3708      	adds	r7, #8
 c0010c6:	46bd      	mov	sp, r7
 c0010c8:	bd80      	pop	{r7, pc}
	...

0c0010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0010cc:	b580      	push	{r7, lr}
 c0010ce:	b084      	sub	sp, #16
 c0010d0:	af00      	add	r7, sp, #0
 c0010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0010d4:	2300      	movs	r3, #0
 c0010d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0010d8:	4b17      	ldr	r3, [pc, #92]	; (c001138 <HAL_InitTick+0x6c>)
 c0010da:	781b      	ldrb	r3, [r3, #0]
 c0010dc:	2b00      	cmp	r3, #0
 c0010de:	d023      	beq.n	c001128 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0010e0:	4b16      	ldr	r3, [pc, #88]	; (c00113c <HAL_InitTick+0x70>)
 c0010e2:	681a      	ldr	r2, [r3, #0]
 c0010e4:	4b14      	ldr	r3, [pc, #80]	; (c001138 <HAL_InitTick+0x6c>)
 c0010e6:	781b      	ldrb	r3, [r3, #0]
 c0010e8:	4619      	mov	r1, r3
 c0010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 c0010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	f000 f90f 	bl	c00131a <HAL_SYSTICK_Config>
 c0010fc:	4603      	mov	r3, r0
 c0010fe:	2b00      	cmp	r3, #0
 c001100:	d10f      	bne.n	c001122 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001102:	687b      	ldr	r3, [r7, #4]
 c001104:	2b07      	cmp	r3, #7
 c001106:	d809      	bhi.n	c00111c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001108:	2200      	movs	r2, #0
 c00110a:	6879      	ldr	r1, [r7, #4]
 c00110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001110:	f000 f8e9 	bl	c0012e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001114:	4a0a      	ldr	r2, [pc, #40]	; (c001140 <HAL_InitTick+0x74>)
 c001116:	687b      	ldr	r3, [r7, #4]
 c001118:	6013      	str	r3, [r2, #0]
 c00111a:	e007      	b.n	c00112c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c00111c:	2301      	movs	r3, #1
 c00111e:	73fb      	strb	r3, [r7, #15]
 c001120:	e004      	b.n	c00112c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001122:	2301      	movs	r3, #1
 c001124:	73fb      	strb	r3, [r7, #15]
 c001126:	e001      	b.n	c00112c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001128:	2301      	movs	r3, #1
 c00112a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c00112c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00112e:	4618      	mov	r0, r3
 c001130:	3710      	adds	r7, #16
 c001132:	46bd      	mov	sp, r7
 c001134:	bd80      	pop	{r7, pc}
 c001136:	bf00      	nop
 c001138:	30000008 	.word	0x30000008
 c00113c:	30000000 	.word	0x30000000
 c001140:	30000004 	.word	0x30000004

0c001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001144:	b480      	push	{r7}
 c001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001148:	4b06      	ldr	r3, [pc, #24]	; (c001164 <HAL_IncTick+0x20>)
 c00114a:	781b      	ldrb	r3, [r3, #0]
 c00114c:	461a      	mov	r2, r3
 c00114e:	4b06      	ldr	r3, [pc, #24]	; (c001168 <HAL_IncTick+0x24>)
 c001150:	681b      	ldr	r3, [r3, #0]
 c001152:	4413      	add	r3, r2
 c001154:	4a04      	ldr	r2, [pc, #16]	; (c001168 <HAL_IncTick+0x24>)
 c001156:	6013      	str	r3, [r2, #0]
}
 c001158:	bf00      	nop
 c00115a:	46bd      	mov	sp, r7
 c00115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001160:	4770      	bx	lr
 c001162:	bf00      	nop
 c001164:	30000008 	.word	0x30000008
 c001168:	300000d4 	.word	0x300000d4

0c00116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00116c:	b480      	push	{r7}
 c00116e:	b085      	sub	sp, #20
 c001170:	af00      	add	r7, sp, #0
 c001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001174:	687b      	ldr	r3, [r7, #4]
 c001176:	f003 0307 	and.w	r3, r3, #7
 c00117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00117c:	4b0c      	ldr	r3, [pc, #48]	; (c0011b0 <__NVIC_SetPriorityGrouping+0x44>)
 c00117e:	68db      	ldr	r3, [r3, #12]
 c001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001182:	68ba      	ldr	r2, [r7, #8]
 c001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001188:	4013      	ands	r3, r2
 c00118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c00118c:	68fb      	ldr	r3, [r7, #12]
 c00118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001190:	68bb      	ldr	r3, [r7, #8]
 c001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00119e:	4a04      	ldr	r2, [pc, #16]	; (c0011b0 <__NVIC_SetPriorityGrouping+0x44>)
 c0011a0:	68bb      	ldr	r3, [r7, #8]
 c0011a2:	60d3      	str	r3, [r2, #12]
}
 c0011a4:	bf00      	nop
 c0011a6:	3714      	adds	r7, #20
 c0011a8:	46bd      	mov	sp, r7
 c0011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011ae:	4770      	bx	lr
 c0011b0:	e000ed00 	.word	0xe000ed00

0c0011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0011b4:	b480      	push	{r7}
 c0011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0011b8:	4b04      	ldr	r3, [pc, #16]	; (c0011cc <__NVIC_GetPriorityGrouping+0x18>)
 c0011ba:	68db      	ldr	r3, [r3, #12]
 c0011bc:	0a1b      	lsrs	r3, r3, #8
 c0011be:	f003 0307 	and.w	r3, r3, #7
}
 c0011c2:	4618      	mov	r0, r3
 c0011c4:	46bd      	mov	sp, r7
 c0011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011ca:	4770      	bx	lr
 c0011cc:	e000ed00 	.word	0xe000ed00

0c0011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0011d0:	b480      	push	{r7}
 c0011d2:	b083      	sub	sp, #12
 c0011d4:	af00      	add	r7, sp, #0
 c0011d6:	4603      	mov	r3, r0
 c0011d8:	6039      	str	r1, [r7, #0]
 c0011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0011e0:	2b00      	cmp	r3, #0
 c0011e2:	db0a      	blt.n	c0011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0011e4:	683b      	ldr	r3, [r7, #0]
 c0011e6:	b2da      	uxtb	r2, r3
 c0011e8:	490c      	ldr	r1, [pc, #48]	; (c00121c <__NVIC_SetPriority+0x4c>)
 c0011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0011ee:	0152      	lsls	r2, r2, #5
 c0011f0:	b2d2      	uxtb	r2, r2
 c0011f2:	440b      	add	r3, r1
 c0011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0011f8:	e00a      	b.n	c001210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0011fa:	683b      	ldr	r3, [r7, #0]
 c0011fc:	b2da      	uxtb	r2, r3
 c0011fe:	4908      	ldr	r1, [pc, #32]	; (c001220 <__NVIC_SetPriority+0x50>)
 c001200:	79fb      	ldrb	r3, [r7, #7]
 c001202:	f003 030f 	and.w	r3, r3, #15
 c001206:	3b04      	subs	r3, #4
 c001208:	0152      	lsls	r2, r2, #5
 c00120a:	b2d2      	uxtb	r2, r2
 c00120c:	440b      	add	r3, r1
 c00120e:	761a      	strb	r2, [r3, #24]
}
 c001210:	bf00      	nop
 c001212:	370c      	adds	r7, #12
 c001214:	46bd      	mov	sp, r7
 c001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00121a:	4770      	bx	lr
 c00121c:	e000e100 	.word	0xe000e100
 c001220:	e000ed00 	.word	0xe000ed00

0c001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001224:	b480      	push	{r7}
 c001226:	b089      	sub	sp, #36	; 0x24
 c001228:	af00      	add	r7, sp, #0
 c00122a:	60f8      	str	r0, [r7, #12]
 c00122c:	60b9      	str	r1, [r7, #8]
 c00122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001230:	68fb      	ldr	r3, [r7, #12]
 c001232:	f003 0307 	and.w	r3, r3, #7
 c001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001238:	69fb      	ldr	r3, [r7, #28]
 c00123a:	f1c3 0307 	rsb	r3, r3, #7
 c00123e:	2b03      	cmp	r3, #3
 c001240:	bf28      	it	cs
 c001242:	2303      	movcs	r3, #3
 c001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001246:	69fb      	ldr	r3, [r7, #28]
 c001248:	3303      	adds	r3, #3
 c00124a:	2b06      	cmp	r3, #6
 c00124c:	d902      	bls.n	c001254 <NVIC_EncodePriority+0x30>
 c00124e:	69fb      	ldr	r3, [r7, #28]
 c001250:	3b04      	subs	r3, #4
 c001252:	e000      	b.n	c001256 <NVIC_EncodePriority+0x32>
 c001254:	2300      	movs	r3, #0
 c001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00125c:	69bb      	ldr	r3, [r7, #24]
 c00125e:	fa02 f303 	lsl.w	r3, r2, r3
 c001262:	43da      	mvns	r2, r3
 c001264:	68bb      	ldr	r3, [r7, #8]
 c001266:	401a      	ands	r2, r3
 c001268:	697b      	ldr	r3, [r7, #20]
 c00126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c00126c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c001270:	697b      	ldr	r3, [r7, #20]
 c001272:	fa01 f303 	lsl.w	r3, r1, r3
 c001276:	43d9      	mvns	r1, r3
 c001278:	687b      	ldr	r3, [r7, #4]
 c00127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00127c:	4313      	orrs	r3, r2
         );
}
 c00127e:	4618      	mov	r0, r3
 c001280:	3724      	adds	r7, #36	; 0x24
 c001282:	46bd      	mov	sp, r7
 c001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001288:	4770      	bx	lr
	...

0c00128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c00128c:	b580      	push	{r7, lr}
 c00128e:	b082      	sub	sp, #8
 c001290:	af00      	add	r7, sp, #0
 c001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001294:	687b      	ldr	r3, [r7, #4]
 c001296:	3b01      	subs	r3, #1
 c001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00129c:	d301      	bcc.n	c0012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00129e:	2301      	movs	r3, #1
 c0012a0:	e00f      	b.n	c0012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0012a2:	4a0a      	ldr	r2, [pc, #40]	; (c0012cc <SysTick_Config+0x40>)
 c0012a4:	687b      	ldr	r3, [r7, #4]
 c0012a6:	3b01      	subs	r3, #1
 c0012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0012aa:	2107      	movs	r1, #7
 c0012ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c0012b0:	f7ff ff8e 	bl	c0011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0012b4:	4b05      	ldr	r3, [pc, #20]	; (c0012cc <SysTick_Config+0x40>)
 c0012b6:	2200      	movs	r2, #0
 c0012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0012ba:	4b04      	ldr	r3, [pc, #16]	; (c0012cc <SysTick_Config+0x40>)
 c0012bc:	2207      	movs	r2, #7
 c0012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0012c0:	2300      	movs	r3, #0
}
 c0012c2:	4618      	mov	r0, r3
 c0012c4:	3708      	adds	r7, #8
 c0012c6:	46bd      	mov	sp, r7
 c0012c8:	bd80      	pop	{r7, pc}
 c0012ca:	bf00      	nop
 c0012cc:	e000e010 	.word	0xe000e010

0c0012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0012d0:	b580      	push	{r7, lr}
 c0012d2:	b082      	sub	sp, #8
 c0012d4:	af00      	add	r7, sp, #0
 c0012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0012d8:	6878      	ldr	r0, [r7, #4]
 c0012da:	f7ff ff47 	bl	c00116c <__NVIC_SetPriorityGrouping>
}
 c0012de:	bf00      	nop
 c0012e0:	3708      	adds	r7, #8
 c0012e2:	46bd      	mov	sp, r7
 c0012e4:	bd80      	pop	{r7, pc}

0c0012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0012e6:	b580      	push	{r7, lr}
 c0012e8:	b086      	sub	sp, #24
 c0012ea:	af00      	add	r7, sp, #0
 c0012ec:	4603      	mov	r3, r0
 c0012ee:	60b9      	str	r1, [r7, #8]
 c0012f0:	607a      	str	r2, [r7, #4]
 c0012f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0012f4:	f7ff ff5e 	bl	c0011b4 <__NVIC_GetPriorityGrouping>
 c0012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0012fa:	687a      	ldr	r2, [r7, #4]
 c0012fc:	68b9      	ldr	r1, [r7, #8]
 c0012fe:	6978      	ldr	r0, [r7, #20]
 c001300:	f7ff ff90 	bl	c001224 <NVIC_EncodePriority>
 c001304:	4602      	mov	r2, r0
 c001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00130a:	4611      	mov	r1, r2
 c00130c:	4618      	mov	r0, r3
 c00130e:	f7ff ff5f 	bl	c0011d0 <__NVIC_SetPriority>
}
 c001312:	bf00      	nop
 c001314:	3718      	adds	r7, #24
 c001316:	46bd      	mov	sp, r7
 c001318:	bd80      	pop	{r7, pc}

0c00131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00131a:	b580      	push	{r7, lr}
 c00131c:	b082      	sub	sp, #8
 c00131e:	af00      	add	r7, sp, #0
 c001320:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001322:	6878      	ldr	r0, [r7, #4]
 c001324:	f7ff ffb2 	bl	c00128c <SysTick_Config>
 c001328:	4603      	mov	r3, r0
}
 c00132a:	4618      	mov	r0, r3
 c00132c:	3708      	adds	r7, #8
 c00132e:	46bd      	mov	sp, r7
 c001330:	bd80      	pop	{r7, pc}
	...

0c001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001334:	b480      	push	{r7}
 c001336:	b087      	sub	sp, #28
 c001338:	af00      	add	r7, sp, #0
 c00133a:	6078      	str	r0, [r7, #4]
 c00133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c00133e:	2300      	movs	r3, #0
 c001340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001342:	e158      	b.n	c0015f6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001344:	683b      	ldr	r3, [r7, #0]
 c001346:	681a      	ldr	r2, [r3, #0]
 c001348:	2101      	movs	r1, #1
 c00134a:	697b      	ldr	r3, [r7, #20]
 c00134c:	fa01 f303 	lsl.w	r3, r1, r3
 c001350:	4013      	ands	r3, r2
 c001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001354:	68fb      	ldr	r3, [r7, #12]
 c001356:	2b00      	cmp	r3, #0
 c001358:	f000 814a 	beq.w	c0015f0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c00135c:	683b      	ldr	r3, [r7, #0]
 c00135e:	685b      	ldr	r3, [r3, #4]
 c001360:	f003 0303 	and.w	r3, r3, #3
 c001364:	2b01      	cmp	r3, #1
 c001366:	d005      	beq.n	c001374 <HAL_GPIO_Init+0x40>
 c001368:	683b      	ldr	r3, [r7, #0]
 c00136a:	685b      	ldr	r3, [r3, #4]
 c00136c:	f003 0303 	and.w	r3, r3, #3
 c001370:	2b02      	cmp	r3, #2
 c001372:	d130      	bne.n	c0013d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001374:	687b      	ldr	r3, [r7, #4]
 c001376:	689b      	ldr	r3, [r3, #8]
 c001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00137a:	697b      	ldr	r3, [r7, #20]
 c00137c:	005b      	lsls	r3, r3, #1
 c00137e:	2203      	movs	r2, #3
 c001380:	fa02 f303 	lsl.w	r3, r2, r3
 c001384:	43db      	mvns	r3, r3
 c001386:	693a      	ldr	r2, [r7, #16]
 c001388:	4013      	ands	r3, r2
 c00138a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c00138c:	683b      	ldr	r3, [r7, #0]
 c00138e:	68da      	ldr	r2, [r3, #12]
 c001390:	697b      	ldr	r3, [r7, #20]
 c001392:	005b      	lsls	r3, r3, #1
 c001394:	fa02 f303 	lsl.w	r3, r2, r3
 c001398:	693a      	ldr	r2, [r7, #16]
 c00139a:	4313      	orrs	r3, r2
 c00139c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c00139e:	687b      	ldr	r3, [r7, #4]
 c0013a0:	693a      	ldr	r2, [r7, #16]
 c0013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c0013a4:	687b      	ldr	r3, [r7, #4]
 c0013a6:	685b      	ldr	r3, [r3, #4]
 c0013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0013aa:	2201      	movs	r2, #1
 c0013ac:	697b      	ldr	r3, [r7, #20]
 c0013ae:	fa02 f303 	lsl.w	r3, r2, r3
 c0013b2:	43db      	mvns	r3, r3
 c0013b4:	693a      	ldr	r2, [r7, #16]
 c0013b6:	4013      	ands	r3, r2
 c0013b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c0013ba:	683b      	ldr	r3, [r7, #0]
 c0013bc:	685b      	ldr	r3, [r3, #4]
 c0013be:	091b      	lsrs	r3, r3, #4
 c0013c0:	f003 0201 	and.w	r2, r3, #1
 c0013c4:	697b      	ldr	r3, [r7, #20]
 c0013c6:	fa02 f303 	lsl.w	r3, r2, r3
 c0013ca:	693a      	ldr	r2, [r7, #16]
 c0013cc:	4313      	orrs	r3, r2
 c0013ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0013d0:	687b      	ldr	r3, [r7, #4]
 c0013d2:	693a      	ldr	r2, [r7, #16]
 c0013d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c0013d6:	683b      	ldr	r3, [r7, #0]
 c0013d8:	685b      	ldr	r3, [r3, #4]
 c0013da:	f003 0303 	and.w	r3, r3, #3
 c0013de:	2b03      	cmp	r3, #3
 c0013e0:	d017      	beq.n	c001412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c0013e2:	687b      	ldr	r3, [r7, #4]
 c0013e4:	68db      	ldr	r3, [r3, #12]
 c0013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0013e8:	697b      	ldr	r3, [r7, #20]
 c0013ea:	005b      	lsls	r3, r3, #1
 c0013ec:	2203      	movs	r2, #3
 c0013ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0013f2:	43db      	mvns	r3, r3
 c0013f4:	693a      	ldr	r2, [r7, #16]
 c0013f6:	4013      	ands	r3, r2
 c0013f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0013fa:	683b      	ldr	r3, [r7, #0]
 c0013fc:	689a      	ldr	r2, [r3, #8]
 c0013fe:	697b      	ldr	r3, [r7, #20]
 c001400:	005b      	lsls	r3, r3, #1
 c001402:	fa02 f303 	lsl.w	r3, r2, r3
 c001406:	693a      	ldr	r2, [r7, #16]
 c001408:	4313      	orrs	r3, r2
 c00140a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c00140c:	687b      	ldr	r3, [r7, #4]
 c00140e:	693a      	ldr	r2, [r7, #16]
 c001410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001412:	683b      	ldr	r3, [r7, #0]
 c001414:	685b      	ldr	r3, [r3, #4]
 c001416:	f003 0303 	and.w	r3, r3, #3
 c00141a:	2b02      	cmp	r3, #2
 c00141c:	d123      	bne.n	c001466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c00141e:	697b      	ldr	r3, [r7, #20]
 c001420:	08da      	lsrs	r2, r3, #3
 c001422:	687b      	ldr	r3, [r7, #4]
 c001424:	3208      	adds	r2, #8
 c001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00142a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00142c:	697b      	ldr	r3, [r7, #20]
 c00142e:	f003 0307 	and.w	r3, r3, #7
 c001432:	009b      	lsls	r3, r3, #2
 c001434:	220f      	movs	r2, #15
 c001436:	fa02 f303 	lsl.w	r3, r2, r3
 c00143a:	43db      	mvns	r3, r3
 c00143c:	693a      	ldr	r2, [r7, #16]
 c00143e:	4013      	ands	r3, r2
 c001440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001442:	683b      	ldr	r3, [r7, #0]
 c001444:	691a      	ldr	r2, [r3, #16]
 c001446:	697b      	ldr	r3, [r7, #20]
 c001448:	f003 0307 	and.w	r3, r3, #7
 c00144c:	009b      	lsls	r3, r3, #2
 c00144e:	fa02 f303 	lsl.w	r3, r2, r3
 c001452:	693a      	ldr	r2, [r7, #16]
 c001454:	4313      	orrs	r3, r2
 c001456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001458:	697b      	ldr	r3, [r7, #20]
 c00145a:	08da      	lsrs	r2, r3, #3
 c00145c:	687b      	ldr	r3, [r7, #4]
 c00145e:	3208      	adds	r2, #8
 c001460:	6939      	ldr	r1, [r7, #16]
 c001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001466:	687b      	ldr	r3, [r7, #4]
 c001468:	681b      	ldr	r3, [r3, #0]
 c00146a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00146c:	697b      	ldr	r3, [r7, #20]
 c00146e:	005b      	lsls	r3, r3, #1
 c001470:	2203      	movs	r2, #3
 c001472:	fa02 f303 	lsl.w	r3, r2, r3
 c001476:	43db      	mvns	r3, r3
 c001478:	693a      	ldr	r2, [r7, #16]
 c00147a:	4013      	ands	r3, r2
 c00147c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00147e:	683b      	ldr	r3, [r7, #0]
 c001480:	685b      	ldr	r3, [r3, #4]
 c001482:	f003 0203 	and.w	r2, r3, #3
 c001486:	697b      	ldr	r3, [r7, #20]
 c001488:	005b      	lsls	r3, r3, #1
 c00148a:	fa02 f303 	lsl.w	r3, r2, r3
 c00148e:	693a      	ldr	r2, [r7, #16]
 c001490:	4313      	orrs	r3, r2
 c001492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001494:	687b      	ldr	r3, [r7, #4]
 c001496:	693a      	ldr	r2, [r7, #16]
 c001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c00149a:	683b      	ldr	r3, [r7, #0]
 c00149c:	685b      	ldr	r3, [r3, #4]
 c00149e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c0014a2:	2b00      	cmp	r3, #0
 c0014a4:	f000 80a4 	beq.w	c0015f0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c0014a8:	4a5a      	ldr	r2, [pc, #360]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c0014aa:	697b      	ldr	r3, [r7, #20]
 c0014ac:	089b      	lsrs	r3, r3, #2
 c0014ae:	3318      	adds	r3, #24
 c0014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0014b4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0014b6:	697b      	ldr	r3, [r7, #20]
 c0014b8:	f003 0303 	and.w	r3, r3, #3
 c0014bc:	00db      	lsls	r3, r3, #3
 c0014be:	220f      	movs	r2, #15
 c0014c0:	fa02 f303 	lsl.w	r3, r2, r3
 c0014c4:	43db      	mvns	r3, r3
 c0014c6:	693a      	ldr	r2, [r7, #16]
 c0014c8:	4013      	ands	r3, r2
 c0014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0014cc:	687b      	ldr	r3, [r7, #4]
 c0014ce:	4a52      	ldr	r2, [pc, #328]	; (c001618 <HAL_GPIO_Init+0x2e4>)
 c0014d0:	4293      	cmp	r3, r2
 c0014d2:	d025      	beq.n	c001520 <HAL_GPIO_Init+0x1ec>
 c0014d4:	687b      	ldr	r3, [r7, #4]
 c0014d6:	4a51      	ldr	r2, [pc, #324]	; (c00161c <HAL_GPIO_Init+0x2e8>)
 c0014d8:	4293      	cmp	r3, r2
 c0014da:	d01f      	beq.n	c00151c <HAL_GPIO_Init+0x1e8>
 c0014dc:	687b      	ldr	r3, [r7, #4]
 c0014de:	4a50      	ldr	r2, [pc, #320]	; (c001620 <HAL_GPIO_Init+0x2ec>)
 c0014e0:	4293      	cmp	r3, r2
 c0014e2:	d019      	beq.n	c001518 <HAL_GPIO_Init+0x1e4>
 c0014e4:	687b      	ldr	r3, [r7, #4]
 c0014e6:	4a4f      	ldr	r2, [pc, #316]	; (c001624 <HAL_GPIO_Init+0x2f0>)
 c0014e8:	4293      	cmp	r3, r2
 c0014ea:	d013      	beq.n	c001514 <HAL_GPIO_Init+0x1e0>
 c0014ec:	687b      	ldr	r3, [r7, #4]
 c0014ee:	4a4e      	ldr	r2, [pc, #312]	; (c001628 <HAL_GPIO_Init+0x2f4>)
 c0014f0:	4293      	cmp	r3, r2
 c0014f2:	d00d      	beq.n	c001510 <HAL_GPIO_Init+0x1dc>
 c0014f4:	687b      	ldr	r3, [r7, #4]
 c0014f6:	4a4d      	ldr	r2, [pc, #308]	; (c00162c <HAL_GPIO_Init+0x2f8>)
 c0014f8:	4293      	cmp	r3, r2
 c0014fa:	d007      	beq.n	c00150c <HAL_GPIO_Init+0x1d8>
 c0014fc:	687b      	ldr	r3, [r7, #4]
 c0014fe:	4a4c      	ldr	r2, [pc, #304]	; (c001630 <HAL_GPIO_Init+0x2fc>)
 c001500:	4293      	cmp	r3, r2
 c001502:	d101      	bne.n	c001508 <HAL_GPIO_Init+0x1d4>
 c001504:	2306      	movs	r3, #6
 c001506:	e00c      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c001508:	2307      	movs	r3, #7
 c00150a:	e00a      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c00150c:	2305      	movs	r3, #5
 c00150e:	e008      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c001510:	2304      	movs	r3, #4
 c001512:	e006      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c001514:	2303      	movs	r3, #3
 c001516:	e004      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c001518:	2302      	movs	r3, #2
 c00151a:	e002      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c00151c:	2301      	movs	r3, #1
 c00151e:	e000      	b.n	c001522 <HAL_GPIO_Init+0x1ee>
 c001520:	2300      	movs	r3, #0
 c001522:	697a      	ldr	r2, [r7, #20]
 c001524:	f002 0203 	and.w	r2, r2, #3
 c001528:	00d2      	lsls	r2, r2, #3
 c00152a:	4093      	lsls	r3, r2
 c00152c:	693a      	ldr	r2, [r7, #16]
 c00152e:	4313      	orrs	r3, r2
 c001530:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001532:	4938      	ldr	r1, [pc, #224]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c001534:	697b      	ldr	r3, [r7, #20]
 c001536:	089b      	lsrs	r3, r3, #2
 c001538:	3318      	adds	r3, #24
 c00153a:	693a      	ldr	r2, [r7, #16]
 c00153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001540:	4b34      	ldr	r3, [pc, #208]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c001542:	681b      	ldr	r3, [r3, #0]
 c001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001546:	68fb      	ldr	r3, [r7, #12]
 c001548:	43db      	mvns	r3, r3
 c00154a:	693a      	ldr	r2, [r7, #16]
 c00154c:	4013      	ands	r3, r2
 c00154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c001550:	683b      	ldr	r3, [r7, #0]
 c001552:	685b      	ldr	r3, [r3, #4]
 c001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001558:	2b00      	cmp	r3, #0
 c00155a:	d003      	beq.n	c001564 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c00155c:	693a      	ldr	r2, [r7, #16]
 c00155e:	68fb      	ldr	r3, [r7, #12]
 c001560:	4313      	orrs	r3, r2
 c001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001564:	4a2b      	ldr	r2, [pc, #172]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c001566:	693b      	ldr	r3, [r7, #16]
 c001568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00156a:	4b2a      	ldr	r3, [pc, #168]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c00156c:	685b      	ldr	r3, [r3, #4]
 c00156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001570:	68fb      	ldr	r3, [r7, #12]
 c001572:	43db      	mvns	r3, r3
 c001574:	693a      	ldr	r2, [r7, #16]
 c001576:	4013      	ands	r3, r2
 c001578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c00157a:	683b      	ldr	r3, [r7, #0]
 c00157c:	685b      	ldr	r3, [r3, #4]
 c00157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001582:	2b00      	cmp	r3, #0
 c001584:	d003      	beq.n	c00158e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c001586:	693a      	ldr	r2, [r7, #16]
 c001588:	68fb      	ldr	r3, [r7, #12]
 c00158a:	4313      	orrs	r3, r2
 c00158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c00158e:	4a21      	ldr	r2, [pc, #132]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c001590:	693b      	ldr	r3, [r7, #16]
 c001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c001594:	4b1f      	ldr	r3, [pc, #124]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c001596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00159c:	68fb      	ldr	r3, [r7, #12]
 c00159e:	43db      	mvns	r3, r3
 c0015a0:	693a      	ldr	r2, [r7, #16]
 c0015a2:	4013      	ands	r3, r2
 c0015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c0015a6:	683b      	ldr	r3, [r7, #0]
 c0015a8:	685b      	ldr	r3, [r3, #4]
 c0015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0015ae:	2b00      	cmp	r3, #0
 c0015b0:	d003      	beq.n	c0015ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c0015b2:	693a      	ldr	r2, [r7, #16]
 c0015b4:	68fb      	ldr	r3, [r7, #12]
 c0015b6:	4313      	orrs	r3, r2
 c0015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c0015ba:	4a16      	ldr	r2, [pc, #88]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c0015bc:	693b      	ldr	r3, [r7, #16]
 c0015be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c0015c2:	4b14      	ldr	r3, [pc, #80]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c0015c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0015ca:	68fb      	ldr	r3, [r7, #12]
 c0015cc:	43db      	mvns	r3, r3
 c0015ce:	693a      	ldr	r2, [r7, #16]
 c0015d0:	4013      	ands	r3, r2
 c0015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c0015d4:	683b      	ldr	r3, [r7, #0]
 c0015d6:	685b      	ldr	r3, [r3, #4]
 c0015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0015dc:	2b00      	cmp	r3, #0
 c0015de:	d003      	beq.n	c0015e8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c0015e0:	693a      	ldr	r2, [r7, #16]
 c0015e2:	68fb      	ldr	r3, [r7, #12]
 c0015e4:	4313      	orrs	r3, r2
 c0015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0015e8:	4a0a      	ldr	r2, [pc, #40]	; (c001614 <HAL_GPIO_Init+0x2e0>)
 c0015ea:	693b      	ldr	r3, [r7, #16]
 c0015ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c0015f0:	697b      	ldr	r3, [r7, #20]
 c0015f2:	3301      	adds	r3, #1
 c0015f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0015f6:	683b      	ldr	r3, [r7, #0]
 c0015f8:	681a      	ldr	r2, [r3, #0]
 c0015fa:	697b      	ldr	r3, [r7, #20]
 c0015fc:	fa22 f303 	lsr.w	r3, r2, r3
 c001600:	2b00      	cmp	r3, #0
 c001602:	f47f ae9f 	bne.w	c001344 <HAL_GPIO_Init+0x10>
  }
}
 c001606:	bf00      	nop
 c001608:	bf00      	nop
 c00160a:	371c      	adds	r7, #28
 c00160c:	46bd      	mov	sp, r7
 c00160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001612:	4770      	bx	lr
 c001614:	5002f400 	.word	0x5002f400
 c001618:	52020000 	.word	0x52020000
 c00161c:	52020400 	.word	0x52020400
 c001620:	52020800 	.word	0x52020800
 c001624:	52020c00 	.word	0x52020c00
 c001628:	52021000 	.word	0x52021000
 c00162c:	52021400 	.word	0x52021400
 c001630:	52021800 	.word	0x52021800

0c001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001634:	b480      	push	{r7}
 c001636:	b083      	sub	sp, #12
 c001638:	af00      	add	r7, sp, #0
 c00163a:	6078      	str	r0, [r7, #4]
 c00163c:	460b      	mov	r3, r1
 c00163e:	807b      	strh	r3, [r7, #2]
 c001640:	4613      	mov	r3, r2
 c001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001644:	787b      	ldrb	r3, [r7, #1]
 c001646:	2b00      	cmp	r3, #0
 c001648:	d003      	beq.n	c001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c00164a:	887a      	ldrh	r2, [r7, #2]
 c00164c:	687b      	ldr	r3, [r7, #4]
 c00164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001650:	e002      	b.n	c001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001652:	887a      	ldrh	r2, [r7, #2]
 c001654:	687b      	ldr	r3, [r7, #4]
 c001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001658:	bf00      	nop
 c00165a:	370c      	adds	r7, #12
 c00165c:	46bd      	mov	sp, r7
 c00165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001662:	4770      	bx	lr

0c001664 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001664:	b480      	push	{r7}
 c001666:	b089      	sub	sp, #36	; 0x24
 c001668:	af00      	add	r7, sp, #0
 c00166a:	60f8      	str	r0, [r7, #12]
 c00166c:	460b      	mov	r3, r1
 c00166e:	607a      	str	r2, [r7, #4]
 c001670:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001672:	2300      	movs	r3, #0
 c001674:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001676:	68fb      	ldr	r3, [r7, #12]
 c001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00167a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00167c:	e01b      	b.n	c0016b6 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00167e:	897a      	ldrh	r2, [r7, #10]
 c001680:	2101      	movs	r1, #1
 c001682:	69fb      	ldr	r3, [r7, #28]
 c001684:	fa01 f303 	lsl.w	r3, r1, r3
 c001688:	4013      	ands	r3, r2
 c00168a:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c00168c:	697b      	ldr	r3, [r7, #20]
 c00168e:	2b00      	cmp	r3, #0
 c001690:	d00e      	beq.n	c0016b0 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001692:	2201      	movs	r2, #1
 c001694:	69fb      	ldr	r3, [r7, #28]
 c001696:	fa02 f303 	lsl.w	r3, r2, r3
 c00169a:	43db      	mvns	r3, r3
 c00169c:	69ba      	ldr	r2, [r7, #24]
 c00169e:	4013      	ands	r3, r2
 c0016a0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c0016a2:	687a      	ldr	r2, [r7, #4]
 c0016a4:	69fb      	ldr	r3, [r7, #28]
 c0016a6:	fa02 f303 	lsl.w	r3, r2, r3
 c0016aa:	69ba      	ldr	r2, [r7, #24]
 c0016ac:	4313      	orrs	r3, r2
 c0016ae:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c0016b0:	69fb      	ldr	r3, [r7, #28]
 c0016b2:	3301      	adds	r3, #1
 c0016b4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0016b6:	897a      	ldrh	r2, [r7, #10]
 c0016b8:	69fb      	ldr	r3, [r7, #28]
 c0016ba:	fa42 f303 	asr.w	r3, r2, r3
 c0016be:	2b00      	cmp	r3, #0
 c0016c0:	d1dd      	bne.n	c00167e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c0016c2:	68fb      	ldr	r3, [r7, #12]
 c0016c4:	69ba      	ldr	r2, [r7, #24]
 c0016c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 c0016c8:	bf00      	nop
 c0016ca:	3724      	adds	r7, #36	; 0x24
 c0016cc:	46bd      	mov	sp, r7
 c0016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016d2:	4770      	bx	lr

0c0016d4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0016d4:	b480      	push	{r7}
 c0016d6:	b089      	sub	sp, #36	; 0x24
 c0016d8:	af00      	add	r7, sp, #0
 c0016da:	6078      	str	r0, [r7, #4]
 c0016dc:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0016de:	687b      	ldr	r3, [r7, #4]
 c0016e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0016e4:	d00b      	beq.n	c0016fe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0016e6:	687b      	ldr	r3, [r7, #4]
 c0016e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0016ec:	d007      	beq.n	c0016fe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0016ee:	687b      	ldr	r3, [r7, #4]
 c0016f0:	4a36      	ldr	r2, [pc, #216]	; (c0017cc <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0016f2:	4293      	cmp	r3, r2
 c0016f4:	d003      	beq.n	c0016fe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0016f6:	687b      	ldr	r3, [r7, #4]
 c0016f8:	4a35      	ldr	r2, [pc, #212]	; (c0017d0 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0016fa:	4293      	cmp	r3, r2
 c0016fc:	d111      	bne.n	c001722 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0016fe:	683b      	ldr	r3, [r7, #0]
 c001700:	681b      	ldr	r3, [r3, #0]
 c001702:	2b00      	cmp	r3, #0
 c001704:	d004      	beq.n	c001710 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001706:	683b      	ldr	r3, [r7, #0]
 c001708:	681b      	ldr	r3, [r3, #0]
 c00170a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00170e:	d108      	bne.n	c001722 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001710:	683b      	ldr	r3, [r7, #0]
 c001712:	685b      	ldr	r3, [r3, #4]
 c001714:	2b00      	cmp	r3, #0
 c001716:	d006      	beq.n	c001726 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001718:	683b      	ldr	r3, [r7, #0]
 c00171a:	685b      	ldr	r3, [r3, #4]
 c00171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001720:	d001      	beq.n	c001726 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c001722:	2301      	movs	r3, #1
 c001724:	e04b      	b.n	c0017be <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001726:	683b      	ldr	r3, [r7, #0]
 c001728:	685b      	ldr	r3, [r3, #4]
 c00172a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00172c:	683b      	ldr	r3, [r7, #0]
 c00172e:	681b      	ldr	r3, [r3, #0]
 c001730:	693a      	ldr	r2, [r7, #16]
 c001732:	4313      	orrs	r3, r2
 c001734:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001736:	687b      	ldr	r3, [r7, #4]
 c001738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00173c:	d003      	beq.n	c001746 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00173e:	687b      	ldr	r3, [r7, #4]
 c001740:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001744:	d105      	bne.n	c001752 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001746:	4b23      	ldr	r3, [pc, #140]	; (c0017d4 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001748:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00174a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00174e:	61bb      	str	r3, [r7, #24]
 c001750:	e004      	b.n	c00175c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001752:	4b21      	ldr	r3, [pc, #132]	; (c0017d8 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001754:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00175a:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00175c:	69bb      	ldr	r3, [r7, #24]
 c00175e:	0b5b      	lsrs	r3, r3, #13
 c001760:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c001762:	2300      	movs	r3, #0
 c001764:	617b      	str	r3, [r7, #20]
 c001766:	e00c      	b.n	c001782 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001768:	683b      	ldr	r3, [r7, #0]
 c00176a:	697a      	ldr	r2, [r7, #20]
 c00176c:	3202      	adds	r2, #2
 c00176e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001772:	69fb      	ldr	r3, [r7, #28]
 c001774:	697a      	ldr	r2, [r7, #20]
 c001776:	3240      	adds	r2, #64	; 0x40
 c001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00177c:	697b      	ldr	r3, [r7, #20]
 c00177e:	3301      	adds	r3, #1
 c001780:	617b      	str	r3, [r7, #20]
 c001782:	697a      	ldr	r2, [r7, #20]
 c001784:	68fb      	ldr	r3, [r7, #12]
 c001786:	429a      	cmp	r2, r3
 c001788:	d3ee      	bcc.n	c001768 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c00178a:	69fb      	ldr	r3, [r7, #28]
 c00178c:	681b      	ldr	r3, [r3, #0]
 c00178e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001792:	693b      	ldr	r3, [r7, #16]
 c001794:	431a      	orrs	r2, r3
 c001796:	69fb      	ldr	r3, [r7, #28]
 c001798:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c00179a:	69bb      	ldr	r3, [r7, #24]
 c00179c:	0b5b      	lsrs	r3, r3, #13
 c00179e:	2201      	movs	r2, #1
 c0017a0:	fa02 f303 	lsl.w	r3, r2, r3
 c0017a4:	3b01      	subs	r3, #1
 c0017a6:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0017a8:	69fb      	ldr	r3, [r7, #28]
 c0017aa:	691a      	ldr	r2, [r3, #16]
 c0017ac:	68bb      	ldr	r3, [r7, #8]
 c0017ae:	43db      	mvns	r3, r3
 c0017b0:	401a      	ands	r2, r3
 c0017b2:	683b      	ldr	r3, [r7, #0]
 c0017b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0017b6:	431a      	orrs	r2, r3
 c0017b8:	69fb      	ldr	r3, [r7, #28]
 c0017ba:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c0017bc:	2300      	movs	r3, #0
}
 c0017be:	4618      	mov	r0, r3
 c0017c0:	3724      	adds	r7, #36	; 0x24
 c0017c2:	46bd      	mov	sp, r7
 c0017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017c8:	4770      	bx	lr
 c0017ca:	bf00      	nop
 c0017cc:	20030000 	.word	0x20030000
 c0017d0:	30030000 	.word	0x30030000
 c0017d4:	50032c00 	.word	0x50032c00
 c0017d8:	50033000 	.word	0x50033000

0c0017dc <malloc>:
 c0017dc:	4b02      	ldr	r3, [pc, #8]	; (c0017e8 <malloc+0xc>)
 c0017de:	4601      	mov	r1, r0
 c0017e0:	6818      	ldr	r0, [r3, #0]
 c0017e2:	f000 b823 	b.w	c00182c <_malloc_r>
 c0017e6:	bf00      	nop
 c0017e8:	30000064 	.word	0x30000064

0c0017ec <sbrk_aligned>:
 c0017ec:	b570      	push	{r4, r5, r6, lr}
 c0017ee:	4e0e      	ldr	r6, [pc, #56]	; (c001828 <sbrk_aligned+0x3c>)
 c0017f0:	460c      	mov	r4, r1
 c0017f2:	4605      	mov	r5, r0
 c0017f4:	6831      	ldr	r1, [r6, #0]
 c0017f6:	b911      	cbnz	r1, c0017fe <sbrk_aligned+0x12>
 c0017f8:	f000 f9ca 	bl	c001b90 <_sbrk_r>
 c0017fc:	6030      	str	r0, [r6, #0]
 c0017fe:	4621      	mov	r1, r4
 c001800:	4628      	mov	r0, r5
 c001802:	f000 f9c5 	bl	c001b90 <_sbrk_r>
 c001806:	1c43      	adds	r3, r0, #1
 c001808:	d00a      	beq.n	c001820 <sbrk_aligned+0x34>
 c00180a:	1cc4      	adds	r4, r0, #3
 c00180c:	f024 0403 	bic.w	r4, r4, #3
 c001810:	42a0      	cmp	r0, r4
 c001812:	d007      	beq.n	c001824 <sbrk_aligned+0x38>
 c001814:	1a21      	subs	r1, r4, r0
 c001816:	4628      	mov	r0, r5
 c001818:	f000 f9ba 	bl	c001b90 <_sbrk_r>
 c00181c:	3001      	adds	r0, #1
 c00181e:	d101      	bne.n	c001824 <sbrk_aligned+0x38>
 c001820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 c001824:	4620      	mov	r0, r4
 c001826:	bd70      	pop	{r4, r5, r6, pc}
 c001828:	300000dc 	.word	0x300000dc

0c00182c <_malloc_r>:
 c00182c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001830:	1ccd      	adds	r5, r1, #3
 c001832:	4607      	mov	r7, r0
 c001834:	f025 0503 	bic.w	r5, r5, #3
 c001838:	3508      	adds	r5, #8
 c00183a:	2d0c      	cmp	r5, #12
 c00183c:	bf38      	it	cc
 c00183e:	250c      	movcc	r5, #12
 c001840:	2d00      	cmp	r5, #0
 c001842:	db01      	blt.n	c001848 <_malloc_r+0x1c>
 c001844:	42a9      	cmp	r1, r5
 c001846:	d905      	bls.n	c001854 <_malloc_r+0x28>
 c001848:	230c      	movs	r3, #12
 c00184a:	2600      	movs	r6, #0
 c00184c:	603b      	str	r3, [r7, #0]
 c00184e:	4630      	mov	r0, r6
 c001850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c001854:	f8df 80d0 	ldr.w	r8, [pc, #208]	; c001928 <_malloc_r+0xfc>
 c001858:	f000 f868 	bl	c00192c <__malloc_lock>
 c00185c:	f8d8 3000 	ldr.w	r3, [r8]
 c001860:	461c      	mov	r4, r3
 c001862:	bb5c      	cbnz	r4, c0018bc <_malloc_r+0x90>
 c001864:	4629      	mov	r1, r5
 c001866:	4638      	mov	r0, r7
 c001868:	f7ff ffc0 	bl	c0017ec <sbrk_aligned>
 c00186c:	1c43      	adds	r3, r0, #1
 c00186e:	4604      	mov	r4, r0
 c001870:	d155      	bne.n	c00191e <_malloc_r+0xf2>
 c001872:	f8d8 4000 	ldr.w	r4, [r8]
 c001876:	4626      	mov	r6, r4
 c001878:	2e00      	cmp	r6, #0
 c00187a:	d145      	bne.n	c001908 <_malloc_r+0xdc>
 c00187c:	2c00      	cmp	r4, #0
 c00187e:	d048      	beq.n	c001912 <_malloc_r+0xe6>
 c001880:	6823      	ldr	r3, [r4, #0]
 c001882:	4631      	mov	r1, r6
 c001884:	4638      	mov	r0, r7
 c001886:	eb04 0903 	add.w	r9, r4, r3
 c00188a:	f000 f981 	bl	c001b90 <_sbrk_r>
 c00188e:	4581      	cmp	r9, r0
 c001890:	d13f      	bne.n	c001912 <_malloc_r+0xe6>
 c001892:	6821      	ldr	r1, [r4, #0]
 c001894:	4638      	mov	r0, r7
 c001896:	1a6d      	subs	r5, r5, r1
 c001898:	4629      	mov	r1, r5
 c00189a:	f7ff ffa7 	bl	c0017ec <sbrk_aligned>
 c00189e:	3001      	adds	r0, #1
 c0018a0:	d037      	beq.n	c001912 <_malloc_r+0xe6>
 c0018a2:	6823      	ldr	r3, [r4, #0]
 c0018a4:	442b      	add	r3, r5
 c0018a6:	6023      	str	r3, [r4, #0]
 c0018a8:	f8d8 3000 	ldr.w	r3, [r8]
 c0018ac:	2b00      	cmp	r3, #0
 c0018ae:	d038      	beq.n	c001922 <_malloc_r+0xf6>
 c0018b0:	685a      	ldr	r2, [r3, #4]
 c0018b2:	42a2      	cmp	r2, r4
 c0018b4:	d12b      	bne.n	c00190e <_malloc_r+0xe2>
 c0018b6:	2200      	movs	r2, #0
 c0018b8:	605a      	str	r2, [r3, #4]
 c0018ba:	e00f      	b.n	c0018dc <_malloc_r+0xb0>
 c0018bc:	6822      	ldr	r2, [r4, #0]
 c0018be:	1b52      	subs	r2, r2, r5
 c0018c0:	d41f      	bmi.n	c001902 <_malloc_r+0xd6>
 c0018c2:	2a0b      	cmp	r2, #11
 c0018c4:	d917      	bls.n	c0018f6 <_malloc_r+0xca>
 c0018c6:	1961      	adds	r1, r4, r5
 c0018c8:	42a3      	cmp	r3, r4
 c0018ca:	6025      	str	r5, [r4, #0]
 c0018cc:	bf18      	it	ne
 c0018ce:	6059      	strne	r1, [r3, #4]
 c0018d0:	6863      	ldr	r3, [r4, #4]
 c0018d2:	bf08      	it	eq
 c0018d4:	f8c8 1000 	streq.w	r1, [r8]
 c0018d8:	5162      	str	r2, [r4, r5]
 c0018da:	604b      	str	r3, [r1, #4]
 c0018dc:	f104 060b 	add.w	r6, r4, #11
 c0018e0:	4638      	mov	r0, r7
 c0018e2:	f000 f829 	bl	c001938 <__malloc_unlock>
 c0018e6:	1d23      	adds	r3, r4, #4
 c0018e8:	f026 0607 	bic.w	r6, r6, #7
 c0018ec:	1af2      	subs	r2, r6, r3
 c0018ee:	d0ae      	beq.n	c00184e <_malloc_r+0x22>
 c0018f0:	1b9b      	subs	r3, r3, r6
 c0018f2:	50a3      	str	r3, [r4, r2]
 c0018f4:	e7ab      	b.n	c00184e <_malloc_r+0x22>
 c0018f6:	42a3      	cmp	r3, r4
 c0018f8:	6862      	ldr	r2, [r4, #4]
 c0018fa:	d1dd      	bne.n	c0018b8 <_malloc_r+0x8c>
 c0018fc:	f8c8 2000 	str.w	r2, [r8]
 c001900:	e7ec      	b.n	c0018dc <_malloc_r+0xb0>
 c001902:	4623      	mov	r3, r4
 c001904:	6864      	ldr	r4, [r4, #4]
 c001906:	e7ac      	b.n	c001862 <_malloc_r+0x36>
 c001908:	4634      	mov	r4, r6
 c00190a:	6876      	ldr	r6, [r6, #4]
 c00190c:	e7b4      	b.n	c001878 <_malloc_r+0x4c>
 c00190e:	4613      	mov	r3, r2
 c001910:	e7cc      	b.n	c0018ac <_malloc_r+0x80>
 c001912:	230c      	movs	r3, #12
 c001914:	4638      	mov	r0, r7
 c001916:	603b      	str	r3, [r7, #0]
 c001918:	f000 f80e 	bl	c001938 <__malloc_unlock>
 c00191c:	e797      	b.n	c00184e <_malloc_r+0x22>
 c00191e:	6025      	str	r5, [r4, #0]
 c001920:	e7dc      	b.n	c0018dc <_malloc_r+0xb0>
 c001922:	605b      	str	r3, [r3, #4]
 c001924:	deff      	udf	#255	; 0xff
 c001926:	bf00      	nop
 c001928:	300000d8 	.word	0x300000d8

0c00192c <__malloc_lock>:
 c00192c:	4801      	ldr	r0, [pc, #4]	; (c001934 <__malloc_lock+0x8>)
 c00192e:	f000 b96a 	b.w	c001c06 <__retarget_lock_acquire_recursive>
 c001932:	bf00      	nop
 c001934:	3000021c 	.word	0x3000021c

0c001938 <__malloc_unlock>:
 c001938:	4801      	ldr	r0, [pc, #4]	; (c001940 <__malloc_unlock+0x8>)
 c00193a:	f000 b965 	b.w	c001c08 <__retarget_lock_release_recursive>
 c00193e:	bf00      	nop
 c001940:	3000021c 	.word	0x3000021c

0c001944 <std>:
 c001944:	2300      	movs	r3, #0
 c001946:	b510      	push	{r4, lr}
 c001948:	4604      	mov	r4, r0
 c00194a:	6083      	str	r3, [r0, #8]
 c00194c:	8181      	strh	r1, [r0, #12]
 c00194e:	4619      	mov	r1, r3
 c001950:	6643      	str	r3, [r0, #100]	; 0x64
 c001952:	81c2      	strh	r2, [r0, #14]
 c001954:	2208      	movs	r2, #8
 c001956:	6183      	str	r3, [r0, #24]
 c001958:	e9c0 3300 	strd	r3, r3, [r0]
 c00195c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c001960:	305c      	adds	r0, #92	; 0x5c
 c001962:	f000 f90d 	bl	c001b80 <memset>
 c001966:	4b0d      	ldr	r3, [pc, #52]	; (c00199c <std+0x58>)
 c001968:	6224      	str	r4, [r4, #32]
 c00196a:	6263      	str	r3, [r4, #36]	; 0x24
 c00196c:	4b0c      	ldr	r3, [pc, #48]	; (c0019a0 <std+0x5c>)
 c00196e:	62a3      	str	r3, [r4, #40]	; 0x28
 c001970:	4b0c      	ldr	r3, [pc, #48]	; (c0019a4 <std+0x60>)
 c001972:	62e3      	str	r3, [r4, #44]	; 0x2c
 c001974:	4b0c      	ldr	r3, [pc, #48]	; (c0019a8 <std+0x64>)
 c001976:	6323      	str	r3, [r4, #48]	; 0x30
 c001978:	4b0c      	ldr	r3, [pc, #48]	; (c0019ac <std+0x68>)
 c00197a:	429c      	cmp	r4, r3
 c00197c:	d006      	beq.n	c00198c <std+0x48>
 c00197e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 c001982:	4294      	cmp	r4, r2
 c001984:	d002      	beq.n	c00198c <std+0x48>
 c001986:	33d0      	adds	r3, #208	; 0xd0
 c001988:	429c      	cmp	r4, r3
 c00198a:	d105      	bne.n	c001998 <std+0x54>
 c00198c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c001990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001994:	f000 b936 	b.w	c001c04 <__retarget_lock_init_recursive>
 c001998:	bd10      	pop	{r4, pc}
 c00199a:	bf00      	nop
 c00199c:	0c001dfd 	.word	0x0c001dfd
 c0019a0:	0c001e1f 	.word	0x0c001e1f
 c0019a4:	0c001e57 	.word	0x0c001e57
 c0019a8:	0c001e7b 	.word	0x0c001e7b
 c0019ac:	300000e0 	.word	0x300000e0

0c0019b0 <stdio_exit_handler>:
 c0019b0:	4a02      	ldr	r2, [pc, #8]	; (c0019bc <stdio_exit_handler+0xc>)
 c0019b2:	4903      	ldr	r1, [pc, #12]	; (c0019c0 <stdio_exit_handler+0x10>)
 c0019b4:	4803      	ldr	r0, [pc, #12]	; (c0019c4 <stdio_exit_handler+0x14>)
 c0019b6:	f000 b869 	b.w	c001a8c <_fwalk_sglue>
 c0019ba:	bf00      	nop
 c0019bc:	3000000c 	.word	0x3000000c
 c0019c0:	0c001dad 	.word	0x0c001dad
 c0019c4:	30000018 	.word	0x30000018

0c0019c8 <cleanup_stdio>:
 c0019c8:	6841      	ldr	r1, [r0, #4]
 c0019ca:	4b0c      	ldr	r3, [pc, #48]	; (c0019fc <cleanup_stdio+0x34>)
 c0019cc:	4299      	cmp	r1, r3
 c0019ce:	b510      	push	{r4, lr}
 c0019d0:	4604      	mov	r4, r0
 c0019d2:	d001      	beq.n	c0019d8 <cleanup_stdio+0x10>
 c0019d4:	f000 f9ea 	bl	c001dac <_fflush_r>
 c0019d8:	68a1      	ldr	r1, [r4, #8]
 c0019da:	4b09      	ldr	r3, [pc, #36]	; (c001a00 <cleanup_stdio+0x38>)
 c0019dc:	4299      	cmp	r1, r3
 c0019de:	d002      	beq.n	c0019e6 <cleanup_stdio+0x1e>
 c0019e0:	4620      	mov	r0, r4
 c0019e2:	f000 f9e3 	bl	c001dac <_fflush_r>
 c0019e6:	68e1      	ldr	r1, [r4, #12]
 c0019e8:	4b06      	ldr	r3, [pc, #24]	; (c001a04 <cleanup_stdio+0x3c>)
 c0019ea:	4299      	cmp	r1, r3
 c0019ec:	d004      	beq.n	c0019f8 <cleanup_stdio+0x30>
 c0019ee:	4620      	mov	r0, r4
 c0019f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0019f4:	f000 b9da 	b.w	c001dac <_fflush_r>
 c0019f8:	bd10      	pop	{r4, pc}
 c0019fa:	bf00      	nop
 c0019fc:	300000e0 	.word	0x300000e0
 c001a00:	30000148 	.word	0x30000148
 c001a04:	300001b0 	.word	0x300001b0

0c001a08 <global_stdio_init.part.0>:
 c001a08:	b510      	push	{r4, lr}
 c001a0a:	4b0b      	ldr	r3, [pc, #44]	; (c001a38 <global_stdio_init.part.0+0x30>)
 c001a0c:	2104      	movs	r1, #4
 c001a0e:	4c0b      	ldr	r4, [pc, #44]	; (c001a3c <global_stdio_init.part.0+0x34>)
 c001a10:	4a0b      	ldr	r2, [pc, #44]	; (c001a40 <global_stdio_init.part.0+0x38>)
 c001a12:	4620      	mov	r0, r4
 c001a14:	601a      	str	r2, [r3, #0]
 c001a16:	2200      	movs	r2, #0
 c001a18:	f7ff ff94 	bl	c001944 <std>
 c001a1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 c001a20:	2201      	movs	r2, #1
 c001a22:	2109      	movs	r1, #9
 c001a24:	f7ff ff8e 	bl	c001944 <std>
 c001a28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 c001a2c:	2202      	movs	r2, #2
 c001a2e:	2112      	movs	r1, #18
 c001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001a34:	f7ff bf86 	b.w	c001944 <std>
 c001a38:	30000218 	.word	0x30000218
 c001a3c:	300000e0 	.word	0x300000e0
 c001a40:	0c0019b1 	.word	0x0c0019b1

0c001a44 <__sfp_lock_acquire>:
 c001a44:	4801      	ldr	r0, [pc, #4]	; (c001a4c <__sfp_lock_acquire+0x8>)
 c001a46:	f000 b8de 	b.w	c001c06 <__retarget_lock_acquire_recursive>
 c001a4a:	bf00      	nop
 c001a4c:	3000021d 	.word	0x3000021d

0c001a50 <__sfp_lock_release>:
 c001a50:	4801      	ldr	r0, [pc, #4]	; (c001a58 <__sfp_lock_release+0x8>)
 c001a52:	f000 b8d9 	b.w	c001c08 <__retarget_lock_release_recursive>
 c001a56:	bf00      	nop
 c001a58:	3000021d 	.word	0x3000021d

0c001a5c <__sinit>:
 c001a5c:	b510      	push	{r4, lr}
 c001a5e:	4604      	mov	r4, r0
 c001a60:	f7ff fff0 	bl	c001a44 <__sfp_lock_acquire>
 c001a64:	6a23      	ldr	r3, [r4, #32]
 c001a66:	b11b      	cbz	r3, c001a70 <__sinit+0x14>
 c001a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001a6c:	f7ff bff0 	b.w	c001a50 <__sfp_lock_release>
 c001a70:	4b04      	ldr	r3, [pc, #16]	; (c001a84 <__sinit+0x28>)
 c001a72:	6223      	str	r3, [r4, #32]
 c001a74:	4b04      	ldr	r3, [pc, #16]	; (c001a88 <__sinit+0x2c>)
 c001a76:	681b      	ldr	r3, [r3, #0]
 c001a78:	2b00      	cmp	r3, #0
 c001a7a:	d1f5      	bne.n	c001a68 <__sinit+0xc>
 c001a7c:	f7ff ffc4 	bl	c001a08 <global_stdio_init.part.0>
 c001a80:	e7f2      	b.n	c001a68 <__sinit+0xc>
 c001a82:	bf00      	nop
 c001a84:	0c0019c9 	.word	0x0c0019c9
 c001a88:	30000218 	.word	0x30000218

0c001a8c <_fwalk_sglue>:
 c001a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001a90:	4607      	mov	r7, r0
 c001a92:	4688      	mov	r8, r1
 c001a94:	4614      	mov	r4, r2
 c001a96:	2600      	movs	r6, #0
 c001a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c001a9c:	f1b9 0901 	subs.w	r9, r9, #1
 c001aa0:	d505      	bpl.n	c001aae <_fwalk_sglue+0x22>
 c001aa2:	6824      	ldr	r4, [r4, #0]
 c001aa4:	2c00      	cmp	r4, #0
 c001aa6:	d1f7      	bne.n	c001a98 <_fwalk_sglue+0xc>
 c001aa8:	4630      	mov	r0, r6
 c001aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c001aae:	89ab      	ldrh	r3, [r5, #12]
 c001ab0:	2b01      	cmp	r3, #1
 c001ab2:	d907      	bls.n	c001ac4 <_fwalk_sglue+0x38>
 c001ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c001ab8:	3301      	adds	r3, #1
 c001aba:	d003      	beq.n	c001ac4 <_fwalk_sglue+0x38>
 c001abc:	4629      	mov	r1, r5
 c001abe:	4638      	mov	r0, r7
 c001ac0:	47c0      	blx	r8
 c001ac2:	4306      	orrs	r6, r0
 c001ac4:	3568      	adds	r5, #104	; 0x68
 c001ac6:	e7e9      	b.n	c001a9c <_fwalk_sglue+0x10>

0c001ac8 <_puts_r>:
 c001ac8:	6a03      	ldr	r3, [r0, #32]
 c001aca:	b570      	push	{r4, r5, r6, lr}
 c001acc:	4605      	mov	r5, r0
 c001ace:	460e      	mov	r6, r1
 c001ad0:	6884      	ldr	r4, [r0, #8]
 c001ad2:	b90b      	cbnz	r3, c001ad8 <_puts_r+0x10>
 c001ad4:	f7ff ffc2 	bl	c001a5c <__sinit>
 c001ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001ada:	07db      	lsls	r3, r3, #31
 c001adc:	d405      	bmi.n	c001aea <_puts_r+0x22>
 c001ade:	89a3      	ldrh	r3, [r4, #12]
 c001ae0:	0598      	lsls	r0, r3, #22
 c001ae2:	d402      	bmi.n	c001aea <_puts_r+0x22>
 c001ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001ae6:	f000 f88e 	bl	c001c06 <__retarget_lock_acquire_recursive>
 c001aea:	89a3      	ldrh	r3, [r4, #12]
 c001aec:	0719      	lsls	r1, r3, #28
 c001aee:	d513      	bpl.n	c001b18 <_puts_r+0x50>
 c001af0:	6923      	ldr	r3, [r4, #16]
 c001af2:	b18b      	cbz	r3, c001b18 <_puts_r+0x50>
 c001af4:	3e01      	subs	r6, #1
 c001af6:	68a3      	ldr	r3, [r4, #8]
 c001af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c001afc:	3b01      	subs	r3, #1
 c001afe:	60a3      	str	r3, [r4, #8]
 c001b00:	b9e9      	cbnz	r1, c001b3e <_puts_r+0x76>
 c001b02:	2b00      	cmp	r3, #0
 c001b04:	da2e      	bge.n	c001b64 <_puts_r+0x9c>
 c001b06:	4622      	mov	r2, r4
 c001b08:	210a      	movs	r1, #10
 c001b0a:	4628      	mov	r0, r5
 c001b0c:	f000 f9b9 	bl	c001e82 <__swbuf_r>
 c001b10:	3001      	adds	r0, #1
 c001b12:	d007      	beq.n	c001b24 <_puts_r+0x5c>
 c001b14:	250a      	movs	r5, #10
 c001b16:	e007      	b.n	c001b28 <_puts_r+0x60>
 c001b18:	4621      	mov	r1, r4
 c001b1a:	4628      	mov	r0, r5
 c001b1c:	f000 f9ee 	bl	c001efc <__swsetup_r>
 c001b20:	2800      	cmp	r0, #0
 c001b22:	d0e7      	beq.n	c001af4 <_puts_r+0x2c>
 c001b24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 c001b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001b2a:	07da      	lsls	r2, r3, #31
 c001b2c:	d405      	bmi.n	c001b3a <_puts_r+0x72>
 c001b2e:	89a3      	ldrh	r3, [r4, #12]
 c001b30:	059b      	lsls	r3, r3, #22
 c001b32:	d402      	bmi.n	c001b3a <_puts_r+0x72>
 c001b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001b36:	f000 f867 	bl	c001c08 <__retarget_lock_release_recursive>
 c001b3a:	4628      	mov	r0, r5
 c001b3c:	bd70      	pop	{r4, r5, r6, pc}
 c001b3e:	2b00      	cmp	r3, #0
 c001b40:	da04      	bge.n	c001b4c <_puts_r+0x84>
 c001b42:	69a2      	ldr	r2, [r4, #24]
 c001b44:	429a      	cmp	r2, r3
 c001b46:	dc06      	bgt.n	c001b56 <_puts_r+0x8e>
 c001b48:	290a      	cmp	r1, #10
 c001b4a:	d004      	beq.n	c001b56 <_puts_r+0x8e>
 c001b4c:	6823      	ldr	r3, [r4, #0]
 c001b4e:	1c5a      	adds	r2, r3, #1
 c001b50:	6022      	str	r2, [r4, #0]
 c001b52:	7019      	strb	r1, [r3, #0]
 c001b54:	e7cf      	b.n	c001af6 <_puts_r+0x2e>
 c001b56:	4622      	mov	r2, r4
 c001b58:	4628      	mov	r0, r5
 c001b5a:	f000 f992 	bl	c001e82 <__swbuf_r>
 c001b5e:	3001      	adds	r0, #1
 c001b60:	d1c9      	bne.n	c001af6 <_puts_r+0x2e>
 c001b62:	e7df      	b.n	c001b24 <_puts_r+0x5c>
 c001b64:	6823      	ldr	r3, [r4, #0]
 c001b66:	250a      	movs	r5, #10
 c001b68:	1c5a      	adds	r2, r3, #1
 c001b6a:	6022      	str	r2, [r4, #0]
 c001b6c:	701d      	strb	r5, [r3, #0]
 c001b6e:	e7db      	b.n	c001b28 <_puts_r+0x60>

0c001b70 <puts>:
 c001b70:	4b02      	ldr	r3, [pc, #8]	; (c001b7c <puts+0xc>)
 c001b72:	4601      	mov	r1, r0
 c001b74:	6818      	ldr	r0, [r3, #0]
 c001b76:	f7ff bfa7 	b.w	c001ac8 <_puts_r>
 c001b7a:	bf00      	nop
 c001b7c:	30000064 	.word	0x30000064

0c001b80 <memset>:
 c001b80:	4402      	add	r2, r0
 c001b82:	4603      	mov	r3, r0
 c001b84:	4293      	cmp	r3, r2
 c001b86:	d100      	bne.n	c001b8a <memset+0xa>
 c001b88:	4770      	bx	lr
 c001b8a:	f803 1b01 	strb.w	r1, [r3], #1
 c001b8e:	e7f9      	b.n	c001b84 <memset+0x4>

0c001b90 <_sbrk_r>:
 c001b90:	b538      	push	{r3, r4, r5, lr}
 c001b92:	2300      	movs	r3, #0
 c001b94:	4d05      	ldr	r5, [pc, #20]	; (c001bac <_sbrk_r+0x1c>)
 c001b96:	4604      	mov	r4, r0
 c001b98:	4608      	mov	r0, r1
 c001b9a:	602b      	str	r3, [r5, #0]
 c001b9c:	f7fe fe98 	bl	c0008d0 <_sbrk>
 c001ba0:	1c43      	adds	r3, r0, #1
 c001ba2:	d102      	bne.n	c001baa <_sbrk_r+0x1a>
 c001ba4:	682b      	ldr	r3, [r5, #0]
 c001ba6:	b103      	cbz	r3, c001baa <_sbrk_r+0x1a>
 c001ba8:	6023      	str	r3, [r4, #0]
 c001baa:	bd38      	pop	{r3, r4, r5, pc}
 c001bac:	30000220 	.word	0x30000220

0c001bb0 <__errno>:
 c001bb0:	4b01      	ldr	r3, [pc, #4]	; (c001bb8 <__errno+0x8>)
 c001bb2:	6818      	ldr	r0, [r3, #0]
 c001bb4:	4770      	bx	lr
 c001bb6:	bf00      	nop
 c001bb8:	30000064 	.word	0x30000064

0c001bbc <__libc_init_array>:
 c001bbc:	b570      	push	{r4, r5, r6, lr}
 c001bbe:	4d0d      	ldr	r5, [pc, #52]	; (c001bf4 <__libc_init_array+0x38>)
 c001bc0:	2600      	movs	r6, #0
 c001bc2:	4c0d      	ldr	r4, [pc, #52]	; (c001bf8 <__libc_init_array+0x3c>)
 c001bc4:	1b64      	subs	r4, r4, r5
 c001bc6:	10a4      	asrs	r4, r4, #2
 c001bc8:	42a6      	cmp	r6, r4
 c001bca:	d109      	bne.n	c001be0 <__libc_init_array+0x24>
 c001bcc:	4d0b      	ldr	r5, [pc, #44]	; (c001bfc <__libc_init_array+0x40>)
 c001bce:	2600      	movs	r6, #0
 c001bd0:	4c0b      	ldr	r4, [pc, #44]	; (c001c00 <__libc_init_array+0x44>)
 c001bd2:	f000 fab5 	bl	c002140 <_init>
 c001bd6:	1b64      	subs	r4, r4, r5
 c001bd8:	10a4      	asrs	r4, r4, #2
 c001bda:	42a6      	cmp	r6, r4
 c001bdc:	d105      	bne.n	c001bea <__libc_init_array+0x2e>
 c001bde:	bd70      	pop	{r4, r5, r6, pc}
 c001be0:	f855 3b04 	ldr.w	r3, [r5], #4
 c001be4:	3601      	adds	r6, #1
 c001be6:	4798      	blx	r3
 c001be8:	e7ee      	b.n	c001bc8 <__libc_init_array+0xc>
 c001bea:	f855 3b04 	ldr.w	r3, [r5], #4
 c001bee:	3601      	adds	r6, #1
 c001bf0:	4798      	blx	r3
 c001bf2:	e7f2      	b.n	c001bda <__libc_init_array+0x1e>
 c001bf4:	0c0021cc 	.word	0x0c0021cc
 c001bf8:	0c0021cc 	.word	0x0c0021cc
 c001bfc:	0c0021cc 	.word	0x0c0021cc
 c001c00:	0c0021d0 	.word	0x0c0021d0

0c001c04 <__retarget_lock_init_recursive>:
 c001c04:	4770      	bx	lr

0c001c06 <__retarget_lock_acquire_recursive>:
 c001c06:	4770      	bx	lr

0c001c08 <__retarget_lock_release_recursive>:
 c001c08:	4770      	bx	lr
	...

0c001c0c <_free_r>:
 c001c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c001c0e:	2900      	cmp	r1, #0
 c001c10:	d043      	beq.n	c001c9a <_free_r+0x8e>
 c001c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c001c16:	1f0c      	subs	r4, r1, #4
 c001c18:	9001      	str	r0, [sp, #4]
 c001c1a:	2b00      	cmp	r3, #0
 c001c1c:	bfb8      	it	lt
 c001c1e:	18e4      	addlt	r4, r4, r3
 c001c20:	f7ff fe84 	bl	c00192c <__malloc_lock>
 c001c24:	4a1e      	ldr	r2, [pc, #120]	; (c001ca0 <_free_r+0x94>)
 c001c26:	9801      	ldr	r0, [sp, #4]
 c001c28:	6813      	ldr	r3, [r2, #0]
 c001c2a:	b933      	cbnz	r3, c001c3a <_free_r+0x2e>
 c001c2c:	6063      	str	r3, [r4, #4]
 c001c2e:	6014      	str	r4, [r2, #0]
 c001c30:	b003      	add	sp, #12
 c001c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c001c36:	f7ff be7f 	b.w	c001938 <__malloc_unlock>
 c001c3a:	42a3      	cmp	r3, r4
 c001c3c:	d908      	bls.n	c001c50 <_free_r+0x44>
 c001c3e:	6825      	ldr	r5, [r4, #0]
 c001c40:	1961      	adds	r1, r4, r5
 c001c42:	428b      	cmp	r3, r1
 c001c44:	bf01      	itttt	eq
 c001c46:	6819      	ldreq	r1, [r3, #0]
 c001c48:	685b      	ldreq	r3, [r3, #4]
 c001c4a:	1949      	addeq	r1, r1, r5
 c001c4c:	6021      	streq	r1, [r4, #0]
 c001c4e:	e7ed      	b.n	c001c2c <_free_r+0x20>
 c001c50:	461a      	mov	r2, r3
 c001c52:	685b      	ldr	r3, [r3, #4]
 c001c54:	b10b      	cbz	r3, c001c5a <_free_r+0x4e>
 c001c56:	42a3      	cmp	r3, r4
 c001c58:	d9fa      	bls.n	c001c50 <_free_r+0x44>
 c001c5a:	6811      	ldr	r1, [r2, #0]
 c001c5c:	1855      	adds	r5, r2, r1
 c001c5e:	42a5      	cmp	r5, r4
 c001c60:	d10b      	bne.n	c001c7a <_free_r+0x6e>
 c001c62:	6824      	ldr	r4, [r4, #0]
 c001c64:	4421      	add	r1, r4
 c001c66:	1854      	adds	r4, r2, r1
 c001c68:	6011      	str	r1, [r2, #0]
 c001c6a:	42a3      	cmp	r3, r4
 c001c6c:	d1e0      	bne.n	c001c30 <_free_r+0x24>
 c001c6e:	681c      	ldr	r4, [r3, #0]
 c001c70:	685b      	ldr	r3, [r3, #4]
 c001c72:	440c      	add	r4, r1
 c001c74:	6053      	str	r3, [r2, #4]
 c001c76:	6014      	str	r4, [r2, #0]
 c001c78:	e7da      	b.n	c001c30 <_free_r+0x24>
 c001c7a:	d902      	bls.n	c001c82 <_free_r+0x76>
 c001c7c:	230c      	movs	r3, #12
 c001c7e:	6003      	str	r3, [r0, #0]
 c001c80:	e7d6      	b.n	c001c30 <_free_r+0x24>
 c001c82:	6825      	ldr	r5, [r4, #0]
 c001c84:	1961      	adds	r1, r4, r5
 c001c86:	428b      	cmp	r3, r1
 c001c88:	bf02      	ittt	eq
 c001c8a:	6819      	ldreq	r1, [r3, #0]
 c001c8c:	685b      	ldreq	r3, [r3, #4]
 c001c8e:	1949      	addeq	r1, r1, r5
 c001c90:	6063      	str	r3, [r4, #4]
 c001c92:	bf08      	it	eq
 c001c94:	6021      	streq	r1, [r4, #0]
 c001c96:	6054      	str	r4, [r2, #4]
 c001c98:	e7ca      	b.n	c001c30 <_free_r+0x24>
 c001c9a:	b003      	add	sp, #12
 c001c9c:	bd30      	pop	{r4, r5, pc}
 c001c9e:	bf00      	nop
 c001ca0:	300000d8 	.word	0x300000d8

0c001ca4 <__sflush_r>:
 c001ca4:	898a      	ldrh	r2, [r1, #12]
 c001ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c001caa:	4605      	mov	r5, r0
 c001cac:	0710      	lsls	r0, r2, #28
 c001cae:	460c      	mov	r4, r1
 c001cb0:	d458      	bmi.n	c001d64 <__sflush_r+0xc0>
 c001cb2:	684b      	ldr	r3, [r1, #4]
 c001cb4:	2b00      	cmp	r3, #0
 c001cb6:	dc05      	bgt.n	c001cc4 <__sflush_r+0x20>
 c001cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c001cba:	2b00      	cmp	r3, #0
 c001cbc:	dc02      	bgt.n	c001cc4 <__sflush_r+0x20>
 c001cbe:	2000      	movs	r0, #0
 c001cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c001cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c001cc6:	2e00      	cmp	r6, #0
 c001cc8:	d0f9      	beq.n	c001cbe <__sflush_r+0x1a>
 c001cca:	2300      	movs	r3, #0
 c001ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c001cd0:	682f      	ldr	r7, [r5, #0]
 c001cd2:	6a21      	ldr	r1, [r4, #32]
 c001cd4:	602b      	str	r3, [r5, #0]
 c001cd6:	d032      	beq.n	c001d3e <__sflush_r+0x9a>
 c001cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c001cda:	89a3      	ldrh	r3, [r4, #12]
 c001cdc:	075a      	lsls	r2, r3, #29
 c001cde:	d505      	bpl.n	c001cec <__sflush_r+0x48>
 c001ce0:	6863      	ldr	r3, [r4, #4]
 c001ce2:	1ac0      	subs	r0, r0, r3
 c001ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c001ce6:	b10b      	cbz	r3, c001cec <__sflush_r+0x48>
 c001ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c001cea:	1ac0      	subs	r0, r0, r3
 c001cec:	2300      	movs	r3, #0
 c001cee:	4602      	mov	r2, r0
 c001cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c001cf2:	4628      	mov	r0, r5
 c001cf4:	6a21      	ldr	r1, [r4, #32]
 c001cf6:	47b0      	blx	r6
 c001cf8:	1c43      	adds	r3, r0, #1
 c001cfa:	89a3      	ldrh	r3, [r4, #12]
 c001cfc:	d106      	bne.n	c001d0c <__sflush_r+0x68>
 c001cfe:	6829      	ldr	r1, [r5, #0]
 c001d00:	291d      	cmp	r1, #29
 c001d02:	d82b      	bhi.n	c001d5c <__sflush_r+0xb8>
 c001d04:	4a28      	ldr	r2, [pc, #160]	; (c001da8 <__sflush_r+0x104>)
 c001d06:	410a      	asrs	r2, r1
 c001d08:	07d6      	lsls	r6, r2, #31
 c001d0a:	d427      	bmi.n	c001d5c <__sflush_r+0xb8>
 c001d0c:	2200      	movs	r2, #0
 c001d0e:	04d9      	lsls	r1, r3, #19
 c001d10:	6062      	str	r2, [r4, #4]
 c001d12:	6922      	ldr	r2, [r4, #16]
 c001d14:	6022      	str	r2, [r4, #0]
 c001d16:	d504      	bpl.n	c001d22 <__sflush_r+0x7e>
 c001d18:	1c42      	adds	r2, r0, #1
 c001d1a:	d101      	bne.n	c001d20 <__sflush_r+0x7c>
 c001d1c:	682b      	ldr	r3, [r5, #0]
 c001d1e:	b903      	cbnz	r3, c001d22 <__sflush_r+0x7e>
 c001d20:	6560      	str	r0, [r4, #84]	; 0x54
 c001d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c001d24:	602f      	str	r7, [r5, #0]
 c001d26:	2900      	cmp	r1, #0
 c001d28:	d0c9      	beq.n	c001cbe <__sflush_r+0x1a>
 c001d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c001d2e:	4299      	cmp	r1, r3
 c001d30:	d002      	beq.n	c001d38 <__sflush_r+0x94>
 c001d32:	4628      	mov	r0, r5
 c001d34:	f7ff ff6a 	bl	c001c0c <_free_r>
 c001d38:	2000      	movs	r0, #0
 c001d3a:	6360      	str	r0, [r4, #52]	; 0x34
 c001d3c:	e7c0      	b.n	c001cc0 <__sflush_r+0x1c>
 c001d3e:	2301      	movs	r3, #1
 c001d40:	4628      	mov	r0, r5
 c001d42:	47b0      	blx	r6
 c001d44:	1c41      	adds	r1, r0, #1
 c001d46:	d1c8      	bne.n	c001cda <__sflush_r+0x36>
 c001d48:	682b      	ldr	r3, [r5, #0]
 c001d4a:	2b00      	cmp	r3, #0
 c001d4c:	d0c5      	beq.n	c001cda <__sflush_r+0x36>
 c001d4e:	2b1d      	cmp	r3, #29
 c001d50:	d001      	beq.n	c001d56 <__sflush_r+0xb2>
 c001d52:	2b16      	cmp	r3, #22
 c001d54:	d101      	bne.n	c001d5a <__sflush_r+0xb6>
 c001d56:	602f      	str	r7, [r5, #0]
 c001d58:	e7b1      	b.n	c001cbe <__sflush_r+0x1a>
 c001d5a:	89a3      	ldrh	r3, [r4, #12]
 c001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001d60:	81a3      	strh	r3, [r4, #12]
 c001d62:	e7ad      	b.n	c001cc0 <__sflush_r+0x1c>
 c001d64:	690f      	ldr	r7, [r1, #16]
 c001d66:	2f00      	cmp	r7, #0
 c001d68:	d0a9      	beq.n	c001cbe <__sflush_r+0x1a>
 c001d6a:	0793      	lsls	r3, r2, #30
 c001d6c:	680e      	ldr	r6, [r1, #0]
 c001d6e:	600f      	str	r7, [r1, #0]
 c001d70:	bf0c      	ite	eq
 c001d72:	694b      	ldreq	r3, [r1, #20]
 c001d74:	2300      	movne	r3, #0
 c001d76:	eba6 0807 	sub.w	r8, r6, r7
 c001d7a:	608b      	str	r3, [r1, #8]
 c001d7c:	f1b8 0f00 	cmp.w	r8, #0
 c001d80:	dd9d      	ble.n	c001cbe <__sflush_r+0x1a>
 c001d82:	4643      	mov	r3, r8
 c001d84:	463a      	mov	r2, r7
 c001d86:	6a21      	ldr	r1, [r4, #32]
 c001d88:	4628      	mov	r0, r5
 c001d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c001d8c:	47b0      	blx	r6
 c001d8e:	2800      	cmp	r0, #0
 c001d90:	dc06      	bgt.n	c001da0 <__sflush_r+0xfc>
 c001d92:	89a3      	ldrh	r3, [r4, #12]
 c001d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001d9c:	81a3      	strh	r3, [r4, #12]
 c001d9e:	e78f      	b.n	c001cc0 <__sflush_r+0x1c>
 c001da0:	4407      	add	r7, r0
 c001da2:	eba8 0800 	sub.w	r8, r8, r0
 c001da6:	e7e9      	b.n	c001d7c <__sflush_r+0xd8>
 c001da8:	dfbffffe 	.word	0xdfbffffe

0c001dac <_fflush_r>:
 c001dac:	b538      	push	{r3, r4, r5, lr}
 c001dae:	690b      	ldr	r3, [r1, #16]
 c001db0:	4605      	mov	r5, r0
 c001db2:	460c      	mov	r4, r1
 c001db4:	b913      	cbnz	r3, c001dbc <_fflush_r+0x10>
 c001db6:	2500      	movs	r5, #0
 c001db8:	4628      	mov	r0, r5
 c001dba:	bd38      	pop	{r3, r4, r5, pc}
 c001dbc:	b118      	cbz	r0, c001dc6 <_fflush_r+0x1a>
 c001dbe:	6a03      	ldr	r3, [r0, #32]
 c001dc0:	b90b      	cbnz	r3, c001dc6 <_fflush_r+0x1a>
 c001dc2:	f7ff fe4b 	bl	c001a5c <__sinit>
 c001dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c001dca:	2b00      	cmp	r3, #0
 c001dcc:	d0f3      	beq.n	c001db6 <_fflush_r+0xa>
 c001dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c001dd0:	07d0      	lsls	r0, r2, #31
 c001dd2:	d404      	bmi.n	c001dde <_fflush_r+0x32>
 c001dd4:	0599      	lsls	r1, r3, #22
 c001dd6:	d402      	bmi.n	c001dde <_fflush_r+0x32>
 c001dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001dda:	f7ff ff14 	bl	c001c06 <__retarget_lock_acquire_recursive>
 c001dde:	4628      	mov	r0, r5
 c001de0:	4621      	mov	r1, r4
 c001de2:	f7ff ff5f 	bl	c001ca4 <__sflush_r>
 c001de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001de8:	4605      	mov	r5, r0
 c001dea:	07da      	lsls	r2, r3, #31
 c001dec:	d4e4      	bmi.n	c001db8 <_fflush_r+0xc>
 c001dee:	89a3      	ldrh	r3, [r4, #12]
 c001df0:	059b      	lsls	r3, r3, #22
 c001df2:	d4e1      	bmi.n	c001db8 <_fflush_r+0xc>
 c001df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001df6:	f7ff ff07 	bl	c001c08 <__retarget_lock_release_recursive>
 c001dfa:	e7dd      	b.n	c001db8 <_fflush_r+0xc>

0c001dfc <__sread>:
 c001dfc:	b510      	push	{r4, lr}
 c001dfe:	460c      	mov	r4, r1
 c001e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e04:	f000 f978 	bl	c0020f8 <_read_r>
 c001e08:	2800      	cmp	r0, #0
 c001e0a:	bfab      	itete	ge
 c001e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c001e0e:	89a3      	ldrhlt	r3, [r4, #12]
 c001e10:	181b      	addge	r3, r3, r0
 c001e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c001e16:	bfac      	ite	ge
 c001e18:	6563      	strge	r3, [r4, #84]	; 0x54
 c001e1a:	81a3      	strhlt	r3, [r4, #12]
 c001e1c:	bd10      	pop	{r4, pc}

0c001e1e <__swrite>:
 c001e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c001e22:	461f      	mov	r7, r3
 c001e24:	898b      	ldrh	r3, [r1, #12]
 c001e26:	4605      	mov	r5, r0
 c001e28:	460c      	mov	r4, r1
 c001e2a:	05db      	lsls	r3, r3, #23
 c001e2c:	4616      	mov	r6, r2
 c001e2e:	d505      	bpl.n	c001e3c <__swrite+0x1e>
 c001e30:	2302      	movs	r3, #2
 c001e32:	2200      	movs	r2, #0
 c001e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e38:	f000 f94c 	bl	c0020d4 <_lseek_r>
 c001e3c:	89a3      	ldrh	r3, [r4, #12]
 c001e3e:	4632      	mov	r2, r6
 c001e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c001e44:	4628      	mov	r0, r5
 c001e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c001e4a:	81a3      	strh	r3, [r4, #12]
 c001e4c:	463b      	mov	r3, r7
 c001e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c001e52:	f000 b963 	b.w	c00211c <_write_r>

0c001e56 <__sseek>:
 c001e56:	b510      	push	{r4, lr}
 c001e58:	460c      	mov	r4, r1
 c001e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e5e:	f000 f939 	bl	c0020d4 <_lseek_r>
 c001e62:	1c43      	adds	r3, r0, #1
 c001e64:	89a3      	ldrh	r3, [r4, #12]
 c001e66:	bf15      	itete	ne
 c001e68:	6560      	strne	r0, [r4, #84]	; 0x54
 c001e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c001e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c001e72:	81a3      	strheq	r3, [r4, #12]
 c001e74:	bf18      	it	ne
 c001e76:	81a3      	strhne	r3, [r4, #12]
 c001e78:	bd10      	pop	{r4, pc}

0c001e7a <__sclose>:
 c001e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e7e:	f000 b8f7 	b.w	c002070 <_close_r>

0c001e82 <__swbuf_r>:
 c001e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001e84:	460e      	mov	r6, r1
 c001e86:	4614      	mov	r4, r2
 c001e88:	4605      	mov	r5, r0
 c001e8a:	b118      	cbz	r0, c001e94 <__swbuf_r+0x12>
 c001e8c:	6a03      	ldr	r3, [r0, #32]
 c001e8e:	b90b      	cbnz	r3, c001e94 <__swbuf_r+0x12>
 c001e90:	f7ff fde4 	bl	c001a5c <__sinit>
 c001e94:	69a3      	ldr	r3, [r4, #24]
 c001e96:	60a3      	str	r3, [r4, #8]
 c001e98:	89a3      	ldrh	r3, [r4, #12]
 c001e9a:	071a      	lsls	r2, r3, #28
 c001e9c:	d525      	bpl.n	c001eea <__swbuf_r+0x68>
 c001e9e:	6923      	ldr	r3, [r4, #16]
 c001ea0:	b31b      	cbz	r3, c001eea <__swbuf_r+0x68>
 c001ea2:	6823      	ldr	r3, [r4, #0]
 c001ea4:	b2f6      	uxtb	r6, r6
 c001ea6:	6922      	ldr	r2, [r4, #16]
 c001ea8:	4637      	mov	r7, r6
 c001eaa:	1a98      	subs	r0, r3, r2
 c001eac:	6963      	ldr	r3, [r4, #20]
 c001eae:	4283      	cmp	r3, r0
 c001eb0:	dc04      	bgt.n	c001ebc <__swbuf_r+0x3a>
 c001eb2:	4621      	mov	r1, r4
 c001eb4:	4628      	mov	r0, r5
 c001eb6:	f7ff ff79 	bl	c001dac <_fflush_r>
 c001eba:	b9e0      	cbnz	r0, c001ef6 <__swbuf_r+0x74>
 c001ebc:	68a3      	ldr	r3, [r4, #8]
 c001ebe:	3b01      	subs	r3, #1
 c001ec0:	60a3      	str	r3, [r4, #8]
 c001ec2:	6823      	ldr	r3, [r4, #0]
 c001ec4:	1c5a      	adds	r2, r3, #1
 c001ec6:	6022      	str	r2, [r4, #0]
 c001ec8:	701e      	strb	r6, [r3, #0]
 c001eca:	1c43      	adds	r3, r0, #1
 c001ecc:	6962      	ldr	r2, [r4, #20]
 c001ece:	429a      	cmp	r2, r3
 c001ed0:	d004      	beq.n	c001edc <__swbuf_r+0x5a>
 c001ed2:	89a3      	ldrh	r3, [r4, #12]
 c001ed4:	07db      	lsls	r3, r3, #31
 c001ed6:	d506      	bpl.n	c001ee6 <__swbuf_r+0x64>
 c001ed8:	2e0a      	cmp	r6, #10
 c001eda:	d104      	bne.n	c001ee6 <__swbuf_r+0x64>
 c001edc:	4621      	mov	r1, r4
 c001ede:	4628      	mov	r0, r5
 c001ee0:	f7ff ff64 	bl	c001dac <_fflush_r>
 c001ee4:	b938      	cbnz	r0, c001ef6 <__swbuf_r+0x74>
 c001ee6:	4638      	mov	r0, r7
 c001ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c001eea:	4621      	mov	r1, r4
 c001eec:	4628      	mov	r0, r5
 c001eee:	f000 f805 	bl	c001efc <__swsetup_r>
 c001ef2:	2800      	cmp	r0, #0
 c001ef4:	d0d5      	beq.n	c001ea2 <__swbuf_r+0x20>
 c001ef6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 c001efa:	e7f4      	b.n	c001ee6 <__swbuf_r+0x64>

0c001efc <__swsetup_r>:
 c001efc:	b538      	push	{r3, r4, r5, lr}
 c001efe:	4b2a      	ldr	r3, [pc, #168]	; (c001fa8 <__swsetup_r+0xac>)
 c001f00:	4605      	mov	r5, r0
 c001f02:	460c      	mov	r4, r1
 c001f04:	6818      	ldr	r0, [r3, #0]
 c001f06:	b118      	cbz	r0, c001f10 <__swsetup_r+0x14>
 c001f08:	6a03      	ldr	r3, [r0, #32]
 c001f0a:	b90b      	cbnz	r3, c001f10 <__swsetup_r+0x14>
 c001f0c:	f7ff fda6 	bl	c001a5c <__sinit>
 c001f10:	89a3      	ldrh	r3, [r4, #12]
 c001f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c001f16:	0718      	lsls	r0, r3, #28
 c001f18:	d422      	bmi.n	c001f60 <__swsetup_r+0x64>
 c001f1a:	06d9      	lsls	r1, r3, #27
 c001f1c:	d407      	bmi.n	c001f2e <__swsetup_r+0x32>
 c001f1e:	2309      	movs	r3, #9
 c001f20:	602b      	str	r3, [r5, #0]
 c001f22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c001f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001f2a:	81a3      	strh	r3, [r4, #12]
 c001f2c:	e034      	b.n	c001f98 <__swsetup_r+0x9c>
 c001f2e:	0758      	lsls	r0, r3, #29
 c001f30:	d512      	bpl.n	c001f58 <__swsetup_r+0x5c>
 c001f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c001f34:	b141      	cbz	r1, c001f48 <__swsetup_r+0x4c>
 c001f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c001f3a:	4299      	cmp	r1, r3
 c001f3c:	d002      	beq.n	c001f44 <__swsetup_r+0x48>
 c001f3e:	4628      	mov	r0, r5
 c001f40:	f7ff fe64 	bl	c001c0c <_free_r>
 c001f44:	2300      	movs	r3, #0
 c001f46:	6363      	str	r3, [r4, #52]	; 0x34
 c001f48:	89a3      	ldrh	r3, [r4, #12]
 c001f4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c001f4e:	81a3      	strh	r3, [r4, #12]
 c001f50:	2300      	movs	r3, #0
 c001f52:	6063      	str	r3, [r4, #4]
 c001f54:	6923      	ldr	r3, [r4, #16]
 c001f56:	6023      	str	r3, [r4, #0]
 c001f58:	89a3      	ldrh	r3, [r4, #12]
 c001f5a:	f043 0308 	orr.w	r3, r3, #8
 c001f5e:	81a3      	strh	r3, [r4, #12]
 c001f60:	6923      	ldr	r3, [r4, #16]
 c001f62:	b94b      	cbnz	r3, c001f78 <__swsetup_r+0x7c>
 c001f64:	89a3      	ldrh	r3, [r4, #12]
 c001f66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c001f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c001f6e:	d003      	beq.n	c001f78 <__swsetup_r+0x7c>
 c001f70:	4621      	mov	r1, r4
 c001f72:	4628      	mov	r0, r5
 c001f74:	f000 f83f 	bl	c001ff6 <__smakebuf_r>
 c001f78:	89a0      	ldrh	r0, [r4, #12]
 c001f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c001f7e:	f010 0301 	ands.w	r3, r0, #1
 c001f82:	d00a      	beq.n	c001f9a <__swsetup_r+0x9e>
 c001f84:	2300      	movs	r3, #0
 c001f86:	60a3      	str	r3, [r4, #8]
 c001f88:	6963      	ldr	r3, [r4, #20]
 c001f8a:	425b      	negs	r3, r3
 c001f8c:	61a3      	str	r3, [r4, #24]
 c001f8e:	6923      	ldr	r3, [r4, #16]
 c001f90:	b943      	cbnz	r3, c001fa4 <__swsetup_r+0xa8>
 c001f92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c001f96:	d1c4      	bne.n	c001f22 <__swsetup_r+0x26>
 c001f98:	bd38      	pop	{r3, r4, r5, pc}
 c001f9a:	0781      	lsls	r1, r0, #30
 c001f9c:	bf58      	it	pl
 c001f9e:	6963      	ldrpl	r3, [r4, #20]
 c001fa0:	60a3      	str	r3, [r4, #8]
 c001fa2:	e7f4      	b.n	c001f8e <__swsetup_r+0x92>
 c001fa4:	2000      	movs	r0, #0
 c001fa6:	e7f7      	b.n	c001f98 <__swsetup_r+0x9c>
 c001fa8:	30000064 	.word	0x30000064

0c001fac <__swhatbuf_r>:
 c001fac:	b570      	push	{r4, r5, r6, lr}
 c001fae:	460c      	mov	r4, r1
 c001fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001fb4:	b096      	sub	sp, #88	; 0x58
 c001fb6:	4615      	mov	r5, r2
 c001fb8:	2900      	cmp	r1, #0
 c001fba:	461e      	mov	r6, r3
 c001fbc:	da0c      	bge.n	c001fd8 <__swhatbuf_r+0x2c>
 c001fbe:	89a3      	ldrh	r3, [r4, #12]
 c001fc0:	2100      	movs	r1, #0
 c001fc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 c001fc6:	bf0c      	ite	eq
 c001fc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 c001fcc:	2340      	movne	r3, #64	; 0x40
 c001fce:	2000      	movs	r0, #0
 c001fd0:	6031      	str	r1, [r6, #0]
 c001fd2:	602b      	str	r3, [r5, #0]
 c001fd4:	b016      	add	sp, #88	; 0x58
 c001fd6:	bd70      	pop	{r4, r5, r6, pc}
 c001fd8:	466a      	mov	r2, sp
 c001fda:	f000 f859 	bl	c002090 <_fstat_r>
 c001fde:	2800      	cmp	r0, #0
 c001fe0:	dbed      	blt.n	c001fbe <__swhatbuf_r+0x12>
 c001fe2:	9901      	ldr	r1, [sp, #4]
 c001fe4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 c001fe8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 c001fec:	4259      	negs	r1, r3
 c001fee:	4159      	adcs	r1, r3
 c001ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c001ff4:	e7eb      	b.n	c001fce <__swhatbuf_r+0x22>

0c001ff6 <__smakebuf_r>:
 c001ff6:	898b      	ldrh	r3, [r1, #12]
 c001ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c001ffa:	079d      	lsls	r5, r3, #30
 c001ffc:	4606      	mov	r6, r0
 c001ffe:	460c      	mov	r4, r1
 c002000:	d507      	bpl.n	c002012 <__smakebuf_r+0x1c>
 c002002:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c002006:	6023      	str	r3, [r4, #0]
 c002008:	6123      	str	r3, [r4, #16]
 c00200a:	2301      	movs	r3, #1
 c00200c:	6163      	str	r3, [r4, #20]
 c00200e:	b002      	add	sp, #8
 c002010:	bd70      	pop	{r4, r5, r6, pc}
 c002012:	ab01      	add	r3, sp, #4
 c002014:	466a      	mov	r2, sp
 c002016:	f7ff ffc9 	bl	c001fac <__swhatbuf_r>
 c00201a:	9900      	ldr	r1, [sp, #0]
 c00201c:	4605      	mov	r5, r0
 c00201e:	4630      	mov	r0, r6
 c002020:	f7ff fc04 	bl	c00182c <_malloc_r>
 c002024:	b948      	cbnz	r0, c00203a <__smakebuf_r+0x44>
 c002026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00202a:	059a      	lsls	r2, r3, #22
 c00202c:	d4ef      	bmi.n	c00200e <__smakebuf_r+0x18>
 c00202e:	f023 0303 	bic.w	r3, r3, #3
 c002032:	f043 0302 	orr.w	r3, r3, #2
 c002036:	81a3      	strh	r3, [r4, #12]
 c002038:	e7e3      	b.n	c002002 <__smakebuf_r+0xc>
 c00203a:	89a3      	ldrh	r3, [r4, #12]
 c00203c:	6020      	str	r0, [r4, #0]
 c00203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002042:	6120      	str	r0, [r4, #16]
 c002044:	81a3      	strh	r3, [r4, #12]
 c002046:	9b00      	ldr	r3, [sp, #0]
 c002048:	6163      	str	r3, [r4, #20]
 c00204a:	9b01      	ldr	r3, [sp, #4]
 c00204c:	b15b      	cbz	r3, c002066 <__smakebuf_r+0x70>
 c00204e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c002052:	4630      	mov	r0, r6
 c002054:	f000 f82e 	bl	c0020b4 <_isatty_r>
 c002058:	b128      	cbz	r0, c002066 <__smakebuf_r+0x70>
 c00205a:	89a3      	ldrh	r3, [r4, #12]
 c00205c:	f023 0303 	bic.w	r3, r3, #3
 c002060:	f043 0301 	orr.w	r3, r3, #1
 c002064:	81a3      	strh	r3, [r4, #12]
 c002066:	89a3      	ldrh	r3, [r4, #12]
 c002068:	431d      	orrs	r5, r3
 c00206a:	81a5      	strh	r5, [r4, #12]
 c00206c:	e7cf      	b.n	c00200e <__smakebuf_r+0x18>
	...

0c002070 <_close_r>:
 c002070:	b538      	push	{r3, r4, r5, lr}
 c002072:	2300      	movs	r3, #0
 c002074:	4d05      	ldr	r5, [pc, #20]	; (c00208c <_close_r+0x1c>)
 c002076:	4604      	mov	r4, r0
 c002078:	4608      	mov	r0, r1
 c00207a:	602b      	str	r3, [r5, #0]
 c00207c:	f7fe fbf4 	bl	c000868 <_close>
 c002080:	1c43      	adds	r3, r0, #1
 c002082:	d102      	bne.n	c00208a <_close_r+0x1a>
 c002084:	682b      	ldr	r3, [r5, #0]
 c002086:	b103      	cbz	r3, c00208a <_close_r+0x1a>
 c002088:	6023      	str	r3, [r4, #0]
 c00208a:	bd38      	pop	{r3, r4, r5, pc}
 c00208c:	30000220 	.word	0x30000220

0c002090 <_fstat_r>:
 c002090:	b538      	push	{r3, r4, r5, lr}
 c002092:	2300      	movs	r3, #0
 c002094:	4d06      	ldr	r5, [pc, #24]	; (c0020b0 <_fstat_r+0x20>)
 c002096:	4604      	mov	r4, r0
 c002098:	4608      	mov	r0, r1
 c00209a:	4611      	mov	r1, r2
 c00209c:	602b      	str	r3, [r5, #0]
 c00209e:	f7fe fbef 	bl	c000880 <_fstat>
 c0020a2:	1c43      	adds	r3, r0, #1
 c0020a4:	d102      	bne.n	c0020ac <_fstat_r+0x1c>
 c0020a6:	682b      	ldr	r3, [r5, #0]
 c0020a8:	b103      	cbz	r3, c0020ac <_fstat_r+0x1c>
 c0020aa:	6023      	str	r3, [r4, #0]
 c0020ac:	bd38      	pop	{r3, r4, r5, pc}
 c0020ae:	bf00      	nop
 c0020b0:	30000220 	.word	0x30000220

0c0020b4 <_isatty_r>:
 c0020b4:	b538      	push	{r3, r4, r5, lr}
 c0020b6:	2300      	movs	r3, #0
 c0020b8:	4d05      	ldr	r5, [pc, #20]	; (c0020d0 <_isatty_r+0x1c>)
 c0020ba:	4604      	mov	r4, r0
 c0020bc:	4608      	mov	r0, r1
 c0020be:	602b      	str	r3, [r5, #0]
 c0020c0:	f7fe fbee 	bl	c0008a0 <_isatty>
 c0020c4:	1c43      	adds	r3, r0, #1
 c0020c6:	d102      	bne.n	c0020ce <_isatty_r+0x1a>
 c0020c8:	682b      	ldr	r3, [r5, #0]
 c0020ca:	b103      	cbz	r3, c0020ce <_isatty_r+0x1a>
 c0020cc:	6023      	str	r3, [r4, #0]
 c0020ce:	bd38      	pop	{r3, r4, r5, pc}
 c0020d0:	30000220 	.word	0x30000220

0c0020d4 <_lseek_r>:
 c0020d4:	b538      	push	{r3, r4, r5, lr}
 c0020d6:	4604      	mov	r4, r0
 c0020d8:	4d06      	ldr	r5, [pc, #24]	; (c0020f4 <_lseek_r+0x20>)
 c0020da:	4608      	mov	r0, r1
 c0020dc:	4611      	mov	r1, r2
 c0020de:	2200      	movs	r2, #0
 c0020e0:	602a      	str	r2, [r5, #0]
 c0020e2:	461a      	mov	r2, r3
 c0020e4:	f7fe fbe7 	bl	c0008b6 <_lseek>
 c0020e8:	1c43      	adds	r3, r0, #1
 c0020ea:	d102      	bne.n	c0020f2 <_lseek_r+0x1e>
 c0020ec:	682b      	ldr	r3, [r5, #0]
 c0020ee:	b103      	cbz	r3, c0020f2 <_lseek_r+0x1e>
 c0020f0:	6023      	str	r3, [r4, #0]
 c0020f2:	bd38      	pop	{r3, r4, r5, pc}
 c0020f4:	30000220 	.word	0x30000220

0c0020f8 <_read_r>:
 c0020f8:	b538      	push	{r3, r4, r5, lr}
 c0020fa:	4604      	mov	r4, r0
 c0020fc:	4d06      	ldr	r5, [pc, #24]	; (c002118 <_read_r+0x20>)
 c0020fe:	4608      	mov	r0, r1
 c002100:	4611      	mov	r1, r2
 c002102:	2200      	movs	r2, #0
 c002104:	602a      	str	r2, [r5, #0]
 c002106:	461a      	mov	r2, r3
 c002108:	f7fe fb75 	bl	c0007f6 <_read>
 c00210c:	1c43      	adds	r3, r0, #1
 c00210e:	d102      	bne.n	c002116 <_read_r+0x1e>
 c002110:	682b      	ldr	r3, [r5, #0]
 c002112:	b103      	cbz	r3, c002116 <_read_r+0x1e>
 c002114:	6023      	str	r3, [r4, #0]
 c002116:	bd38      	pop	{r3, r4, r5, pc}
 c002118:	30000220 	.word	0x30000220

0c00211c <_write_r>:
 c00211c:	b538      	push	{r3, r4, r5, lr}
 c00211e:	4604      	mov	r4, r0
 c002120:	4d06      	ldr	r5, [pc, #24]	; (c00213c <_write_r+0x20>)
 c002122:	4608      	mov	r0, r1
 c002124:	4611      	mov	r1, r2
 c002126:	2200      	movs	r2, #0
 c002128:	602a      	str	r2, [r5, #0]
 c00212a:	461a      	mov	r2, r3
 c00212c:	f7fe fb80 	bl	c000830 <_write>
 c002130:	1c43      	adds	r3, r0, #1
 c002132:	d102      	bne.n	c00213a <_write_r+0x1e>
 c002134:	682b      	ldr	r3, [r5, #0]
 c002136:	b103      	cbz	r3, c00213a <_write_r+0x1e>
 c002138:	6023      	str	r3, [r4, #0]
 c00213a:	bd38      	pop	{r3, r4, r5, pc}
 c00213c:	30000220 	.word	0x30000220

0c002140 <_init>:
 c002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002142:	bf00      	nop
 c002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002146:	bc08      	pop	{r3}
 c002148:	469e      	mov	lr, r3
 c00214a:	4770      	bx	lr

0c00214c <_fini>:
 c00214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00214e:	bf00      	nop
 c002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002152:	bc08      	pop	{r3}
 c002154:	469e      	mov	lr, r3
 c002156:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bdde 	b.w	c000bc4 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <encrypt_decrypt>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bb1a 	b.w	c000644 <__acle_se_encrypt_decrypt>

0c03e010 <SECURE_RegisterCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 ba50 	b.w	c0004b8 <__acle_se_SECURE_RegisterCallback>

0c03e018 <key_stream>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 baa0 	b.w	c000560 <__acle_se_key_stream>
