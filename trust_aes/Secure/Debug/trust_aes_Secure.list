
trust_aes_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e58  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0c00204c  0c00204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0022a8  0c0022a8  0002e040  2**0
                  CONTENTS
  4 .ARM          00000000  0c0022a8  0c0022a8  0002e040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c0022a8  0c0022a8  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0022a8  0c0022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0022ac  0c0022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c0022b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000000e8  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  300000f4  300000f4  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005443  00000000  00000000  0002e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001247  00000000  00000000  000334fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005d0  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000446  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027395  00000000  00000000  0003515e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006e15  00000000  00000000  0005c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9abc  00000000  00000000  00063308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001628  00000000  00000000  0015cdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c002034 	.word	0x0c002034

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c002034 	.word	0x0c002034

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 c000290:	b480      	push	{r7}
 c000292:	b089      	sub	sp, #36	; 0x24
 c000294:	af00      	add	r7, sp, #0
 c000296:	6078      	str	r0, [r7, #4]
 c000298:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 c00029a:	2300      	movs	r3, #0
 c00029c:	61fb      	str	r3, [r7, #28]
 c00029e:	e030      	b.n	c000302 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 c0002a0:	69fb      	ldr	r3, [r7, #28]
 c0002a2:	009b      	lsls	r3, r3, #2
 c0002a4:	683a      	ldr	r2, [r7, #0]
 c0002a6:	441a      	add	r2, r3
 c0002a8:	69fb      	ldr	r3, [r7, #28]
 c0002aa:	009b      	lsls	r3, r3, #2
 c0002ac:	6879      	ldr	r1, [r7, #4]
 c0002ae:	440b      	add	r3, r1
 c0002b0:	7812      	ldrb	r2, [r2, #0]
 c0002b2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 c0002b4:	69fb      	ldr	r3, [r7, #28]
 c0002b6:	009b      	lsls	r3, r3, #2
 c0002b8:	3301      	adds	r3, #1
 c0002ba:	683a      	ldr	r2, [r7, #0]
 c0002bc:	441a      	add	r2, r3
 c0002be:	69fb      	ldr	r3, [r7, #28]
 c0002c0:	009b      	lsls	r3, r3, #2
 c0002c2:	3301      	adds	r3, #1
 c0002c4:	6879      	ldr	r1, [r7, #4]
 c0002c6:	440b      	add	r3, r1
 c0002c8:	7812      	ldrb	r2, [r2, #0]
 c0002ca:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 c0002cc:	69fb      	ldr	r3, [r7, #28]
 c0002ce:	009b      	lsls	r3, r3, #2
 c0002d0:	3302      	adds	r3, #2
 c0002d2:	683a      	ldr	r2, [r7, #0]
 c0002d4:	441a      	add	r2, r3
 c0002d6:	69fb      	ldr	r3, [r7, #28]
 c0002d8:	009b      	lsls	r3, r3, #2
 c0002da:	3302      	adds	r3, #2
 c0002dc:	6879      	ldr	r1, [r7, #4]
 c0002de:	440b      	add	r3, r1
 c0002e0:	7812      	ldrb	r2, [r2, #0]
 c0002e2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 c0002e4:	69fb      	ldr	r3, [r7, #28]
 c0002e6:	009b      	lsls	r3, r3, #2
 c0002e8:	3303      	adds	r3, #3
 c0002ea:	683a      	ldr	r2, [r7, #0]
 c0002ec:	441a      	add	r2, r3
 c0002ee:	69fb      	ldr	r3, [r7, #28]
 c0002f0:	009b      	lsls	r3, r3, #2
 c0002f2:	3303      	adds	r3, #3
 c0002f4:	6879      	ldr	r1, [r7, #4]
 c0002f6:	440b      	add	r3, r1
 c0002f8:	7812      	ldrb	r2, [r2, #0]
 c0002fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 c0002fc:	69fb      	ldr	r3, [r7, #28]
 c0002fe:	3301      	adds	r3, #1
 c000300:	61fb      	str	r3, [r7, #28]
 c000302:	69fb      	ldr	r3, [r7, #28]
 c000304:	2b03      	cmp	r3, #3
 c000306:	d9cb      	bls.n	c0002a0 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 c000308:	2304      	movs	r3, #4
 c00030a:	61fb      	str	r3, [r7, #28]
 c00030c:	e081      	b.n	c000412 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 c00030e:	69fb      	ldr	r3, [r7, #28]
 c000310:	3b01      	subs	r3, #1
 c000312:	009b      	lsls	r3, r3, #2
 c000314:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 c000316:	687a      	ldr	r2, [r7, #4]
 c000318:	69bb      	ldr	r3, [r7, #24]
 c00031a:	4413      	add	r3, r2
 c00031c:	781b      	ldrb	r3, [r3, #0]
 c00031e:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 c000320:	69bb      	ldr	r3, [r7, #24]
 c000322:	3301      	adds	r3, #1
 c000324:	687a      	ldr	r2, [r7, #4]
 c000326:	4413      	add	r3, r2
 c000328:	781b      	ldrb	r3, [r3, #0]
 c00032a:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 c00032c:	69bb      	ldr	r3, [r7, #24]
 c00032e:	3302      	adds	r3, #2
 c000330:	687a      	ldr	r2, [r7, #4]
 c000332:	4413      	add	r3, r2
 c000334:	781b      	ldrb	r3, [r3, #0]
 c000336:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 c000338:	69bb      	ldr	r3, [r7, #24]
 c00033a:	3303      	adds	r3, #3
 c00033c:	687a      	ldr	r2, [r7, #4]
 c00033e:	4413      	add	r3, r2
 c000340:	781b      	ldrb	r3, [r3, #0]
 c000342:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 c000344:	69fb      	ldr	r3, [r7, #28]
 c000346:	f003 0303 	and.w	r3, r3, #3
 c00034a:	2b00      	cmp	r3, #0
 c00034c:	d125      	bne.n	c00039a <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 c00034e:	7b3b      	ldrb	r3, [r7, #12]
 c000350:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 c000352:	7b7b      	ldrb	r3, [r7, #13]
 c000354:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 c000356:	7bbb      	ldrb	r3, [r7, #14]
 c000358:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 c00035a:	7bfb      	ldrb	r3, [r7, #15]
 c00035c:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 c00035e:	7dfb      	ldrb	r3, [r7, #23]
 c000360:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 c000362:	7b3b      	ldrb	r3, [r7, #12]
 c000364:	461a      	mov	r2, r3
 c000366:	4b30      	ldr	r3, [pc, #192]	; (c000428 <KeyExpansion+0x198>)
 c000368:	5c9b      	ldrb	r3, [r3, r2]
 c00036a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 c00036c:	7b7b      	ldrb	r3, [r7, #13]
 c00036e:	461a      	mov	r2, r3
 c000370:	4b2d      	ldr	r3, [pc, #180]	; (c000428 <KeyExpansion+0x198>)
 c000372:	5c9b      	ldrb	r3, [r3, r2]
 c000374:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 c000376:	7bbb      	ldrb	r3, [r7, #14]
 c000378:	461a      	mov	r2, r3
 c00037a:	4b2b      	ldr	r3, [pc, #172]	; (c000428 <KeyExpansion+0x198>)
 c00037c:	5c9b      	ldrb	r3, [r3, r2]
 c00037e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 c000380:	7bfb      	ldrb	r3, [r7, #15]
 c000382:	461a      	mov	r2, r3
 c000384:	4b28      	ldr	r3, [pc, #160]	; (c000428 <KeyExpansion+0x198>)
 c000386:	5c9b      	ldrb	r3, [r3, r2]
 c000388:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 c00038a:	7b3a      	ldrb	r2, [r7, #12]
 c00038c:	69fb      	ldr	r3, [r7, #28]
 c00038e:	089b      	lsrs	r3, r3, #2
 c000390:	4926      	ldr	r1, [pc, #152]	; (c00042c <KeyExpansion+0x19c>)
 c000392:	5ccb      	ldrb	r3, [r1, r3]
 c000394:	4053      	eors	r3, r2
 c000396:	b2db      	uxtb	r3, r3
 c000398:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 c00039a:	69fb      	ldr	r3, [r7, #28]
 c00039c:	009b      	lsls	r3, r3, #2
 c00039e:	613b      	str	r3, [r7, #16]
 c0003a0:	69fb      	ldr	r3, [r7, #28]
 c0003a2:	3b04      	subs	r3, #4
 c0003a4:	009b      	lsls	r3, r3, #2
 c0003a6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 c0003a8:	687a      	ldr	r2, [r7, #4]
 c0003aa:	69bb      	ldr	r3, [r7, #24]
 c0003ac:	4413      	add	r3, r2
 c0003ae:	7819      	ldrb	r1, [r3, #0]
 c0003b0:	7b3a      	ldrb	r2, [r7, #12]
 c0003b2:	6878      	ldr	r0, [r7, #4]
 c0003b4:	693b      	ldr	r3, [r7, #16]
 c0003b6:	4403      	add	r3, r0
 c0003b8:	404a      	eors	r2, r1
 c0003ba:	b2d2      	uxtb	r2, r2
 c0003bc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 c0003be:	69bb      	ldr	r3, [r7, #24]
 c0003c0:	3301      	adds	r3, #1
 c0003c2:	687a      	ldr	r2, [r7, #4]
 c0003c4:	4413      	add	r3, r2
 c0003c6:	7819      	ldrb	r1, [r3, #0]
 c0003c8:	7b7a      	ldrb	r2, [r7, #13]
 c0003ca:	693b      	ldr	r3, [r7, #16]
 c0003cc:	3301      	adds	r3, #1
 c0003ce:	6878      	ldr	r0, [r7, #4]
 c0003d0:	4403      	add	r3, r0
 c0003d2:	404a      	eors	r2, r1
 c0003d4:	b2d2      	uxtb	r2, r2
 c0003d6:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 c0003d8:	69bb      	ldr	r3, [r7, #24]
 c0003da:	3302      	adds	r3, #2
 c0003dc:	687a      	ldr	r2, [r7, #4]
 c0003de:	4413      	add	r3, r2
 c0003e0:	7819      	ldrb	r1, [r3, #0]
 c0003e2:	7bba      	ldrb	r2, [r7, #14]
 c0003e4:	693b      	ldr	r3, [r7, #16]
 c0003e6:	3302      	adds	r3, #2
 c0003e8:	6878      	ldr	r0, [r7, #4]
 c0003ea:	4403      	add	r3, r0
 c0003ec:	404a      	eors	r2, r1
 c0003ee:	b2d2      	uxtb	r2, r2
 c0003f0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 c0003f2:	69bb      	ldr	r3, [r7, #24]
 c0003f4:	3303      	adds	r3, #3
 c0003f6:	687a      	ldr	r2, [r7, #4]
 c0003f8:	4413      	add	r3, r2
 c0003fa:	7819      	ldrb	r1, [r3, #0]
 c0003fc:	7bfa      	ldrb	r2, [r7, #15]
 c0003fe:	693b      	ldr	r3, [r7, #16]
 c000400:	3303      	adds	r3, #3
 c000402:	6878      	ldr	r0, [r7, #4]
 c000404:	4403      	add	r3, r0
 c000406:	404a      	eors	r2, r1
 c000408:	b2d2      	uxtb	r2, r2
 c00040a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 c00040c:	69fb      	ldr	r3, [r7, #28]
 c00040e:	3301      	adds	r3, #1
 c000410:	61fb      	str	r3, [r7, #28]
 c000412:	69fb      	ldr	r3, [r7, #28]
 c000414:	2b2b      	cmp	r3, #43	; 0x2b
 c000416:	f67f af7a 	bls.w	c00030e <KeyExpansion+0x7e>
  }
}
 c00041a:	bf00      	nop
 c00041c:	bf00      	nop
 c00041e:	3724      	adds	r7, #36	; 0x24
 c000420:	46bd      	mov	sp, r7
 c000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000426:	4770      	bx	lr
 c000428:	0c00204c 	.word	0x0c00204c
 c00042c:	0c00224c 	.word	0x0c00224c

0c000430 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 c000430:	b580      	push	{r7, lr}
 c000432:	b082      	sub	sp, #8
 c000434:	af00      	add	r7, sp, #0
 c000436:	6078      	str	r0, [r7, #4]
 c000438:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 c00043a:	687b      	ldr	r3, [r7, #4]
 c00043c:	6839      	ldr	r1, [r7, #0]
 c00043e:	4618      	mov	r0, r3
 c000440:	f7ff ff26 	bl	c000290 <KeyExpansion>
}
 c000444:	bf00      	nop
 c000446:	3708      	adds	r7, #8
 c000448:	46bd      	mov	sp, r7
 c00044a:	bd80      	pop	{r7, pc}

0c00044c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 c00044c:	b480      	push	{r7}
 c00044e:	b087      	sub	sp, #28
 c000450:	af00      	add	r7, sp, #0
 c000452:	4603      	mov	r3, r0
 c000454:	60b9      	str	r1, [r7, #8]
 c000456:	607a      	str	r2, [r7, #4]
 c000458:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 c00045a:	2300      	movs	r3, #0
 c00045c:	75fb      	strb	r3, [r7, #23]
 c00045e:	e027      	b.n	c0004b0 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 c000460:	2300      	movs	r3, #0
 c000462:	75bb      	strb	r3, [r7, #22]
 c000464:	e01e      	b.n	c0004a4 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 c000466:	7dfa      	ldrb	r2, [r7, #23]
 c000468:	7dbb      	ldrb	r3, [r7, #22]
 c00046a:	68b9      	ldr	r1, [r7, #8]
 c00046c:	0092      	lsls	r2, r2, #2
 c00046e:	440a      	add	r2, r1
 c000470:	4413      	add	r3, r2
 c000472:	7818      	ldrb	r0, [r3, #0]
 c000474:	7bfb      	ldrb	r3, [r7, #15]
 c000476:	009a      	lsls	r2, r3, #2
 c000478:	7dfb      	ldrb	r3, [r7, #23]
 c00047a:	4413      	add	r3, r2
 c00047c:	009a      	lsls	r2, r3, #2
 c00047e:	7dbb      	ldrb	r3, [r7, #22]
 c000480:	4413      	add	r3, r2
 c000482:	461a      	mov	r2, r3
 c000484:	687b      	ldr	r3, [r7, #4]
 c000486:	4413      	add	r3, r2
 c000488:	7819      	ldrb	r1, [r3, #0]
 c00048a:	7dfa      	ldrb	r2, [r7, #23]
 c00048c:	7dbb      	ldrb	r3, [r7, #22]
 c00048e:	4041      	eors	r1, r0
 c000490:	b2c8      	uxtb	r0, r1
 c000492:	68b9      	ldr	r1, [r7, #8]
 c000494:	0092      	lsls	r2, r2, #2
 c000496:	440a      	add	r2, r1
 c000498:	4413      	add	r3, r2
 c00049a:	4602      	mov	r2, r0
 c00049c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 c00049e:	7dbb      	ldrb	r3, [r7, #22]
 c0004a0:	3301      	adds	r3, #1
 c0004a2:	75bb      	strb	r3, [r7, #22]
 c0004a4:	7dbb      	ldrb	r3, [r7, #22]
 c0004a6:	2b03      	cmp	r3, #3
 c0004a8:	d9dd      	bls.n	c000466 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 c0004aa:	7dfb      	ldrb	r3, [r7, #23]
 c0004ac:	3301      	adds	r3, #1
 c0004ae:	75fb      	strb	r3, [r7, #23]
 c0004b0:	7dfb      	ldrb	r3, [r7, #23]
 c0004b2:	2b03      	cmp	r3, #3
 c0004b4:	d9d4      	bls.n	c000460 <AddRoundKey+0x14>
    }
  }
}
 c0004b6:	bf00      	nop
 c0004b8:	bf00      	nop
 c0004ba:	371c      	adds	r7, #28
 c0004bc:	46bd      	mov	sp, r7
 c0004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0004c2:	4770      	bx	lr

0c0004c4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 c0004c4:	b480      	push	{r7}
 c0004c6:	b085      	sub	sp, #20
 c0004c8:	af00      	add	r7, sp, #0
 c0004ca:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 c0004cc:	2300      	movs	r3, #0
 c0004ce:	73fb      	strb	r3, [r7, #15]
 c0004d0:	e01d      	b.n	c00050e <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 c0004d2:	2300      	movs	r3, #0
 c0004d4:	73bb      	strb	r3, [r7, #14]
 c0004d6:	e014      	b.n	c000502 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 c0004d8:	7bba      	ldrb	r2, [r7, #14]
 c0004da:	7bfb      	ldrb	r3, [r7, #15]
 c0004dc:	6879      	ldr	r1, [r7, #4]
 c0004de:	0092      	lsls	r2, r2, #2
 c0004e0:	440a      	add	r2, r1
 c0004e2:	4413      	add	r3, r2
 c0004e4:	781b      	ldrb	r3, [r3, #0]
 c0004e6:	4618      	mov	r0, r3
 c0004e8:	7bba      	ldrb	r2, [r7, #14]
 c0004ea:	7bfb      	ldrb	r3, [r7, #15]
 c0004ec:	490d      	ldr	r1, [pc, #52]	; (c000524 <SubBytes+0x60>)
 c0004ee:	5c08      	ldrb	r0, [r1, r0]
 c0004f0:	6879      	ldr	r1, [r7, #4]
 c0004f2:	0092      	lsls	r2, r2, #2
 c0004f4:	440a      	add	r2, r1
 c0004f6:	4413      	add	r3, r2
 c0004f8:	4602      	mov	r2, r0
 c0004fa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 c0004fc:	7bbb      	ldrb	r3, [r7, #14]
 c0004fe:	3301      	adds	r3, #1
 c000500:	73bb      	strb	r3, [r7, #14]
 c000502:	7bbb      	ldrb	r3, [r7, #14]
 c000504:	2b03      	cmp	r3, #3
 c000506:	d9e7      	bls.n	c0004d8 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 c000508:	7bfb      	ldrb	r3, [r7, #15]
 c00050a:	3301      	adds	r3, #1
 c00050c:	73fb      	strb	r3, [r7, #15]
 c00050e:	7bfb      	ldrb	r3, [r7, #15]
 c000510:	2b03      	cmp	r3, #3
 c000512:	d9de      	bls.n	c0004d2 <SubBytes+0xe>
    }
  }
}
 c000514:	bf00      	nop
 c000516:	bf00      	nop
 c000518:	3714      	adds	r7, #20
 c00051a:	46bd      	mov	sp, r7
 c00051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000520:	4770      	bx	lr
 c000522:	bf00      	nop
 c000524:	0c00204c 	.word	0x0c00204c

0c000528 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 c000528:	b480      	push	{r7}
 c00052a:	b085      	sub	sp, #20
 c00052c:	af00      	add	r7, sp, #0
 c00052e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 c000530:	687b      	ldr	r3, [r7, #4]
 c000532:	785b      	ldrb	r3, [r3, #1]
 c000534:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 c000536:	687b      	ldr	r3, [r7, #4]
 c000538:	795a      	ldrb	r2, [r3, #5]
 c00053a:	687b      	ldr	r3, [r7, #4]
 c00053c:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 c00053e:	687b      	ldr	r3, [r7, #4]
 c000540:	7a5a      	ldrb	r2, [r3, #9]
 c000542:	687b      	ldr	r3, [r7, #4]
 c000544:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 c000546:	687b      	ldr	r3, [r7, #4]
 c000548:	7b5a      	ldrb	r2, [r3, #13]
 c00054a:	687b      	ldr	r3, [r7, #4]
 c00054c:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 c00054e:	687b      	ldr	r3, [r7, #4]
 c000550:	7bfa      	ldrb	r2, [r7, #15]
 c000552:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 c000554:	687b      	ldr	r3, [r7, #4]
 c000556:	789b      	ldrb	r3, [r3, #2]
 c000558:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 c00055a:	687b      	ldr	r3, [r7, #4]
 c00055c:	7a9a      	ldrb	r2, [r3, #10]
 c00055e:	687b      	ldr	r3, [r7, #4]
 c000560:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 c000562:	687b      	ldr	r3, [r7, #4]
 c000564:	7bfa      	ldrb	r2, [r7, #15]
 c000566:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 c000568:	687b      	ldr	r3, [r7, #4]
 c00056a:	799b      	ldrb	r3, [r3, #6]
 c00056c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 c00056e:	687b      	ldr	r3, [r7, #4]
 c000570:	7b9a      	ldrb	r2, [r3, #14]
 c000572:	687b      	ldr	r3, [r7, #4]
 c000574:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 c000576:	687b      	ldr	r3, [r7, #4]
 c000578:	7bfa      	ldrb	r2, [r7, #15]
 c00057a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 c00057c:	687b      	ldr	r3, [r7, #4]
 c00057e:	78db      	ldrb	r3, [r3, #3]
 c000580:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 c000582:	687b      	ldr	r3, [r7, #4]
 c000584:	7bda      	ldrb	r2, [r3, #15]
 c000586:	687b      	ldr	r3, [r7, #4]
 c000588:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 c00058a:	687b      	ldr	r3, [r7, #4]
 c00058c:	7ada      	ldrb	r2, [r3, #11]
 c00058e:	687b      	ldr	r3, [r7, #4]
 c000590:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 c000592:	687b      	ldr	r3, [r7, #4]
 c000594:	79da      	ldrb	r2, [r3, #7]
 c000596:	687b      	ldr	r3, [r7, #4]
 c000598:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 c00059a:	687b      	ldr	r3, [r7, #4]
 c00059c:	7bfa      	ldrb	r2, [r7, #15]
 c00059e:	71da      	strb	r2, [r3, #7]
}
 c0005a0:	bf00      	nop
 c0005a2:	3714      	adds	r7, #20
 c0005a4:	46bd      	mov	sp, r7
 c0005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005aa:	4770      	bx	lr

0c0005ac <xtime>:

static uint8_t xtime(uint8_t x)
{
 c0005ac:	b480      	push	{r7}
 c0005ae:	b083      	sub	sp, #12
 c0005b0:	af00      	add	r7, sp, #0
 c0005b2:	4603      	mov	r3, r0
 c0005b4:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 c0005b6:	79fb      	ldrb	r3, [r7, #7]
 c0005b8:	005b      	lsls	r3, r3, #1
 c0005ba:	b25a      	sxtb	r2, r3
 c0005bc:	79fb      	ldrb	r3, [r7, #7]
 c0005be:	09db      	lsrs	r3, r3, #7
 c0005c0:	b2db      	uxtb	r3, r3
 c0005c2:	4619      	mov	r1, r3
 c0005c4:	0049      	lsls	r1, r1, #1
 c0005c6:	440b      	add	r3, r1
 c0005c8:	4619      	mov	r1, r3
 c0005ca:	00c8      	lsls	r0, r1, #3
 c0005cc:	4619      	mov	r1, r3
 c0005ce:	4603      	mov	r3, r0
 c0005d0:	440b      	add	r3, r1
 c0005d2:	b2db      	uxtb	r3, r3
 c0005d4:	b25b      	sxtb	r3, r3
 c0005d6:	4053      	eors	r3, r2
 c0005d8:	b25b      	sxtb	r3, r3
 c0005da:	b2db      	uxtb	r3, r3
}
 c0005dc:	4618      	mov	r0, r3
 c0005de:	370c      	adds	r7, #12
 c0005e0:	46bd      	mov	sp, r7
 c0005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005e6:	4770      	bx	lr

0c0005e8 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 c0005e8:	b580      	push	{r7, lr}
 c0005ea:	b084      	sub	sp, #16
 c0005ec:	af00      	add	r7, sp, #0
 c0005ee:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 c0005f0:	2300      	movs	r3, #0
 c0005f2:	73fb      	strb	r3, [r7, #15]
 c0005f4:	e0a4      	b.n	c000740 <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 c0005f6:	7bfa      	ldrb	r2, [r7, #15]
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 c0005fe:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 c000600:	7bfa      	ldrb	r2, [r7, #15]
 c000602:	687b      	ldr	r3, [r7, #4]
 c000604:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 c000608:	7bfb      	ldrb	r3, [r7, #15]
 c00060a:	6879      	ldr	r1, [r7, #4]
 c00060c:	009b      	lsls	r3, r3, #2
 c00060e:	440b      	add	r3, r1
 c000610:	785b      	ldrb	r3, [r3, #1]
 c000612:	4053      	eors	r3, r2
 c000614:	b2da      	uxtb	r2, r3
 c000616:	7bfb      	ldrb	r3, [r7, #15]
 c000618:	6879      	ldr	r1, [r7, #4]
 c00061a:	009b      	lsls	r3, r3, #2
 c00061c:	440b      	add	r3, r1
 c00061e:	789b      	ldrb	r3, [r3, #2]
 c000620:	4053      	eors	r3, r2
 c000622:	b2da      	uxtb	r2, r3
 c000624:	7bfb      	ldrb	r3, [r7, #15]
 c000626:	6879      	ldr	r1, [r7, #4]
 c000628:	009b      	lsls	r3, r3, #2
 c00062a:	440b      	add	r3, r1
 c00062c:	78db      	ldrb	r3, [r3, #3]
 c00062e:	4053      	eors	r3, r2
 c000630:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 c000632:	7bfa      	ldrb	r2, [r7, #15]
 c000634:	687b      	ldr	r3, [r7, #4]
 c000636:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 c00063a:	7bfb      	ldrb	r3, [r7, #15]
 c00063c:	6879      	ldr	r1, [r7, #4]
 c00063e:	009b      	lsls	r3, r3, #2
 c000640:	440b      	add	r3, r1
 c000642:	785b      	ldrb	r3, [r3, #1]
 c000644:	4053      	eors	r3, r2
 c000646:	733b      	strb	r3, [r7, #12]
 c000648:	7b3b      	ldrb	r3, [r7, #12]
 c00064a:	4618      	mov	r0, r3
 c00064c:	f7ff ffae 	bl	c0005ac <xtime>
 c000650:	4603      	mov	r3, r0
 c000652:	733b      	strb	r3, [r7, #12]
 c000654:	7bfa      	ldrb	r2, [r7, #15]
 c000656:	687b      	ldr	r3, [r7, #4]
 c000658:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 c00065c:	7b3a      	ldrb	r2, [r7, #12]
 c00065e:	7b7b      	ldrb	r3, [r7, #13]
 c000660:	4053      	eors	r3, r2
 c000662:	b2db      	uxtb	r3, r3
 c000664:	7bfa      	ldrb	r2, [r7, #15]
 c000666:	404b      	eors	r3, r1
 c000668:	b2d9      	uxtb	r1, r3
 c00066a:	687b      	ldr	r3, [r7, #4]
 c00066c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 c000670:	7bfb      	ldrb	r3, [r7, #15]
 c000672:	687a      	ldr	r2, [r7, #4]
 c000674:	009b      	lsls	r3, r3, #2
 c000676:	4413      	add	r3, r2
 c000678:	785a      	ldrb	r2, [r3, #1]
 c00067a:	7bfb      	ldrb	r3, [r7, #15]
 c00067c:	6879      	ldr	r1, [r7, #4]
 c00067e:	009b      	lsls	r3, r3, #2
 c000680:	440b      	add	r3, r1
 c000682:	789b      	ldrb	r3, [r3, #2]
 c000684:	4053      	eors	r3, r2
 c000686:	733b      	strb	r3, [r7, #12]
 c000688:	7b3b      	ldrb	r3, [r7, #12]
 c00068a:	4618      	mov	r0, r3
 c00068c:	f7ff ff8e 	bl	c0005ac <xtime>
 c000690:	4603      	mov	r3, r0
 c000692:	733b      	strb	r3, [r7, #12]
 c000694:	7bfb      	ldrb	r3, [r7, #15]
 c000696:	687a      	ldr	r2, [r7, #4]
 c000698:	009b      	lsls	r3, r3, #2
 c00069a:	4413      	add	r3, r2
 c00069c:	7859      	ldrb	r1, [r3, #1]
 c00069e:	7b3a      	ldrb	r2, [r7, #12]
 c0006a0:	7b7b      	ldrb	r3, [r7, #13]
 c0006a2:	4053      	eors	r3, r2
 c0006a4:	b2da      	uxtb	r2, r3
 c0006a6:	7bfb      	ldrb	r3, [r7, #15]
 c0006a8:	404a      	eors	r2, r1
 c0006aa:	b2d1      	uxtb	r1, r2
 c0006ac:	687a      	ldr	r2, [r7, #4]
 c0006ae:	009b      	lsls	r3, r3, #2
 c0006b0:	4413      	add	r3, r2
 c0006b2:	460a      	mov	r2, r1
 c0006b4:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 c0006b6:	7bfb      	ldrb	r3, [r7, #15]
 c0006b8:	687a      	ldr	r2, [r7, #4]
 c0006ba:	009b      	lsls	r3, r3, #2
 c0006bc:	4413      	add	r3, r2
 c0006be:	789a      	ldrb	r2, [r3, #2]
 c0006c0:	7bfb      	ldrb	r3, [r7, #15]
 c0006c2:	6879      	ldr	r1, [r7, #4]
 c0006c4:	009b      	lsls	r3, r3, #2
 c0006c6:	440b      	add	r3, r1
 c0006c8:	78db      	ldrb	r3, [r3, #3]
 c0006ca:	4053      	eors	r3, r2
 c0006cc:	733b      	strb	r3, [r7, #12]
 c0006ce:	7b3b      	ldrb	r3, [r7, #12]
 c0006d0:	4618      	mov	r0, r3
 c0006d2:	f7ff ff6b 	bl	c0005ac <xtime>
 c0006d6:	4603      	mov	r3, r0
 c0006d8:	733b      	strb	r3, [r7, #12]
 c0006da:	7bfb      	ldrb	r3, [r7, #15]
 c0006dc:	687a      	ldr	r2, [r7, #4]
 c0006de:	009b      	lsls	r3, r3, #2
 c0006e0:	4413      	add	r3, r2
 c0006e2:	7899      	ldrb	r1, [r3, #2]
 c0006e4:	7b3a      	ldrb	r2, [r7, #12]
 c0006e6:	7b7b      	ldrb	r3, [r7, #13]
 c0006e8:	4053      	eors	r3, r2
 c0006ea:	b2da      	uxtb	r2, r3
 c0006ec:	7bfb      	ldrb	r3, [r7, #15]
 c0006ee:	404a      	eors	r2, r1
 c0006f0:	b2d1      	uxtb	r1, r2
 c0006f2:	687a      	ldr	r2, [r7, #4]
 c0006f4:	009b      	lsls	r3, r3, #2
 c0006f6:	4413      	add	r3, r2
 c0006f8:	460a      	mov	r2, r1
 c0006fa:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 c0006fc:	7bfb      	ldrb	r3, [r7, #15]
 c0006fe:	687a      	ldr	r2, [r7, #4]
 c000700:	009b      	lsls	r3, r3, #2
 c000702:	4413      	add	r3, r2
 c000704:	78da      	ldrb	r2, [r3, #3]
 c000706:	7bbb      	ldrb	r3, [r7, #14]
 c000708:	4053      	eors	r3, r2
 c00070a:	733b      	strb	r3, [r7, #12]
 c00070c:	7b3b      	ldrb	r3, [r7, #12]
 c00070e:	4618      	mov	r0, r3
 c000710:	f7ff ff4c 	bl	c0005ac <xtime>
 c000714:	4603      	mov	r3, r0
 c000716:	733b      	strb	r3, [r7, #12]
 c000718:	7bfb      	ldrb	r3, [r7, #15]
 c00071a:	687a      	ldr	r2, [r7, #4]
 c00071c:	009b      	lsls	r3, r3, #2
 c00071e:	4413      	add	r3, r2
 c000720:	78d9      	ldrb	r1, [r3, #3]
 c000722:	7b3a      	ldrb	r2, [r7, #12]
 c000724:	7b7b      	ldrb	r3, [r7, #13]
 c000726:	4053      	eors	r3, r2
 c000728:	b2da      	uxtb	r2, r3
 c00072a:	7bfb      	ldrb	r3, [r7, #15]
 c00072c:	404a      	eors	r2, r1
 c00072e:	b2d1      	uxtb	r1, r2
 c000730:	687a      	ldr	r2, [r7, #4]
 c000732:	009b      	lsls	r3, r3, #2
 c000734:	4413      	add	r3, r2
 c000736:	460a      	mov	r2, r1
 c000738:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 c00073a:	7bfb      	ldrb	r3, [r7, #15]
 c00073c:	3301      	adds	r3, #1
 c00073e:	73fb      	strb	r3, [r7, #15]
 c000740:	7bfb      	ldrb	r3, [r7, #15]
 c000742:	2b03      	cmp	r3, #3
 c000744:	f67f af57 	bls.w	c0005f6 <MixColumns+0xe>
  }
}
 c000748:	bf00      	nop
 c00074a:	bf00      	nop
 c00074c:	3710      	adds	r7, #16
 c00074e:	46bd      	mov	sp, r7
 c000750:	bd80      	pop	{r7, pc}

0c000752 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 c000752:	b5b0      	push	{r4, r5, r7, lr}
 c000754:	b084      	sub	sp, #16
 c000756:	af00      	add	r7, sp, #0
 c000758:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 c00075a:	2300      	movs	r3, #0
 c00075c:	60fb      	str	r3, [r7, #12]
 c00075e:	e33b      	b.n	c000dd8 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 c000760:	687b      	ldr	r3, [r7, #4]
 c000762:	68fa      	ldr	r2, [r7, #12]
 c000764:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 c000768:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 c00076a:	687a      	ldr	r2, [r7, #4]
 c00076c:	68fb      	ldr	r3, [r7, #12]
 c00076e:	009b      	lsls	r3, r3, #2
 c000770:	4413      	add	r3, r2
 c000772:	785b      	ldrb	r3, [r3, #1]
 c000774:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 c000776:	687a      	ldr	r2, [r7, #4]
 c000778:	68fb      	ldr	r3, [r7, #12]
 c00077a:	009b      	lsls	r3, r3, #2
 c00077c:	4413      	add	r3, r2
 c00077e:	789b      	ldrb	r3, [r3, #2]
 c000780:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 c000782:	687a      	ldr	r2, [r7, #4]
 c000784:	68fb      	ldr	r3, [r7, #12]
 c000786:	009b      	lsls	r3, r3, #2
 c000788:	4413      	add	r3, r2
 c00078a:	78db      	ldrb	r3, [r3, #3]
 c00078c:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 c00078e:	7afb      	ldrb	r3, [r7, #11]
 c000790:	4618      	mov	r0, r3
 c000792:	f7ff ff0b 	bl	c0005ac <xtime>
 c000796:	4603      	mov	r3, r0
 c000798:	4618      	mov	r0, r3
 c00079a:	f7ff ff07 	bl	c0005ac <xtime>
 c00079e:	4603      	mov	r3, r0
 c0007a0:	4618      	mov	r0, r3
 c0007a2:	f7ff ff03 	bl	c0005ac <xtime>
 c0007a6:	4603      	mov	r3, r0
 c0007a8:	4618      	mov	r0, r3
 c0007aa:	f7ff feff 	bl	c0005ac <xtime>
 c0007ae:	7abb      	ldrb	r3, [r7, #10]
 c0007b0:	4618      	mov	r0, r3
 c0007b2:	f7ff fefb 	bl	c0005ac <xtime>
 c0007b6:	4603      	mov	r3, r0
 c0007b8:	4618      	mov	r0, r3
 c0007ba:	f7ff fef7 	bl	c0005ac <xtime>
 c0007be:	7abb      	ldrb	r3, [r7, #10]
 c0007c0:	4618      	mov	r0, r3
 c0007c2:	f7ff fef3 	bl	c0005ac <xtime>
 c0007c6:	4603      	mov	r3, r0
 c0007c8:	4618      	mov	r0, r3
 c0007ca:	f7ff feef 	bl	c0005ac <xtime>
 c0007ce:	4603      	mov	r3, r0
 c0007d0:	4618      	mov	r0, r3
 c0007d2:	f7ff feeb 	bl	c0005ac <xtime>
 c0007d6:	4603      	mov	r3, r0
 c0007d8:	4618      	mov	r0, r3
 c0007da:	f7ff fee7 	bl	c0005ac <xtime>
 c0007de:	7a7b      	ldrb	r3, [r7, #9]
 c0007e0:	4618      	mov	r0, r3
 c0007e2:	f7ff fee3 	bl	c0005ac <xtime>
 c0007e6:	7a7b      	ldrb	r3, [r7, #9]
 c0007e8:	4618      	mov	r0, r3
 c0007ea:	f7ff fedf 	bl	c0005ac <xtime>
 c0007ee:	4603      	mov	r3, r0
 c0007f0:	4618      	mov	r0, r3
 c0007f2:	f7ff fedb 	bl	c0005ac <xtime>
 c0007f6:	4603      	mov	r3, r0
 c0007f8:	4618      	mov	r0, r3
 c0007fa:	f7ff fed7 	bl	c0005ac <xtime>
 c0007fe:	4603      	mov	r3, r0
 c000800:	4618      	mov	r0, r3
 c000802:	f7ff fed3 	bl	c0005ac <xtime>
 c000806:	7a3b      	ldrb	r3, [r7, #8]
 c000808:	4618      	mov	r0, r3
 c00080a:	f7ff fecf 	bl	c0005ac <xtime>
 c00080e:	7a3b      	ldrb	r3, [r7, #8]
 c000810:	4618      	mov	r0, r3
 c000812:	f7ff fecb 	bl	c0005ac <xtime>
 c000816:	4603      	mov	r3, r0
 c000818:	4618      	mov	r0, r3
 c00081a:	f7ff fec7 	bl	c0005ac <xtime>
 c00081e:	7a3b      	ldrb	r3, [r7, #8]
 c000820:	4618      	mov	r0, r3
 c000822:	f7ff fec3 	bl	c0005ac <xtime>
 c000826:	4603      	mov	r3, r0
 c000828:	4618      	mov	r0, r3
 c00082a:	f7ff febf 	bl	c0005ac <xtime>
 c00082e:	4603      	mov	r3, r0
 c000830:	4618      	mov	r0, r3
 c000832:	f7ff febb 	bl	c0005ac <xtime>
 c000836:	4603      	mov	r3, r0
 c000838:	4618      	mov	r0, r3
 c00083a:	f7ff feb7 	bl	c0005ac <xtime>
 c00083e:	7afb      	ldrb	r3, [r7, #11]
 c000840:	4618      	mov	r0, r3
 c000842:	f7ff feb3 	bl	c0005ac <xtime>
 c000846:	4603      	mov	r3, r0
 c000848:	461c      	mov	r4, r3
 c00084a:	7afb      	ldrb	r3, [r7, #11]
 c00084c:	4618      	mov	r0, r3
 c00084e:	f7ff fead 	bl	c0005ac <xtime>
 c000852:	4603      	mov	r3, r0
 c000854:	4618      	mov	r0, r3
 c000856:	f7ff fea9 	bl	c0005ac <xtime>
 c00085a:	4603      	mov	r3, r0
 c00085c:	4063      	eors	r3, r4
 c00085e:	b2dc      	uxtb	r4, r3
 c000860:	7afb      	ldrb	r3, [r7, #11]
 c000862:	4618      	mov	r0, r3
 c000864:	f7ff fea2 	bl	c0005ac <xtime>
 c000868:	4603      	mov	r3, r0
 c00086a:	4618      	mov	r0, r3
 c00086c:	f7ff fe9e 	bl	c0005ac <xtime>
 c000870:	4603      	mov	r3, r0
 c000872:	4618      	mov	r0, r3
 c000874:	f7ff fe9a 	bl	c0005ac <xtime>
 c000878:	4603      	mov	r3, r0
 c00087a:	4063      	eors	r3, r4
 c00087c:	b2dc      	uxtb	r4, r3
 c00087e:	7abb      	ldrb	r3, [r7, #10]
 c000880:	4618      	mov	r0, r3
 c000882:	f7ff fe93 	bl	c0005ac <xtime>
 c000886:	4603      	mov	r3, r0
 c000888:	461a      	mov	r2, r3
 c00088a:	7abb      	ldrb	r3, [r7, #10]
 c00088c:	4053      	eors	r3, r2
 c00088e:	b2dd      	uxtb	r5, r3
 c000890:	7abb      	ldrb	r3, [r7, #10]
 c000892:	4618      	mov	r0, r3
 c000894:	f7ff fe8a 	bl	c0005ac <xtime>
 c000898:	4603      	mov	r3, r0
 c00089a:	4618      	mov	r0, r3
 c00089c:	f7ff fe86 	bl	c0005ac <xtime>
 c0008a0:	4603      	mov	r3, r0
 c0008a2:	4618      	mov	r0, r3
 c0008a4:	f7ff fe82 	bl	c0005ac <xtime>
 c0008a8:	4603      	mov	r3, r0
 c0008aa:	406b      	eors	r3, r5
 c0008ac:	b2db      	uxtb	r3, r3
 c0008ae:	4063      	eors	r3, r4
 c0008b0:	b2dc      	uxtb	r4, r3
 c0008b2:	7a7b      	ldrb	r3, [r7, #9]
 c0008b4:	4618      	mov	r0, r3
 c0008b6:	f7ff fe79 	bl	c0005ac <xtime>
 c0008ba:	4603      	mov	r3, r0
 c0008bc:	4618      	mov	r0, r3
 c0008be:	f7ff fe75 	bl	c0005ac <xtime>
 c0008c2:	4603      	mov	r3, r0
 c0008c4:	461a      	mov	r2, r3
 c0008c6:	7a7b      	ldrb	r3, [r7, #9]
 c0008c8:	4053      	eors	r3, r2
 c0008ca:	b2dd      	uxtb	r5, r3
 c0008cc:	7a7b      	ldrb	r3, [r7, #9]
 c0008ce:	4618      	mov	r0, r3
 c0008d0:	f7ff fe6c 	bl	c0005ac <xtime>
 c0008d4:	4603      	mov	r3, r0
 c0008d6:	4618      	mov	r0, r3
 c0008d8:	f7ff fe68 	bl	c0005ac <xtime>
 c0008dc:	4603      	mov	r3, r0
 c0008de:	4618      	mov	r0, r3
 c0008e0:	f7ff fe64 	bl	c0005ac <xtime>
 c0008e4:	4603      	mov	r3, r0
 c0008e6:	406b      	eors	r3, r5
 c0008e8:	b2db      	uxtb	r3, r3
 c0008ea:	4063      	eors	r3, r4
 c0008ec:	b2dc      	uxtb	r4, r3
 c0008ee:	7a3b      	ldrb	r3, [r7, #8]
 c0008f0:	4618      	mov	r0, r3
 c0008f2:	f7ff fe5b 	bl	c0005ac <xtime>
 c0008f6:	4603      	mov	r3, r0
 c0008f8:	4618      	mov	r0, r3
 c0008fa:	f7ff fe57 	bl	c0005ac <xtime>
 c0008fe:	4603      	mov	r3, r0
 c000900:	4618      	mov	r0, r3
 c000902:	f7ff fe53 	bl	c0005ac <xtime>
 c000906:	4603      	mov	r3, r0
 c000908:	461a      	mov	r2, r3
 c00090a:	7a3b      	ldrb	r3, [r7, #8]
 c00090c:	4053      	eors	r3, r2
 c00090e:	b2db      	uxtb	r3, r3
 c000910:	4063      	eors	r3, r4
 c000912:	b2d9      	uxtb	r1, r3
 c000914:	687b      	ldr	r3, [r7, #4]
 c000916:	68fa      	ldr	r2, [r7, #12]
 c000918:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 c00091c:	7afb      	ldrb	r3, [r7, #11]
 c00091e:	4618      	mov	r0, r3
 c000920:	f7ff fe44 	bl	c0005ac <xtime>
 c000924:	7afb      	ldrb	r3, [r7, #11]
 c000926:	4618      	mov	r0, r3
 c000928:	f7ff fe40 	bl	c0005ac <xtime>
 c00092c:	4603      	mov	r3, r0
 c00092e:	4618      	mov	r0, r3
 c000930:	f7ff fe3c 	bl	c0005ac <xtime>
 c000934:	7afb      	ldrb	r3, [r7, #11]
 c000936:	4618      	mov	r0, r3
 c000938:	f7ff fe38 	bl	c0005ac <xtime>
 c00093c:	4603      	mov	r3, r0
 c00093e:	4618      	mov	r0, r3
 c000940:	f7ff fe34 	bl	c0005ac <xtime>
 c000944:	4603      	mov	r3, r0
 c000946:	4618      	mov	r0, r3
 c000948:	f7ff fe30 	bl	c0005ac <xtime>
 c00094c:	4603      	mov	r3, r0
 c00094e:	4618      	mov	r0, r3
 c000950:	f7ff fe2c 	bl	c0005ac <xtime>
 c000954:	7abb      	ldrb	r3, [r7, #10]
 c000956:	4618      	mov	r0, r3
 c000958:	f7ff fe28 	bl	c0005ac <xtime>
 c00095c:	4603      	mov	r3, r0
 c00095e:	4618      	mov	r0, r3
 c000960:	f7ff fe24 	bl	c0005ac <xtime>
 c000964:	4603      	mov	r3, r0
 c000966:	4618      	mov	r0, r3
 c000968:	f7ff fe20 	bl	c0005ac <xtime>
 c00096c:	4603      	mov	r3, r0
 c00096e:	4618      	mov	r0, r3
 c000970:	f7ff fe1c 	bl	c0005ac <xtime>
 c000974:	7a7b      	ldrb	r3, [r7, #9]
 c000976:	4618      	mov	r0, r3
 c000978:	f7ff fe18 	bl	c0005ac <xtime>
 c00097c:	4603      	mov	r3, r0
 c00097e:	4618      	mov	r0, r3
 c000980:	f7ff fe14 	bl	c0005ac <xtime>
 c000984:	7a7b      	ldrb	r3, [r7, #9]
 c000986:	4618      	mov	r0, r3
 c000988:	f7ff fe10 	bl	c0005ac <xtime>
 c00098c:	4603      	mov	r3, r0
 c00098e:	4618      	mov	r0, r3
 c000990:	f7ff fe0c 	bl	c0005ac <xtime>
 c000994:	4603      	mov	r3, r0
 c000996:	4618      	mov	r0, r3
 c000998:	f7ff fe08 	bl	c0005ac <xtime>
 c00099c:	4603      	mov	r3, r0
 c00099e:	4618      	mov	r0, r3
 c0009a0:	f7ff fe04 	bl	c0005ac <xtime>
 c0009a4:	7a3b      	ldrb	r3, [r7, #8]
 c0009a6:	4618      	mov	r0, r3
 c0009a8:	f7ff fe00 	bl	c0005ac <xtime>
 c0009ac:	7a3b      	ldrb	r3, [r7, #8]
 c0009ae:	4618      	mov	r0, r3
 c0009b0:	f7ff fdfc 	bl	c0005ac <xtime>
 c0009b4:	4603      	mov	r3, r0
 c0009b6:	4618      	mov	r0, r3
 c0009b8:	f7ff fdf8 	bl	c0005ac <xtime>
 c0009bc:	4603      	mov	r3, r0
 c0009be:	4618      	mov	r0, r3
 c0009c0:	f7ff fdf4 	bl	c0005ac <xtime>
 c0009c4:	4603      	mov	r3, r0
 c0009c6:	4618      	mov	r0, r3
 c0009c8:	f7ff fdf0 	bl	c0005ac <xtime>
 c0009cc:	7afb      	ldrb	r3, [r7, #11]
 c0009ce:	4618      	mov	r0, r3
 c0009d0:	f7ff fdec 	bl	c0005ac <xtime>
 c0009d4:	4603      	mov	r3, r0
 c0009d6:	4618      	mov	r0, r3
 c0009d8:	f7ff fde8 	bl	c0005ac <xtime>
 c0009dc:	4603      	mov	r3, r0
 c0009de:	4618      	mov	r0, r3
 c0009e0:	f7ff fde4 	bl	c0005ac <xtime>
 c0009e4:	4603      	mov	r3, r0
 c0009e6:	461a      	mov	r2, r3
 c0009e8:	7afb      	ldrb	r3, [r7, #11]
 c0009ea:	4053      	eors	r3, r2
 c0009ec:	b2dc      	uxtb	r4, r3
 c0009ee:	7abb      	ldrb	r3, [r7, #10]
 c0009f0:	4618      	mov	r0, r3
 c0009f2:	f7ff fddb 	bl	c0005ac <xtime>
 c0009f6:	4603      	mov	r3, r0
 c0009f8:	461d      	mov	r5, r3
 c0009fa:	7abb      	ldrb	r3, [r7, #10]
 c0009fc:	4618      	mov	r0, r3
 c0009fe:	f7ff fdd5 	bl	c0005ac <xtime>
 c000a02:	4603      	mov	r3, r0
 c000a04:	4618      	mov	r0, r3
 c000a06:	f7ff fdd1 	bl	c0005ac <xtime>
 c000a0a:	4603      	mov	r3, r0
 c000a0c:	406b      	eors	r3, r5
 c000a0e:	b2dd      	uxtb	r5, r3
 c000a10:	7abb      	ldrb	r3, [r7, #10]
 c000a12:	4618      	mov	r0, r3
 c000a14:	f7ff fdca 	bl	c0005ac <xtime>
 c000a18:	4603      	mov	r3, r0
 c000a1a:	4618      	mov	r0, r3
 c000a1c:	f7ff fdc6 	bl	c0005ac <xtime>
 c000a20:	4603      	mov	r3, r0
 c000a22:	4618      	mov	r0, r3
 c000a24:	f7ff fdc2 	bl	c0005ac <xtime>
 c000a28:	4603      	mov	r3, r0
 c000a2a:	406b      	eors	r3, r5
 c000a2c:	b2db      	uxtb	r3, r3
 c000a2e:	4063      	eors	r3, r4
 c000a30:	b2dc      	uxtb	r4, r3
 c000a32:	7a7b      	ldrb	r3, [r7, #9]
 c000a34:	4618      	mov	r0, r3
 c000a36:	f7ff fdb9 	bl	c0005ac <xtime>
 c000a3a:	4603      	mov	r3, r0
 c000a3c:	461a      	mov	r2, r3
 c000a3e:	7a7b      	ldrb	r3, [r7, #9]
 c000a40:	4053      	eors	r3, r2
 c000a42:	b2dd      	uxtb	r5, r3
 c000a44:	7a7b      	ldrb	r3, [r7, #9]
 c000a46:	4618      	mov	r0, r3
 c000a48:	f7ff fdb0 	bl	c0005ac <xtime>
 c000a4c:	4603      	mov	r3, r0
 c000a4e:	4618      	mov	r0, r3
 c000a50:	f7ff fdac 	bl	c0005ac <xtime>
 c000a54:	4603      	mov	r3, r0
 c000a56:	4618      	mov	r0, r3
 c000a58:	f7ff fda8 	bl	c0005ac <xtime>
 c000a5c:	4603      	mov	r3, r0
 c000a5e:	406b      	eors	r3, r5
 c000a60:	b2db      	uxtb	r3, r3
 c000a62:	4063      	eors	r3, r4
 c000a64:	b2dc      	uxtb	r4, r3
 c000a66:	7a3b      	ldrb	r3, [r7, #8]
 c000a68:	4618      	mov	r0, r3
 c000a6a:	f7ff fd9f 	bl	c0005ac <xtime>
 c000a6e:	4603      	mov	r3, r0
 c000a70:	4618      	mov	r0, r3
 c000a72:	f7ff fd9b 	bl	c0005ac <xtime>
 c000a76:	4603      	mov	r3, r0
 c000a78:	461a      	mov	r2, r3
 c000a7a:	7a3b      	ldrb	r3, [r7, #8]
 c000a7c:	4053      	eors	r3, r2
 c000a7e:	b2dd      	uxtb	r5, r3
 c000a80:	7a3b      	ldrb	r3, [r7, #8]
 c000a82:	4618      	mov	r0, r3
 c000a84:	f7ff fd92 	bl	c0005ac <xtime>
 c000a88:	4603      	mov	r3, r0
 c000a8a:	4618      	mov	r0, r3
 c000a8c:	f7ff fd8e 	bl	c0005ac <xtime>
 c000a90:	4603      	mov	r3, r0
 c000a92:	4618      	mov	r0, r3
 c000a94:	f7ff fd8a 	bl	c0005ac <xtime>
 c000a98:	4603      	mov	r3, r0
 c000a9a:	406b      	eors	r3, r5
 c000a9c:	b2db      	uxtb	r3, r3
 c000a9e:	4063      	eors	r3, r4
 c000aa0:	b2d9      	uxtb	r1, r3
 c000aa2:	687a      	ldr	r2, [r7, #4]
 c000aa4:	68fb      	ldr	r3, [r7, #12]
 c000aa6:	009b      	lsls	r3, r3, #2
 c000aa8:	4413      	add	r3, r2
 c000aaa:	460a      	mov	r2, r1
 c000aac:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 c000aae:	7afb      	ldrb	r3, [r7, #11]
 c000ab0:	4618      	mov	r0, r3
 c000ab2:	f7ff fd7b 	bl	c0005ac <xtime>
 c000ab6:	7afb      	ldrb	r3, [r7, #11]
 c000ab8:	4618      	mov	r0, r3
 c000aba:	f7ff fd77 	bl	c0005ac <xtime>
 c000abe:	4603      	mov	r3, r0
 c000ac0:	4618      	mov	r0, r3
 c000ac2:	f7ff fd73 	bl	c0005ac <xtime>
 c000ac6:	4603      	mov	r3, r0
 c000ac8:	4618      	mov	r0, r3
 c000aca:	f7ff fd6f 	bl	c0005ac <xtime>
 c000ace:	4603      	mov	r3, r0
 c000ad0:	4618      	mov	r0, r3
 c000ad2:	f7ff fd6b 	bl	c0005ac <xtime>
 c000ad6:	7abb      	ldrb	r3, [r7, #10]
 c000ad8:	4618      	mov	r0, r3
 c000ada:	f7ff fd67 	bl	c0005ac <xtime>
 c000ade:	7abb      	ldrb	r3, [r7, #10]
 c000ae0:	4618      	mov	r0, r3
 c000ae2:	f7ff fd63 	bl	c0005ac <xtime>
 c000ae6:	4603      	mov	r3, r0
 c000ae8:	4618      	mov	r0, r3
 c000aea:	f7ff fd5f 	bl	c0005ac <xtime>
 c000aee:	7abb      	ldrb	r3, [r7, #10]
 c000af0:	4618      	mov	r0, r3
 c000af2:	f7ff fd5b 	bl	c0005ac <xtime>
 c000af6:	4603      	mov	r3, r0
 c000af8:	4618      	mov	r0, r3
 c000afa:	f7ff fd57 	bl	c0005ac <xtime>
 c000afe:	4603      	mov	r3, r0
 c000b00:	4618      	mov	r0, r3
 c000b02:	f7ff fd53 	bl	c0005ac <xtime>
 c000b06:	4603      	mov	r3, r0
 c000b08:	4618      	mov	r0, r3
 c000b0a:	f7ff fd4f 	bl	c0005ac <xtime>
 c000b0e:	7a7b      	ldrb	r3, [r7, #9]
 c000b10:	4618      	mov	r0, r3
 c000b12:	f7ff fd4b 	bl	c0005ac <xtime>
 c000b16:	4603      	mov	r3, r0
 c000b18:	4618      	mov	r0, r3
 c000b1a:	f7ff fd47 	bl	c0005ac <xtime>
 c000b1e:	4603      	mov	r3, r0
 c000b20:	4618      	mov	r0, r3
 c000b22:	f7ff fd43 	bl	c0005ac <xtime>
 c000b26:	4603      	mov	r3, r0
 c000b28:	4618      	mov	r0, r3
 c000b2a:	f7ff fd3f 	bl	c0005ac <xtime>
 c000b2e:	7a3b      	ldrb	r3, [r7, #8]
 c000b30:	4618      	mov	r0, r3
 c000b32:	f7ff fd3b 	bl	c0005ac <xtime>
 c000b36:	4603      	mov	r3, r0
 c000b38:	4618      	mov	r0, r3
 c000b3a:	f7ff fd37 	bl	c0005ac <xtime>
 c000b3e:	7a3b      	ldrb	r3, [r7, #8]
 c000b40:	4618      	mov	r0, r3
 c000b42:	f7ff fd33 	bl	c0005ac <xtime>
 c000b46:	4603      	mov	r3, r0
 c000b48:	4618      	mov	r0, r3
 c000b4a:	f7ff fd2f 	bl	c0005ac <xtime>
 c000b4e:	4603      	mov	r3, r0
 c000b50:	4618      	mov	r0, r3
 c000b52:	f7ff fd2b 	bl	c0005ac <xtime>
 c000b56:	4603      	mov	r3, r0
 c000b58:	4618      	mov	r0, r3
 c000b5a:	f7ff fd27 	bl	c0005ac <xtime>
 c000b5e:	7afb      	ldrb	r3, [r7, #11]
 c000b60:	4618      	mov	r0, r3
 c000b62:	f7ff fd23 	bl	c0005ac <xtime>
 c000b66:	4603      	mov	r3, r0
 c000b68:	4618      	mov	r0, r3
 c000b6a:	f7ff fd1f 	bl	c0005ac <xtime>
 c000b6e:	4603      	mov	r3, r0
 c000b70:	461a      	mov	r2, r3
 c000b72:	7afb      	ldrb	r3, [r7, #11]
 c000b74:	4053      	eors	r3, r2
 c000b76:	b2dc      	uxtb	r4, r3
 c000b78:	7afb      	ldrb	r3, [r7, #11]
 c000b7a:	4618      	mov	r0, r3
 c000b7c:	f7ff fd16 	bl	c0005ac <xtime>
 c000b80:	4603      	mov	r3, r0
 c000b82:	4618      	mov	r0, r3
 c000b84:	f7ff fd12 	bl	c0005ac <xtime>
 c000b88:	4603      	mov	r3, r0
 c000b8a:	4618      	mov	r0, r3
 c000b8c:	f7ff fd0e 	bl	c0005ac <xtime>
 c000b90:	4603      	mov	r3, r0
 c000b92:	4063      	eors	r3, r4
 c000b94:	b2dc      	uxtb	r4, r3
 c000b96:	7abb      	ldrb	r3, [r7, #10]
 c000b98:	4618      	mov	r0, r3
 c000b9a:	f7ff fd07 	bl	c0005ac <xtime>
 c000b9e:	4603      	mov	r3, r0
 c000ba0:	4618      	mov	r0, r3
 c000ba2:	f7ff fd03 	bl	c0005ac <xtime>
 c000ba6:	4603      	mov	r3, r0
 c000ba8:	4618      	mov	r0, r3
 c000baa:	f7ff fcff 	bl	c0005ac <xtime>
 c000bae:	4603      	mov	r3, r0
 c000bb0:	461a      	mov	r2, r3
 c000bb2:	7abb      	ldrb	r3, [r7, #10]
 c000bb4:	4053      	eors	r3, r2
 c000bb6:	b2db      	uxtb	r3, r3
 c000bb8:	4063      	eors	r3, r4
 c000bba:	b2dc      	uxtb	r4, r3
 c000bbc:	7a7b      	ldrb	r3, [r7, #9]
 c000bbe:	4618      	mov	r0, r3
 c000bc0:	f7ff fcf4 	bl	c0005ac <xtime>
 c000bc4:	4603      	mov	r3, r0
 c000bc6:	461d      	mov	r5, r3
 c000bc8:	7a7b      	ldrb	r3, [r7, #9]
 c000bca:	4618      	mov	r0, r3
 c000bcc:	f7ff fcee 	bl	c0005ac <xtime>
 c000bd0:	4603      	mov	r3, r0
 c000bd2:	4618      	mov	r0, r3
 c000bd4:	f7ff fcea 	bl	c0005ac <xtime>
 c000bd8:	4603      	mov	r3, r0
 c000bda:	406b      	eors	r3, r5
 c000bdc:	b2dd      	uxtb	r5, r3
 c000bde:	7a7b      	ldrb	r3, [r7, #9]
 c000be0:	4618      	mov	r0, r3
 c000be2:	f7ff fce3 	bl	c0005ac <xtime>
 c000be6:	4603      	mov	r3, r0
 c000be8:	4618      	mov	r0, r3
 c000bea:	f7ff fcdf 	bl	c0005ac <xtime>
 c000bee:	4603      	mov	r3, r0
 c000bf0:	4618      	mov	r0, r3
 c000bf2:	f7ff fcdb 	bl	c0005ac <xtime>
 c000bf6:	4603      	mov	r3, r0
 c000bf8:	406b      	eors	r3, r5
 c000bfa:	b2db      	uxtb	r3, r3
 c000bfc:	4063      	eors	r3, r4
 c000bfe:	b2dc      	uxtb	r4, r3
 c000c00:	7a3b      	ldrb	r3, [r7, #8]
 c000c02:	4618      	mov	r0, r3
 c000c04:	f7ff fcd2 	bl	c0005ac <xtime>
 c000c08:	4603      	mov	r3, r0
 c000c0a:	461a      	mov	r2, r3
 c000c0c:	7a3b      	ldrb	r3, [r7, #8]
 c000c0e:	4053      	eors	r3, r2
 c000c10:	b2dd      	uxtb	r5, r3
 c000c12:	7a3b      	ldrb	r3, [r7, #8]
 c000c14:	4618      	mov	r0, r3
 c000c16:	f7ff fcc9 	bl	c0005ac <xtime>
 c000c1a:	4603      	mov	r3, r0
 c000c1c:	4618      	mov	r0, r3
 c000c1e:	f7ff fcc5 	bl	c0005ac <xtime>
 c000c22:	4603      	mov	r3, r0
 c000c24:	4618      	mov	r0, r3
 c000c26:	f7ff fcc1 	bl	c0005ac <xtime>
 c000c2a:	4603      	mov	r3, r0
 c000c2c:	406b      	eors	r3, r5
 c000c2e:	b2db      	uxtb	r3, r3
 c000c30:	4063      	eors	r3, r4
 c000c32:	b2d9      	uxtb	r1, r3
 c000c34:	687a      	ldr	r2, [r7, #4]
 c000c36:	68fb      	ldr	r3, [r7, #12]
 c000c38:	009b      	lsls	r3, r3, #2
 c000c3a:	4413      	add	r3, r2
 c000c3c:	460a      	mov	r2, r1
 c000c3e:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 c000c40:	7afb      	ldrb	r3, [r7, #11]
 c000c42:	4618      	mov	r0, r3
 c000c44:	f7ff fcb2 	bl	c0005ac <xtime>
 c000c48:	4603      	mov	r3, r0
 c000c4a:	4618      	mov	r0, r3
 c000c4c:	f7ff fcae 	bl	c0005ac <xtime>
 c000c50:	7afb      	ldrb	r3, [r7, #11]
 c000c52:	4618      	mov	r0, r3
 c000c54:	f7ff fcaa 	bl	c0005ac <xtime>
 c000c58:	4603      	mov	r3, r0
 c000c5a:	4618      	mov	r0, r3
 c000c5c:	f7ff fca6 	bl	c0005ac <xtime>
 c000c60:	4603      	mov	r3, r0
 c000c62:	4618      	mov	r0, r3
 c000c64:	f7ff fca2 	bl	c0005ac <xtime>
 c000c68:	4603      	mov	r3, r0
 c000c6a:	4618      	mov	r0, r3
 c000c6c:	f7ff fc9e 	bl	c0005ac <xtime>
 c000c70:	7abb      	ldrb	r3, [r7, #10]
 c000c72:	4618      	mov	r0, r3
 c000c74:	f7ff fc9a 	bl	c0005ac <xtime>
 c000c78:	7abb      	ldrb	r3, [r7, #10]
 c000c7a:	4618      	mov	r0, r3
 c000c7c:	f7ff fc96 	bl	c0005ac <xtime>
 c000c80:	4603      	mov	r3, r0
 c000c82:	4618      	mov	r0, r3
 c000c84:	f7ff fc92 	bl	c0005ac <xtime>
 c000c88:	4603      	mov	r3, r0
 c000c8a:	4618      	mov	r0, r3
 c000c8c:	f7ff fc8e 	bl	c0005ac <xtime>
 c000c90:	4603      	mov	r3, r0
 c000c92:	4618      	mov	r0, r3
 c000c94:	f7ff fc8a 	bl	c0005ac <xtime>
 c000c98:	7a7b      	ldrb	r3, [r7, #9]
 c000c9a:	4618      	mov	r0, r3
 c000c9c:	f7ff fc86 	bl	c0005ac <xtime>
 c000ca0:	7a7b      	ldrb	r3, [r7, #9]
 c000ca2:	4618      	mov	r0, r3
 c000ca4:	f7ff fc82 	bl	c0005ac <xtime>
 c000ca8:	4603      	mov	r3, r0
 c000caa:	4618      	mov	r0, r3
 c000cac:	f7ff fc7e 	bl	c0005ac <xtime>
 c000cb0:	7a7b      	ldrb	r3, [r7, #9]
 c000cb2:	4618      	mov	r0, r3
 c000cb4:	f7ff fc7a 	bl	c0005ac <xtime>
 c000cb8:	4603      	mov	r3, r0
 c000cba:	4618      	mov	r0, r3
 c000cbc:	f7ff fc76 	bl	c0005ac <xtime>
 c000cc0:	4603      	mov	r3, r0
 c000cc2:	4618      	mov	r0, r3
 c000cc4:	f7ff fc72 	bl	c0005ac <xtime>
 c000cc8:	4603      	mov	r3, r0
 c000cca:	4618      	mov	r0, r3
 c000ccc:	f7ff fc6e 	bl	c0005ac <xtime>
 c000cd0:	7a3b      	ldrb	r3, [r7, #8]
 c000cd2:	4618      	mov	r0, r3
 c000cd4:	f7ff fc6a 	bl	c0005ac <xtime>
 c000cd8:	4603      	mov	r3, r0
 c000cda:	4618      	mov	r0, r3
 c000cdc:	f7ff fc66 	bl	c0005ac <xtime>
 c000ce0:	4603      	mov	r3, r0
 c000ce2:	4618      	mov	r0, r3
 c000ce4:	f7ff fc62 	bl	c0005ac <xtime>
 c000ce8:	4603      	mov	r3, r0
 c000cea:	4618      	mov	r0, r3
 c000cec:	f7ff fc5e 	bl	c0005ac <xtime>
 c000cf0:	7afb      	ldrb	r3, [r7, #11]
 c000cf2:	4618      	mov	r0, r3
 c000cf4:	f7ff fc5a 	bl	c0005ac <xtime>
 c000cf8:	4603      	mov	r3, r0
 c000cfa:	461a      	mov	r2, r3
 c000cfc:	7afb      	ldrb	r3, [r7, #11]
 c000cfe:	4053      	eors	r3, r2
 c000d00:	b2dc      	uxtb	r4, r3
 c000d02:	7afb      	ldrb	r3, [r7, #11]
 c000d04:	4618      	mov	r0, r3
 c000d06:	f7ff fc51 	bl	c0005ac <xtime>
 c000d0a:	4603      	mov	r3, r0
 c000d0c:	4618      	mov	r0, r3
 c000d0e:	f7ff fc4d 	bl	c0005ac <xtime>
 c000d12:	4603      	mov	r3, r0
 c000d14:	4618      	mov	r0, r3
 c000d16:	f7ff fc49 	bl	c0005ac <xtime>
 c000d1a:	4603      	mov	r3, r0
 c000d1c:	4063      	eors	r3, r4
 c000d1e:	b2dc      	uxtb	r4, r3
 c000d20:	7abb      	ldrb	r3, [r7, #10]
 c000d22:	4618      	mov	r0, r3
 c000d24:	f7ff fc42 	bl	c0005ac <xtime>
 c000d28:	4603      	mov	r3, r0
 c000d2a:	4618      	mov	r0, r3
 c000d2c:	f7ff fc3e 	bl	c0005ac <xtime>
 c000d30:	4603      	mov	r3, r0
 c000d32:	461a      	mov	r2, r3
 c000d34:	7abb      	ldrb	r3, [r7, #10]
 c000d36:	4053      	eors	r3, r2
 c000d38:	b2dd      	uxtb	r5, r3
 c000d3a:	7abb      	ldrb	r3, [r7, #10]
 c000d3c:	4618      	mov	r0, r3
 c000d3e:	f7ff fc35 	bl	c0005ac <xtime>
 c000d42:	4603      	mov	r3, r0
 c000d44:	4618      	mov	r0, r3
 c000d46:	f7ff fc31 	bl	c0005ac <xtime>
 c000d4a:	4603      	mov	r3, r0
 c000d4c:	4618      	mov	r0, r3
 c000d4e:	f7ff fc2d 	bl	c0005ac <xtime>
 c000d52:	4603      	mov	r3, r0
 c000d54:	406b      	eors	r3, r5
 c000d56:	b2db      	uxtb	r3, r3
 c000d58:	4063      	eors	r3, r4
 c000d5a:	b2dc      	uxtb	r4, r3
 c000d5c:	7a7b      	ldrb	r3, [r7, #9]
 c000d5e:	4618      	mov	r0, r3
 c000d60:	f7ff fc24 	bl	c0005ac <xtime>
 c000d64:	4603      	mov	r3, r0
 c000d66:	4618      	mov	r0, r3
 c000d68:	f7ff fc20 	bl	c0005ac <xtime>
 c000d6c:	4603      	mov	r3, r0
 c000d6e:	4618      	mov	r0, r3
 c000d70:	f7ff fc1c 	bl	c0005ac <xtime>
 c000d74:	4603      	mov	r3, r0
 c000d76:	461a      	mov	r2, r3
 c000d78:	7a7b      	ldrb	r3, [r7, #9]
 c000d7a:	4053      	eors	r3, r2
 c000d7c:	b2db      	uxtb	r3, r3
 c000d7e:	4063      	eors	r3, r4
 c000d80:	b2dc      	uxtb	r4, r3
 c000d82:	7a3b      	ldrb	r3, [r7, #8]
 c000d84:	4618      	mov	r0, r3
 c000d86:	f7ff fc11 	bl	c0005ac <xtime>
 c000d8a:	4603      	mov	r3, r0
 c000d8c:	461d      	mov	r5, r3
 c000d8e:	7a3b      	ldrb	r3, [r7, #8]
 c000d90:	4618      	mov	r0, r3
 c000d92:	f7ff fc0b 	bl	c0005ac <xtime>
 c000d96:	4603      	mov	r3, r0
 c000d98:	4618      	mov	r0, r3
 c000d9a:	f7ff fc07 	bl	c0005ac <xtime>
 c000d9e:	4603      	mov	r3, r0
 c000da0:	406b      	eors	r3, r5
 c000da2:	b2dd      	uxtb	r5, r3
 c000da4:	7a3b      	ldrb	r3, [r7, #8]
 c000da6:	4618      	mov	r0, r3
 c000da8:	f7ff fc00 	bl	c0005ac <xtime>
 c000dac:	4603      	mov	r3, r0
 c000dae:	4618      	mov	r0, r3
 c000db0:	f7ff fbfc 	bl	c0005ac <xtime>
 c000db4:	4603      	mov	r3, r0
 c000db6:	4618      	mov	r0, r3
 c000db8:	f7ff fbf8 	bl	c0005ac <xtime>
 c000dbc:	4603      	mov	r3, r0
 c000dbe:	406b      	eors	r3, r5
 c000dc0:	b2db      	uxtb	r3, r3
 c000dc2:	4063      	eors	r3, r4
 c000dc4:	b2d9      	uxtb	r1, r3
 c000dc6:	687a      	ldr	r2, [r7, #4]
 c000dc8:	68fb      	ldr	r3, [r7, #12]
 c000dca:	009b      	lsls	r3, r3, #2
 c000dcc:	4413      	add	r3, r2
 c000dce:	460a      	mov	r2, r1
 c000dd0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 c000dd2:	68fb      	ldr	r3, [r7, #12]
 c000dd4:	3301      	adds	r3, #1
 c000dd6:	60fb      	str	r3, [r7, #12]
 c000dd8:	68fb      	ldr	r3, [r7, #12]
 c000dda:	2b03      	cmp	r3, #3
 c000ddc:	f77f acc0 	ble.w	c000760 <InvMixColumns+0xe>
  }
}
 c000de0:	bf00      	nop
 c000de2:	bf00      	nop
 c000de4:	3710      	adds	r7, #16
 c000de6:	46bd      	mov	sp, r7
 c000de8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0c000dec <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 c000dec:	b480      	push	{r7}
 c000dee:	b085      	sub	sp, #20
 c000df0:	af00      	add	r7, sp, #0
 c000df2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 c000df4:	2300      	movs	r3, #0
 c000df6:	73fb      	strb	r3, [r7, #15]
 c000df8:	e01d      	b.n	c000e36 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 c000dfa:	2300      	movs	r3, #0
 c000dfc:	73bb      	strb	r3, [r7, #14]
 c000dfe:	e014      	b.n	c000e2a <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 c000e00:	7bba      	ldrb	r2, [r7, #14]
 c000e02:	7bfb      	ldrb	r3, [r7, #15]
 c000e04:	6879      	ldr	r1, [r7, #4]
 c000e06:	0092      	lsls	r2, r2, #2
 c000e08:	440a      	add	r2, r1
 c000e0a:	4413      	add	r3, r2
 c000e0c:	781b      	ldrb	r3, [r3, #0]
 c000e0e:	4618      	mov	r0, r3
 c000e10:	7bba      	ldrb	r2, [r7, #14]
 c000e12:	7bfb      	ldrb	r3, [r7, #15]
 c000e14:	490d      	ldr	r1, [pc, #52]	; (c000e4c <InvSubBytes+0x60>)
 c000e16:	5c08      	ldrb	r0, [r1, r0]
 c000e18:	6879      	ldr	r1, [r7, #4]
 c000e1a:	0092      	lsls	r2, r2, #2
 c000e1c:	440a      	add	r2, r1
 c000e1e:	4413      	add	r3, r2
 c000e20:	4602      	mov	r2, r0
 c000e22:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 c000e24:	7bbb      	ldrb	r3, [r7, #14]
 c000e26:	3301      	adds	r3, #1
 c000e28:	73bb      	strb	r3, [r7, #14]
 c000e2a:	7bbb      	ldrb	r3, [r7, #14]
 c000e2c:	2b03      	cmp	r3, #3
 c000e2e:	d9e7      	bls.n	c000e00 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 c000e30:	7bfb      	ldrb	r3, [r7, #15]
 c000e32:	3301      	adds	r3, #1
 c000e34:	73fb      	strb	r3, [r7, #15]
 c000e36:	7bfb      	ldrb	r3, [r7, #15]
 c000e38:	2b03      	cmp	r3, #3
 c000e3a:	d9de      	bls.n	c000dfa <InvSubBytes+0xe>
    }
  }
}
 c000e3c:	bf00      	nop
 c000e3e:	bf00      	nop
 c000e40:	3714      	adds	r7, #20
 c000e42:	46bd      	mov	sp, r7
 c000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e48:	4770      	bx	lr
 c000e4a:	bf00      	nop
 c000e4c:	0c00214c 	.word	0x0c00214c

0c000e50 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 c000e50:	b480      	push	{r7}
 c000e52:	b085      	sub	sp, #20
 c000e54:	af00      	add	r7, sp, #0
 c000e56:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 c000e58:	687b      	ldr	r3, [r7, #4]
 c000e5a:	7b5b      	ldrb	r3, [r3, #13]
 c000e5c:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 c000e5e:	687b      	ldr	r3, [r7, #4]
 c000e60:	7a5a      	ldrb	r2, [r3, #9]
 c000e62:	687b      	ldr	r3, [r7, #4]
 c000e64:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 c000e66:	687b      	ldr	r3, [r7, #4]
 c000e68:	795a      	ldrb	r2, [r3, #5]
 c000e6a:	687b      	ldr	r3, [r7, #4]
 c000e6c:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 c000e6e:	687b      	ldr	r3, [r7, #4]
 c000e70:	785a      	ldrb	r2, [r3, #1]
 c000e72:	687b      	ldr	r3, [r7, #4]
 c000e74:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 c000e76:	687b      	ldr	r3, [r7, #4]
 c000e78:	7bfa      	ldrb	r2, [r7, #15]
 c000e7a:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 c000e7c:	687b      	ldr	r3, [r7, #4]
 c000e7e:	789b      	ldrb	r3, [r3, #2]
 c000e80:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 c000e82:	687b      	ldr	r3, [r7, #4]
 c000e84:	7a9a      	ldrb	r2, [r3, #10]
 c000e86:	687b      	ldr	r3, [r7, #4]
 c000e88:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 c000e8a:	687b      	ldr	r3, [r7, #4]
 c000e8c:	7bfa      	ldrb	r2, [r7, #15]
 c000e8e:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 c000e90:	687b      	ldr	r3, [r7, #4]
 c000e92:	799b      	ldrb	r3, [r3, #6]
 c000e94:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 c000e96:	687b      	ldr	r3, [r7, #4]
 c000e98:	7b9a      	ldrb	r2, [r3, #14]
 c000e9a:	687b      	ldr	r3, [r7, #4]
 c000e9c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 c000e9e:	687b      	ldr	r3, [r7, #4]
 c000ea0:	7bfa      	ldrb	r2, [r7, #15]
 c000ea2:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 c000ea4:	687b      	ldr	r3, [r7, #4]
 c000ea6:	78db      	ldrb	r3, [r3, #3]
 c000ea8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 c000eaa:	687b      	ldr	r3, [r7, #4]
 c000eac:	79da      	ldrb	r2, [r3, #7]
 c000eae:	687b      	ldr	r3, [r7, #4]
 c000eb0:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 c000eb2:	687b      	ldr	r3, [r7, #4]
 c000eb4:	7ada      	ldrb	r2, [r3, #11]
 c000eb6:	687b      	ldr	r3, [r7, #4]
 c000eb8:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 c000eba:	687b      	ldr	r3, [r7, #4]
 c000ebc:	7bda      	ldrb	r2, [r3, #15]
 c000ebe:	687b      	ldr	r3, [r7, #4]
 c000ec0:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 c000ec2:	687b      	ldr	r3, [r7, #4]
 c000ec4:	7bfa      	ldrb	r2, [r7, #15]
 c000ec6:	73da      	strb	r2, [r3, #15]
}
 c000ec8:	bf00      	nop
 c000eca:	3714      	adds	r7, #20
 c000ecc:	46bd      	mov	sp, r7
 c000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ed2:	4770      	bx	lr

0c000ed4 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 c000ed4:	b580      	push	{r7, lr}
 c000ed6:	b084      	sub	sp, #16
 c000ed8:	af00      	add	r7, sp, #0
 c000eda:	6078      	str	r0, [r7, #4]
 c000edc:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 c000ede:	2300      	movs	r3, #0
 c000ee0:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 c000ee2:	683a      	ldr	r2, [r7, #0]
 c000ee4:	6879      	ldr	r1, [r7, #4]
 c000ee6:	2000      	movs	r0, #0
 c000ee8:	f7ff fab0 	bl	c00044c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 c000eec:	2301      	movs	r3, #1
 c000eee:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 c000ef0:	6878      	ldr	r0, [r7, #4]
 c000ef2:	f7ff fae7 	bl	c0004c4 <SubBytes>
    ShiftRows(state);
 c000ef6:	6878      	ldr	r0, [r7, #4]
 c000ef8:	f7ff fb16 	bl	c000528 <ShiftRows>
    if (round == Nr) {
 c000efc:	7bfb      	ldrb	r3, [r7, #15]
 c000efe:	2b0a      	cmp	r3, #10
 c000f00:	d00c      	beq.n	c000f1c <Cipher+0x48>
      break;
    }
    MixColumns(state);
 c000f02:	6878      	ldr	r0, [r7, #4]
 c000f04:	f7ff fb70 	bl	c0005e8 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 c000f08:	7bfb      	ldrb	r3, [r7, #15]
 c000f0a:	683a      	ldr	r2, [r7, #0]
 c000f0c:	6879      	ldr	r1, [r7, #4]
 c000f0e:	4618      	mov	r0, r3
 c000f10:	f7ff fa9c 	bl	c00044c <AddRoundKey>
  for (round = 1; ; ++round)
 c000f14:	7bfb      	ldrb	r3, [r7, #15]
 c000f16:	3301      	adds	r3, #1
 c000f18:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 c000f1a:	e7e9      	b.n	c000ef0 <Cipher+0x1c>
      break;
 c000f1c:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 c000f1e:	683a      	ldr	r2, [r7, #0]
 c000f20:	6879      	ldr	r1, [r7, #4]
 c000f22:	200a      	movs	r0, #10
 c000f24:	f7ff fa92 	bl	c00044c <AddRoundKey>
}
 c000f28:	bf00      	nop
 c000f2a:	3710      	adds	r7, #16
 c000f2c:	46bd      	mov	sp, r7
 c000f2e:	bd80      	pop	{r7, pc}

0c000f30 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 c000f30:	b580      	push	{r7, lr}
 c000f32:	b084      	sub	sp, #16
 c000f34:	af00      	add	r7, sp, #0
 c000f36:	6078      	str	r0, [r7, #4]
 c000f38:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 c000f3a:	2300      	movs	r3, #0
 c000f3c:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 c000f3e:	683a      	ldr	r2, [r7, #0]
 c000f40:	6879      	ldr	r1, [r7, #4]
 c000f42:	200a      	movs	r0, #10
 c000f44:	f7ff fa82 	bl	c00044c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 c000f48:	2309      	movs	r3, #9
 c000f4a:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 c000f4c:	6878      	ldr	r0, [r7, #4]
 c000f4e:	f7ff ff7f 	bl	c000e50 <InvShiftRows>
    InvSubBytes(state);
 c000f52:	6878      	ldr	r0, [r7, #4]
 c000f54:	f7ff ff4a 	bl	c000dec <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 c000f58:	7bfb      	ldrb	r3, [r7, #15]
 c000f5a:	683a      	ldr	r2, [r7, #0]
 c000f5c:	6879      	ldr	r1, [r7, #4]
 c000f5e:	4618      	mov	r0, r3
 c000f60:	f7ff fa74 	bl	c00044c <AddRoundKey>
    if (round == 0) {
 c000f64:	7bfb      	ldrb	r3, [r7, #15]
 c000f66:	2b00      	cmp	r3, #0
 c000f68:	d006      	beq.n	c000f78 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 c000f6a:	6878      	ldr	r0, [r7, #4]
 c000f6c:	f7ff fbf1 	bl	c000752 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 c000f70:	7bfb      	ldrb	r3, [r7, #15]
 c000f72:	3b01      	subs	r3, #1
 c000f74:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 c000f76:	e7e9      	b.n	c000f4c <InvCipher+0x1c>
      break;
 c000f78:	bf00      	nop
  }

}
 c000f7a:	bf00      	nop
 c000f7c:	3710      	adds	r7, #16
 c000f7e:	46bd      	mov	sp, r7
 c000f80:	bd80      	pop	{r7, pc}

0c000f82 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 c000f82:	b580      	push	{r7, lr}
 c000f84:	b082      	sub	sp, #8
 c000f86:	af00      	add	r7, sp, #0
 c000f88:	6078      	str	r0, [r7, #4]
 c000f8a:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 c000f8c:	687b      	ldr	r3, [r7, #4]
 c000f8e:	4619      	mov	r1, r3
 c000f90:	6838      	ldr	r0, [r7, #0]
 c000f92:	f7ff ff9f 	bl	c000ed4 <Cipher>
}
 c000f96:	bf00      	nop
 c000f98:	3708      	adds	r7, #8
 c000f9a:	46bd      	mov	sp, r7
 c000f9c:	bd80      	pop	{r7, pc}

0c000f9e <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 c000f9e:	b580      	push	{r7, lr}
 c000fa0:	b082      	sub	sp, #8
 c000fa2:	af00      	add	r7, sp, #0
 c000fa4:	6078      	str	r0, [r7, #4]
 c000fa6:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 c000fa8:	687b      	ldr	r3, [r7, #4]
 c000faa:	4619      	mov	r1, r3
 c000fac:	6838      	ldr	r0, [r7, #0]
 c000fae:	f7ff ffbf 	bl	c000f30 <InvCipher>
}
 c000fb2:	bf00      	nop
 c000fb4:	3708      	adds	r7, #8
 c000fb6:	46bd      	mov	sp, r7
 c000fb8:	bd80      	pop	{r7, pc}

0c000fba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000fba:	b580      	push	{r7, lr}
 c000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000fbe:	f000 fc6a 	bl	c001896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000fc2:	f000 f849 	bl	c001058 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000fc6:	f000 f8bf 	bl	c001148 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000fca:	f000 f801 	bl	c000fd0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000fce:	e7fe      	b.n	c000fce <main+0x14>

0c000fd0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000fd0:	b590      	push	{r4, r7, lr}
 c000fd2:	b083      	sub	sp, #12
 c000fd4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000fd6:	4b1d      	ldr	r3, [pc, #116]	; (c00104c <NonSecure_Init+0x7c>)
 c000fd8:	4a1d      	ldr	r2, [pc, #116]	; (c001050 <NonSecure_Init+0x80>)
 c000fda:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000fdc:	4b1c      	ldr	r3, [pc, #112]	; (c001050 <NonSecure_Init+0x80>)
 c000fde:	681b      	ldr	r3, [r3, #0]
 c000fe0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000fe2:	683b      	ldr	r3, [r7, #0]
 c000fe4:	f383 8888 	msr	MSP_NS, r3
}
 c000fe8:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000fea:	4b1a      	ldr	r3, [pc, #104]	; (c001054 <NonSecure_Init+0x84>)
 c000fec:	681b      	ldr	r3, [r3, #0]
 c000fee:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000ff0:	687b      	ldr	r3, [r7, #4]
 c000ff2:	461c      	mov	r4, r3
 c000ff4:	0864      	lsrs	r4, r4, #1
 c000ff6:	0064      	lsls	r4, r4, #1
 c000ff8:	4620      	mov	r0, r4
 c000ffa:	4621      	mov	r1, r4
 c000ffc:	4622      	mov	r2, r4
 c000ffe:	4623      	mov	r3, r4
 c001000:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001004:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001008:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00100c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001010:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001014:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001018:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00101c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001020:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001024:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001028:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00102c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001030:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00103c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001040:	f7ff f8f8 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c001044:	bf00      	nop
 c001046:	370c      	adds	r7, #12
 c001048:	46bd      	mov	sp, r7
 c00104a:	bd90      	pop	{r4, r7, pc}
 c00104c:	e002ed00 	.word	0xe002ed00
 c001050:	08040000 	.word	0x08040000
 c001054:	08040004 	.word	0x08040004

0c001058 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c001058:	b580      	push	{r7, lr}
 c00105a:	b09c      	sub	sp, #112	; 0x70
 c00105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c00105e:	1d3b      	adds	r3, r7, #4
 c001060:	226c      	movs	r2, #108	; 0x6c
 c001062:	2100      	movs	r1, #0
 c001064:	4618      	mov	r0, r3
 c001066:	f000 ffb9 	bl	c001fdc <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00106a:	2300      	movs	r3, #0
 c00106c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00106e:	2300      	movs	r3, #0
 c001070:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001076:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00107c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001082:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001088:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c00108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00108e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001094:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00109a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00109c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0010a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0010a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0010ac:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0010b2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0010ba:	2300      	movs	r3, #0
 c0010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0010be:	2300      	movs	r3, #0
 c0010c0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0010c2:	2300      	movs	r3, #0
 c0010c4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0010c6:	2300      	movs	r3, #0
 c0010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0010ca:	2300      	movs	r3, #0
 c0010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0010ce:	2300      	movs	r3, #0
 c0010d0:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0010d2:	2300      	movs	r3, #0
 c0010d4:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0010d6:	2300      	movs	r3, #0
 c0010d8:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0010da:	2300      	movs	r3, #0
 c0010dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0010de:	2300      	movs	r3, #0
 c0010e0:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0010e2:	2300      	movs	r3, #0
 c0010e4:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0010e6:	2300      	movs	r3, #0
 c0010e8:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0010ea:	2300      	movs	r3, #0
 c0010ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0010ee:	1d3b      	adds	r3, r7, #4
 c0010f0:	4619      	mov	r1, r3
 c0010f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0010f6:	f000 feed 	bl	c001ed4 <HAL_GTZC_MPCBB_ConfigMem>
 c0010fa:	4603      	mov	r3, r0
 c0010fc:	2b00      	cmp	r3, #0
 c0010fe:	d001      	beq.n	c001104 <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c001100:	f000 f87c 	bl	c0011fc <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001104:	2300      	movs	r3, #0
 c001106:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001108:	2300      	movs	r3, #0
 c00110a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00110c:	2300      	movs	r3, #0
 c00110e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001110:	2300      	movs	r3, #0
 c001112:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001114:	2300      	movs	r3, #0
 c001116:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001118:	2300      	movs	r3, #0
 c00111a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00111c:	2300      	movs	r3, #0
 c00111e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001120:	2300      	movs	r3, #0
 c001122:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001124:	2300      	movs	r3, #0
 c001126:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001128:	1d3b      	adds	r3, r7, #4
 c00112a:	4619      	mov	r1, r3
 c00112c:	4805      	ldr	r0, [pc, #20]	; (c001144 <MX_GTZC_S_Init+0xec>)
 c00112e:	f000 fed1 	bl	c001ed4 <HAL_GTZC_MPCBB_ConfigMem>
 c001132:	4603      	mov	r3, r0
 c001134:	2b00      	cmp	r3, #0
 c001136:	d001      	beq.n	c00113c <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c001138:	f000 f860 	bl	c0011fc <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00113c:	bf00      	nop
 c00113e:	3770      	adds	r7, #112	; 0x70
 c001140:	46bd      	mov	sp, r7
 c001142:	bd80      	pop	{r7, pc}
 c001144:	30030000 	.word	0x30030000

0c001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c001148:	b580      	push	{r7, lr}
 c00114a:	b088      	sub	sp, #32
 c00114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00114e:	f107 030c 	add.w	r3, r7, #12
 c001152:	2200      	movs	r2, #0
 c001154:	601a      	str	r2, [r3, #0]
 c001156:	605a      	str	r2, [r3, #4]
 c001158:	609a      	str	r2, [r3, #8]
 c00115a:	60da      	str	r2, [r3, #12]
 c00115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00115e:	4b23      	ldr	r3, [pc, #140]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001162:	4a22      	ldr	r2, [pc, #136]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001164:	f043 0304 	orr.w	r3, r3, #4
 c001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00116a:	4b20      	ldr	r3, [pc, #128]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c00116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00116e:	f003 0304 	and.w	r3, r3, #4
 c001172:	60bb      	str	r3, [r7, #8]
 c001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c001176:	4b1d      	ldr	r3, [pc, #116]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00117a:	4a1c      	ldr	r2, [pc, #112]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c00117c:	f043 0301 	orr.w	r3, r3, #1
 c001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001182:	4b1a      	ldr	r3, [pc, #104]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001186:	f003 0301 	and.w	r3, r3, #1
 c00118a:	607b      	str	r3, [r7, #4]
 c00118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00118e:	4b17      	ldr	r3, [pc, #92]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001192:	4a16      	ldr	r2, [pc, #88]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c001194:	f043 0302 	orr.w	r3, r3, #2
 c001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00119a:	4b14      	ldr	r3, [pc, #80]	; (c0011ec <MX_GPIO_Init+0xa4>)
 c00119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00119e:	f003 0302 	and.w	r3, r3, #2
 c0011a2:	603b      	str	r3, [r7, #0]
 c0011a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c0011a6:	2200      	movs	r2, #0
 c0011a8:	2180      	movs	r1, #128	; 0x80
 c0011aa:	4811      	ldr	r0, [pc, #68]	; (c0011f0 <MX_GPIO_Init+0xa8>)
 c0011ac:	f000 fe42 	bl	c001e34 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_7, GPIO_PIN_NSEC);
 c0011b0:	2200      	movs	r2, #0
 c0011b2:	2180      	movs	r1, #128	; 0x80
 c0011b4:	480f      	ldr	r0, [pc, #60]	; (c0011f4 <MX_GPIO_Init+0xac>)
 c0011b6:	f000 fe55 	bl	c001e64 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c0011ba:	2200      	movs	r2, #0
 c0011bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0011c0:	480d      	ldr	r0, [pc, #52]	; (c0011f8 <MX_GPIO_Init+0xb0>)
 c0011c2:	f000 fe4f 	bl	c001e64 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c0011c6:	2380      	movs	r3, #128	; 0x80
 c0011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0011ca:	2301      	movs	r3, #1
 c0011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0011ce:	2300      	movs	r3, #0
 c0011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0011d2:	2300      	movs	r3, #0
 c0011d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c0011d6:	f107 030c 	add.w	r3, r7, #12
 c0011da:	4619      	mov	r1, r3
 c0011dc:	4804      	ldr	r0, [pc, #16]	; (c0011f0 <MX_GPIO_Init+0xa8>)
 c0011de:	f000 fca9 	bl	c001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0011e2:	bf00      	nop
 c0011e4:	3720      	adds	r7, #32
 c0011e6:	46bd      	mov	sp, r7
 c0011e8:	bd80      	pop	{r7, pc}
 c0011ea:	bf00      	nop
 c0011ec:	50021000 	.word	0x50021000
 c0011f0:	52020400 	.word	0x52020400
 c0011f4:	52020800 	.word	0x52020800
 c0011f8:	52020000 	.word	0x52020000

0c0011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0011fc:	b480      	push	{r7}
 c0011fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c001200:	b672      	cpsid	i
}
 c001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c001204:	e7fe      	b.n	c001204 <Error_Handler+0x8>
	...

0c001208 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001208:	b480      	push	{r7}
 c00120a:	b083      	sub	sp, #12
 c00120c:	af00      	add	r7, sp, #0
 c00120e:	4603      	mov	r3, r0
 c001210:	6039      	str	r1, [r7, #0]
 c001212:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001214:	683b      	ldr	r3, [r7, #0]
 c001216:	2b00      	cmp	r3, #0
 c001218:	d00d      	beq.n	c001236 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00121a:	79fb      	ldrb	r3, [r7, #7]
 c00121c:	2b00      	cmp	r3, #0
 c00121e:	d002      	beq.n	c001226 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001220:	2b01      	cmp	r3, #1
 c001222:	d004      	beq.n	c00122e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001224:	e007      	b.n	c001236 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c001226:	4a20      	ldr	r2, [pc, #128]	; (c0012a8 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c001228:	683b      	ldr	r3, [r7, #0]
 c00122a:	6013      	str	r3, [r2, #0]
        break;
 c00122c:	e003      	b.n	c001236 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c00122e:	4a1f      	ldr	r2, [pc, #124]	; (c0012ac <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001230:	683b      	ldr	r3, [r7, #0]
 c001232:	6013      	str	r3, [r2, #0]
        break;
 c001234:	bf00      	nop
    }
  }
}
 c001236:	bf00      	nop
 c001238:	370c      	adds	r7, #12
 c00123a:	46bd      	mov	sp, r7
 c00123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001240:	4670      	mov	r0, lr
 c001242:	4671      	mov	r1, lr
 c001244:	4672      	mov	r2, lr
 c001246:	4673      	mov	r3, lr
 c001248:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00124c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001250:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001254:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001258:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00125c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001260:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001264:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001268:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00126c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001270:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001274:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001278:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00127c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001284:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001288:	f38e 8c00 	msr	CPSR_fs, lr
 c00128c:	b410      	push	{r4}
 c00128e:	eef1 ca10 	vmrs	ip, fpscr
 c001292:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001296:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00129a:	ea0c 0c04 	and.w	ip, ip, r4
 c00129e:	eee1 ca10 	vmsr	fpscr, ip
 c0012a2:	bc10      	pop	{r4}
 c0012a4:	46f4      	mov	ip, lr
 c0012a6:	4774      	bxns	lr
 c0012a8:	30000028 	.word	0x30000028
 c0012ac:	3000002c 	.word	0x3000002c

0c0012b0 <__acle_se_init_ctx>:

CMSE_NS_ENTRY void init_ctx(uint8_t* key){
 c0012b0:	b580      	push	{r7, lr}
 c0012b2:	b082      	sub	sp, #8
 c0012b4:	af00      	add	r7, sp, #0
 c0012b6:	6078      	str	r0, [r7, #4]
	AES_init_ctx(&ctx, key);
 c0012b8:	6879      	ldr	r1, [r7, #4]
 c0012ba:	481e      	ldr	r0, [pc, #120]	; (c001334 <__acle_se_init_ctx+0x84>)
 c0012bc:	f7ff f8b8 	bl	c000430 <AES_init_ctx>
	return;
 c0012c0:	bf00      	nop
}
 c0012c2:	3708      	adds	r7, #8
 c0012c4:	46bd      	mov	sp, r7
 c0012c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0012ca:	4670      	mov	r0, lr
 c0012cc:	4671      	mov	r1, lr
 c0012ce:	4672      	mov	r2, lr
 c0012d0:	4673      	mov	r3, lr
 c0012d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0012d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0012da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0012de:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0012e2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0012e6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0012ea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0012ee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0012f2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0012f6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0012fa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0012fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001302:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00130a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00130e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001312:	f38e 8c00 	msr	CPSR_fs, lr
 c001316:	b410      	push	{r4}
 c001318:	eef1 ca10 	vmrs	ip, fpscr
 c00131c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001320:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001324:	ea0c 0c04 	and.w	ip, ip, r4
 c001328:	eee1 ca10 	vmsr	fpscr, ip
 c00132c:	bc10      	pop	{r4}
 c00132e:	46f4      	mov	ip, lr
 c001330:	4774      	bxns	lr
 c001332:	bf00      	nop
 c001334:	30000030 	.word	0x30000030

0c001338 <__acle_se_encrypt>:

CMSE_NS_ENTRY void encrypt(uint8_t* plain){
 c001338:	b580      	push	{r7, lr}
 c00133a:	b084      	sub	sp, #16
 c00133c:	af00      	add	r7, sp, #0
 c00133e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_ENC; ++i)
 c001340:	2300      	movs	r3, #0
 c001342:	60fb      	str	r3, [r7, #12]
 c001344:	e00b      	b.n	c00135e <__acle_se_encrypt+0x26>
		AES_ECB_encrypt(&ctx, plain + (i * 16));
 c001346:	68fb      	ldr	r3, [r7, #12]
 c001348:	011b      	lsls	r3, r3, #4
 c00134a:	461a      	mov	r2, r3
 c00134c:	687b      	ldr	r3, [r7, #4]
 c00134e:	4413      	add	r3, r2
 c001350:	4619      	mov	r1, r3
 c001352:	4821      	ldr	r0, [pc, #132]	; (c0013d8 <__acle_se_encrypt+0xa0>)
 c001354:	f7ff fe15 	bl	c000f82 <AES_ECB_encrypt>
	for (int i = 0; i < NUM_ENC; ++i)
 c001358:	68fb      	ldr	r3, [r7, #12]
 c00135a:	3301      	adds	r3, #1
 c00135c:	60fb      	str	r3, [r7, #12]
 c00135e:	68fb      	ldr	r3, [r7, #12]
 c001360:	2b03      	cmp	r3, #3
 c001362:	ddf0      	ble.n	c001346 <__acle_se_encrypt+0xe>
	return;
 c001364:	bf00      	nop
}
 c001366:	3710      	adds	r7, #16
 c001368:	46bd      	mov	sp, r7
 c00136a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00136e:	4670      	mov	r0, lr
 c001370:	4671      	mov	r1, lr
 c001372:	4672      	mov	r2, lr
 c001374:	4673      	mov	r3, lr
 c001376:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00137a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00137e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001382:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001386:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00138a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00138e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001392:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001396:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00139a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00139e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0013a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0013a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0013b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0013b6:	f38e 8c00 	msr	CPSR_fs, lr
 c0013ba:	b410      	push	{r4}
 c0013bc:	eef1 ca10 	vmrs	ip, fpscr
 c0013c0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013c4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013c8:	ea0c 0c04 	and.w	ip, ip, r4
 c0013cc:	eee1 ca10 	vmsr	fpscr, ip
 c0013d0:	bc10      	pop	{r4}
 c0013d2:	46f4      	mov	ip, lr
 c0013d4:	4774      	bxns	lr
 c0013d6:	bf00      	nop
 c0013d8:	30000030 	.word	0x30000030

0c0013dc <__acle_se_decrypt>:

CMSE_NS_ENTRY void decrypt(uint8_t* plain){
 c0013dc:	b580      	push	{r7, lr}
 c0013de:	b084      	sub	sp, #16
 c0013e0:	af00      	add	r7, sp, #0
 c0013e2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_ENC; ++i)
 c0013e4:	2300      	movs	r3, #0
 c0013e6:	60fb      	str	r3, [r7, #12]
 c0013e8:	e00b      	b.n	c001402 <__acle_se_decrypt+0x26>
		AES_ECB_decrypt(&ctx, plain + (i * 16));
 c0013ea:	68fb      	ldr	r3, [r7, #12]
 c0013ec:	011b      	lsls	r3, r3, #4
 c0013ee:	461a      	mov	r2, r3
 c0013f0:	687b      	ldr	r3, [r7, #4]
 c0013f2:	4413      	add	r3, r2
 c0013f4:	4619      	mov	r1, r3
 c0013f6:	4821      	ldr	r0, [pc, #132]	; (c00147c <__acle_se_decrypt+0xa0>)
 c0013f8:	f7ff fdd1 	bl	c000f9e <AES_ECB_decrypt>
	for (int i = 0; i < NUM_ENC; ++i)
 c0013fc:	68fb      	ldr	r3, [r7, #12]
 c0013fe:	3301      	adds	r3, #1
 c001400:	60fb      	str	r3, [r7, #12]
 c001402:	68fb      	ldr	r3, [r7, #12]
 c001404:	2b03      	cmp	r3, #3
 c001406:	ddf0      	ble.n	c0013ea <__acle_se_decrypt+0xe>
	return;
 c001408:	bf00      	nop
}
 c00140a:	3710      	adds	r7, #16
 c00140c:	46bd      	mov	sp, r7
 c00140e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001412:	4670      	mov	r0, lr
 c001414:	4671      	mov	r1, lr
 c001416:	4672      	mov	r2, lr
 c001418:	4673      	mov	r3, lr
 c00141a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00141e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001422:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001426:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00142a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00142e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001432:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001436:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00143a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00143e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001442:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001446:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00144a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00144e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001456:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00145a:	f38e 8c00 	msr	CPSR_fs, lr
 c00145e:	b410      	push	{r4}
 c001460:	eef1 ca10 	vmrs	ip, fpscr
 c001464:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001468:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00146c:	ea0c 0c04 	and.w	ip, ip, r4
 c001470:	eee1 ca10 	vmsr	fpscr, ip
 c001474:	bc10      	pop	{r4}
 c001476:	46f4      	mov	ip, lr
 c001478:	4774      	bxns	lr
 c00147a:	bf00      	nop
 c00147c:	30000030 	.word	0x30000030

0c001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c001480:	b480      	push	{r7}
 c001482:	b085      	sub	sp, #20
 c001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c001486:	4b15      	ldr	r3, [pc, #84]	; (c0014dc <HAL_MspInit+0x5c>)
 c001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00148a:	4a14      	ldr	r2, [pc, #80]	; (c0014dc <HAL_MspInit+0x5c>)
 c00148c:	f043 0301 	orr.w	r3, r3, #1
 c001490:	6613      	str	r3, [r2, #96]	; 0x60
 c001492:	4b12      	ldr	r3, [pc, #72]	; (c0014dc <HAL_MspInit+0x5c>)
 c001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001496:	f003 0301 	and.w	r3, r3, #1
 c00149a:	60fb      	str	r3, [r7, #12]
 c00149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c00149e:	4b0f      	ldr	r3, [pc, #60]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014a2:	4a0e      	ldr	r2, [pc, #56]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0014a8:	6593      	str	r3, [r2, #88]	; 0x58
 c0014aa:	4b0c      	ldr	r3, [pc, #48]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0014b2:	60bb      	str	r3, [r7, #8]
 c0014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0014b6:	4b09      	ldr	r3, [pc, #36]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0014ba:	4a08      	ldr	r2, [pc, #32]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0014c0:	6493      	str	r3, [r2, #72]	; 0x48
 c0014c2:	4b06      	ldr	r3, [pc, #24]	; (c0014dc <HAL_MspInit+0x5c>)
 c0014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0014ca:	607b      	str	r3, [r7, #4]
 c0014cc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0014ce:	bf00      	nop
 c0014d0:	3714      	adds	r7, #20
 c0014d2:	46bd      	mov	sp, r7
 c0014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014d8:	4770      	bx	lr
 c0014da:	bf00      	nop
 c0014dc:	50021000 	.word	0x50021000

0c0014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0014e0:	b480      	push	{r7}
 c0014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0014e4:	e7fe      	b.n	c0014e4 <NMI_Handler+0x4>

0c0014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0014e6:	b480      	push	{r7}
 c0014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0014ea:	e7fe      	b.n	c0014ea <HardFault_Handler+0x4>

0c0014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0014ec:	b480      	push	{r7}
 c0014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0014f0:	e7fe      	b.n	c0014f0 <MemManage_Handler+0x4>

0c0014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0014f2:	b480      	push	{r7}
 c0014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0014f6:	e7fe      	b.n	c0014f6 <BusFault_Handler+0x4>

0c0014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0014f8:	b480      	push	{r7}
 c0014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0014fc:	e7fe      	b.n	c0014fc <UsageFault_Handler+0x4>

0c0014fe <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0014fe:	b480      	push	{r7}
 c001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001502:	e7fe      	b.n	c001502 <SecureFault_Handler+0x4>

0c001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001504:	b480      	push	{r7}
 c001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001508:	bf00      	nop
 c00150a:	46bd      	mov	sp, r7
 c00150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001510:	4770      	bx	lr

0c001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001512:	b480      	push	{r7}
 c001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001516:	bf00      	nop
 c001518:	46bd      	mov	sp, r7
 c00151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00151e:	4770      	bx	lr

0c001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001520:	b480      	push	{r7}
 c001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001524:	bf00      	nop
 c001526:	46bd      	mov	sp, r7
 c001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00152c:	4770      	bx	lr

0c00152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00152e:	b580      	push	{r7, lr}
 c001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001532:	f000 fa07 	bl	c001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001536:	bf00      	nop
 c001538:	bd80      	pop	{r7, pc}
	...

0c00153c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c00153c:	b480      	push	{r7}
 c00153e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001540:	4b2f      	ldr	r3, [pc, #188]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001542:	2200      	movs	r2, #0
 c001544:	609a      	str	r2, [r3, #8]
 c001546:	4b2e      	ldr	r3, [pc, #184]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001548:	4a2e      	ldr	r2, [pc, #184]	; (c001604 <TZ_SAU_Setup+0xc8>)
 c00154a:	60da      	str	r2, [r3, #12]
 c00154c:	4b2c      	ldr	r3, [pc, #176]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00154e:	4a2e      	ldr	r2, [pc, #184]	; (c001608 <TZ_SAU_Setup+0xcc>)
 c001550:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001552:	4b2b      	ldr	r3, [pc, #172]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001554:	2201      	movs	r2, #1
 c001556:	609a      	str	r2, [r3, #8]
 c001558:	4b29      	ldr	r3, [pc, #164]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00155a:	4a2c      	ldr	r2, [pc, #176]	; (c00160c <TZ_SAU_Setup+0xd0>)
 c00155c:	60da      	str	r2, [r3, #12]
 c00155e:	4b28      	ldr	r3, [pc, #160]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001560:	4a2b      	ldr	r2, [pc, #172]	; (c001610 <TZ_SAU_Setup+0xd4>)
 c001562:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001564:	4b26      	ldr	r3, [pc, #152]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001566:	2202      	movs	r2, #2
 c001568:	609a      	str	r2, [r3, #8]
 c00156a:	4b25      	ldr	r3, [pc, #148]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00156c:	4a29      	ldr	r2, [pc, #164]	; (c001614 <TZ_SAU_Setup+0xd8>)
 c00156e:	60da      	str	r2, [r3, #12]
 c001570:	4b23      	ldr	r3, [pc, #140]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001572:	4a29      	ldr	r2, [pc, #164]	; (c001618 <TZ_SAU_Setup+0xdc>)
 c001574:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001576:	4b22      	ldr	r3, [pc, #136]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001578:	2203      	movs	r2, #3
 c00157a:	609a      	str	r2, [r3, #8]
 c00157c:	4b20      	ldr	r3, [pc, #128]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00157e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001582:	60da      	str	r2, [r3, #12]
 c001584:	4b1e      	ldr	r3, [pc, #120]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001586:	4a25      	ldr	r2, [pc, #148]	; (c00161c <TZ_SAU_Setup+0xe0>)
 c001588:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00158a:	4b1d      	ldr	r3, [pc, #116]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00158c:	2204      	movs	r2, #4
 c00158e:	609a      	str	r2, [r3, #8]
 c001590:	4b1b      	ldr	r3, [pc, #108]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c001592:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001596:	60da      	str	r2, [r3, #12]
 c001598:	4b19      	ldr	r3, [pc, #100]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c00159a:	4a21      	ldr	r2, [pc, #132]	; (c001620 <TZ_SAU_Setup+0xe4>)
 c00159c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00159e:	4b18      	ldr	r3, [pc, #96]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c0015a0:	2205      	movs	r2, #5
 c0015a2:	609a      	str	r2, [r3, #8]
 c0015a4:	4b16      	ldr	r3, [pc, #88]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c0015a6:	4a1f      	ldr	r2, [pc, #124]	; (c001624 <TZ_SAU_Setup+0xe8>)
 c0015a8:	60da      	str	r2, [r3, #12]
 c0015aa:	4b15      	ldr	r3, [pc, #84]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c0015ac:	4a1e      	ldr	r2, [pc, #120]	; (c001628 <TZ_SAU_Setup+0xec>)
 c0015ae:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0015b0:	4b13      	ldr	r3, [pc, #76]	; (c001600 <TZ_SAU_Setup+0xc4>)
 c0015b2:	2201      	movs	r2, #1
 c0015b4:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0015b6:	4b1d      	ldr	r3, [pc, #116]	; (c00162c <TZ_SAU_Setup+0xf0>)
 c0015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0015bc:	4a1b      	ldr	r2, [pc, #108]	; (c00162c <TZ_SAU_Setup+0xf0>)
 c0015be:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0015c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015c6:	4b1a      	ldr	r3, [pc, #104]	; (c001630 <TZ_SAU_Setup+0xf4>)
 c0015c8:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0015ca:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015ce:	4a18      	ldr	r2, [pc, #96]	; (c001630 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015d4:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0015d6:	4b17      	ldr	r3, [pc, #92]	; (c001634 <TZ_SAU_Setup+0xf8>)
 c0015d8:	2200      	movs	r2, #0
 c0015da:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0015de:	4b15      	ldr	r3, [pc, #84]	; (c001634 <TZ_SAU_Setup+0xf8>)
 c0015e0:	2200      	movs	r2, #0
 c0015e2:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0015e6:	4b13      	ldr	r3, [pc, #76]	; (c001634 <TZ_SAU_Setup+0xf8>)
 c0015e8:	2200      	movs	r2, #0
 c0015ea:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0015ee:	4b11      	ldr	r3, [pc, #68]	; (c001634 <TZ_SAU_Setup+0xf8>)
 c0015f0:	2200      	movs	r2, #0
 c0015f2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c0015f6:	bf00      	nop
 c0015f8:	46bd      	mov	sp, r7
 c0015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015fe:	4770      	bx	lr
 c001600:	e000edd0 	.word	0xe000edd0
 c001604:	0c03e000 	.word	0x0c03e000
 c001608:	0c03ffe3 	.word	0x0c03ffe3
 c00160c:	08040000 	.word	0x08040000
 c001610:	0807ffe1 	.word	0x0807ffe1
 c001614:	20018000 	.word	0x20018000
 c001618:	2003ffe1 	.word	0x2003ffe1
 c00161c:	4fffffe1 	.word	0x4fffffe1
 c001620:	9fffffe1 	.word	0x9fffffe1
 c001624:	0bf90000 	.word	0x0bf90000
 c001628:	0bfa8fe1 	.word	0x0bfa8fe1
 c00162c:	e000ed00 	.word	0xe000ed00
 c001630:	e000ef30 	.word	0xe000ef30
 c001634:	e000e100 	.word	0xe000e100

0c001638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001638:	b580      	push	{r7, lr}
 c00163a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c00163c:	f7ff ff7e 	bl	c00153c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001640:	4b08      	ldr	r3, [pc, #32]	; (c001664 <SystemInit+0x2c>)
 c001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001646:	4a07      	ldr	r2, [pc, #28]	; (c001664 <SystemInit+0x2c>)
 c001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c00164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001650:	4b05      	ldr	r3, [pc, #20]	; (c001668 <SystemInit+0x30>)
 c001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001656:	4a04      	ldr	r2, [pc, #16]	; (c001668 <SystemInit+0x30>)
 c001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c00165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001660:	bf00      	nop
 c001662:	bd80      	pop	{r7, pc}
 c001664:	e000ed00 	.word	0xe000ed00
 c001668:	e002ed00 	.word	0xe002ed00

0c00166c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c00166c:	b480      	push	{r7}
 c00166e:	b087      	sub	sp, #28
 c001670:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001672:	4b4f      	ldr	r3, [pc, #316]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001674:	681b      	ldr	r3, [r3, #0]
 c001676:	f003 0308 	and.w	r3, r3, #8
 c00167a:	2b00      	cmp	r3, #0
 c00167c:	d107      	bne.n	c00168e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c00167e:	4b4c      	ldr	r3, [pc, #304]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001684:	0a1b      	lsrs	r3, r3, #8
 c001686:	f003 030f 	and.w	r3, r3, #15
 c00168a:	617b      	str	r3, [r7, #20]
 c00168c:	e005      	b.n	c00169a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00168e:	4b48      	ldr	r3, [pc, #288]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001690:	681b      	ldr	r3, [r3, #0]
 c001692:	091b      	lsrs	r3, r3, #4
 c001694:	f003 030f 	and.w	r3, r3, #15
 c001698:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00169a:	4a46      	ldr	r2, [pc, #280]	; (c0017b4 <SystemCoreClockUpdate+0x148>)
 c00169c:	697b      	ldr	r3, [r7, #20]
 c00169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0016a2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0016a4:	4b42      	ldr	r3, [pc, #264]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c0016a6:	689b      	ldr	r3, [r3, #8]
 c0016a8:	f003 030c 	and.w	r3, r3, #12
 c0016ac:	2b0c      	cmp	r3, #12
 c0016ae:	d866      	bhi.n	c00177e <SystemCoreClockUpdate+0x112>
 c0016b0:	a201      	add	r2, pc, #4	; (adr r2, c0016b8 <SystemCoreClockUpdate+0x4c>)
 c0016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0016b6:	bf00      	nop
 c0016b8:	0c0016ed 	.word	0x0c0016ed
 c0016bc:	0c00177f 	.word	0x0c00177f
 c0016c0:	0c00177f 	.word	0x0c00177f
 c0016c4:	0c00177f 	.word	0x0c00177f
 c0016c8:	0c0016f5 	.word	0x0c0016f5
 c0016cc:	0c00177f 	.word	0x0c00177f
 c0016d0:	0c00177f 	.word	0x0c00177f
 c0016d4:	0c00177f 	.word	0x0c00177f
 c0016d8:	0c0016fd 	.word	0x0c0016fd
 c0016dc:	0c00177f 	.word	0x0c00177f
 c0016e0:	0c00177f 	.word	0x0c00177f
 c0016e4:	0c00177f 	.word	0x0c00177f
 c0016e8:	0c001705 	.word	0x0c001705
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c0016ec:	4a32      	ldr	r2, [pc, #200]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c0016ee:	697b      	ldr	r3, [r7, #20]
 c0016f0:	6013      	str	r3, [r2, #0]
      break;
 c0016f2:	e048      	b.n	c001786 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c0016f4:	4b30      	ldr	r3, [pc, #192]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c0016f6:	4a31      	ldr	r2, [pc, #196]	; (c0017bc <SystemCoreClockUpdate+0x150>)
 c0016f8:	601a      	str	r2, [r3, #0]
      break;
 c0016fa:	e044      	b.n	c001786 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0016fc:	4b2e      	ldr	r3, [pc, #184]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c0016fe:	4a2f      	ldr	r2, [pc, #188]	; (c0017bc <SystemCoreClockUpdate+0x150>)
 c001700:	601a      	str	r2, [r3, #0]
      break;
 c001702:	e040      	b.n	c001786 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001704:	4b2a      	ldr	r3, [pc, #168]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001706:	68db      	ldr	r3, [r3, #12]
 c001708:	f003 0303 	and.w	r3, r3, #3
 c00170c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00170e:	4b28      	ldr	r3, [pc, #160]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001710:	68db      	ldr	r3, [r3, #12]
 c001712:	091b      	lsrs	r3, r3, #4
 c001714:	f003 030f 	and.w	r3, r3, #15
 c001718:	3301      	adds	r3, #1
 c00171a:	60bb      	str	r3, [r7, #8]
 c00171c:	68fb      	ldr	r3, [r7, #12]
 c00171e:	2b02      	cmp	r3, #2
 c001720:	d003      	beq.n	c00172a <SystemCoreClockUpdate+0xbe>
 c001722:	68fb      	ldr	r3, [r7, #12]
 c001724:	2b03      	cmp	r3, #3
 c001726:	d006      	beq.n	c001736 <SystemCoreClockUpdate+0xca>
 c001728:	e00b      	b.n	c001742 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00172a:	4a24      	ldr	r2, [pc, #144]	; (c0017bc <SystemCoreClockUpdate+0x150>)
 c00172c:	68bb      	ldr	r3, [r7, #8]
 c00172e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001732:	613b      	str	r3, [r7, #16]
          break;
 c001734:	e00b      	b.n	c00174e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c001736:	4a21      	ldr	r2, [pc, #132]	; (c0017bc <SystemCoreClockUpdate+0x150>)
 c001738:	68bb      	ldr	r3, [r7, #8]
 c00173a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00173e:	613b      	str	r3, [r7, #16]
          break;
 c001740:	e005      	b.n	c00174e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001742:	697a      	ldr	r2, [r7, #20]
 c001744:	68bb      	ldr	r3, [r7, #8]
 c001746:	fbb2 f3f3 	udiv	r3, r2, r3
 c00174a:	613b      	str	r3, [r7, #16]
          break;
 c00174c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c00174e:	4b18      	ldr	r3, [pc, #96]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001750:	68db      	ldr	r3, [r3, #12]
 c001752:	0a1b      	lsrs	r3, r3, #8
 c001754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c001758:	693b      	ldr	r3, [r7, #16]
 c00175a:	fb02 f303 	mul.w	r3, r2, r3
 c00175e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001760:	4b13      	ldr	r3, [pc, #76]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001762:	68db      	ldr	r3, [r3, #12]
 c001764:	0e5b      	lsrs	r3, r3, #25
 c001766:	f003 0303 	and.w	r3, r3, #3
 c00176a:	3301      	adds	r3, #1
 c00176c:	005b      	lsls	r3, r3, #1
 c00176e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c001770:	693a      	ldr	r2, [r7, #16]
 c001772:	687b      	ldr	r3, [r7, #4]
 c001774:	fbb2 f3f3 	udiv	r3, r2, r3
 c001778:	4a0f      	ldr	r2, [pc, #60]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c00177a:	6013      	str	r3, [r2, #0]
      break;
 c00177c:	e003      	b.n	c001786 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c00177e:	4a0e      	ldr	r2, [pc, #56]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c001780:	697b      	ldr	r3, [r7, #20]
 c001782:	6013      	str	r3, [r2, #0]
      break;
 c001784:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001786:	4b0a      	ldr	r3, [pc, #40]	; (c0017b0 <SystemCoreClockUpdate+0x144>)
 c001788:	689b      	ldr	r3, [r3, #8]
 c00178a:	091b      	lsrs	r3, r3, #4
 c00178c:	f003 030f 	and.w	r3, r3, #15
 c001790:	4a0b      	ldr	r2, [pc, #44]	; (c0017c0 <SystemCoreClockUpdate+0x154>)
 c001792:	5cd3      	ldrb	r3, [r2, r3]
 c001794:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001796:	4b08      	ldr	r3, [pc, #32]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c001798:	681a      	ldr	r2, [r3, #0]
 c00179a:	683b      	ldr	r3, [r7, #0]
 c00179c:	fa22 f303 	lsr.w	r3, r2, r3
 c0017a0:	4a05      	ldr	r2, [pc, #20]	; (c0017b8 <SystemCoreClockUpdate+0x14c>)
 c0017a2:	6013      	str	r3, [r2, #0]
}
 c0017a4:	bf00      	nop
 c0017a6:	371c      	adds	r7, #28
 c0017a8:	46bd      	mov	sp, r7
 c0017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017ae:	4770      	bx	lr
 c0017b0:	50021000 	.word	0x50021000
 c0017b4:	0c002268 	.word	0x0c002268
 c0017b8:	30000000 	.word	0x30000000
 c0017bc:	00f42400 	.word	0x00f42400
 c0017c0:	0c002258 	.word	0x0c002258

0c0017c4 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0017c4:	b580      	push	{r7, lr}
 c0017c6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0017c8:	f7ff ff50 	bl	c00166c <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0017cc:	4b1c      	ldr	r3, [pc, #112]	; (c001840 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0017ce:	681b      	ldr	r3, [r3, #0]
}
 c0017d0:	4618      	mov	r0, r3
 c0017d2:	46bd      	mov	sp, r7
 c0017d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0017d8:	4671      	mov	r1, lr
 c0017da:	4672      	mov	r2, lr
 c0017dc:	4673      	mov	r3, lr
 c0017de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0017e2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0017e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0017ea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0017ee:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0017f2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0017f6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0017fa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0017fe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001802:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001806:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00180a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00180e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00181a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00181e:	f38e 8c00 	msr	CPSR_fs, lr
 c001822:	b410      	push	{r4}
 c001824:	eef1 ca10 	vmrs	ip, fpscr
 c001828:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00182c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001830:	ea0c 0c04 	and.w	ip, ip, r4
 c001834:	eee1 ca10 	vmsr	fpscr, ip
 c001838:	bc10      	pop	{r4}
 c00183a:	46f4      	mov	ip, lr
 c00183c:	4774      	bxns	lr
 c00183e:	bf00      	nop
 c001840:	30000000 	.word	0x30000000

0c001844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001844:	f8df d034 	ldr.w	sp, [pc, #52]	; c00187c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001848:	f7ff fef6 	bl	c001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00184c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00184e:	e003      	b.n	c001858 <LoopCopyDataInit>

0c001850 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001850:	4b0b      	ldr	r3, [pc, #44]	; (c001880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001852:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001854:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001856:	3104      	adds	r1, #4

0c001858 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001858:	480a      	ldr	r0, [pc, #40]	; (c001884 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00185a:	4b0b      	ldr	r3, [pc, #44]	; (c001888 <LoopForever+0xe>)
	adds	r2, r0, r1
 c00185c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00185e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001860:	d3f6      	bcc.n	c001850 <CopyDataInit>
	ldr	r2, =_sbss
 c001862:	4a0a      	ldr	r2, [pc, #40]	; (c00188c <LoopForever+0x12>)
	b	LoopFillZerobss
 c001864:	e002      	b.n	c00186c <LoopFillZerobss>

0c001866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001866:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001868:	f842 3b04 	str.w	r3, [r2], #4

0c00186c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c00186c:	4b08      	ldr	r3, [pc, #32]	; (c001890 <LoopForever+0x16>)
	cmp	r2, r3
 c00186e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001870:	d3f9      	bcc.n	c001866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001872:	f000 fbbb 	bl	c001fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001876:	f7ff fba0 	bl	c000fba <main>

0c00187a <LoopForever>:

LoopForever:
    b LoopForever
 c00187a:	e7fe      	b.n	c00187a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c00187c:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001880:	0c0022b0 	.word	0x0c0022b0
	ldr	r0, =_sdata
 c001884:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001888:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c00188c:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c001890:	300000f4 	.word	0x300000f4

0c001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001894:	e7fe      	b.n	c001894 <ADC1_2_IRQHandler>

0c001896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001896:	b580      	push	{r7, lr}
 c001898:	b082      	sub	sp, #8
 c00189a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c00189c:	2300      	movs	r3, #0
 c00189e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0018a0:	2004      	movs	r0, #4
 c0018a2:	f000 f915 	bl	c001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0018a6:	f7ff fee1 	bl	c00166c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0018aa:	2007      	movs	r0, #7
 c0018ac:	f000 f80e 	bl	c0018cc <HAL_InitTick>
 c0018b0:	4603      	mov	r3, r0
 c0018b2:	2b00      	cmp	r3, #0
 c0018b4:	d002      	beq.n	c0018bc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0018b6:	2301      	movs	r3, #1
 c0018b8:	71fb      	strb	r3, [r7, #7]
 c0018ba:	e001      	b.n	c0018c0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0018bc:	f7ff fde0 	bl	c001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0018c0:	79fb      	ldrb	r3, [r7, #7]
}
 c0018c2:	4618      	mov	r0, r3
 c0018c4:	3708      	adds	r7, #8
 c0018c6:	46bd      	mov	sp, r7
 c0018c8:	bd80      	pop	{r7, pc}
	...

0c0018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0018cc:	b580      	push	{r7, lr}
 c0018ce:	b084      	sub	sp, #16
 c0018d0:	af00      	add	r7, sp, #0
 c0018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0018d4:	2300      	movs	r3, #0
 c0018d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0018d8:	4b17      	ldr	r3, [pc, #92]	; (c001938 <HAL_InitTick+0x6c>)
 c0018da:	781b      	ldrb	r3, [r3, #0]
 c0018dc:	2b00      	cmp	r3, #0
 c0018de:	d023      	beq.n	c001928 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0018e0:	4b16      	ldr	r3, [pc, #88]	; (c00193c <HAL_InitTick+0x70>)
 c0018e2:	681a      	ldr	r2, [r3, #0]
 c0018e4:	4b14      	ldr	r3, [pc, #80]	; (c001938 <HAL_InitTick+0x6c>)
 c0018e6:	781b      	ldrb	r3, [r3, #0]
 c0018e8:	4619      	mov	r1, r3
 c0018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 c0018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0018f6:	4618      	mov	r0, r3
 c0018f8:	f000 f90f 	bl	c001b1a <HAL_SYSTICK_Config>
 c0018fc:	4603      	mov	r3, r0
 c0018fe:	2b00      	cmp	r3, #0
 c001900:	d10f      	bne.n	c001922 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001902:	687b      	ldr	r3, [r7, #4]
 c001904:	2b07      	cmp	r3, #7
 c001906:	d809      	bhi.n	c00191c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001908:	2200      	movs	r2, #0
 c00190a:	6879      	ldr	r1, [r7, #4]
 c00190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001910:	f000 f8e9 	bl	c001ae6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001914:	4a0a      	ldr	r2, [pc, #40]	; (c001940 <HAL_InitTick+0x74>)
 c001916:	687b      	ldr	r3, [r7, #4]
 c001918:	6013      	str	r3, [r2, #0]
 c00191a:	e007      	b.n	c00192c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c00191c:	2301      	movs	r3, #1
 c00191e:	73fb      	strb	r3, [r7, #15]
 c001920:	e004      	b.n	c00192c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001922:	2301      	movs	r3, #1
 c001924:	73fb      	strb	r3, [r7, #15]
 c001926:	e001      	b.n	c00192c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001928:	2301      	movs	r3, #1
 c00192a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c00192c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00192e:	4618      	mov	r0, r3
 c001930:	3710      	adds	r7, #16
 c001932:	46bd      	mov	sp, r7
 c001934:	bd80      	pop	{r7, pc}
 c001936:	bf00      	nop
 c001938:	30000008 	.word	0x30000008
 c00193c:	30000000 	.word	0x30000000
 c001940:	30000004 	.word	0x30000004

0c001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001944:	b480      	push	{r7}
 c001946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001948:	4b06      	ldr	r3, [pc, #24]	; (c001964 <HAL_IncTick+0x20>)
 c00194a:	781b      	ldrb	r3, [r3, #0]
 c00194c:	461a      	mov	r2, r3
 c00194e:	4b06      	ldr	r3, [pc, #24]	; (c001968 <HAL_IncTick+0x24>)
 c001950:	681b      	ldr	r3, [r3, #0]
 c001952:	4413      	add	r3, r2
 c001954:	4a04      	ldr	r2, [pc, #16]	; (c001968 <HAL_IncTick+0x24>)
 c001956:	6013      	str	r3, [r2, #0]
}
 c001958:	bf00      	nop
 c00195a:	46bd      	mov	sp, r7
 c00195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001960:	4770      	bx	lr
 c001962:	bf00      	nop
 c001964:	30000008 	.word	0x30000008
 c001968:	300000f0 	.word	0x300000f0

0c00196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00196c:	b480      	push	{r7}
 c00196e:	b085      	sub	sp, #20
 c001970:	af00      	add	r7, sp, #0
 c001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001974:	687b      	ldr	r3, [r7, #4]
 c001976:	f003 0307 	and.w	r3, r3, #7
 c00197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00197c:	4b0c      	ldr	r3, [pc, #48]	; (c0019b0 <__NVIC_SetPriorityGrouping+0x44>)
 c00197e:	68db      	ldr	r3, [r3, #12]
 c001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001982:	68ba      	ldr	r2, [r7, #8]
 c001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001988:	4013      	ands	r3, r2
 c00198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c00198c:	68fb      	ldr	r3, [r7, #12]
 c00198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001990:	68bb      	ldr	r3, [r7, #8]
 c001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00199e:	4a04      	ldr	r2, [pc, #16]	; (c0019b0 <__NVIC_SetPriorityGrouping+0x44>)
 c0019a0:	68bb      	ldr	r3, [r7, #8]
 c0019a2:	60d3      	str	r3, [r2, #12]
}
 c0019a4:	bf00      	nop
 c0019a6:	3714      	adds	r7, #20
 c0019a8:	46bd      	mov	sp, r7
 c0019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019ae:	4770      	bx	lr
 c0019b0:	e000ed00 	.word	0xe000ed00

0c0019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0019b4:	b480      	push	{r7}
 c0019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0019b8:	4b04      	ldr	r3, [pc, #16]	; (c0019cc <__NVIC_GetPriorityGrouping+0x18>)
 c0019ba:	68db      	ldr	r3, [r3, #12]
 c0019bc:	0a1b      	lsrs	r3, r3, #8
 c0019be:	f003 0307 	and.w	r3, r3, #7
}
 c0019c2:	4618      	mov	r0, r3
 c0019c4:	46bd      	mov	sp, r7
 c0019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019ca:	4770      	bx	lr
 c0019cc:	e000ed00 	.word	0xe000ed00

0c0019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0019d0:	b480      	push	{r7}
 c0019d2:	b083      	sub	sp, #12
 c0019d4:	af00      	add	r7, sp, #0
 c0019d6:	4603      	mov	r3, r0
 c0019d8:	6039      	str	r1, [r7, #0]
 c0019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0019e0:	2b00      	cmp	r3, #0
 c0019e2:	db0a      	blt.n	c0019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0019e4:	683b      	ldr	r3, [r7, #0]
 c0019e6:	b2da      	uxtb	r2, r3
 c0019e8:	490c      	ldr	r1, [pc, #48]	; (c001a1c <__NVIC_SetPriority+0x4c>)
 c0019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0019ee:	0152      	lsls	r2, r2, #5
 c0019f0:	b2d2      	uxtb	r2, r2
 c0019f2:	440b      	add	r3, r1
 c0019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0019f8:	e00a      	b.n	c001a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0019fa:	683b      	ldr	r3, [r7, #0]
 c0019fc:	b2da      	uxtb	r2, r3
 c0019fe:	4908      	ldr	r1, [pc, #32]	; (c001a20 <__NVIC_SetPriority+0x50>)
 c001a00:	79fb      	ldrb	r3, [r7, #7]
 c001a02:	f003 030f 	and.w	r3, r3, #15
 c001a06:	3b04      	subs	r3, #4
 c001a08:	0152      	lsls	r2, r2, #5
 c001a0a:	b2d2      	uxtb	r2, r2
 c001a0c:	440b      	add	r3, r1
 c001a0e:	761a      	strb	r2, [r3, #24]
}
 c001a10:	bf00      	nop
 c001a12:	370c      	adds	r7, #12
 c001a14:	46bd      	mov	sp, r7
 c001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a1a:	4770      	bx	lr
 c001a1c:	e000e100 	.word	0xe000e100
 c001a20:	e000ed00 	.word	0xe000ed00

0c001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001a24:	b480      	push	{r7}
 c001a26:	b089      	sub	sp, #36	; 0x24
 c001a28:	af00      	add	r7, sp, #0
 c001a2a:	60f8      	str	r0, [r7, #12]
 c001a2c:	60b9      	str	r1, [r7, #8]
 c001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001a30:	68fb      	ldr	r3, [r7, #12]
 c001a32:	f003 0307 	and.w	r3, r3, #7
 c001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001a38:	69fb      	ldr	r3, [r7, #28]
 c001a3a:	f1c3 0307 	rsb	r3, r3, #7
 c001a3e:	2b03      	cmp	r3, #3
 c001a40:	bf28      	it	cs
 c001a42:	2303      	movcs	r3, #3
 c001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001a46:	69fb      	ldr	r3, [r7, #28]
 c001a48:	3303      	adds	r3, #3
 c001a4a:	2b06      	cmp	r3, #6
 c001a4c:	d902      	bls.n	c001a54 <NVIC_EncodePriority+0x30>
 c001a4e:	69fb      	ldr	r3, [r7, #28]
 c001a50:	3b04      	subs	r3, #4
 c001a52:	e000      	b.n	c001a56 <NVIC_EncodePriority+0x32>
 c001a54:	2300      	movs	r3, #0
 c001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c001a5c:	69bb      	ldr	r3, [r7, #24]
 c001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 c001a62:	43da      	mvns	r2, r3
 c001a64:	68bb      	ldr	r3, [r7, #8]
 c001a66:	401a      	ands	r2, r3
 c001a68:	697b      	ldr	r3, [r7, #20]
 c001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c001a70:	697b      	ldr	r3, [r7, #20]
 c001a72:	fa01 f303 	lsl.w	r3, r1, r3
 c001a76:	43d9      	mvns	r1, r3
 c001a78:	687b      	ldr	r3, [r7, #4]
 c001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001a7c:	4313      	orrs	r3, r2
         );
}
 c001a7e:	4618      	mov	r0, r3
 c001a80:	3724      	adds	r7, #36	; 0x24
 c001a82:	46bd      	mov	sp, r7
 c001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a88:	4770      	bx	lr
	...

0c001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001a8c:	b580      	push	{r7, lr}
 c001a8e:	b082      	sub	sp, #8
 c001a90:	af00      	add	r7, sp, #0
 c001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001a94:	687b      	ldr	r3, [r7, #4]
 c001a96:	3b01      	subs	r3, #1
 c001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001a9c:	d301      	bcc.n	c001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001a9e:	2301      	movs	r3, #1
 c001aa0:	e00f      	b.n	c001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001aa2:	4a0a      	ldr	r2, [pc, #40]	; (c001acc <SysTick_Config+0x40>)
 c001aa4:	687b      	ldr	r3, [r7, #4]
 c001aa6:	3b01      	subs	r3, #1
 c001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001aaa:	2107      	movs	r1, #7
 c001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001ab0:	f7ff ff8e 	bl	c0019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001ab4:	4b05      	ldr	r3, [pc, #20]	; (c001acc <SysTick_Config+0x40>)
 c001ab6:	2200      	movs	r2, #0
 c001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001aba:	4b04      	ldr	r3, [pc, #16]	; (c001acc <SysTick_Config+0x40>)
 c001abc:	2207      	movs	r2, #7
 c001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001ac0:	2300      	movs	r3, #0
}
 c001ac2:	4618      	mov	r0, r3
 c001ac4:	3708      	adds	r7, #8
 c001ac6:	46bd      	mov	sp, r7
 c001ac8:	bd80      	pop	{r7, pc}
 c001aca:	bf00      	nop
 c001acc:	e000e010 	.word	0xe000e010

0c001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001ad0:	b580      	push	{r7, lr}
 c001ad2:	b082      	sub	sp, #8
 c001ad4:	af00      	add	r7, sp, #0
 c001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001ad8:	6878      	ldr	r0, [r7, #4]
 c001ada:	f7ff ff47 	bl	c00196c <__NVIC_SetPriorityGrouping>
}
 c001ade:	bf00      	nop
 c001ae0:	3708      	adds	r7, #8
 c001ae2:	46bd      	mov	sp, r7
 c001ae4:	bd80      	pop	{r7, pc}

0c001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001ae6:	b580      	push	{r7, lr}
 c001ae8:	b086      	sub	sp, #24
 c001aea:	af00      	add	r7, sp, #0
 c001aec:	4603      	mov	r3, r0
 c001aee:	60b9      	str	r1, [r7, #8]
 c001af0:	607a      	str	r2, [r7, #4]
 c001af2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001af4:	f7ff ff5e 	bl	c0019b4 <__NVIC_GetPriorityGrouping>
 c001af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001afa:	687a      	ldr	r2, [r7, #4]
 c001afc:	68b9      	ldr	r1, [r7, #8]
 c001afe:	6978      	ldr	r0, [r7, #20]
 c001b00:	f7ff ff90 	bl	c001a24 <NVIC_EncodePriority>
 c001b04:	4602      	mov	r2, r0
 c001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001b0a:	4611      	mov	r1, r2
 c001b0c:	4618      	mov	r0, r3
 c001b0e:	f7ff ff5f 	bl	c0019d0 <__NVIC_SetPriority>
}
 c001b12:	bf00      	nop
 c001b14:	3718      	adds	r7, #24
 c001b16:	46bd      	mov	sp, r7
 c001b18:	bd80      	pop	{r7, pc}

0c001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001b1a:	b580      	push	{r7, lr}
 c001b1c:	b082      	sub	sp, #8
 c001b1e:	af00      	add	r7, sp, #0
 c001b20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001b22:	6878      	ldr	r0, [r7, #4]
 c001b24:	f7ff ffb2 	bl	c001a8c <SysTick_Config>
 c001b28:	4603      	mov	r3, r0
}
 c001b2a:	4618      	mov	r0, r3
 c001b2c:	3708      	adds	r7, #8
 c001b2e:	46bd      	mov	sp, r7
 c001b30:	bd80      	pop	{r7, pc}
	...

0c001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001b34:	b480      	push	{r7}
 c001b36:	b087      	sub	sp, #28
 c001b38:	af00      	add	r7, sp, #0
 c001b3a:	6078      	str	r0, [r7, #4]
 c001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001b3e:	2300      	movs	r3, #0
 c001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001b42:	e158      	b.n	c001df6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001b44:	683b      	ldr	r3, [r7, #0]
 c001b46:	681a      	ldr	r2, [r3, #0]
 c001b48:	2101      	movs	r1, #1
 c001b4a:	697b      	ldr	r3, [r7, #20]
 c001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 c001b50:	4013      	ands	r3, r2
 c001b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001b54:	68fb      	ldr	r3, [r7, #12]
 c001b56:	2b00      	cmp	r3, #0
 c001b58:	f000 814a 	beq.w	c001df0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c001b5c:	683b      	ldr	r3, [r7, #0]
 c001b5e:	685b      	ldr	r3, [r3, #4]
 c001b60:	f003 0303 	and.w	r3, r3, #3
 c001b64:	2b01      	cmp	r3, #1
 c001b66:	d005      	beq.n	c001b74 <HAL_GPIO_Init+0x40>
 c001b68:	683b      	ldr	r3, [r7, #0]
 c001b6a:	685b      	ldr	r3, [r3, #4]
 c001b6c:	f003 0303 	and.w	r3, r3, #3
 c001b70:	2b02      	cmp	r3, #2
 c001b72:	d130      	bne.n	c001bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001b74:	687b      	ldr	r3, [r7, #4]
 c001b76:	689b      	ldr	r3, [r3, #8]
 c001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001b7a:	697b      	ldr	r3, [r7, #20]
 c001b7c:	005b      	lsls	r3, r3, #1
 c001b7e:	2203      	movs	r2, #3
 c001b80:	fa02 f303 	lsl.w	r3, r2, r3
 c001b84:	43db      	mvns	r3, r3
 c001b86:	693a      	ldr	r2, [r7, #16]
 c001b88:	4013      	ands	r3, r2
 c001b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001b8c:	683b      	ldr	r3, [r7, #0]
 c001b8e:	68da      	ldr	r2, [r3, #12]
 c001b90:	697b      	ldr	r3, [r7, #20]
 c001b92:	005b      	lsls	r3, r3, #1
 c001b94:	fa02 f303 	lsl.w	r3, r2, r3
 c001b98:	693a      	ldr	r2, [r7, #16]
 c001b9a:	4313      	orrs	r3, r2
 c001b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c001b9e:	687b      	ldr	r3, [r7, #4]
 c001ba0:	693a      	ldr	r2, [r7, #16]
 c001ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001ba4:	687b      	ldr	r3, [r7, #4]
 c001ba6:	685b      	ldr	r3, [r3, #4]
 c001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001baa:	2201      	movs	r2, #1
 c001bac:	697b      	ldr	r3, [r7, #20]
 c001bae:	fa02 f303 	lsl.w	r3, r2, r3
 c001bb2:	43db      	mvns	r3, r3
 c001bb4:	693a      	ldr	r2, [r7, #16]
 c001bb6:	4013      	ands	r3, r2
 c001bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c001bba:	683b      	ldr	r3, [r7, #0]
 c001bbc:	685b      	ldr	r3, [r3, #4]
 c001bbe:	091b      	lsrs	r3, r3, #4
 c001bc0:	f003 0201 	and.w	r2, r3, #1
 c001bc4:	697b      	ldr	r3, [r7, #20]
 c001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 c001bca:	693a      	ldr	r2, [r7, #16]
 c001bcc:	4313      	orrs	r3, r2
 c001bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001bd0:	687b      	ldr	r3, [r7, #4]
 c001bd2:	693a      	ldr	r2, [r7, #16]
 c001bd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c001bd6:	683b      	ldr	r3, [r7, #0]
 c001bd8:	685b      	ldr	r3, [r3, #4]
 c001bda:	f003 0303 	and.w	r3, r3, #3
 c001bde:	2b03      	cmp	r3, #3
 c001be0:	d017      	beq.n	c001c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c001be2:	687b      	ldr	r3, [r7, #4]
 c001be4:	68db      	ldr	r3, [r3, #12]
 c001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001be8:	697b      	ldr	r3, [r7, #20]
 c001bea:	005b      	lsls	r3, r3, #1
 c001bec:	2203      	movs	r2, #3
 c001bee:	fa02 f303 	lsl.w	r3, r2, r3
 c001bf2:	43db      	mvns	r3, r3
 c001bf4:	693a      	ldr	r2, [r7, #16]
 c001bf6:	4013      	ands	r3, r2
 c001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001bfa:	683b      	ldr	r3, [r7, #0]
 c001bfc:	689a      	ldr	r2, [r3, #8]
 c001bfe:	697b      	ldr	r3, [r7, #20]
 c001c00:	005b      	lsls	r3, r3, #1
 c001c02:	fa02 f303 	lsl.w	r3, r2, r3
 c001c06:	693a      	ldr	r2, [r7, #16]
 c001c08:	4313      	orrs	r3, r2
 c001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c001c0c:	687b      	ldr	r3, [r7, #4]
 c001c0e:	693a      	ldr	r2, [r7, #16]
 c001c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001c12:	683b      	ldr	r3, [r7, #0]
 c001c14:	685b      	ldr	r3, [r3, #4]
 c001c16:	f003 0303 	and.w	r3, r3, #3
 c001c1a:	2b02      	cmp	r3, #2
 c001c1c:	d123      	bne.n	c001c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c001c1e:	697b      	ldr	r3, [r7, #20]
 c001c20:	08da      	lsrs	r2, r3, #3
 c001c22:	687b      	ldr	r3, [r7, #4]
 c001c24:	3208      	adds	r2, #8
 c001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001c2c:	697b      	ldr	r3, [r7, #20]
 c001c2e:	f003 0307 	and.w	r3, r3, #7
 c001c32:	009b      	lsls	r3, r3, #2
 c001c34:	220f      	movs	r2, #15
 c001c36:	fa02 f303 	lsl.w	r3, r2, r3
 c001c3a:	43db      	mvns	r3, r3
 c001c3c:	693a      	ldr	r2, [r7, #16]
 c001c3e:	4013      	ands	r3, r2
 c001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001c42:	683b      	ldr	r3, [r7, #0]
 c001c44:	691a      	ldr	r2, [r3, #16]
 c001c46:	697b      	ldr	r3, [r7, #20]
 c001c48:	f003 0307 	and.w	r3, r3, #7
 c001c4c:	009b      	lsls	r3, r3, #2
 c001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 c001c52:	693a      	ldr	r2, [r7, #16]
 c001c54:	4313      	orrs	r3, r2
 c001c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001c58:	697b      	ldr	r3, [r7, #20]
 c001c5a:	08da      	lsrs	r2, r3, #3
 c001c5c:	687b      	ldr	r3, [r7, #4]
 c001c5e:	3208      	adds	r2, #8
 c001c60:	6939      	ldr	r1, [r7, #16]
 c001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001c66:	687b      	ldr	r3, [r7, #4]
 c001c68:	681b      	ldr	r3, [r3, #0]
 c001c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001c6c:	697b      	ldr	r3, [r7, #20]
 c001c6e:	005b      	lsls	r3, r3, #1
 c001c70:	2203      	movs	r2, #3
 c001c72:	fa02 f303 	lsl.w	r3, r2, r3
 c001c76:	43db      	mvns	r3, r3
 c001c78:	693a      	ldr	r2, [r7, #16]
 c001c7a:	4013      	ands	r3, r2
 c001c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001c7e:	683b      	ldr	r3, [r7, #0]
 c001c80:	685b      	ldr	r3, [r3, #4]
 c001c82:	f003 0203 	and.w	r2, r3, #3
 c001c86:	697b      	ldr	r3, [r7, #20]
 c001c88:	005b      	lsls	r3, r3, #1
 c001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 c001c8e:	693a      	ldr	r2, [r7, #16]
 c001c90:	4313      	orrs	r3, r2
 c001c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001c94:	687b      	ldr	r3, [r7, #4]
 c001c96:	693a      	ldr	r2, [r7, #16]
 c001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c001c9a:	683b      	ldr	r3, [r7, #0]
 c001c9c:	685b      	ldr	r3, [r3, #4]
 c001c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c001ca2:	2b00      	cmp	r3, #0
 c001ca4:	f000 80a4 	beq.w	c001df0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001ca8:	4a5a      	ldr	r2, [pc, #360]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001caa:	697b      	ldr	r3, [r7, #20]
 c001cac:	089b      	lsrs	r3, r3, #2
 c001cae:	3318      	adds	r3, #24
 c001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001cb6:	697b      	ldr	r3, [r7, #20]
 c001cb8:	f003 0303 	and.w	r3, r3, #3
 c001cbc:	00db      	lsls	r3, r3, #3
 c001cbe:	220f      	movs	r2, #15
 c001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 c001cc4:	43db      	mvns	r3, r3
 c001cc6:	693a      	ldr	r2, [r7, #16]
 c001cc8:	4013      	ands	r3, r2
 c001cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001ccc:	687b      	ldr	r3, [r7, #4]
 c001cce:	4a52      	ldr	r2, [pc, #328]	; (c001e18 <HAL_GPIO_Init+0x2e4>)
 c001cd0:	4293      	cmp	r3, r2
 c001cd2:	d025      	beq.n	c001d20 <HAL_GPIO_Init+0x1ec>
 c001cd4:	687b      	ldr	r3, [r7, #4]
 c001cd6:	4a51      	ldr	r2, [pc, #324]	; (c001e1c <HAL_GPIO_Init+0x2e8>)
 c001cd8:	4293      	cmp	r3, r2
 c001cda:	d01f      	beq.n	c001d1c <HAL_GPIO_Init+0x1e8>
 c001cdc:	687b      	ldr	r3, [r7, #4]
 c001cde:	4a50      	ldr	r2, [pc, #320]	; (c001e20 <HAL_GPIO_Init+0x2ec>)
 c001ce0:	4293      	cmp	r3, r2
 c001ce2:	d019      	beq.n	c001d18 <HAL_GPIO_Init+0x1e4>
 c001ce4:	687b      	ldr	r3, [r7, #4]
 c001ce6:	4a4f      	ldr	r2, [pc, #316]	; (c001e24 <HAL_GPIO_Init+0x2f0>)
 c001ce8:	4293      	cmp	r3, r2
 c001cea:	d013      	beq.n	c001d14 <HAL_GPIO_Init+0x1e0>
 c001cec:	687b      	ldr	r3, [r7, #4]
 c001cee:	4a4e      	ldr	r2, [pc, #312]	; (c001e28 <HAL_GPIO_Init+0x2f4>)
 c001cf0:	4293      	cmp	r3, r2
 c001cf2:	d00d      	beq.n	c001d10 <HAL_GPIO_Init+0x1dc>
 c001cf4:	687b      	ldr	r3, [r7, #4]
 c001cf6:	4a4d      	ldr	r2, [pc, #308]	; (c001e2c <HAL_GPIO_Init+0x2f8>)
 c001cf8:	4293      	cmp	r3, r2
 c001cfa:	d007      	beq.n	c001d0c <HAL_GPIO_Init+0x1d8>
 c001cfc:	687b      	ldr	r3, [r7, #4]
 c001cfe:	4a4c      	ldr	r2, [pc, #304]	; (c001e30 <HAL_GPIO_Init+0x2fc>)
 c001d00:	4293      	cmp	r3, r2
 c001d02:	d101      	bne.n	c001d08 <HAL_GPIO_Init+0x1d4>
 c001d04:	2306      	movs	r3, #6
 c001d06:	e00c      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d08:	2307      	movs	r3, #7
 c001d0a:	e00a      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d0c:	2305      	movs	r3, #5
 c001d0e:	e008      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d10:	2304      	movs	r3, #4
 c001d12:	e006      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d14:	2303      	movs	r3, #3
 c001d16:	e004      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d18:	2302      	movs	r3, #2
 c001d1a:	e002      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d1c:	2301      	movs	r3, #1
 c001d1e:	e000      	b.n	c001d22 <HAL_GPIO_Init+0x1ee>
 c001d20:	2300      	movs	r3, #0
 c001d22:	697a      	ldr	r2, [r7, #20]
 c001d24:	f002 0203 	and.w	r2, r2, #3
 c001d28:	00d2      	lsls	r2, r2, #3
 c001d2a:	4093      	lsls	r3, r2
 c001d2c:	693a      	ldr	r2, [r7, #16]
 c001d2e:	4313      	orrs	r3, r2
 c001d30:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001d32:	4938      	ldr	r1, [pc, #224]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d34:	697b      	ldr	r3, [r7, #20]
 c001d36:	089b      	lsrs	r3, r3, #2
 c001d38:	3318      	adds	r3, #24
 c001d3a:	693a      	ldr	r2, [r7, #16]
 c001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001d40:	4b34      	ldr	r3, [pc, #208]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d42:	681b      	ldr	r3, [r3, #0]
 c001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001d46:	68fb      	ldr	r3, [r7, #12]
 c001d48:	43db      	mvns	r3, r3
 c001d4a:	693a      	ldr	r2, [r7, #16]
 c001d4c:	4013      	ands	r3, r2
 c001d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c001d50:	683b      	ldr	r3, [r7, #0]
 c001d52:	685b      	ldr	r3, [r3, #4]
 c001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001d58:	2b00      	cmp	r3, #0
 c001d5a:	d003      	beq.n	c001d64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c001d5c:	693a      	ldr	r2, [r7, #16]
 c001d5e:	68fb      	ldr	r3, [r7, #12]
 c001d60:	4313      	orrs	r3, r2
 c001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001d64:	4a2b      	ldr	r2, [pc, #172]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d66:	693b      	ldr	r3, [r7, #16]
 c001d68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c001d6a:	4b2a      	ldr	r3, [pc, #168]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d6c:	685b      	ldr	r3, [r3, #4]
 c001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001d70:	68fb      	ldr	r3, [r7, #12]
 c001d72:	43db      	mvns	r3, r3
 c001d74:	693a      	ldr	r2, [r7, #16]
 c001d76:	4013      	ands	r3, r2
 c001d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c001d7a:	683b      	ldr	r3, [r7, #0]
 c001d7c:	685b      	ldr	r3, [r3, #4]
 c001d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001d82:	2b00      	cmp	r3, #0
 c001d84:	d003      	beq.n	c001d8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c001d86:	693a      	ldr	r2, [r7, #16]
 c001d88:	68fb      	ldr	r3, [r7, #12]
 c001d8a:	4313      	orrs	r3, r2
 c001d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c001d8e:	4a21      	ldr	r2, [pc, #132]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d90:	693b      	ldr	r3, [r7, #16]
 c001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c001d94:	4b1f      	ldr	r3, [pc, #124]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001d9c:	68fb      	ldr	r3, [r7, #12]
 c001d9e:	43db      	mvns	r3, r3
 c001da0:	693a      	ldr	r2, [r7, #16]
 c001da2:	4013      	ands	r3, r2
 c001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c001da6:	683b      	ldr	r3, [r7, #0]
 c001da8:	685b      	ldr	r3, [r3, #4]
 c001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001dae:	2b00      	cmp	r3, #0
 c001db0:	d003      	beq.n	c001dba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c001db2:	693a      	ldr	r2, [r7, #16]
 c001db4:	68fb      	ldr	r3, [r7, #12]
 c001db6:	4313      	orrs	r3, r2
 c001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c001dba:	4a16      	ldr	r2, [pc, #88]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001dbc:	693b      	ldr	r3, [r7, #16]
 c001dbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c001dc2:	4b14      	ldr	r3, [pc, #80]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001dca:	68fb      	ldr	r3, [r7, #12]
 c001dcc:	43db      	mvns	r3, r3
 c001dce:	693a      	ldr	r2, [r7, #16]
 c001dd0:	4013      	ands	r3, r2
 c001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c001dd4:	683b      	ldr	r3, [r7, #0]
 c001dd6:	685b      	ldr	r3, [r3, #4]
 c001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001ddc:	2b00      	cmp	r3, #0
 c001dde:	d003      	beq.n	c001de8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c001de0:	693a      	ldr	r2, [r7, #16]
 c001de2:	68fb      	ldr	r3, [r7, #12]
 c001de4:	4313      	orrs	r3, r2
 c001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001de8:	4a0a      	ldr	r2, [pc, #40]	; (c001e14 <HAL_GPIO_Init+0x2e0>)
 c001dea:	693b      	ldr	r3, [r7, #16]
 c001dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001df0:	697b      	ldr	r3, [r7, #20]
 c001df2:	3301      	adds	r3, #1
 c001df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001df6:	683b      	ldr	r3, [r7, #0]
 c001df8:	681a      	ldr	r2, [r3, #0]
 c001dfa:	697b      	ldr	r3, [r7, #20]
 c001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 c001e00:	2b00      	cmp	r3, #0
 c001e02:	f47f ae9f 	bne.w	c001b44 <HAL_GPIO_Init+0x10>
  }
}
 c001e06:	bf00      	nop
 c001e08:	bf00      	nop
 c001e0a:	371c      	adds	r7, #28
 c001e0c:	46bd      	mov	sp, r7
 c001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e12:	4770      	bx	lr
 c001e14:	5002f400 	.word	0x5002f400
 c001e18:	52020000 	.word	0x52020000
 c001e1c:	52020400 	.word	0x52020400
 c001e20:	52020800 	.word	0x52020800
 c001e24:	52020c00 	.word	0x52020c00
 c001e28:	52021000 	.word	0x52021000
 c001e2c:	52021400 	.word	0x52021400
 c001e30:	52021800 	.word	0x52021800

0c001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001e34:	b480      	push	{r7}
 c001e36:	b083      	sub	sp, #12
 c001e38:	af00      	add	r7, sp, #0
 c001e3a:	6078      	str	r0, [r7, #4]
 c001e3c:	460b      	mov	r3, r1
 c001e3e:	807b      	strh	r3, [r7, #2]
 c001e40:	4613      	mov	r3, r2
 c001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001e44:	787b      	ldrb	r3, [r7, #1]
 c001e46:	2b00      	cmp	r3, #0
 c001e48:	d003      	beq.n	c001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001e4a:	887a      	ldrh	r2, [r7, #2]
 c001e4c:	687b      	ldr	r3, [r7, #4]
 c001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001e50:	e002      	b.n	c001e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001e52:	887a      	ldrh	r2, [r7, #2]
 c001e54:	687b      	ldr	r3, [r7, #4]
 c001e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001e58:	bf00      	nop
 c001e5a:	370c      	adds	r7, #12
 c001e5c:	46bd      	mov	sp, r7
 c001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e62:	4770      	bx	lr

0c001e64 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001e64:	b480      	push	{r7}
 c001e66:	b089      	sub	sp, #36	; 0x24
 c001e68:	af00      	add	r7, sp, #0
 c001e6a:	60f8      	str	r0, [r7, #12]
 c001e6c:	460b      	mov	r3, r1
 c001e6e:	607a      	str	r2, [r7, #4]
 c001e70:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001e72:	2300      	movs	r3, #0
 c001e74:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001e76:	68fb      	ldr	r3, [r7, #12]
 c001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001e7a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001e7c:	e01b      	b.n	c001eb6 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001e7e:	897a      	ldrh	r2, [r7, #10]
 c001e80:	2101      	movs	r1, #1
 c001e82:	69fb      	ldr	r3, [r7, #28]
 c001e84:	fa01 f303 	lsl.w	r3, r1, r3
 c001e88:	4013      	ands	r3, r2
 c001e8a:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001e8c:	697b      	ldr	r3, [r7, #20]
 c001e8e:	2b00      	cmp	r3, #0
 c001e90:	d00e      	beq.n	c001eb0 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001e92:	2201      	movs	r2, #1
 c001e94:	69fb      	ldr	r3, [r7, #28]
 c001e96:	fa02 f303 	lsl.w	r3, r2, r3
 c001e9a:	43db      	mvns	r3, r3
 c001e9c:	69ba      	ldr	r2, [r7, #24]
 c001e9e:	4013      	ands	r3, r2
 c001ea0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001ea2:	687a      	ldr	r2, [r7, #4]
 c001ea4:	69fb      	ldr	r3, [r7, #28]
 c001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 c001eaa:	69ba      	ldr	r2, [r7, #24]
 c001eac:	4313      	orrs	r3, r2
 c001eae:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001eb0:	69fb      	ldr	r3, [r7, #28]
 c001eb2:	3301      	adds	r3, #1
 c001eb4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001eb6:	897a      	ldrh	r2, [r7, #10]
 c001eb8:	69fb      	ldr	r3, [r7, #28]
 c001eba:	fa42 f303 	asr.w	r3, r2, r3
 c001ebe:	2b00      	cmp	r3, #0
 c001ec0:	d1dd      	bne.n	c001e7e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001ec2:	68fb      	ldr	r3, [r7, #12]
 c001ec4:	69ba      	ldr	r2, [r7, #24]
 c001ec6:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001ec8:	bf00      	nop
 c001eca:	3724      	adds	r7, #36	; 0x24
 c001ecc:	46bd      	mov	sp, r7
 c001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ed2:	4770      	bx	lr

0c001ed4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001ed4:	b480      	push	{r7}
 c001ed6:	b089      	sub	sp, #36	; 0x24
 c001ed8:	af00      	add	r7, sp, #0
 c001eda:	6078      	str	r0, [r7, #4]
 c001edc:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001ede:	687b      	ldr	r3, [r7, #4]
 c001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001ee4:	d00b      	beq.n	c001efe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001ee6:	687b      	ldr	r3, [r7, #4]
 c001ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001eec:	d007      	beq.n	c001efe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c001eee:	687b      	ldr	r3, [r7, #4]
 c001ef0:	4a36      	ldr	r2, [pc, #216]	; (c001fcc <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001ef2:	4293      	cmp	r3, r2
 c001ef4:	d003      	beq.n	c001efe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001ef6:	687b      	ldr	r3, [r7, #4]
 c001ef8:	4a35      	ldr	r2, [pc, #212]	; (c001fd0 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c001efa:	4293      	cmp	r3, r2
 c001efc:	d111      	bne.n	c001f22 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001efe:	683b      	ldr	r3, [r7, #0]
 c001f00:	681b      	ldr	r3, [r3, #0]
 c001f02:	2b00      	cmp	r3, #0
 c001f04:	d004      	beq.n	c001f10 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001f06:	683b      	ldr	r3, [r7, #0]
 c001f08:	681b      	ldr	r3, [r3, #0]
 c001f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001f0e:	d108      	bne.n	c001f22 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001f10:	683b      	ldr	r3, [r7, #0]
 c001f12:	685b      	ldr	r3, [r3, #4]
 c001f14:	2b00      	cmp	r3, #0
 c001f16:	d006      	beq.n	c001f26 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001f18:	683b      	ldr	r3, [r7, #0]
 c001f1a:	685b      	ldr	r3, [r3, #4]
 c001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001f20:	d001      	beq.n	c001f26 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c001f22:	2301      	movs	r3, #1
 c001f24:	e04b      	b.n	c001fbe <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001f26:	683b      	ldr	r3, [r7, #0]
 c001f28:	685b      	ldr	r3, [r3, #4]
 c001f2a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001f2c:	683b      	ldr	r3, [r7, #0]
 c001f2e:	681b      	ldr	r3, [r3, #0]
 c001f30:	693a      	ldr	r2, [r7, #16]
 c001f32:	4313      	orrs	r3, r2
 c001f34:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001f36:	687b      	ldr	r3, [r7, #4]
 c001f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001f3c:	d003      	beq.n	c001f46 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001f3e:	687b      	ldr	r3, [r7, #4]
 c001f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001f44:	d105      	bne.n	c001f52 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001f46:	4b23      	ldr	r3, [pc, #140]	; (c001fd4 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001f48:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001f4a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c001f4e:	61bb      	str	r3, [r7, #24]
 c001f50:	e004      	b.n	c001f5c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001f52:	4b21      	ldr	r3, [pc, #132]	; (c001fd8 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001f54:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001f5a:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001f5c:	69bb      	ldr	r3, [r7, #24]
 c001f5e:	0b5b      	lsrs	r3, r3, #13
 c001f60:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c001f62:	2300      	movs	r3, #0
 c001f64:	617b      	str	r3, [r7, #20]
 c001f66:	e00c      	b.n	c001f82 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001f68:	683b      	ldr	r3, [r7, #0]
 c001f6a:	697a      	ldr	r2, [r7, #20]
 c001f6c:	3202      	adds	r2, #2
 c001f6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001f72:	69fb      	ldr	r3, [r7, #28]
 c001f74:	697a      	ldr	r2, [r7, #20]
 c001f76:	3240      	adds	r2, #64	; 0x40
 c001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001f7c:	697b      	ldr	r3, [r7, #20]
 c001f7e:	3301      	adds	r3, #1
 c001f80:	617b      	str	r3, [r7, #20]
 c001f82:	697a      	ldr	r2, [r7, #20]
 c001f84:	68fb      	ldr	r3, [r7, #12]
 c001f86:	429a      	cmp	r2, r3
 c001f88:	d3ee      	bcc.n	c001f68 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001f8a:	69fb      	ldr	r3, [r7, #28]
 c001f8c:	681b      	ldr	r3, [r3, #0]
 c001f8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001f92:	693b      	ldr	r3, [r7, #16]
 c001f94:	431a      	orrs	r2, r3
 c001f96:	69fb      	ldr	r3, [r7, #28]
 c001f98:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c001f9a:	69bb      	ldr	r3, [r7, #24]
 c001f9c:	0b5b      	lsrs	r3, r3, #13
 c001f9e:	2201      	movs	r2, #1
 c001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 c001fa4:	3b01      	subs	r3, #1
 c001fa6:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001fa8:	69fb      	ldr	r3, [r7, #28]
 c001faa:	691a      	ldr	r2, [r3, #16]
 c001fac:	68bb      	ldr	r3, [r7, #8]
 c001fae:	43db      	mvns	r3, r3
 c001fb0:	401a      	ands	r2, r3
 c001fb2:	683b      	ldr	r3, [r7, #0]
 c001fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001fb6:	431a      	orrs	r2, r3
 c001fb8:	69fb      	ldr	r3, [r7, #28]
 c001fba:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c001fbc:	2300      	movs	r3, #0
}
 c001fbe:	4618      	mov	r0, r3
 c001fc0:	3724      	adds	r7, #36	; 0x24
 c001fc2:	46bd      	mov	sp, r7
 c001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fc8:	4770      	bx	lr
 c001fca:	bf00      	nop
 c001fcc:	20030000 	.word	0x20030000
 c001fd0:	30030000 	.word	0x30030000
 c001fd4:	50032c00 	.word	0x50032c00
 c001fd8:	50033000 	.word	0x50033000

0c001fdc <memset>:
 c001fdc:	4402      	add	r2, r0
 c001fde:	4603      	mov	r3, r0
 c001fe0:	4293      	cmp	r3, r2
 c001fe2:	d100      	bne.n	c001fe6 <memset+0xa>
 c001fe4:	4770      	bx	lr
 c001fe6:	f803 1b01 	strb.w	r1, [r3], #1
 c001fea:	e7f9      	b.n	c001fe0 <memset+0x4>

0c001fec <__libc_init_array>:
 c001fec:	b570      	push	{r4, r5, r6, lr}
 c001fee:	4d0d      	ldr	r5, [pc, #52]	; (c002024 <__libc_init_array+0x38>)
 c001ff0:	2600      	movs	r6, #0
 c001ff2:	4c0d      	ldr	r4, [pc, #52]	; (c002028 <__libc_init_array+0x3c>)
 c001ff4:	1b64      	subs	r4, r4, r5
 c001ff6:	10a4      	asrs	r4, r4, #2
 c001ff8:	42a6      	cmp	r6, r4
 c001ffa:	d109      	bne.n	c002010 <__libc_init_array+0x24>
 c001ffc:	4d0b      	ldr	r5, [pc, #44]	; (c00202c <__libc_init_array+0x40>)
 c001ffe:	2600      	movs	r6, #0
 c002000:	4c0b      	ldr	r4, [pc, #44]	; (c002030 <__libc_init_array+0x44>)
 c002002:	f000 f817 	bl	c002034 <_init>
 c002006:	1b64      	subs	r4, r4, r5
 c002008:	10a4      	asrs	r4, r4, #2
 c00200a:	42a6      	cmp	r6, r4
 c00200c:	d105      	bne.n	c00201a <__libc_init_array+0x2e>
 c00200e:	bd70      	pop	{r4, r5, r6, pc}
 c002010:	f855 3b04 	ldr.w	r3, [r5], #4
 c002014:	3601      	adds	r6, #1
 c002016:	4798      	blx	r3
 c002018:	e7ee      	b.n	c001ff8 <__libc_init_array+0xc>
 c00201a:	f855 3b04 	ldr.w	r3, [r5], #4
 c00201e:	3601      	adds	r6, #1
 c002020:	4798      	blx	r3
 c002022:	e7f2      	b.n	c00200a <__libc_init_array+0x1e>
 c002024:	0c0022a8 	.word	0x0c0022a8
 c002028:	0c0022a8 	.word	0x0c0022a8
 c00202c:	0c0022a8 	.word	0x0c0022a8
 c002030:	0c0022ac 	.word	0x0c0022ac

0c002034 <_init>:
 c002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002036:	bf00      	nop
 c002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00203a:	bc08      	pop	{r3}
 c00203c:	469e      	mov	lr, r3
 c00203e:	4770      	bx	lr

0c002040 <_fini>:
 c002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002042:	bf00      	nop
 c002044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002046:	bc08      	pop	{r3}
 c002048:	469e      	mov	lr, r3
 c00204a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <decrypt>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b9ea 	b.w	c0013dc <__acle_se_decrypt>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 bbda 	b.w	c0017c4 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <encrypt>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 b990 	b.w	c001338 <__acle_se_encrypt>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 b8f4 	b.w	c001208 <__acle_se_SECURE_RegisterCallback>

0c03e020 <init_ctx>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b944 	b.w	c0012b0 <__acle_se_init_ctx>
	...
