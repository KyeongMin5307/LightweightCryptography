
trust_trivium_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc4  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0c0021b8  0c0021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00222c  0c00222c  0002e040  2**0
                  CONTENTS
  4 .ARM          00000000  0c00222c  0c00222c  0002e040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c00222c  0c00222c  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c00222c  0c00222c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c002230  0c002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  30000000  0c002234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000001bc  30000068  30000068  00030068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000224  30000224  00030068  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY
 14 .debug_info   000058f4  00000000  00000000  0002e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001433  00000000  00000000  000339ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000630  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000481  00000000  00000000  00035410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028681  00000000  00000000  00035891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000076c2  00000000  00000000  0005df12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc023  00000000  00000000  000655d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d94  00000000  00000000  001615f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0016338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000068 	.word	0x30000068
 c000210:	00000000 	.word	0x00000000
 c000214:	0c0021a0 	.word	0x0c0021a0

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	3000006c 	.word	0x3000006c
 c000230:	0c0021a0 	.word	0x0c0021a0

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000290:	b580      	push	{r7, lr}
 c000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000294:	f000 ff2f 	bl	c0010f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000298:	f000 f84a 	bl	c000330 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c00029c:	f000 f8c0 	bl	c000420 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0002a0:	f000 f802 	bl	c0002a8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0002a4:	e7fe      	b.n	c0002a4 <main+0x14>
	...

0c0002a8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0002a8:	b590      	push	{r4, r7, lr}
 c0002aa:	b083      	sub	sp, #12
 c0002ac:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0002ae:	4b1d      	ldr	r3, [pc, #116]	; (c000324 <NonSecure_Init+0x7c>)
 c0002b0:	4a1d      	ldr	r2, [pc, #116]	; (c000328 <NonSecure_Init+0x80>)
 c0002b2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0002b4:	4b1c      	ldr	r3, [pc, #112]	; (c000328 <NonSecure_Init+0x80>)
 c0002b6:	681b      	ldr	r3, [r3, #0]
 c0002b8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0002ba:	683b      	ldr	r3, [r7, #0]
 c0002bc:	f383 8888 	msr	MSP_NS, r3
}
 c0002c0:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0002c2:	4b1a      	ldr	r3, [pc, #104]	; (c00032c <NonSecure_Init+0x84>)
 c0002c4:	681b      	ldr	r3, [r3, #0]
 c0002c6:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0002c8:	687b      	ldr	r3, [r7, #4]
 c0002ca:	461c      	mov	r4, r3
 c0002cc:	0864      	lsrs	r4, r4, #1
 c0002ce:	0064      	lsls	r4, r4, #1
 c0002d0:	4620      	mov	r0, r4
 c0002d2:	4621      	mov	r1, r4
 c0002d4:	4622      	mov	r2, r4
 c0002d6:	4623      	mov	r3, r4
 c0002d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0002dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0002e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0002e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0002e8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0002ec:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0002f0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0002f4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0002f8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0002fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000300:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000304:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000308:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00030c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000314:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000318:	f7ff ff8c 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c00031c:	bf00      	nop
 c00031e:	370c      	adds	r7, #12
 c000320:	46bd      	mov	sp, r7
 c000322:	bd90      	pop	{r4, r7, pc}
 c000324:	e002ed00 	.word	0xe002ed00
 c000328:	08040000 	.word	0x08040000
 c00032c:	08040004 	.word	0x08040004

0c000330 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000330:	b580      	push	{r7, lr}
 c000332:	b09c      	sub	sp, #112	; 0x70
 c000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000336:	1d3b      	adds	r3, r7, #4
 c000338:	226c      	movs	r2, #108	; 0x6c
 c00033a:	2100      	movs	r1, #0
 c00033c:	4618      	mov	r0, r3
 c00033e:	f001 fc4f 	bl	c001be0 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000342:	2300      	movs	r3, #0
 c000344:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000346:	2300      	movs	r3, #0
 c000348:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00034e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000354:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00035a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000360:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000366:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00036c:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c00036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000372:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000378:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00037a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00037e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000384:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00038a:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000390:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000392:	2300      	movs	r3, #0
 c000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000396:	2300      	movs	r3, #0
 c000398:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00039a:	2300      	movs	r3, #0
 c00039c:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c00039e:	2300      	movs	r3, #0
 c0003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0003a2:	2300      	movs	r3, #0
 c0003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0003a6:	2300      	movs	r3, #0
 c0003a8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0003aa:	2300      	movs	r3, #0
 c0003ac:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0003ae:	2300      	movs	r3, #0
 c0003b0:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0003b2:	2300      	movs	r3, #0
 c0003b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0003b6:	2300      	movs	r3, #0
 c0003b8:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0003ba:	2300      	movs	r3, #0
 c0003bc:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0003be:	2300      	movs	r3, #0
 c0003c0:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003c2:	2300      	movs	r3, #0
 c0003c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0003c6:	1d3b      	adds	r3, r7, #4
 c0003c8:	4619      	mov	r1, r3
 c0003ca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0003ce:	f001 f9b1 	bl	c001734 <HAL_GTZC_MPCBB_ConfigMem>
 c0003d2:	4603      	mov	r3, r0
 c0003d4:	2b00      	cmp	r3, #0
 c0003d6:	d001      	beq.n	c0003dc <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c0003d8:	f000 f87c 	bl	c0004d4 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0003dc:	2300      	movs	r3, #0
 c0003de:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0003e0:	2300      	movs	r3, #0
 c0003e2:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0003e4:	2300      	movs	r3, #0
 c0003e6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0003e8:	2300      	movs	r3, #0
 c0003ea:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0003ec:	2300      	movs	r3, #0
 c0003ee:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0003f0:	2300      	movs	r3, #0
 c0003f2:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0003f4:	2300      	movs	r3, #0
 c0003f6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0003f8:	2300      	movs	r3, #0
 c0003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003fc:	2300      	movs	r3, #0
 c0003fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000400:	1d3b      	adds	r3, r7, #4
 c000402:	4619      	mov	r1, r3
 c000404:	4805      	ldr	r0, [pc, #20]	; (c00041c <MX_GTZC_S_Init+0xec>)
 c000406:	f001 f995 	bl	c001734 <HAL_GTZC_MPCBB_ConfigMem>
 c00040a:	4603      	mov	r3, r0
 c00040c:	2b00      	cmp	r3, #0
 c00040e:	d001      	beq.n	c000414 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c000410:	f000 f860 	bl	c0004d4 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000414:	bf00      	nop
 c000416:	3770      	adds	r7, #112	; 0x70
 c000418:	46bd      	mov	sp, r7
 c00041a:	bd80      	pop	{r7, pc}
 c00041c:	30030000 	.word	0x30030000

0c000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000420:	b580      	push	{r7, lr}
 c000422:	b088      	sub	sp, #32
 c000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000426:	f107 030c 	add.w	r3, r7, #12
 c00042a:	2200      	movs	r2, #0
 c00042c:	601a      	str	r2, [r3, #0]
 c00042e:	605a      	str	r2, [r3, #4]
 c000430:	609a      	str	r2, [r3, #8]
 c000432:	60da      	str	r2, [r3, #12]
 c000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000436:	4b23      	ldr	r3, [pc, #140]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00043a:	4a22      	ldr	r2, [pc, #136]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00043c:	f043 0304 	orr.w	r3, r3, #4
 c000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000442:	4b20      	ldr	r3, [pc, #128]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000446:	f003 0304 	and.w	r3, r3, #4
 c00044a:	60bb      	str	r3, [r7, #8]
 c00044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00044e:	4b1d      	ldr	r3, [pc, #116]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000452:	4a1c      	ldr	r2, [pc, #112]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000454:	f043 0301 	orr.w	r3, r3, #1
 c000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00045a:	4b1a      	ldr	r3, [pc, #104]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00045e:	f003 0301 	and.w	r3, r3, #1
 c000462:	607b      	str	r3, [r7, #4]
 c000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000466:	4b17      	ldr	r3, [pc, #92]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00046a:	4a16      	ldr	r2, [pc, #88]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00046c:	f043 0302 	orr.w	r3, r3, #2
 c000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000472:	4b14      	ldr	r3, [pc, #80]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000476:	f003 0302 	and.w	r3, r3, #2
 c00047a:	603b      	str	r3, [r7, #0]
 c00047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c00047e:	2200      	movs	r2, #0
 c000480:	2180      	movs	r1, #128	; 0x80
 c000482:	4811      	ldr	r0, [pc, #68]	; (c0004c8 <MX_GPIO_Init+0xa8>)
 c000484:	f001 f906 	bl	c001694 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_7, GPIO_PIN_NSEC);
 c000488:	2200      	movs	r2, #0
 c00048a:	2180      	movs	r1, #128	; 0x80
 c00048c:	480f      	ldr	r0, [pc, #60]	; (c0004cc <MX_GPIO_Init+0xac>)
 c00048e:	f001 f919 	bl	c0016c4 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c000492:	2200      	movs	r2, #0
 c000494:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000498:	480d      	ldr	r0, [pc, #52]	; (c0004d0 <MX_GPIO_Init+0xb0>)
 c00049a:	f001 f913 	bl	c0016c4 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c00049e:	2380      	movs	r3, #128	; 0x80
 c0004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0004a2:	2301      	movs	r3, #1
 c0004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0004a6:	2300      	movs	r3, #0
 c0004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0004aa:	2300      	movs	r3, #0
 c0004ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c0004ae:	f107 030c 	add.w	r3, r7, #12
 c0004b2:	4619      	mov	r1, r3
 c0004b4:	4804      	ldr	r0, [pc, #16]	; (c0004c8 <MX_GPIO_Init+0xa8>)
 c0004b6:	f000 ff6d 	bl	c001394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0004ba:	bf00      	nop
 c0004bc:	3720      	adds	r7, #32
 c0004be:	46bd      	mov	sp, r7
 c0004c0:	bd80      	pop	{r7, pc}
 c0004c2:	bf00      	nop
 c0004c4:	50021000 	.word	0x50021000
 c0004c8:	52020400 	.word	0x52020400
 c0004cc:	52020800 	.word	0x52020800
 c0004d0:	52020000 	.word	0x52020000

0c0004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0004d4:	b480      	push	{r7}
 c0004d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c0004d8:	b672      	cpsid	i
}
 c0004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c0004dc:	e7fe      	b.n	c0004dc <Error_Handler+0x8>
	...

0c0004e0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0004e0:	b480      	push	{r7}
 c0004e2:	b083      	sub	sp, #12
 c0004e4:	af00      	add	r7, sp, #0
 c0004e6:	4603      	mov	r3, r0
 c0004e8:	6039      	str	r1, [r7, #0]
 c0004ea:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0004ec:	683b      	ldr	r3, [r7, #0]
 c0004ee:	2b00      	cmp	r3, #0
 c0004f0:	d00d      	beq.n	c00050e <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c0004f2:	79fb      	ldrb	r3, [r7, #7]
 c0004f4:	2b00      	cmp	r3, #0
 c0004f6:	d002      	beq.n	c0004fe <__acle_se_SECURE_RegisterCallback+0x1e>
 c0004f8:	2b01      	cmp	r3, #1
 c0004fa:	d004      	beq.n	c000506 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0004fc:	e007      	b.n	c00050e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c0004fe:	4a20      	ldr	r2, [pc, #128]	; (c000580 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000500:	683b      	ldr	r3, [r7, #0]
 c000502:	6013      	str	r3, [r2, #0]
        break;
 c000504:	e003      	b.n	c00050e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000506:	4a1f      	ldr	r2, [pc, #124]	; (c000584 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000508:	683b      	ldr	r3, [r7, #0]
 c00050a:	6013      	str	r3, [r2, #0]
        break;
 c00050c:	bf00      	nop
    }
  }
}
 c00050e:	bf00      	nop
 c000510:	370c      	adds	r7, #12
 c000512:	46bd      	mov	sp, r7
 c000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000518:	4670      	mov	r0, lr
 c00051a:	4671      	mov	r1, lr
 c00051c:	4672      	mov	r2, lr
 c00051e:	4673      	mov	r3, lr
 c000520:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000524:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000528:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00052c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000530:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000534:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000538:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00053c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000540:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000544:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000548:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00054c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000550:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00055c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000560:	f38e 8c00 	msr	CPSR_fs, lr
 c000564:	b410      	push	{r4}
 c000566:	eef1 ca10 	vmrs	ip, fpscr
 c00056a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00056e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000572:	ea0c 0c04 	and.w	ip, ip, r4
 c000576:	eee1 ca10 	vmsr	fpscr, ip
 c00057a:	bc10      	pop	{r4}
 c00057c:	46f4      	mov	ip, lr
 c00057e:	4774      	bxns	lr
 c000580:	30000084 	.word	0x30000084
 c000584:	30000088 	.word	0x30000088

0c000588 <__acle_se_key_stream>:

CMSE_NS_ENTRY void key_stream(uint8_t* key, uint8_t* iv){
 c000588:	b580      	push	{r7, lr}
 c00058a:	b084      	sub	sp, #16
 c00058c:	af00      	add	r7, sp, #0
 c00058e:	6078      	str	r0, [r7, #4]
 c000590:	6039      	str	r1, [r7, #0]
	ctx = trivium_init(key, iv);
 c000592:	6839      	ldr	r1, [r7, #0]
 c000594:	6878      	ldr	r0, [r7, #4]
 c000596:	f000 fd03 	bl	c000fa0 <trivium_init>
 c00059a:	4603      	mov	r3, r0
 c00059c:	4a27      	ldr	r2, [pc, #156]	; (c00063c <__acle_se_key_stream+0xb4>)
 c00059e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c0005a0:	2300      	movs	r3, #0
 c0005a2:	60fb      	str	r3, [r7, #12]
 c0005a4:	e00e      	b.n	c0005c4 <__acle_se_key_stream+0x3c>
		keystream[i] = trivium_gen_keystream(ctx);
 c0005a6:	4b25      	ldr	r3, [pc, #148]	; (c00063c <__acle_se_key_stream+0xb4>)
 c0005a8:	681b      	ldr	r3, [r3, #0]
 c0005aa:	4618      	mov	r0, r3
 c0005ac:	f000 fd54 	bl	c001058 <trivium_gen_keystream>
 c0005b0:	4603      	mov	r3, r0
 c0005b2:	4619      	mov	r1, r3
 c0005b4:	4a22      	ldr	r2, [pc, #136]	; (c000640 <__acle_se_key_stream+0xb8>)
 c0005b6:	68fb      	ldr	r3, [r7, #12]
 c0005b8:	4413      	add	r3, r2
 c0005ba:	460a      	mov	r2, r1
 c0005bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c0005be:	68fb      	ldr	r3, [r7, #12]
 c0005c0:	3301      	adds	r3, #1
 c0005c2:	60fb      	str	r3, [r7, #12]
 c0005c4:	68fb      	ldr	r3, [r7, #12]
 c0005c6:	2b3f      	cmp	r3, #63	; 0x3f
 c0005c8:	dded      	ble.n	c0005a6 <__acle_se_key_stream+0x1e>
	return;
 c0005ca:	bf00      	nop
}
 c0005cc:	3710      	adds	r7, #16
 c0005ce:	46bd      	mov	sp, r7
 c0005d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0005d4:	4670      	mov	r0, lr
 c0005d6:	4671      	mov	r1, lr
 c0005d8:	4672      	mov	r2, lr
 c0005da:	4673      	mov	r3, lr
 c0005dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0005e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0005e4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0005e8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0005ec:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0005f0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0005f4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0005f8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0005fc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000600:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000604:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000608:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00060c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00061c:	f38e 8c00 	msr	CPSR_fs, lr
 c000620:	b410      	push	{r4}
 c000622:	eef1 ca10 	vmrs	ip, fpscr
 c000626:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00062a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00062e:	ea0c 0c04 	and.w	ip, ip, r4
 c000632:	eee1 ca10 	vmsr	fpscr, ip
 c000636:	bc10      	pop	{r4}
 c000638:	46f4      	mov	ip, lr
 c00063a:	4774      	bxns	lr
 c00063c:	300000cc 	.word	0x300000cc
 c000640:	3000008c 	.word	0x3000008c

0c000644 <__acle_se_encrypt>:

CMSE_NS_ENTRY void encrypt(uint8_t* plain){
 c000644:	b480      	push	{r7}
 c000646:	b085      	sub	sp, #20
 c000648:	af00      	add	r7, sp, #0
 c00064a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < STRING_LENGTH; i++)
 c00064c:	2300      	movs	r3, #0
 c00064e:	60fb      	str	r3, [r7, #12]
 c000650:	e010      	b.n	c000674 <__acle_se_encrypt+0x30>
		plain[i] ^= keystream[i];
 c000652:	68fb      	ldr	r3, [r7, #12]
 c000654:	687a      	ldr	r2, [r7, #4]
 c000656:	4413      	add	r3, r2
 c000658:	7819      	ldrb	r1, [r3, #0]
 c00065a:	4a24      	ldr	r2, [pc, #144]	; (c0006ec <__acle_se_encrypt+0xa8>)
 c00065c:	68fb      	ldr	r3, [r7, #12]
 c00065e:	4413      	add	r3, r2
 c000660:	781a      	ldrb	r2, [r3, #0]
 c000662:	68fb      	ldr	r3, [r7, #12]
 c000664:	6878      	ldr	r0, [r7, #4]
 c000666:	4403      	add	r3, r0
 c000668:	404a      	eors	r2, r1
 c00066a:	b2d2      	uxtb	r2, r2
 c00066c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c00066e:	68fb      	ldr	r3, [r7, #12]
 c000670:	3301      	adds	r3, #1
 c000672:	60fb      	str	r3, [r7, #12]
 c000674:	68fb      	ldr	r3, [r7, #12]
 c000676:	2b3f      	cmp	r3, #63	; 0x3f
 c000678:	ddeb      	ble.n	c000652 <__acle_se_encrypt+0xe>
	return;
 c00067a:	bf00      	nop
}
 c00067c:	3714      	adds	r7, #20
 c00067e:	46bd      	mov	sp, r7
 c000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000684:	4670      	mov	r0, lr
 c000686:	4671      	mov	r1, lr
 c000688:	4672      	mov	r2, lr
 c00068a:	4673      	mov	r3, lr
 c00068c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000694:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000698:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00069c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0006a0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0006a4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0006a8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0006ac:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0006b0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0006b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0006b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0006bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0006c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0006c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0006c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0006cc:	f38e 8c00 	msr	CPSR_fs, lr
 c0006d0:	b410      	push	{r4}
 c0006d2:	eef1 ca10 	vmrs	ip, fpscr
 c0006d6:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0006da:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0006de:	ea0c 0c04 	and.w	ip, ip, r4
 c0006e2:	eee1 ca10 	vmsr	fpscr, ip
 c0006e6:	bc10      	pop	{r4}
 c0006e8:	46f4      	mov	ip, lr
 c0006ea:	4774      	bxns	lr
 c0006ec:	3000008c 	.word	0x3000008c

0c0006f0 <__acle_se_decrypt>:

CMSE_NS_ENTRY void decrypt(uint8_t* plain){
 c0006f0:	b480      	push	{r7}
 c0006f2:	b085      	sub	sp, #20
 c0006f4:	af00      	add	r7, sp, #0
 c0006f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < STRING_LENGTH; i++)
 c0006f8:	2300      	movs	r3, #0
 c0006fa:	60fb      	str	r3, [r7, #12]
 c0006fc:	e010      	b.n	c000720 <__acle_se_decrypt+0x30>
		plain[i] ^= keystream[i];
 c0006fe:	68fb      	ldr	r3, [r7, #12]
 c000700:	687a      	ldr	r2, [r7, #4]
 c000702:	4413      	add	r3, r2
 c000704:	7819      	ldrb	r1, [r3, #0]
 c000706:	4a24      	ldr	r2, [pc, #144]	; (c000798 <__acle_se_decrypt+0xa8>)
 c000708:	68fb      	ldr	r3, [r7, #12]
 c00070a:	4413      	add	r3, r2
 c00070c:	781a      	ldrb	r2, [r3, #0]
 c00070e:	68fb      	ldr	r3, [r7, #12]
 c000710:	6878      	ldr	r0, [r7, #4]
 c000712:	4403      	add	r3, r0
 c000714:	404a      	eors	r2, r1
 c000716:	b2d2      	uxtb	r2, r2
 c000718:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < STRING_LENGTH; i++)
 c00071a:	68fb      	ldr	r3, [r7, #12]
 c00071c:	3301      	adds	r3, #1
 c00071e:	60fb      	str	r3, [r7, #12]
 c000720:	68fb      	ldr	r3, [r7, #12]
 c000722:	2b3f      	cmp	r3, #63	; 0x3f
 c000724:	ddeb      	ble.n	c0006fe <__acle_se_decrypt+0xe>
	return;
 c000726:	bf00      	nop
}
 c000728:	3714      	adds	r7, #20
 c00072a:	46bd      	mov	sp, r7
 c00072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000730:	4670      	mov	r0, lr
 c000732:	4671      	mov	r1, lr
 c000734:	4672      	mov	r2, lr
 c000736:	4673      	mov	r3, lr
 c000738:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00073c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000740:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000744:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000748:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00074c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000750:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000754:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000758:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00075c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000760:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000764:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000768:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00076c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000774:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000778:	f38e 8c00 	msr	CPSR_fs, lr
 c00077c:	b410      	push	{r4}
 c00077e:	eef1 ca10 	vmrs	ip, fpscr
 c000782:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000786:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00078a:	ea0c 0c04 	and.w	ip, ip, r4
 c00078e:	eee1 ca10 	vmsr	fpscr, ip
 c000792:	bc10      	pop	{r4}
 c000794:	46f4      	mov	ip, lr
 c000796:	4774      	bxns	lr
 c000798:	3000008c 	.word	0x3000008c

0c00079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c00079c:	b480      	push	{r7}
 c00079e:	b085      	sub	sp, #20
 c0007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0007a2:	4b15      	ldr	r3, [pc, #84]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0007a6:	4a14      	ldr	r2, [pc, #80]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007a8:	f043 0301 	orr.w	r3, r3, #1
 c0007ac:	6613      	str	r3, [r2, #96]	; 0x60
 c0007ae:	4b12      	ldr	r3, [pc, #72]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0007b2:	f003 0301 	and.w	r3, r3, #1
 c0007b6:	60fb      	str	r3, [r7, #12]
 c0007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0007ba:	4b0f      	ldr	r3, [pc, #60]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0007be:	4a0e      	ldr	r2, [pc, #56]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0007c4:	6593      	str	r3, [r2, #88]	; 0x58
 c0007c6:	4b0c      	ldr	r3, [pc, #48]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0007ce:	60bb      	str	r3, [r7, #8]
 c0007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0007d2:	4b09      	ldr	r3, [pc, #36]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0007d6:	4a08      	ldr	r2, [pc, #32]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0007dc:	6493      	str	r3, [r2, #72]	; 0x48
 c0007de:	4b06      	ldr	r3, [pc, #24]	; (c0007f8 <HAL_MspInit+0x5c>)
 c0007e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0007e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0007e6:	607b      	str	r3, [r7, #4]
 c0007e8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0007ea:	bf00      	nop
 c0007ec:	3714      	adds	r7, #20
 c0007ee:	46bd      	mov	sp, r7
 c0007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007f4:	4770      	bx	lr
 c0007f6:	bf00      	nop
 c0007f8:	50021000 	.word	0x50021000

0c0007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0007fc:	b480      	push	{r7}
 c0007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c000800:	e7fe      	b.n	c000800 <NMI_Handler+0x4>

0c000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000802:	b480      	push	{r7}
 c000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000806:	e7fe      	b.n	c000806 <HardFault_Handler+0x4>

0c000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000808:	b480      	push	{r7}
 c00080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c00080c:	e7fe      	b.n	c00080c <MemManage_Handler+0x4>

0c00080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c00080e:	b480      	push	{r7}
 c000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000812:	e7fe      	b.n	c000812 <BusFault_Handler+0x4>

0c000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000814:	b480      	push	{r7}
 c000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000818:	e7fe      	b.n	c000818 <UsageFault_Handler+0x4>

0c00081a <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00081a:	b480      	push	{r7}
 c00081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c00081e:	e7fe      	b.n	c00081e <SecureFault_Handler+0x4>

0c000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000820:	b480      	push	{r7}
 c000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000824:	bf00      	nop
 c000826:	46bd      	mov	sp, r7
 c000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00082c:	4770      	bx	lr

0c00082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c00082e:	b480      	push	{r7}
 c000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000832:	bf00      	nop
 c000834:	46bd      	mov	sp, r7
 c000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00083a:	4770      	bx	lr

0c00083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c00083c:	b480      	push	{r7}
 c00083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000840:	bf00      	nop
 c000842:	46bd      	mov	sp, r7
 c000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000848:	4770      	bx	lr

0c00084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00084a:	b580      	push	{r7, lr}
 c00084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00084e:	f000 fca9 	bl	c0011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000852:	bf00      	nop
 c000854:	bd80      	pop	{r7, pc}

0c000856 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c000856:	b580      	push	{r7, lr}
 c000858:	b086      	sub	sp, #24
 c00085a:	af00      	add	r7, sp, #0
 c00085c:	60f8      	str	r0, [r7, #12]
 c00085e:	60b9      	str	r1, [r7, #8]
 c000860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000862:	2300      	movs	r3, #0
 c000864:	617b      	str	r3, [r7, #20]
 c000866:	e00a      	b.n	c00087e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 c000868:	f3af 8000 	nop.w
 c00086c:	4601      	mov	r1, r0
 c00086e:	68bb      	ldr	r3, [r7, #8]
 c000870:	1c5a      	adds	r2, r3, #1
 c000872:	60ba      	str	r2, [r7, #8]
 c000874:	b2ca      	uxtb	r2, r1
 c000876:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000878:	697b      	ldr	r3, [r7, #20]
 c00087a:	3301      	adds	r3, #1
 c00087c:	617b      	str	r3, [r7, #20]
 c00087e:	697a      	ldr	r2, [r7, #20]
 c000880:	687b      	ldr	r3, [r7, #4]
 c000882:	429a      	cmp	r2, r3
 c000884:	dbf0      	blt.n	c000868 <_read+0x12>
  }

  return len;
 c000886:	687b      	ldr	r3, [r7, #4]
}
 c000888:	4618      	mov	r0, r3
 c00088a:	3718      	adds	r7, #24
 c00088c:	46bd      	mov	sp, r7
 c00088e:	bd80      	pop	{r7, pc}

0c000890 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c000890:	b580      	push	{r7, lr}
 c000892:	b086      	sub	sp, #24
 c000894:	af00      	add	r7, sp, #0
 c000896:	60f8      	str	r0, [r7, #12]
 c000898:	60b9      	str	r1, [r7, #8]
 c00089a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00089c:	2300      	movs	r3, #0
 c00089e:	617b      	str	r3, [r7, #20]
 c0008a0:	e009      	b.n	c0008b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 c0008a2:	68bb      	ldr	r3, [r7, #8]
 c0008a4:	1c5a      	adds	r2, r3, #1
 c0008a6:	60ba      	str	r2, [r7, #8]
 c0008a8:	781b      	ldrb	r3, [r3, #0]
 c0008aa:	4618      	mov	r0, r3
 c0008ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c0008b0:	697b      	ldr	r3, [r7, #20]
 c0008b2:	3301      	adds	r3, #1
 c0008b4:	617b      	str	r3, [r7, #20]
 c0008b6:	697a      	ldr	r2, [r7, #20]
 c0008b8:	687b      	ldr	r3, [r7, #4]
 c0008ba:	429a      	cmp	r2, r3
 c0008bc:	dbf1      	blt.n	c0008a2 <_write+0x12>
  }
  return len;
 c0008be:	687b      	ldr	r3, [r7, #4]
}
 c0008c0:	4618      	mov	r0, r3
 c0008c2:	3718      	adds	r7, #24
 c0008c4:	46bd      	mov	sp, r7
 c0008c6:	bd80      	pop	{r7, pc}

0c0008c8 <_close>:

int _close(int file)
{
 c0008c8:	b480      	push	{r7}
 c0008ca:	b083      	sub	sp, #12
 c0008cc:	af00      	add	r7, sp, #0
 c0008ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 c0008d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c0008d4:	4618      	mov	r0, r3
 c0008d6:	370c      	adds	r7, #12
 c0008d8:	46bd      	mov	sp, r7
 c0008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008de:	4770      	bx	lr

0c0008e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c0008e0:	b480      	push	{r7}
 c0008e2:	b083      	sub	sp, #12
 c0008e4:	af00      	add	r7, sp, #0
 c0008e6:	6078      	str	r0, [r7, #4]
 c0008e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 c0008ea:	683b      	ldr	r3, [r7, #0]
 c0008ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c0008f0:	605a      	str	r2, [r3, #4]
  return 0;
 c0008f2:	2300      	movs	r3, #0
}
 c0008f4:	4618      	mov	r0, r3
 c0008f6:	370c      	adds	r7, #12
 c0008f8:	46bd      	mov	sp, r7
 c0008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008fe:	4770      	bx	lr

0c000900 <_isatty>:

int _isatty(int file)
{
 c000900:	b480      	push	{r7}
 c000902:	b083      	sub	sp, #12
 c000904:	af00      	add	r7, sp, #0
 c000906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 c000908:	2301      	movs	r3, #1
}
 c00090a:	4618      	mov	r0, r3
 c00090c:	370c      	adds	r7, #12
 c00090e:	46bd      	mov	sp, r7
 c000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000914:	4770      	bx	lr

0c000916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c000916:	b480      	push	{r7}
 c000918:	b085      	sub	sp, #20
 c00091a:	af00      	add	r7, sp, #0
 c00091c:	60f8      	str	r0, [r7, #12]
 c00091e:	60b9      	str	r1, [r7, #8]
 c000920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 c000922:	2300      	movs	r3, #0
}
 c000924:	4618      	mov	r0, r3
 c000926:	3714      	adds	r7, #20
 c000928:	46bd      	mov	sp, r7
 c00092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00092e:	4770      	bx	lr

0c000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c000930:	b580      	push	{r7, lr}
 c000932:	b086      	sub	sp, #24
 c000934:	af00      	add	r7, sp, #0
 c000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c000938:	4a14      	ldr	r2, [pc, #80]	; (c00098c <_sbrk+0x5c>)
 c00093a:	4b15      	ldr	r3, [pc, #84]	; (c000990 <_sbrk+0x60>)
 c00093c:	1ad3      	subs	r3, r2, r3
 c00093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c000940:	697b      	ldr	r3, [r7, #20]
 c000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c000944:	4b13      	ldr	r3, [pc, #76]	; (c000994 <_sbrk+0x64>)
 c000946:	681b      	ldr	r3, [r3, #0]
 c000948:	2b00      	cmp	r3, #0
 c00094a:	d102      	bne.n	c000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c00094c:	4b11      	ldr	r3, [pc, #68]	; (c000994 <_sbrk+0x64>)
 c00094e:	4a12      	ldr	r2, [pc, #72]	; (c000998 <_sbrk+0x68>)
 c000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c000952:	4b10      	ldr	r3, [pc, #64]	; (c000994 <_sbrk+0x64>)
 c000954:	681a      	ldr	r2, [r3, #0]
 c000956:	687b      	ldr	r3, [r7, #4]
 c000958:	4413      	add	r3, r2
 c00095a:	693a      	ldr	r2, [r7, #16]
 c00095c:	429a      	cmp	r2, r3
 c00095e:	d207      	bcs.n	c000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c000960:	f001 f956 	bl	c001c10 <__errno>
 c000964:	4603      	mov	r3, r0
 c000966:	220c      	movs	r2, #12
 c000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c00096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00096e:	e009      	b.n	c000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c000970:	4b08      	ldr	r3, [pc, #32]	; (c000994 <_sbrk+0x64>)
 c000972:	681b      	ldr	r3, [r3, #0]
 c000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c000976:	4b07      	ldr	r3, [pc, #28]	; (c000994 <_sbrk+0x64>)
 c000978:	681a      	ldr	r2, [r3, #0]
 c00097a:	687b      	ldr	r3, [r7, #4]
 c00097c:	4413      	add	r3, r2
 c00097e:	4a05      	ldr	r2, [pc, #20]	; (c000994 <_sbrk+0x64>)
 c000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c000982:	68fb      	ldr	r3, [r7, #12]
}
 c000984:	4618      	mov	r0, r3
 c000986:	3718      	adds	r7, #24
 c000988:	46bd      	mov	sp, r7
 c00098a:	bd80      	pop	{r7, pc}
 c00098c:	30018000 	.word	0x30018000
 c000990:	00000400 	.word	0x00000400
 c000994:	300000d0 	.word	0x300000d0
 c000998:	30000228 	.word	0x30000228

0c00099c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c00099c:	b480      	push	{r7}
 c00099e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0009a0:	4b2f      	ldr	r3, [pc, #188]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009a2:	2200      	movs	r2, #0
 c0009a4:	609a      	str	r2, [r3, #8]
 c0009a6:	4b2e      	ldr	r3, [pc, #184]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009a8:	4a2e      	ldr	r2, [pc, #184]	; (c000a64 <TZ_SAU_Setup+0xc8>)
 c0009aa:	60da      	str	r2, [r3, #12]
 c0009ac:	4b2c      	ldr	r3, [pc, #176]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009ae:	4a2e      	ldr	r2, [pc, #184]	; (c000a68 <TZ_SAU_Setup+0xcc>)
 c0009b0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0009b2:	4b2b      	ldr	r3, [pc, #172]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009b4:	2201      	movs	r2, #1
 c0009b6:	609a      	str	r2, [r3, #8]
 c0009b8:	4b29      	ldr	r3, [pc, #164]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009ba:	4a2c      	ldr	r2, [pc, #176]	; (c000a6c <TZ_SAU_Setup+0xd0>)
 c0009bc:	60da      	str	r2, [r3, #12]
 c0009be:	4b28      	ldr	r3, [pc, #160]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009c0:	4a2b      	ldr	r2, [pc, #172]	; (c000a70 <TZ_SAU_Setup+0xd4>)
 c0009c2:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0009c4:	4b26      	ldr	r3, [pc, #152]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009c6:	2202      	movs	r2, #2
 c0009c8:	609a      	str	r2, [r3, #8]
 c0009ca:	4b25      	ldr	r3, [pc, #148]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009cc:	4a29      	ldr	r2, [pc, #164]	; (c000a74 <TZ_SAU_Setup+0xd8>)
 c0009ce:	60da      	str	r2, [r3, #12]
 c0009d0:	4b23      	ldr	r3, [pc, #140]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009d2:	4a29      	ldr	r2, [pc, #164]	; (c000a78 <TZ_SAU_Setup+0xdc>)
 c0009d4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0009d6:	4b22      	ldr	r3, [pc, #136]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009d8:	2203      	movs	r2, #3
 c0009da:	609a      	str	r2, [r3, #8]
 c0009dc:	4b20      	ldr	r3, [pc, #128]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0009e2:	60da      	str	r2, [r3, #12]
 c0009e4:	4b1e      	ldr	r3, [pc, #120]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009e6:	4a25      	ldr	r2, [pc, #148]	; (c000a7c <TZ_SAU_Setup+0xe0>)
 c0009e8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0009ea:	4b1d      	ldr	r3, [pc, #116]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009ec:	2204      	movs	r2, #4
 c0009ee:	609a      	str	r2, [r3, #8]
 c0009f0:	4b1b      	ldr	r3, [pc, #108]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c0009f6:	60da      	str	r2, [r3, #12]
 c0009f8:	4b19      	ldr	r3, [pc, #100]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c0009fa:	4a21      	ldr	r2, [pc, #132]	; (c000a80 <TZ_SAU_Setup+0xe4>)
 c0009fc:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c0009fe:	4b18      	ldr	r3, [pc, #96]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c000a00:	2205      	movs	r2, #5
 c000a02:	609a      	str	r2, [r3, #8]
 c000a04:	4b16      	ldr	r3, [pc, #88]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c000a06:	4a1f      	ldr	r2, [pc, #124]	; (c000a84 <TZ_SAU_Setup+0xe8>)
 c000a08:	60da      	str	r2, [r3, #12]
 c000a0a:	4b15      	ldr	r3, [pc, #84]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c000a0c:	4a1e      	ldr	r2, [pc, #120]	; (c000a88 <TZ_SAU_Setup+0xec>)
 c000a0e:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000a10:	4b13      	ldr	r3, [pc, #76]	; (c000a60 <TZ_SAU_Setup+0xc4>)
 c000a12:	2201      	movs	r2, #1
 c000a14:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000a16:	4b1d      	ldr	r3, [pc, #116]	; (c000a8c <TZ_SAU_Setup+0xf0>)
 c000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000a1c:	4a1b      	ldr	r2, [pc, #108]	; (c000a8c <TZ_SAU_Setup+0xf0>)
 c000a1e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a26:	4b1a      	ldr	r3, [pc, #104]	; (c000a90 <TZ_SAU_Setup+0xf4>)
 c000a28:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000a2a:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a2e:	4a18      	ldr	r2, [pc, #96]	; (c000a90 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a34:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000a36:	4b17      	ldr	r3, [pc, #92]	; (c000a94 <TZ_SAU_Setup+0xf8>)
 c000a38:	2200      	movs	r2, #0
 c000a3a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000a3e:	4b15      	ldr	r3, [pc, #84]	; (c000a94 <TZ_SAU_Setup+0xf8>)
 c000a40:	2200      	movs	r2, #0
 c000a42:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000a46:	4b13      	ldr	r3, [pc, #76]	; (c000a94 <TZ_SAU_Setup+0xf8>)
 c000a48:	2200      	movs	r2, #0
 c000a4a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000a4e:	4b11      	ldr	r3, [pc, #68]	; (c000a94 <TZ_SAU_Setup+0xf8>)
 c000a50:	2200      	movs	r2, #0
 c000a52:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000a56:	bf00      	nop
 c000a58:	46bd      	mov	sp, r7
 c000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a5e:	4770      	bx	lr
 c000a60:	e000edd0 	.word	0xe000edd0
 c000a64:	0c03e000 	.word	0x0c03e000
 c000a68:	0c03ffe3 	.word	0x0c03ffe3
 c000a6c:	08040000 	.word	0x08040000
 c000a70:	0807ffe1 	.word	0x0807ffe1
 c000a74:	20018000 	.word	0x20018000
 c000a78:	2003ffe1 	.word	0x2003ffe1
 c000a7c:	4fffffe1 	.word	0x4fffffe1
 c000a80:	9fffffe1 	.word	0x9fffffe1
 c000a84:	0bf90000 	.word	0x0bf90000
 c000a88:	0bfa8fe1 	.word	0x0bfa8fe1
 c000a8c:	e000ed00 	.word	0xe000ed00
 c000a90:	e000ef30 	.word	0xe000ef30
 c000a94:	e000e100 	.word	0xe000e100

0c000a98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000a98:	b580      	push	{r7, lr}
 c000a9a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000a9c:	f7ff ff7e 	bl	c00099c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000aa0:	4b08      	ldr	r3, [pc, #32]	; (c000ac4 <SystemInit+0x2c>)
 c000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000aa6:	4a07      	ldr	r2, [pc, #28]	; (c000ac4 <SystemInit+0x2c>)
 c000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000ab0:	4b05      	ldr	r3, [pc, #20]	; (c000ac8 <SystemInit+0x30>)
 c000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000ab6:	4a04      	ldr	r2, [pc, #16]	; (c000ac8 <SystemInit+0x30>)
 c000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000ac0:	bf00      	nop
 c000ac2:	bd80      	pop	{r7, pc}
 c000ac4:	e000ed00 	.word	0xe000ed00
 c000ac8:	e002ed00 	.word	0xe002ed00

0c000acc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000acc:	b480      	push	{r7}
 c000ace:	b087      	sub	sp, #28
 c000ad0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000ad2:	4b4f      	ldr	r3, [pc, #316]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000ad4:	681b      	ldr	r3, [r3, #0]
 c000ad6:	f003 0308 	and.w	r3, r3, #8
 c000ada:	2b00      	cmp	r3, #0
 c000adc:	d107      	bne.n	c000aee <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000ade:	4b4c      	ldr	r3, [pc, #304]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000ae4:	0a1b      	lsrs	r3, r3, #8
 c000ae6:	f003 030f 	and.w	r3, r3, #15
 c000aea:	617b      	str	r3, [r7, #20]
 c000aec:	e005      	b.n	c000afa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000aee:	4b48      	ldr	r3, [pc, #288]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000af0:	681b      	ldr	r3, [r3, #0]
 c000af2:	091b      	lsrs	r3, r3, #4
 c000af4:	f003 030f 	and.w	r3, r3, #15
 c000af8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000afa:	4a46      	ldr	r2, [pc, #280]	; (c000c14 <SystemCoreClockUpdate+0x148>)
 c000afc:	697b      	ldr	r3, [r7, #20]
 c000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000b02:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000b04:	4b42      	ldr	r3, [pc, #264]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000b06:	689b      	ldr	r3, [r3, #8]
 c000b08:	f003 030c 	and.w	r3, r3, #12
 c000b0c:	2b0c      	cmp	r3, #12
 c000b0e:	d866      	bhi.n	c000bde <SystemCoreClockUpdate+0x112>
 c000b10:	a201      	add	r2, pc, #4	; (adr r2, c000b18 <SystemCoreClockUpdate+0x4c>)
 c000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000b16:	bf00      	nop
 c000b18:	0c000b4d 	.word	0x0c000b4d
 c000b1c:	0c000bdf 	.word	0x0c000bdf
 c000b20:	0c000bdf 	.word	0x0c000bdf
 c000b24:	0c000bdf 	.word	0x0c000bdf
 c000b28:	0c000b55 	.word	0x0c000b55
 c000b2c:	0c000bdf 	.word	0x0c000bdf
 c000b30:	0c000bdf 	.word	0x0c000bdf
 c000b34:	0c000bdf 	.word	0x0c000bdf
 c000b38:	0c000b5d 	.word	0x0c000b5d
 c000b3c:	0c000bdf 	.word	0x0c000bdf
 c000b40:	0c000bdf 	.word	0x0c000bdf
 c000b44:	0c000bdf 	.word	0x0c000bdf
 c000b48:	0c000b65 	.word	0x0c000b65
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000b4c:	4a32      	ldr	r2, [pc, #200]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000b4e:	697b      	ldr	r3, [r7, #20]
 c000b50:	6013      	str	r3, [r2, #0]
      break;
 c000b52:	e048      	b.n	c000be6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000b54:	4b30      	ldr	r3, [pc, #192]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000b56:	4a31      	ldr	r2, [pc, #196]	; (c000c1c <SystemCoreClockUpdate+0x150>)
 c000b58:	601a      	str	r2, [r3, #0]
      break;
 c000b5a:	e044      	b.n	c000be6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000b5c:	4b2e      	ldr	r3, [pc, #184]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000b5e:	4a2f      	ldr	r2, [pc, #188]	; (c000c1c <SystemCoreClockUpdate+0x150>)
 c000b60:	601a      	str	r2, [r3, #0]
      break;
 c000b62:	e040      	b.n	c000be6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000b64:	4b2a      	ldr	r3, [pc, #168]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000b66:	68db      	ldr	r3, [r3, #12]
 c000b68:	f003 0303 	and.w	r3, r3, #3
 c000b6c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000b6e:	4b28      	ldr	r3, [pc, #160]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000b70:	68db      	ldr	r3, [r3, #12]
 c000b72:	091b      	lsrs	r3, r3, #4
 c000b74:	f003 030f 	and.w	r3, r3, #15
 c000b78:	3301      	adds	r3, #1
 c000b7a:	60bb      	str	r3, [r7, #8]
 c000b7c:	68fb      	ldr	r3, [r7, #12]
 c000b7e:	2b02      	cmp	r3, #2
 c000b80:	d003      	beq.n	c000b8a <SystemCoreClockUpdate+0xbe>
 c000b82:	68fb      	ldr	r3, [r7, #12]
 c000b84:	2b03      	cmp	r3, #3
 c000b86:	d006      	beq.n	c000b96 <SystemCoreClockUpdate+0xca>
 c000b88:	e00b      	b.n	c000ba2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000b8a:	4a24      	ldr	r2, [pc, #144]	; (c000c1c <SystemCoreClockUpdate+0x150>)
 c000b8c:	68bb      	ldr	r3, [r7, #8]
 c000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b92:	613b      	str	r3, [r7, #16]
          break;
 c000b94:	e00b      	b.n	c000bae <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000b96:	4a21      	ldr	r2, [pc, #132]	; (c000c1c <SystemCoreClockUpdate+0x150>)
 c000b98:	68bb      	ldr	r3, [r7, #8]
 c000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000b9e:	613b      	str	r3, [r7, #16]
          break;
 c000ba0:	e005      	b.n	c000bae <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000ba2:	697a      	ldr	r2, [r7, #20]
 c000ba4:	68bb      	ldr	r3, [r7, #8]
 c000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 c000baa:	613b      	str	r3, [r7, #16]
          break;
 c000bac:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000bae:	4b18      	ldr	r3, [pc, #96]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000bb0:	68db      	ldr	r3, [r3, #12]
 c000bb2:	0a1b      	lsrs	r3, r3, #8
 c000bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000bb8:	693b      	ldr	r3, [r7, #16]
 c000bba:	fb02 f303 	mul.w	r3, r2, r3
 c000bbe:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000bc0:	4b13      	ldr	r3, [pc, #76]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000bc2:	68db      	ldr	r3, [r3, #12]
 c000bc4:	0e5b      	lsrs	r3, r3, #25
 c000bc6:	f003 0303 	and.w	r3, r3, #3
 c000bca:	3301      	adds	r3, #1
 c000bcc:	005b      	lsls	r3, r3, #1
 c000bce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000bd0:	693a      	ldr	r2, [r7, #16]
 c000bd2:	687b      	ldr	r3, [r7, #4]
 c000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 c000bd8:	4a0f      	ldr	r2, [pc, #60]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000bda:	6013      	str	r3, [r2, #0]
      break;
 c000bdc:	e003      	b.n	c000be6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000bde:	4a0e      	ldr	r2, [pc, #56]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000be0:	697b      	ldr	r3, [r7, #20]
 c000be2:	6013      	str	r3, [r2, #0]
      break;
 c000be4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000be6:	4b0a      	ldr	r3, [pc, #40]	; (c000c10 <SystemCoreClockUpdate+0x144>)
 c000be8:	689b      	ldr	r3, [r3, #8]
 c000bea:	091b      	lsrs	r3, r3, #4
 c000bec:	f003 030f 	and.w	r3, r3, #15
 c000bf0:	4a0b      	ldr	r2, [pc, #44]	; (c000c20 <SystemCoreClockUpdate+0x154>)
 c000bf2:	5cd3      	ldrb	r3, [r2, r3]
 c000bf4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000bf6:	4b08      	ldr	r3, [pc, #32]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000bf8:	681a      	ldr	r2, [r3, #0]
 c000bfa:	683b      	ldr	r3, [r7, #0]
 c000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 c000c00:	4a05      	ldr	r2, [pc, #20]	; (c000c18 <SystemCoreClockUpdate+0x14c>)
 c000c02:	6013      	str	r3, [r2, #0]
}
 c000c04:	bf00      	nop
 c000c06:	371c      	adds	r7, #28
 c000c08:	46bd      	mov	sp, r7
 c000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c0e:	4770      	bx	lr
 c000c10:	50021000 	.word	0x50021000
 c000c14:	0c0021ec 	.word	0x0c0021ec
 c000c18:	30000000 	.word	0x30000000
 c000c1c:	00f42400 	.word	0x00f42400
 c000c20:	0c0021dc 	.word	0x0c0021dc

0c000c24 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000c24:	b580      	push	{r7, lr}
 c000c26:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000c28:	f7ff ff50 	bl	c000acc <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000c2c:	4b1c      	ldr	r3, [pc, #112]	; (c000ca0 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000c2e:	681b      	ldr	r3, [r3, #0]
}
 c000c30:	4618      	mov	r0, r3
 c000c32:	46bd      	mov	sp, r7
 c000c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000c38:	4671      	mov	r1, lr
 c000c3a:	4672      	mov	r2, lr
 c000c3c:	4673      	mov	r3, lr
 c000c3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000c42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000c46:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000c4a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000c4e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000c52:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000c56:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000c5a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000c5e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000c62:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000c66:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000c6a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000c6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000c7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000c7e:	f38e 8c00 	msr	CPSR_fs, lr
 c000c82:	b410      	push	{r4}
 c000c84:	eef1 ca10 	vmrs	ip, fpscr
 c000c88:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000c8c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000c90:	ea0c 0c04 	and.w	ip, ip, r4
 c000c94:	eee1 ca10 	vmsr	fpscr, ip
 c000c98:	bc10      	pop	{r4}
 c000c9a:	46f4      	mov	ip, lr
 c000c9c:	4774      	bxns	lr
 c000c9e:	bf00      	nop
 c000ca0:	30000000 	.word	0x30000000

0c000ca4 <trivium_nbit>:
#include "trivium.h"

static uint8_t trivium_nbit(uint8_t *arr, uint16_t n)
{
 c000ca4:	b480      	push	{r7}
 c000ca6:	b085      	sub	sp, #20
 c000ca8:	af00      	add	r7, sp, #0
 c000caa:	6078      	str	r0, [r7, #4]
 c000cac:	460b      	mov	r3, r1
 c000cae:	807b      	strh	r3, [r7, #2]
    uint8_t nbyte = (n - 1) / 8;
 c000cb0:	887b      	ldrh	r3, [r7, #2]
 c000cb2:	3b01      	subs	r3, #1
 c000cb4:	2b00      	cmp	r3, #0
 c000cb6:	da00      	bge.n	c000cba <trivium_nbit+0x16>
 c000cb8:	3307      	adds	r3, #7
 c000cba:	10db      	asrs	r3, r3, #3
 c000cbc:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 c000cbe:	887b      	ldrh	r3, [r7, #2]
 c000cc0:	3b01      	subs	r3, #1
 c000cc2:	425a      	negs	r2, r3
 c000cc4:	f003 0307 	and.w	r3, r3, #7
 c000cc8:	f002 0207 	and.w	r2, r2, #7
 c000ccc:	bf58      	it	pl
 c000cce:	4253      	negpl	r3, r2
 c000cd0:	b2db      	uxtb	r3, r3
 c000cd2:	3301      	adds	r3, #1
 c000cd4:	73bb      	strb	r3, [r7, #14]
    return (arr[nbyte] & (1 << (8 - trivium_nbit))) >> (8 - trivium_nbit);
 c000cd6:	7bfb      	ldrb	r3, [r7, #15]
 c000cd8:	687a      	ldr	r2, [r7, #4]
 c000cda:	4413      	add	r3, r2
 c000cdc:	781b      	ldrb	r3, [r3, #0]
 c000cde:	4619      	mov	r1, r3
 c000ce0:	7bbb      	ldrb	r3, [r7, #14]
 c000ce2:	f1c3 0308 	rsb	r3, r3, #8
 c000ce6:	2201      	movs	r2, #1
 c000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 c000cec:	ea01 0203 	and.w	r2, r1, r3
 c000cf0:	7bbb      	ldrb	r3, [r7, #14]
 c000cf2:	f1c3 0308 	rsb	r3, r3, #8
 c000cf6:	fa42 f303 	asr.w	r3, r2, r3
 c000cfa:	b2db      	uxtb	r3, r3
}
 c000cfc:	4618      	mov	r0, r3
 c000cfe:	3714      	adds	r7, #20
 c000d00:	46bd      	mov	sp, r7
 c000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d06:	4770      	bx	lr

0c000d08 <trivium_change_bit>:

static void trivium_change_bit(uint8_t *arr, uint16_t n, uint8_t value)
{
 c000d08:	b480      	push	{r7}
 c000d0a:	b085      	sub	sp, #20
 c000d0c:	af00      	add	r7, sp, #0
 c000d0e:	6078      	str	r0, [r7, #4]
 c000d10:	460b      	mov	r3, r1
 c000d12:	807b      	strh	r3, [r7, #2]
 c000d14:	4613      	mov	r3, r2
 c000d16:	707b      	strb	r3, [r7, #1]
    uint8_t nbyte = (n - 1) / 8;
 c000d18:	887b      	ldrh	r3, [r7, #2]
 c000d1a:	3b01      	subs	r3, #1
 c000d1c:	2b00      	cmp	r3, #0
 c000d1e:	da00      	bge.n	c000d22 <trivium_change_bit+0x1a>
 c000d20:	3307      	adds	r3, #7
 c000d22:	10db      	asrs	r3, r3, #3
 c000d24:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 c000d26:	887b      	ldrh	r3, [r7, #2]
 c000d28:	3b01      	subs	r3, #1
 c000d2a:	425a      	negs	r2, r3
 c000d2c:	f003 0307 	and.w	r3, r3, #7
 c000d30:	f002 0207 	and.w	r2, r2, #7
 c000d34:	bf58      	it	pl
 c000d36:	4253      	negpl	r3, r2
 c000d38:	b2db      	uxtb	r3, r3
 c000d3a:	3301      	adds	r3, #1
 c000d3c:	73bb      	strb	r3, [r7, #14]

    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d3e:	7bbb      	ldrb	r3, [r7, #14]
 c000d40:	f1c3 0309 	rsb	r3, r3, #9
 c000d44:	22ff      	movs	r2, #255	; 0xff
 c000d46:	fa02 f303 	lsl.w	r3, r2, r3
 c000d4a:	b25a      	sxtb	r2, r3
 c000d4c:	7bfb      	ldrb	r3, [r7, #15]
 c000d4e:	6879      	ldr	r1, [r7, #4]
 c000d50:	440b      	add	r3, r1
 c000d52:	781b      	ldrb	r3, [r3, #0]
 c000d54:	b25b      	sxtb	r3, r3
 c000d56:	4013      	ands	r3, r2
 c000d58:	b25a      	sxtb	r2, r3
                (value << (8 - trivium_nbit)) |
 c000d5a:	7879      	ldrb	r1, [r7, #1]
 c000d5c:	7bbb      	ldrb	r3, [r7, #14]
 c000d5e:	f1c3 0308 	rsb	r3, r3, #8
 c000d62:	fa01 f303 	lsl.w	r3, r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d66:	b25b      	sxtb	r3, r3
 c000d68:	4313      	orrs	r3, r2
 c000d6a:	b25a      	sxtb	r2, r3
                ((255 >> trivium_nbit) & arr[nbyte]);
 c000d6c:	7bbb      	ldrb	r3, [r7, #14]
 c000d6e:	21ff      	movs	r1, #255	; 0xff
 c000d70:	fa41 f303 	asr.w	r3, r1, r3
 c000d74:	b259      	sxtb	r1, r3
 c000d76:	7bfb      	ldrb	r3, [r7, #15]
 c000d78:	6878      	ldr	r0, [r7, #4]
 c000d7a:	4403      	add	r3, r0
 c000d7c:	781b      	ldrb	r3, [r3, #0]
 c000d7e:	b25b      	sxtb	r3, r3
 c000d80:	400b      	ands	r3, r1
 c000d82:	b25b      	sxtb	r3, r3
                (value << (8 - trivium_nbit)) |
 c000d84:	4313      	orrs	r3, r2
 c000d86:	b259      	sxtb	r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d88:	7bfb      	ldrb	r3, [r7, #15]
 c000d8a:	687a      	ldr	r2, [r7, #4]
 c000d8c:	4413      	add	r3, r2
                (value << (8 - trivium_nbit)) |
 c000d8e:	b2ca      	uxtb	r2, r1
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 c000d90:	701a      	strb	r2, [r3, #0]
}
 c000d92:	bf00      	nop
 c000d94:	3714      	adds	r7, #20
 c000d96:	46bd      	mov	sp, r7
 c000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d9c:	4770      	bx	lr

0c000d9e <trivium_insert_bits>:

static void trivium_insert_bits(uint8_t *arr, uint16_t n, uint8_t *source, uint16_t ssize)
{
 c000d9e:	b590      	push	{r4, r7, lr}
 c000da0:	b087      	sub	sp, #28
 c000da2:	af00      	add	r7, sp, #0
 c000da4:	60f8      	str	r0, [r7, #12]
 c000da6:	607a      	str	r2, [r7, #4]
 c000da8:	461a      	mov	r2, r3
 c000daa:	460b      	mov	r3, r1
 c000dac:	817b      	strh	r3, [r7, #10]
 c000dae:	4613      	mov	r3, r2
 c000db0:	813b      	strh	r3, [r7, #8]
    uint16_t i;
    for(i = 0; i < ssize; i++)
 c000db2:	2300      	movs	r3, #0
 c000db4:	82fb      	strh	r3, [r7, #22]
 c000db6:	e013      	b.n	c000de0 <trivium_insert_bits+0x42>
    {
        trivium_change_bit(arr, n + i, trivium_nbit(source, i + 1));
 c000db8:	897a      	ldrh	r2, [r7, #10]
 c000dba:	8afb      	ldrh	r3, [r7, #22]
 c000dbc:	4413      	add	r3, r2
 c000dbe:	b29c      	uxth	r4, r3
 c000dc0:	8afb      	ldrh	r3, [r7, #22]
 c000dc2:	3301      	adds	r3, #1
 c000dc4:	b29b      	uxth	r3, r3
 c000dc6:	4619      	mov	r1, r3
 c000dc8:	6878      	ldr	r0, [r7, #4]
 c000dca:	f7ff ff6b 	bl	c000ca4 <trivium_nbit>
 c000dce:	4603      	mov	r3, r0
 c000dd0:	461a      	mov	r2, r3
 c000dd2:	4621      	mov	r1, r4
 c000dd4:	68f8      	ldr	r0, [r7, #12]
 c000dd6:	f7ff ff97 	bl	c000d08 <trivium_change_bit>
    for(i = 0; i < ssize; i++)
 c000dda:	8afb      	ldrh	r3, [r7, #22]
 c000ddc:	3301      	adds	r3, #1
 c000dde:	82fb      	strh	r3, [r7, #22]
 c000de0:	8afa      	ldrh	r2, [r7, #22]
 c000de2:	893b      	ldrh	r3, [r7, #8]
 c000de4:	429a      	cmp	r2, r3
 c000de6:	d3e7      	bcc.n	c000db8 <trivium_insert_bits+0x1a>
    }
}
 c000de8:	bf00      	nop
 c000dea:	bf00      	nop
 c000dec:	371c      	adds	r7, #28
 c000dee:	46bd      	mov	sp, r7
 c000df0:	bd90      	pop	{r4, r7, pc}

0c000df2 <trivium_rotate>:

static uint8_t trivium_rotate(uint8_t *arr, uint8_t arr_size)
{
 c000df2:	b590      	push	{r4, r7, lr}
 c000df4:	b087      	sub	sp, #28
 c000df6:	af00      	add	r7, sp, #0
 c000df8:	6078      	str	r0, [r7, #4]
 c000dfa:	460b      	mov	r3, r1
 c000dfc:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    uint8_t t1 = trivium_nbit(arr, 66) ^ trivium_nbit(arr, 93);
 c000dfe:	2142      	movs	r1, #66	; 0x42
 c000e00:	6878      	ldr	r0, [r7, #4]
 c000e02:	f7ff ff4f 	bl	c000ca4 <trivium_nbit>
 c000e06:	4603      	mov	r3, r0
 c000e08:	461c      	mov	r4, r3
 c000e0a:	215d      	movs	r1, #93	; 0x5d
 c000e0c:	6878      	ldr	r0, [r7, #4]
 c000e0e:	f7ff ff49 	bl	c000ca4 <trivium_nbit>
 c000e12:	4603      	mov	r3, r0
 c000e14:	4063      	eors	r3, r4
 c000e16:	75bb      	strb	r3, [r7, #22]
    uint8_t t2 = trivium_nbit(arr, 162) ^ trivium_nbit(arr, 177);
 c000e18:	21a2      	movs	r1, #162	; 0xa2
 c000e1a:	6878      	ldr	r0, [r7, #4]
 c000e1c:	f7ff ff42 	bl	c000ca4 <trivium_nbit>
 c000e20:	4603      	mov	r3, r0
 c000e22:	461c      	mov	r4, r3
 c000e24:	21b1      	movs	r1, #177	; 0xb1
 c000e26:	6878      	ldr	r0, [r7, #4]
 c000e28:	f7ff ff3c 	bl	c000ca4 <trivium_nbit>
 c000e2c:	4603      	mov	r3, r0
 c000e2e:	4063      	eors	r3, r4
 c000e30:	757b      	strb	r3, [r7, #21]
    uint8_t t3 = trivium_nbit(arr, 243) ^ trivium_nbit(arr, 288);
 c000e32:	21f3      	movs	r1, #243	; 0xf3
 c000e34:	6878      	ldr	r0, [r7, #4]
 c000e36:	f7ff ff35 	bl	c000ca4 <trivium_nbit>
 c000e3a:	4603      	mov	r3, r0
 c000e3c:	461c      	mov	r4, r3
 c000e3e:	f44f 7190 	mov.w	r1, #288	; 0x120
 c000e42:	6878      	ldr	r0, [r7, #4]
 c000e44:	f7ff ff2e 	bl	c000ca4 <trivium_nbit>
 c000e48:	4603      	mov	r3, r0
 c000e4a:	4063      	eors	r3, r4
 c000e4c:	753b      	strb	r3, [r7, #20]

    uint8_t out = t1 ^ t2 ^ t3;
 c000e4e:	7dba      	ldrb	r2, [r7, #22]
 c000e50:	7d7b      	ldrb	r3, [r7, #21]
 c000e52:	4053      	eors	r3, r2
 c000e54:	b2da      	uxtb	r2, r3
 c000e56:	7d3b      	ldrb	r3, [r7, #20]
 c000e58:	4053      	eors	r3, r2
 c000e5a:	74fb      	strb	r3, [r7, #19]

    uint8_t a1 = trivium_nbit(arr, 91) & trivium_nbit(arr, 92);
 c000e5c:	215b      	movs	r1, #91	; 0x5b
 c000e5e:	6878      	ldr	r0, [r7, #4]
 c000e60:	f7ff ff20 	bl	c000ca4 <trivium_nbit>
 c000e64:	4603      	mov	r3, r0
 c000e66:	461c      	mov	r4, r3
 c000e68:	215c      	movs	r1, #92	; 0x5c
 c000e6a:	6878      	ldr	r0, [r7, #4]
 c000e6c:	f7ff ff1a 	bl	c000ca4 <trivium_nbit>
 c000e70:	4603      	mov	r3, r0
 c000e72:	4023      	ands	r3, r4
 c000e74:	74bb      	strb	r3, [r7, #18]
    uint8_t a2 = trivium_nbit(arr, 175) & trivium_nbit(arr, 176);
 c000e76:	21af      	movs	r1, #175	; 0xaf
 c000e78:	6878      	ldr	r0, [r7, #4]
 c000e7a:	f7ff ff13 	bl	c000ca4 <trivium_nbit>
 c000e7e:	4603      	mov	r3, r0
 c000e80:	461c      	mov	r4, r3
 c000e82:	21b0      	movs	r1, #176	; 0xb0
 c000e84:	6878      	ldr	r0, [r7, #4]
 c000e86:	f7ff ff0d 	bl	c000ca4 <trivium_nbit>
 c000e8a:	4603      	mov	r3, r0
 c000e8c:	4023      	ands	r3, r4
 c000e8e:	747b      	strb	r3, [r7, #17]
    uint8_t a3 = trivium_nbit(arr, 286) & trivium_nbit(arr, 287);
 c000e90:	f44f 718f 	mov.w	r1, #286	; 0x11e
 c000e94:	6878      	ldr	r0, [r7, #4]
 c000e96:	f7ff ff05 	bl	c000ca4 <trivium_nbit>
 c000e9a:	4603      	mov	r3, r0
 c000e9c:	461c      	mov	r4, r3
 c000e9e:	f240 111f 	movw	r1, #287	; 0x11f
 c000ea2:	6878      	ldr	r0, [r7, #4]
 c000ea4:	f7ff fefe 	bl	c000ca4 <trivium_nbit>
 c000ea8:	4603      	mov	r3, r0
 c000eaa:	4023      	ands	r3, r4
 c000eac:	743b      	strb	r3, [r7, #16]

    uint8_t s1 = a1 ^ trivium_nbit(arr, 171) ^ t1;
 c000eae:	21ab      	movs	r1, #171	; 0xab
 c000eb0:	6878      	ldr	r0, [r7, #4]
 c000eb2:	f7ff fef7 	bl	c000ca4 <trivium_nbit>
 c000eb6:	4603      	mov	r3, r0
 c000eb8:	461a      	mov	r2, r3
 c000eba:	7cbb      	ldrb	r3, [r7, #18]
 c000ebc:	4053      	eors	r3, r2
 c000ebe:	b2da      	uxtb	r2, r3
 c000ec0:	7dbb      	ldrb	r3, [r7, #22]
 c000ec2:	4053      	eors	r3, r2
 c000ec4:	73fb      	strb	r3, [r7, #15]
    uint8_t s2 = a2 ^ trivium_nbit(arr, 264) ^ t2;
 c000ec6:	f44f 7184 	mov.w	r1, #264	; 0x108
 c000eca:	6878      	ldr	r0, [r7, #4]
 c000ecc:	f7ff feea 	bl	c000ca4 <trivium_nbit>
 c000ed0:	4603      	mov	r3, r0
 c000ed2:	461a      	mov	r2, r3
 c000ed4:	7c7b      	ldrb	r3, [r7, #17]
 c000ed6:	4053      	eors	r3, r2
 c000ed8:	b2da      	uxtb	r2, r3
 c000eda:	7d7b      	ldrb	r3, [r7, #21]
 c000edc:	4053      	eors	r3, r2
 c000ede:	73bb      	strb	r3, [r7, #14]
    uint8_t s3 = a3 ^ trivium_nbit(arr, 69) ^ t3;
 c000ee0:	2145      	movs	r1, #69	; 0x45
 c000ee2:	6878      	ldr	r0, [r7, #4]
 c000ee4:	f7ff fede 	bl	c000ca4 <trivium_nbit>
 c000ee8:	4603      	mov	r3, r0
 c000eea:	461a      	mov	r2, r3
 c000eec:	7c3b      	ldrb	r3, [r7, #16]
 c000eee:	4053      	eors	r3, r2
 c000ef0:	b2da      	uxtb	r2, r3
 c000ef2:	7d3b      	ldrb	r3, [r7, #20]
 c000ef4:	4053      	eors	r3, r2
 c000ef6:	737b      	strb	r3, [r7, #13]

    /* Begin trivium_rotate */

    for(i = arr_size - 1; i > 0; i--)
 c000ef8:	78fb      	ldrb	r3, [r7, #3]
 c000efa:	3b01      	subs	r3, #1
 c000efc:	75fb      	strb	r3, [r7, #23]
 c000efe:	e017      	b.n	c000f30 <trivium_rotate+0x13e>
    {
        arr[i] = (arr[i - 1] << 7) | (arr[i] >> 1);
 c000f00:	7dfb      	ldrb	r3, [r7, #23]
 c000f02:	3b01      	subs	r3, #1
 c000f04:	687a      	ldr	r2, [r7, #4]
 c000f06:	4413      	add	r3, r2
 c000f08:	781b      	ldrb	r3, [r3, #0]
 c000f0a:	01db      	lsls	r3, r3, #7
 c000f0c:	b25a      	sxtb	r2, r3
 c000f0e:	7dfb      	ldrb	r3, [r7, #23]
 c000f10:	6879      	ldr	r1, [r7, #4]
 c000f12:	440b      	add	r3, r1
 c000f14:	781b      	ldrb	r3, [r3, #0]
 c000f16:	085b      	lsrs	r3, r3, #1
 c000f18:	b2db      	uxtb	r3, r3
 c000f1a:	b25b      	sxtb	r3, r3
 c000f1c:	4313      	orrs	r3, r2
 c000f1e:	b259      	sxtb	r1, r3
 c000f20:	7dfb      	ldrb	r3, [r7, #23]
 c000f22:	687a      	ldr	r2, [r7, #4]
 c000f24:	4413      	add	r3, r2
 c000f26:	b2ca      	uxtb	r2, r1
 c000f28:	701a      	strb	r2, [r3, #0]
    for(i = arr_size - 1; i > 0; i--)
 c000f2a:	7dfb      	ldrb	r3, [r7, #23]
 c000f2c:	3b01      	subs	r3, #1
 c000f2e:	75fb      	strb	r3, [r7, #23]
 c000f30:	7dfb      	ldrb	r3, [r7, #23]
 c000f32:	2b00      	cmp	r3, #0
 c000f34:	d1e4      	bne.n	c000f00 <trivium_rotate+0x10e>
    }
    arr[0] = arr[0] >> 1;
 c000f36:	687b      	ldr	r3, [r7, #4]
 c000f38:	781b      	ldrb	r3, [r3, #0]
 c000f3a:	085b      	lsrs	r3, r3, #1
 c000f3c:	b2da      	uxtb	r2, r3
 c000f3e:	687b      	ldr	r3, [r7, #4]
 c000f40:	701a      	strb	r2, [r3, #0]

    /* End trivium_rotate */

    trivium_change_bit(arr, 1, s3);
 c000f42:	7b7b      	ldrb	r3, [r7, #13]
 c000f44:	461a      	mov	r2, r3
 c000f46:	2101      	movs	r1, #1
 c000f48:	6878      	ldr	r0, [r7, #4]
 c000f4a:	f7ff fedd 	bl	c000d08 <trivium_change_bit>
    trivium_change_bit(arr, 94, s1);
 c000f4e:	7bfb      	ldrb	r3, [r7, #15]
 c000f50:	461a      	mov	r2, r3
 c000f52:	215e      	movs	r1, #94	; 0x5e
 c000f54:	6878      	ldr	r0, [r7, #4]
 c000f56:	f7ff fed7 	bl	c000d08 <trivium_change_bit>
    trivium_change_bit(arr, 178, s2);
 c000f5a:	7bbb      	ldrb	r3, [r7, #14]
 c000f5c:	461a      	mov	r2, r3
 c000f5e:	21b2      	movs	r1, #178	; 0xb2
 c000f60:	6878      	ldr	r0, [r7, #4]
 c000f62:	f7ff fed1 	bl	c000d08 <trivium_change_bit>

    return out;
 c000f66:	7cfb      	ldrb	r3, [r7, #19]
}
 c000f68:	4618      	mov	r0, r3
 c000f6a:	371c      	adds	r7, #28
 c000f6c:	46bd      	mov	sp, r7
 c000f6e:	bd90      	pop	{r4, r7, pc}

0c000f70 <trivium_init_state>:

static void trivium_init_state(uint8_t *arr)
{
 c000f70:	b580      	push	{r7, lr}
 c000f72:	b084      	sub	sp, #16
 c000f74:	af00      	add	r7, sp, #0
 c000f76:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = 0; i < 4*288; i++)
 c000f78:	2300      	movs	r3, #0
 c000f7a:	81fb      	strh	r3, [r7, #14]
 c000f7c:	e006      	b.n	c000f8c <trivium_init_state+0x1c>
    {
        trivium_rotate(arr, TRIVIUM_STATE_SIZE);
 c000f7e:	2124      	movs	r1, #36	; 0x24
 c000f80:	6878      	ldr	r0, [r7, #4]
 c000f82:	f7ff ff36 	bl	c000df2 <trivium_rotate>
    for(i = 0; i < 4*288; i++)
 c000f86:	89fb      	ldrh	r3, [r7, #14]
 c000f88:	3301      	adds	r3, #1
 c000f8a:	81fb      	strh	r3, [r7, #14]
 c000f8c:	89fb      	ldrh	r3, [r7, #14]
 c000f8e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 c000f92:	d3f4      	bcc.n	c000f7e <trivium_init_state+0xe>
    }
}
 c000f94:	bf00      	nop
 c000f96:	bf00      	nop
 c000f98:	3710      	adds	r7, #16
 c000f9a:	46bd      	mov	sp, r7
 c000f9c:	bd80      	pop	{r7, pc}
	...

0c000fa0 <trivium_init>:

trivium_ctx* trivium_init(uint8_t *key, uint8_t *iv)
{
 c000fa0:	b580      	push	{r7, lr}
 c000fa2:	b084      	sub	sp, #16
 c000fa4:	af00      	add	r7, sp, #0
 c000fa6:	6078      	str	r0, [r7, #4]
 c000fa8:	6039      	str	r1, [r7, #0]
    trivium_ctx *ctx = malloc(sizeof(struct _trivium_ctx));
 c000faa:	202c      	movs	r0, #44	; 0x2c
 c000fac:	f000 fc46 	bl	c00183c <malloc>
 c000fb0:	4603      	mov	r3, r0
 c000fb2:	60bb      	str	r3, [r7, #8]

    if (ctx == NULL)
 c000fb4:	68bb      	ldr	r3, [r7, #8]
 c000fb6:	2b00      	cmp	r3, #0
 c000fb8:	d104      	bne.n	c000fc4 <trivium_init+0x24>
    {
        printf("Error: malloc trivium_ctx failed.\n");
 c000fba:	4826      	ldr	r0, [pc, #152]	; (c001054 <trivium_init+0xb4>)
 c000fbc:	f000 fe08 	bl	c001bd0 <puts>
        return NULL;
 c000fc0:	2300      	movs	r3, #0
 c000fc2:	e042      	b.n	c00104a <trivium_init+0xaa>
    }

    for(int i = 0; i < TRIVIUM_STATE_SIZE; i++) ctx->b[i] = 0;
 c000fc4:	2300      	movs	r3, #0
 c000fc6:	60fb      	str	r3, [r7, #12]
 c000fc8:	e008      	b.n	c000fdc <trivium_init+0x3c>
 c000fca:	68ba      	ldr	r2, [r7, #8]
 c000fcc:	68fb      	ldr	r3, [r7, #12]
 c000fce:	4413      	add	r3, r2
 c000fd0:	3308      	adds	r3, #8
 c000fd2:	2200      	movs	r2, #0
 c000fd4:	701a      	strb	r2, [r3, #0]
 c000fd6:	68fb      	ldr	r3, [r7, #12]
 c000fd8:	3301      	adds	r3, #1
 c000fda:	60fb      	str	r3, [r7, #12]
 c000fdc:	68fb      	ldr	r3, [r7, #12]
 c000fde:	2b23      	cmp	r3, #35	; 0x23
 c000fe0:	ddf3      	ble.n	c000fca <trivium_init+0x2a>

    ctx->key = key;
 c000fe2:	68bb      	ldr	r3, [r7, #8]
 c000fe4:	687a      	ldr	r2, [r7, #4]
 c000fe6:	601a      	str	r2, [r3, #0]
    ctx->iv = iv;
 c000fe8:	68bb      	ldr	r3, [r7, #8]
 c000fea:	683a      	ldr	r2, [r7, #0]
 c000fec:	605a      	str	r2, [r3, #4]

    trivium_insert_bits(ctx->b, 1, key, 80);
 c000fee:	68bb      	ldr	r3, [r7, #8]
 c000ff0:	f103 0008 	add.w	r0, r3, #8
 c000ff4:	2350      	movs	r3, #80	; 0x50
 c000ff6:	687a      	ldr	r2, [r7, #4]
 c000ff8:	2101      	movs	r1, #1
 c000ffa:	f7ff fed0 	bl	c000d9e <trivium_insert_bits>
    trivium_insert_bits(ctx->b, 94, iv, 80);
 c000ffe:	68bb      	ldr	r3, [r7, #8]
 c001000:	f103 0008 	add.w	r0, r3, #8
 c001004:	2350      	movs	r3, #80	; 0x50
 c001006:	683a      	ldr	r2, [r7, #0]
 c001008:	215e      	movs	r1, #94	; 0x5e
 c00100a:	f7ff fec8 	bl	c000d9e <trivium_insert_bits>
    trivium_change_bit(ctx->b, 286, 1);
 c00100e:	68bb      	ldr	r3, [r7, #8]
 c001010:	3308      	adds	r3, #8
 c001012:	2201      	movs	r2, #1
 c001014:	f44f 718f 	mov.w	r1, #286	; 0x11e
 c001018:	4618      	mov	r0, r3
 c00101a:	f7ff fe75 	bl	c000d08 <trivium_change_bit>
    trivium_change_bit(ctx->b, 287, 1);
 c00101e:	68bb      	ldr	r3, [r7, #8]
 c001020:	3308      	adds	r3, #8
 c001022:	2201      	movs	r2, #1
 c001024:	f240 111f 	movw	r1, #287	; 0x11f
 c001028:	4618      	mov	r0, r3
 c00102a:	f7ff fe6d 	bl	c000d08 <trivium_change_bit>
    trivium_change_bit(ctx->b, 288, 1);
 c00102e:	68bb      	ldr	r3, [r7, #8]
 c001030:	3308      	adds	r3, #8
 c001032:	2201      	movs	r2, #1
 c001034:	f44f 7190 	mov.w	r1, #288	; 0x120
 c001038:	4618      	mov	r0, r3
 c00103a:	f7ff fe65 	bl	c000d08 <trivium_change_bit>

    trivium_init_state(ctx->b);
 c00103e:	68bb      	ldr	r3, [r7, #8]
 c001040:	3308      	adds	r3, #8
 c001042:	4618      	mov	r0, r3
 c001044:	f7ff ff94 	bl	c000f70 <trivium_init_state>

    return ctx;
 c001048:	68bb      	ldr	r3, [r7, #8]
}
 c00104a:	4618      	mov	r0, r3
 c00104c:	3710      	adds	r7, #16
 c00104e:	46bd      	mov	sp, r7
 c001050:	bd80      	pop	{r7, pc}
 c001052:	bf00      	nop
 c001054:	0c0021b8 	.word	0x0c0021b8

0c001058 <trivium_gen_keystream>:

uint8_t trivium_gen_keystream(trivium_ctx* ctx)
{
 c001058:	b580      	push	{r7, lr}
 c00105a:	b084      	sub	sp, #16
 c00105c:	af00      	add	r7, sp, #0
 c00105e:	6078      	str	r0, [r7, #4]
    uint8_t buf = 0;
 c001060:	2300      	movs	r3, #0
 c001062:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 c001064:	2300      	movs	r3, #0
 c001066:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 c001068:	e014      	b.n	c001094 <trivium_gen_keystream+0x3c>
    {
        uint8_t z = trivium_rotate(ctx->b, TRIVIUM_STATE_SIZE);
 c00106a:	687b      	ldr	r3, [r7, #4]
 c00106c:	3308      	adds	r3, #8
 c00106e:	2124      	movs	r1, #36	; 0x24
 c001070:	4618      	mov	r0, r3
 c001072:	f7ff febe 	bl	c000df2 <trivium_rotate>
 c001076:	4603      	mov	r3, r0
 c001078:	737b      	strb	r3, [r7, #13]
        buf = buf | (z << i);
 c00107a:	7b7a      	ldrb	r2, [r7, #13]
 c00107c:	7bbb      	ldrb	r3, [r7, #14]
 c00107e:	fa02 f303 	lsl.w	r3, r2, r3
 c001082:	b25a      	sxtb	r2, r3
 c001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001088:	4313      	orrs	r3, r2
 c00108a:	b25b      	sxtb	r3, r3
 c00108c:	73fb      	strb	r3, [r7, #15]
        i += 1;
 c00108e:	7bbb      	ldrb	r3, [r7, #14]
 c001090:	3301      	adds	r3, #1
 c001092:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 c001094:	7bbb      	ldrb	r3, [r7, #14]
 c001096:	2b08      	cmp	r3, #8
 c001098:	d1e7      	bne.n	c00106a <trivium_gen_keystream+0x12>
    }
    return buf;
 c00109a:	7bfb      	ldrb	r3, [r7, #15]
 c00109c:	4618      	mov	r0, r3
 c00109e:	3710      	adds	r7, #16
 c0010a0:	46bd      	mov	sp, r7
 c0010a2:	bd80      	pop	{r7, pc}

0c0010a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; c0010dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c0010a8:	f7ff fcf6 	bl	c000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0010ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0010ae:	e003      	b.n	c0010b8 <LoopCopyDataInit>

0c0010b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0010b0:	4b0b      	ldr	r3, [pc, #44]	; (c0010e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0010b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0010b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0010b6:	3104      	adds	r1, #4

0c0010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0010b8:	480a      	ldr	r0, [pc, #40]	; (c0010e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0010ba:	4b0b      	ldr	r3, [pc, #44]	; (c0010e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0010bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0010be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0010c0:	d3f6      	bcc.n	c0010b0 <CopyDataInit>
	ldr	r2, =_sbss
 c0010c2:	4a0a      	ldr	r2, [pc, #40]	; (c0010ec <LoopForever+0x12>)
	b	LoopFillZerobss
 c0010c4:	e002      	b.n	c0010cc <LoopFillZerobss>

0c0010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0010c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0010c8:	f842 3b04 	str.w	r3, [r2], #4

0c0010cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0010cc:	4b08      	ldr	r3, [pc, #32]	; (c0010f0 <LoopForever+0x16>)
	cmp	r2, r3
 c0010ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0010d0:	d3f9      	bcc.n	c0010c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0010d2:	f000 fda3 	bl	c001c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0010d6:	f7ff f8db 	bl	c000290 <main>

0c0010da <LoopForever>:

LoopForever:
    b LoopForever
 c0010da:	e7fe      	b.n	c0010da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0010dc:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0010e0:	0c002234 	.word	0x0c002234
	ldr	r0, =_sdata
 c0010e4:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0010e8:	30000068 	.word	0x30000068
	ldr	r2, =_sbss
 c0010ec:	30000068 	.word	0x30000068
	ldr	r3, = _ebss
 c0010f0:	30000224 	.word	0x30000224

0c0010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0010f4:	e7fe      	b.n	c0010f4 <ADC1_2_IRQHandler>

0c0010f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0010f6:	b580      	push	{r7, lr}
 c0010f8:	b082      	sub	sp, #8
 c0010fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0010fc:	2300      	movs	r3, #0
 c0010fe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001100:	2004      	movs	r0, #4
 c001102:	f000 f915 	bl	c001330 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c001106:	f7ff fce1 	bl	c000acc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c00110a:	2007      	movs	r0, #7
 c00110c:	f000 f80e 	bl	c00112c <HAL_InitTick>
 c001110:	4603      	mov	r3, r0
 c001112:	2b00      	cmp	r3, #0
 c001114:	d002      	beq.n	c00111c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c001116:	2301      	movs	r3, #1
 c001118:	71fb      	strb	r3, [r7, #7]
 c00111a:	e001      	b.n	c001120 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c00111c:	f7ff fb3e 	bl	c00079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c001120:	79fb      	ldrb	r3, [r7, #7]
}
 c001122:	4618      	mov	r0, r3
 c001124:	3708      	adds	r7, #8
 c001126:	46bd      	mov	sp, r7
 c001128:	bd80      	pop	{r7, pc}
	...

0c00112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c00112c:	b580      	push	{r7, lr}
 c00112e:	b084      	sub	sp, #16
 c001130:	af00      	add	r7, sp, #0
 c001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c001134:	2300      	movs	r3, #0
 c001136:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001138:	4b17      	ldr	r3, [pc, #92]	; (c001198 <HAL_InitTick+0x6c>)
 c00113a:	781b      	ldrb	r3, [r3, #0]
 c00113c:	2b00      	cmp	r3, #0
 c00113e:	d023      	beq.n	c001188 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c001140:	4b16      	ldr	r3, [pc, #88]	; (c00119c <HAL_InitTick+0x70>)
 c001142:	681a      	ldr	r2, [r3, #0]
 c001144:	4b14      	ldr	r3, [pc, #80]	; (c001198 <HAL_InitTick+0x6c>)
 c001146:	781b      	ldrb	r3, [r3, #0]
 c001148:	4619      	mov	r1, r3
 c00114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00114e:	fbb3 f3f1 	udiv	r3, r3, r1
 c001152:	fbb2 f3f3 	udiv	r3, r2, r3
 c001156:	4618      	mov	r0, r3
 c001158:	f000 f90f 	bl	c00137a <HAL_SYSTICK_Config>
 c00115c:	4603      	mov	r3, r0
 c00115e:	2b00      	cmp	r3, #0
 c001160:	d10f      	bne.n	c001182 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001162:	687b      	ldr	r3, [r7, #4]
 c001164:	2b07      	cmp	r3, #7
 c001166:	d809      	bhi.n	c00117c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001168:	2200      	movs	r2, #0
 c00116a:	6879      	ldr	r1, [r7, #4]
 c00116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001170:	f000 f8e9 	bl	c001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001174:	4a0a      	ldr	r2, [pc, #40]	; (c0011a0 <HAL_InitTick+0x74>)
 c001176:	687b      	ldr	r3, [r7, #4]
 c001178:	6013      	str	r3, [r2, #0]
 c00117a:	e007      	b.n	c00118c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c00117c:	2301      	movs	r3, #1
 c00117e:	73fb      	strb	r3, [r7, #15]
 c001180:	e004      	b.n	c00118c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001182:	2301      	movs	r3, #1
 c001184:	73fb      	strb	r3, [r7, #15]
 c001186:	e001      	b.n	c00118c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001188:	2301      	movs	r3, #1
 c00118a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c00118c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00118e:	4618      	mov	r0, r3
 c001190:	3710      	adds	r7, #16
 c001192:	46bd      	mov	sp, r7
 c001194:	bd80      	pop	{r7, pc}
 c001196:	bf00      	nop
 c001198:	30000008 	.word	0x30000008
 c00119c:	30000000 	.word	0x30000000
 c0011a0:	30000004 	.word	0x30000004

0c0011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0011a4:	b480      	push	{r7}
 c0011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0011a8:	4b06      	ldr	r3, [pc, #24]	; (c0011c4 <HAL_IncTick+0x20>)
 c0011aa:	781b      	ldrb	r3, [r3, #0]
 c0011ac:	461a      	mov	r2, r3
 c0011ae:	4b06      	ldr	r3, [pc, #24]	; (c0011c8 <HAL_IncTick+0x24>)
 c0011b0:	681b      	ldr	r3, [r3, #0]
 c0011b2:	4413      	add	r3, r2
 c0011b4:	4a04      	ldr	r2, [pc, #16]	; (c0011c8 <HAL_IncTick+0x24>)
 c0011b6:	6013      	str	r3, [r2, #0]
}
 c0011b8:	bf00      	nop
 c0011ba:	46bd      	mov	sp, r7
 c0011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011c0:	4770      	bx	lr
 c0011c2:	bf00      	nop
 c0011c4:	30000008 	.word	0x30000008
 c0011c8:	300000d4 	.word	0x300000d4

0c0011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0011cc:	b480      	push	{r7}
 c0011ce:	b085      	sub	sp, #20
 c0011d0:	af00      	add	r7, sp, #0
 c0011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0011d4:	687b      	ldr	r3, [r7, #4]
 c0011d6:	f003 0307 	and.w	r3, r3, #7
 c0011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0011dc:	4b0c      	ldr	r3, [pc, #48]	; (c001210 <__NVIC_SetPriorityGrouping+0x44>)
 c0011de:	68db      	ldr	r3, [r3, #12]
 c0011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0011e2:	68ba      	ldr	r2, [r7, #8]
 c0011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0011e8:	4013      	ands	r3, r2
 c0011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0011ec:	68fb      	ldr	r3, [r7, #12]
 c0011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0011f0:	68bb      	ldr	r3, [r7, #8]
 c0011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0011fe:	4a04      	ldr	r2, [pc, #16]	; (c001210 <__NVIC_SetPriorityGrouping+0x44>)
 c001200:	68bb      	ldr	r3, [r7, #8]
 c001202:	60d3      	str	r3, [r2, #12]
}
 c001204:	bf00      	nop
 c001206:	3714      	adds	r7, #20
 c001208:	46bd      	mov	sp, r7
 c00120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00120e:	4770      	bx	lr
 c001210:	e000ed00 	.word	0xe000ed00

0c001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001214:	b480      	push	{r7}
 c001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001218:	4b04      	ldr	r3, [pc, #16]	; (c00122c <__NVIC_GetPriorityGrouping+0x18>)
 c00121a:	68db      	ldr	r3, [r3, #12]
 c00121c:	0a1b      	lsrs	r3, r3, #8
 c00121e:	f003 0307 	and.w	r3, r3, #7
}
 c001222:	4618      	mov	r0, r3
 c001224:	46bd      	mov	sp, r7
 c001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00122a:	4770      	bx	lr
 c00122c:	e000ed00 	.word	0xe000ed00

0c001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001230:	b480      	push	{r7}
 c001232:	b083      	sub	sp, #12
 c001234:	af00      	add	r7, sp, #0
 c001236:	4603      	mov	r3, r0
 c001238:	6039      	str	r1, [r7, #0]
 c00123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001240:	2b00      	cmp	r3, #0
 c001242:	db0a      	blt.n	c00125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001244:	683b      	ldr	r3, [r7, #0]
 c001246:	b2da      	uxtb	r2, r3
 c001248:	490c      	ldr	r1, [pc, #48]	; (c00127c <__NVIC_SetPriority+0x4c>)
 c00124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00124e:	0152      	lsls	r2, r2, #5
 c001250:	b2d2      	uxtb	r2, r2
 c001252:	440b      	add	r3, r1
 c001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001258:	e00a      	b.n	c001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00125a:	683b      	ldr	r3, [r7, #0]
 c00125c:	b2da      	uxtb	r2, r3
 c00125e:	4908      	ldr	r1, [pc, #32]	; (c001280 <__NVIC_SetPriority+0x50>)
 c001260:	79fb      	ldrb	r3, [r7, #7]
 c001262:	f003 030f 	and.w	r3, r3, #15
 c001266:	3b04      	subs	r3, #4
 c001268:	0152      	lsls	r2, r2, #5
 c00126a:	b2d2      	uxtb	r2, r2
 c00126c:	440b      	add	r3, r1
 c00126e:	761a      	strb	r2, [r3, #24]
}
 c001270:	bf00      	nop
 c001272:	370c      	adds	r7, #12
 c001274:	46bd      	mov	sp, r7
 c001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00127a:	4770      	bx	lr
 c00127c:	e000e100 	.word	0xe000e100
 c001280:	e000ed00 	.word	0xe000ed00

0c001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001284:	b480      	push	{r7}
 c001286:	b089      	sub	sp, #36	; 0x24
 c001288:	af00      	add	r7, sp, #0
 c00128a:	60f8      	str	r0, [r7, #12]
 c00128c:	60b9      	str	r1, [r7, #8]
 c00128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001290:	68fb      	ldr	r3, [r7, #12]
 c001292:	f003 0307 	and.w	r3, r3, #7
 c001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001298:	69fb      	ldr	r3, [r7, #28]
 c00129a:	f1c3 0307 	rsb	r3, r3, #7
 c00129e:	2b03      	cmp	r3, #3
 c0012a0:	bf28      	it	cs
 c0012a2:	2303      	movcs	r3, #3
 c0012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0012a6:	69fb      	ldr	r3, [r7, #28]
 c0012a8:	3303      	adds	r3, #3
 c0012aa:	2b06      	cmp	r3, #6
 c0012ac:	d902      	bls.n	c0012b4 <NVIC_EncodePriority+0x30>
 c0012ae:	69fb      	ldr	r3, [r7, #28]
 c0012b0:	3b04      	subs	r3, #4
 c0012b2:	e000      	b.n	c0012b6 <NVIC_EncodePriority+0x32>
 c0012b4:	2300      	movs	r3, #0
 c0012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0012bc:	69bb      	ldr	r3, [r7, #24]
 c0012be:	fa02 f303 	lsl.w	r3, r2, r3
 c0012c2:	43da      	mvns	r2, r3
 c0012c4:	68bb      	ldr	r3, [r7, #8]
 c0012c6:	401a      	ands	r2, r3
 c0012c8:	697b      	ldr	r3, [r7, #20]
 c0012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c0012d0:	697b      	ldr	r3, [r7, #20]
 c0012d2:	fa01 f303 	lsl.w	r3, r1, r3
 c0012d6:	43d9      	mvns	r1, r3
 c0012d8:	687b      	ldr	r3, [r7, #4]
 c0012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0012dc:	4313      	orrs	r3, r2
         );
}
 c0012de:	4618      	mov	r0, r3
 c0012e0:	3724      	adds	r7, #36	; 0x24
 c0012e2:	46bd      	mov	sp, r7
 c0012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0012e8:	4770      	bx	lr
	...

0c0012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0012ec:	b580      	push	{r7, lr}
 c0012ee:	b082      	sub	sp, #8
 c0012f0:	af00      	add	r7, sp, #0
 c0012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0012f4:	687b      	ldr	r3, [r7, #4]
 c0012f6:	3b01      	subs	r3, #1
 c0012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0012fc:	d301      	bcc.n	c001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0012fe:	2301      	movs	r3, #1
 c001300:	e00f      	b.n	c001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001302:	4a0a      	ldr	r2, [pc, #40]	; (c00132c <SysTick_Config+0x40>)
 c001304:	687b      	ldr	r3, [r7, #4]
 c001306:	3b01      	subs	r3, #1
 c001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00130a:	2107      	movs	r1, #7
 c00130c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001310:	f7ff ff8e 	bl	c001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001314:	4b05      	ldr	r3, [pc, #20]	; (c00132c <SysTick_Config+0x40>)
 c001316:	2200      	movs	r2, #0
 c001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00131a:	4b04      	ldr	r3, [pc, #16]	; (c00132c <SysTick_Config+0x40>)
 c00131c:	2207      	movs	r2, #7
 c00131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001320:	2300      	movs	r3, #0
}
 c001322:	4618      	mov	r0, r3
 c001324:	3708      	adds	r7, #8
 c001326:	46bd      	mov	sp, r7
 c001328:	bd80      	pop	{r7, pc}
 c00132a:	bf00      	nop
 c00132c:	e000e010 	.word	0xe000e010

0c001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001330:	b580      	push	{r7, lr}
 c001332:	b082      	sub	sp, #8
 c001334:	af00      	add	r7, sp, #0
 c001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001338:	6878      	ldr	r0, [r7, #4]
 c00133a:	f7ff ff47 	bl	c0011cc <__NVIC_SetPriorityGrouping>
}
 c00133e:	bf00      	nop
 c001340:	3708      	adds	r7, #8
 c001342:	46bd      	mov	sp, r7
 c001344:	bd80      	pop	{r7, pc}

0c001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001346:	b580      	push	{r7, lr}
 c001348:	b086      	sub	sp, #24
 c00134a:	af00      	add	r7, sp, #0
 c00134c:	4603      	mov	r3, r0
 c00134e:	60b9      	str	r1, [r7, #8]
 c001350:	607a      	str	r2, [r7, #4]
 c001352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001354:	f7ff ff5e 	bl	c001214 <__NVIC_GetPriorityGrouping>
 c001358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00135a:	687a      	ldr	r2, [r7, #4]
 c00135c:	68b9      	ldr	r1, [r7, #8]
 c00135e:	6978      	ldr	r0, [r7, #20]
 c001360:	f7ff ff90 	bl	c001284 <NVIC_EncodePriority>
 c001364:	4602      	mov	r2, r0
 c001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00136a:	4611      	mov	r1, r2
 c00136c:	4618      	mov	r0, r3
 c00136e:	f7ff ff5f 	bl	c001230 <__NVIC_SetPriority>
}
 c001372:	bf00      	nop
 c001374:	3718      	adds	r7, #24
 c001376:	46bd      	mov	sp, r7
 c001378:	bd80      	pop	{r7, pc}

0c00137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00137a:	b580      	push	{r7, lr}
 c00137c:	b082      	sub	sp, #8
 c00137e:	af00      	add	r7, sp, #0
 c001380:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001382:	6878      	ldr	r0, [r7, #4]
 c001384:	f7ff ffb2 	bl	c0012ec <SysTick_Config>
 c001388:	4603      	mov	r3, r0
}
 c00138a:	4618      	mov	r0, r3
 c00138c:	3708      	adds	r7, #8
 c00138e:	46bd      	mov	sp, r7
 c001390:	bd80      	pop	{r7, pc}
	...

0c001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001394:	b480      	push	{r7}
 c001396:	b087      	sub	sp, #28
 c001398:	af00      	add	r7, sp, #0
 c00139a:	6078      	str	r0, [r7, #4]
 c00139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c00139e:	2300      	movs	r3, #0
 c0013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0013a2:	e158      	b.n	c001656 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0013a4:	683b      	ldr	r3, [r7, #0]
 c0013a6:	681a      	ldr	r2, [r3, #0]
 c0013a8:	2101      	movs	r1, #1
 c0013aa:	697b      	ldr	r3, [r7, #20]
 c0013ac:	fa01 f303 	lsl.w	r3, r1, r3
 c0013b0:	4013      	ands	r3, r2
 c0013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0013b4:	68fb      	ldr	r3, [r7, #12]
 c0013b6:	2b00      	cmp	r3, #0
 c0013b8:	f000 814a 	beq.w	c001650 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c0013bc:	683b      	ldr	r3, [r7, #0]
 c0013be:	685b      	ldr	r3, [r3, #4]
 c0013c0:	f003 0303 	and.w	r3, r3, #3
 c0013c4:	2b01      	cmp	r3, #1
 c0013c6:	d005      	beq.n	c0013d4 <HAL_GPIO_Init+0x40>
 c0013c8:	683b      	ldr	r3, [r7, #0]
 c0013ca:	685b      	ldr	r3, [r3, #4]
 c0013cc:	f003 0303 	and.w	r3, r3, #3
 c0013d0:	2b02      	cmp	r3, #2
 c0013d2:	d130      	bne.n	c001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c0013d4:	687b      	ldr	r3, [r7, #4]
 c0013d6:	689b      	ldr	r3, [r3, #8]
 c0013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0013da:	697b      	ldr	r3, [r7, #20]
 c0013dc:	005b      	lsls	r3, r3, #1
 c0013de:	2203      	movs	r2, #3
 c0013e0:	fa02 f303 	lsl.w	r3, r2, r3
 c0013e4:	43db      	mvns	r3, r3
 c0013e6:	693a      	ldr	r2, [r7, #16]
 c0013e8:	4013      	ands	r3, r2
 c0013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0013ec:	683b      	ldr	r3, [r7, #0]
 c0013ee:	68da      	ldr	r2, [r3, #12]
 c0013f0:	697b      	ldr	r3, [r7, #20]
 c0013f2:	005b      	lsls	r3, r3, #1
 c0013f4:	fa02 f303 	lsl.w	r3, r2, r3
 c0013f8:	693a      	ldr	r2, [r7, #16]
 c0013fa:	4313      	orrs	r3, r2
 c0013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c0013fe:	687b      	ldr	r3, [r7, #4]
 c001400:	693a      	ldr	r2, [r7, #16]
 c001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001404:	687b      	ldr	r3, [r7, #4]
 c001406:	685b      	ldr	r3, [r3, #4]
 c001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00140a:	2201      	movs	r2, #1
 c00140c:	697b      	ldr	r3, [r7, #20]
 c00140e:	fa02 f303 	lsl.w	r3, r2, r3
 c001412:	43db      	mvns	r3, r3
 c001414:	693a      	ldr	r2, [r7, #16]
 c001416:	4013      	ands	r3, r2
 c001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c00141a:	683b      	ldr	r3, [r7, #0]
 c00141c:	685b      	ldr	r3, [r3, #4]
 c00141e:	091b      	lsrs	r3, r3, #4
 c001420:	f003 0201 	and.w	r2, r3, #1
 c001424:	697b      	ldr	r3, [r7, #20]
 c001426:	fa02 f303 	lsl.w	r3, r2, r3
 c00142a:	693a      	ldr	r2, [r7, #16]
 c00142c:	4313      	orrs	r3, r2
 c00142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001430:	687b      	ldr	r3, [r7, #4]
 c001432:	693a      	ldr	r2, [r7, #16]
 c001434:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c001436:	683b      	ldr	r3, [r7, #0]
 c001438:	685b      	ldr	r3, [r3, #4]
 c00143a:	f003 0303 	and.w	r3, r3, #3
 c00143e:	2b03      	cmp	r3, #3
 c001440:	d017      	beq.n	c001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c001442:	687b      	ldr	r3, [r7, #4]
 c001444:	68db      	ldr	r3, [r3, #12]
 c001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001448:	697b      	ldr	r3, [r7, #20]
 c00144a:	005b      	lsls	r3, r3, #1
 c00144c:	2203      	movs	r2, #3
 c00144e:	fa02 f303 	lsl.w	r3, r2, r3
 c001452:	43db      	mvns	r3, r3
 c001454:	693a      	ldr	r2, [r7, #16]
 c001456:	4013      	ands	r3, r2
 c001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c00145a:	683b      	ldr	r3, [r7, #0]
 c00145c:	689a      	ldr	r2, [r3, #8]
 c00145e:	697b      	ldr	r3, [r7, #20]
 c001460:	005b      	lsls	r3, r3, #1
 c001462:	fa02 f303 	lsl.w	r3, r2, r3
 c001466:	693a      	ldr	r2, [r7, #16]
 c001468:	4313      	orrs	r3, r2
 c00146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c00146c:	687b      	ldr	r3, [r7, #4]
 c00146e:	693a      	ldr	r2, [r7, #16]
 c001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001472:	683b      	ldr	r3, [r7, #0]
 c001474:	685b      	ldr	r3, [r3, #4]
 c001476:	f003 0303 	and.w	r3, r3, #3
 c00147a:	2b02      	cmp	r3, #2
 c00147c:	d123      	bne.n	c0014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c00147e:	697b      	ldr	r3, [r7, #20]
 c001480:	08da      	lsrs	r2, r3, #3
 c001482:	687b      	ldr	r3, [r7, #4]
 c001484:	3208      	adds	r2, #8
 c001486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00148c:	697b      	ldr	r3, [r7, #20]
 c00148e:	f003 0307 	and.w	r3, r3, #7
 c001492:	009b      	lsls	r3, r3, #2
 c001494:	220f      	movs	r2, #15
 c001496:	fa02 f303 	lsl.w	r3, r2, r3
 c00149a:	43db      	mvns	r3, r3
 c00149c:	693a      	ldr	r2, [r7, #16]
 c00149e:	4013      	ands	r3, r2
 c0014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0014a2:	683b      	ldr	r3, [r7, #0]
 c0014a4:	691a      	ldr	r2, [r3, #16]
 c0014a6:	697b      	ldr	r3, [r7, #20]
 c0014a8:	f003 0307 	and.w	r3, r3, #7
 c0014ac:	009b      	lsls	r3, r3, #2
 c0014ae:	fa02 f303 	lsl.w	r3, r2, r3
 c0014b2:	693a      	ldr	r2, [r7, #16]
 c0014b4:	4313      	orrs	r3, r2
 c0014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0014b8:	697b      	ldr	r3, [r7, #20]
 c0014ba:	08da      	lsrs	r2, r3, #3
 c0014bc:	687b      	ldr	r3, [r7, #4]
 c0014be:	3208      	adds	r2, #8
 c0014c0:	6939      	ldr	r1, [r7, #16]
 c0014c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c0014c6:	687b      	ldr	r3, [r7, #4]
 c0014c8:	681b      	ldr	r3, [r3, #0]
 c0014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0014cc:	697b      	ldr	r3, [r7, #20]
 c0014ce:	005b      	lsls	r3, r3, #1
 c0014d0:	2203      	movs	r2, #3
 c0014d2:	fa02 f303 	lsl.w	r3, r2, r3
 c0014d6:	43db      	mvns	r3, r3
 c0014d8:	693a      	ldr	r2, [r7, #16]
 c0014da:	4013      	ands	r3, r2
 c0014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0014de:	683b      	ldr	r3, [r7, #0]
 c0014e0:	685b      	ldr	r3, [r3, #4]
 c0014e2:	f003 0203 	and.w	r2, r3, #3
 c0014e6:	697b      	ldr	r3, [r7, #20]
 c0014e8:	005b      	lsls	r3, r3, #1
 c0014ea:	fa02 f303 	lsl.w	r3, r2, r3
 c0014ee:	693a      	ldr	r2, [r7, #16]
 c0014f0:	4313      	orrs	r3, r2
 c0014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c0014f4:	687b      	ldr	r3, [r7, #4]
 c0014f6:	693a      	ldr	r2, [r7, #16]
 c0014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c0014fa:	683b      	ldr	r3, [r7, #0]
 c0014fc:	685b      	ldr	r3, [r3, #4]
 c0014fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c001502:	2b00      	cmp	r3, #0
 c001504:	f000 80a4 	beq.w	c001650 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001508:	4a5a      	ldr	r2, [pc, #360]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c00150a:	697b      	ldr	r3, [r7, #20]
 c00150c:	089b      	lsrs	r3, r3, #2
 c00150e:	3318      	adds	r3, #24
 c001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001514:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001516:	697b      	ldr	r3, [r7, #20]
 c001518:	f003 0303 	and.w	r3, r3, #3
 c00151c:	00db      	lsls	r3, r3, #3
 c00151e:	220f      	movs	r2, #15
 c001520:	fa02 f303 	lsl.w	r3, r2, r3
 c001524:	43db      	mvns	r3, r3
 c001526:	693a      	ldr	r2, [r7, #16]
 c001528:	4013      	ands	r3, r2
 c00152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00152c:	687b      	ldr	r3, [r7, #4]
 c00152e:	4a52      	ldr	r2, [pc, #328]	; (c001678 <HAL_GPIO_Init+0x2e4>)
 c001530:	4293      	cmp	r3, r2
 c001532:	d025      	beq.n	c001580 <HAL_GPIO_Init+0x1ec>
 c001534:	687b      	ldr	r3, [r7, #4]
 c001536:	4a51      	ldr	r2, [pc, #324]	; (c00167c <HAL_GPIO_Init+0x2e8>)
 c001538:	4293      	cmp	r3, r2
 c00153a:	d01f      	beq.n	c00157c <HAL_GPIO_Init+0x1e8>
 c00153c:	687b      	ldr	r3, [r7, #4]
 c00153e:	4a50      	ldr	r2, [pc, #320]	; (c001680 <HAL_GPIO_Init+0x2ec>)
 c001540:	4293      	cmp	r3, r2
 c001542:	d019      	beq.n	c001578 <HAL_GPIO_Init+0x1e4>
 c001544:	687b      	ldr	r3, [r7, #4]
 c001546:	4a4f      	ldr	r2, [pc, #316]	; (c001684 <HAL_GPIO_Init+0x2f0>)
 c001548:	4293      	cmp	r3, r2
 c00154a:	d013      	beq.n	c001574 <HAL_GPIO_Init+0x1e0>
 c00154c:	687b      	ldr	r3, [r7, #4]
 c00154e:	4a4e      	ldr	r2, [pc, #312]	; (c001688 <HAL_GPIO_Init+0x2f4>)
 c001550:	4293      	cmp	r3, r2
 c001552:	d00d      	beq.n	c001570 <HAL_GPIO_Init+0x1dc>
 c001554:	687b      	ldr	r3, [r7, #4]
 c001556:	4a4d      	ldr	r2, [pc, #308]	; (c00168c <HAL_GPIO_Init+0x2f8>)
 c001558:	4293      	cmp	r3, r2
 c00155a:	d007      	beq.n	c00156c <HAL_GPIO_Init+0x1d8>
 c00155c:	687b      	ldr	r3, [r7, #4]
 c00155e:	4a4c      	ldr	r2, [pc, #304]	; (c001690 <HAL_GPIO_Init+0x2fc>)
 c001560:	4293      	cmp	r3, r2
 c001562:	d101      	bne.n	c001568 <HAL_GPIO_Init+0x1d4>
 c001564:	2306      	movs	r3, #6
 c001566:	e00c      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c001568:	2307      	movs	r3, #7
 c00156a:	e00a      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c00156c:	2305      	movs	r3, #5
 c00156e:	e008      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c001570:	2304      	movs	r3, #4
 c001572:	e006      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c001574:	2303      	movs	r3, #3
 c001576:	e004      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c001578:	2302      	movs	r3, #2
 c00157a:	e002      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c00157c:	2301      	movs	r3, #1
 c00157e:	e000      	b.n	c001582 <HAL_GPIO_Init+0x1ee>
 c001580:	2300      	movs	r3, #0
 c001582:	697a      	ldr	r2, [r7, #20]
 c001584:	f002 0203 	and.w	r2, r2, #3
 c001588:	00d2      	lsls	r2, r2, #3
 c00158a:	4093      	lsls	r3, r2
 c00158c:	693a      	ldr	r2, [r7, #16]
 c00158e:	4313      	orrs	r3, r2
 c001590:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001592:	4938      	ldr	r1, [pc, #224]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c001594:	697b      	ldr	r3, [r7, #20]
 c001596:	089b      	lsrs	r3, r3, #2
 c001598:	3318      	adds	r3, #24
 c00159a:	693a      	ldr	r2, [r7, #16]
 c00159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c0015a0:	4b34      	ldr	r3, [pc, #208]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c0015a2:	681b      	ldr	r3, [r3, #0]
 c0015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0015a6:	68fb      	ldr	r3, [r7, #12]
 c0015a8:	43db      	mvns	r3, r3
 c0015aa:	693a      	ldr	r2, [r7, #16]
 c0015ac:	4013      	ands	r3, r2
 c0015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c0015b0:	683b      	ldr	r3, [r7, #0]
 c0015b2:	685b      	ldr	r3, [r3, #4]
 c0015b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0015b8:	2b00      	cmp	r3, #0
 c0015ba:	d003      	beq.n	c0015c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c0015bc:	693a      	ldr	r2, [r7, #16]
 c0015be:	68fb      	ldr	r3, [r7, #12]
 c0015c0:	4313      	orrs	r3, r2
 c0015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0015c4:	4a2b      	ldr	r2, [pc, #172]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c0015c6:	693b      	ldr	r3, [r7, #16]
 c0015c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0015ca:	4b2a      	ldr	r3, [pc, #168]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c0015cc:	685b      	ldr	r3, [r3, #4]
 c0015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0015d0:	68fb      	ldr	r3, [r7, #12]
 c0015d2:	43db      	mvns	r3, r3
 c0015d4:	693a      	ldr	r2, [r7, #16]
 c0015d6:	4013      	ands	r3, r2
 c0015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c0015da:	683b      	ldr	r3, [r7, #0]
 c0015dc:	685b      	ldr	r3, [r3, #4]
 c0015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0015e2:	2b00      	cmp	r3, #0
 c0015e4:	d003      	beq.n	c0015ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c0015e6:	693a      	ldr	r2, [r7, #16]
 c0015e8:	68fb      	ldr	r3, [r7, #12]
 c0015ea:	4313      	orrs	r3, r2
 c0015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0015ee:	4a21      	ldr	r2, [pc, #132]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c0015f0:	693b      	ldr	r3, [r7, #16]
 c0015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c0015f4:	4b1f      	ldr	r3, [pc, #124]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c0015f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0015fc:	68fb      	ldr	r3, [r7, #12]
 c0015fe:	43db      	mvns	r3, r3
 c001600:	693a      	ldr	r2, [r7, #16]
 c001602:	4013      	ands	r3, r2
 c001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c001606:	683b      	ldr	r3, [r7, #0]
 c001608:	685b      	ldr	r3, [r3, #4]
 c00160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00160e:	2b00      	cmp	r3, #0
 c001610:	d003      	beq.n	c00161a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c001612:	693a      	ldr	r2, [r7, #16]
 c001614:	68fb      	ldr	r3, [r7, #12]
 c001616:	4313      	orrs	r3, r2
 c001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00161a:	4a16      	ldr	r2, [pc, #88]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c00161c:	693b      	ldr	r3, [r7, #16]
 c00161e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c001622:	4b14      	ldr	r3, [pc, #80]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c001624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00162a:	68fb      	ldr	r3, [r7, #12]
 c00162c:	43db      	mvns	r3, r3
 c00162e:	693a      	ldr	r2, [r7, #16]
 c001630:	4013      	ands	r3, r2
 c001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c001634:	683b      	ldr	r3, [r7, #0]
 c001636:	685b      	ldr	r3, [r3, #4]
 c001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00163c:	2b00      	cmp	r3, #0
 c00163e:	d003      	beq.n	c001648 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c001640:	693a      	ldr	r2, [r7, #16]
 c001642:	68fb      	ldr	r3, [r7, #12]
 c001644:	4313      	orrs	r3, r2
 c001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001648:	4a0a      	ldr	r2, [pc, #40]	; (c001674 <HAL_GPIO_Init+0x2e0>)
 c00164a:	693b      	ldr	r3, [r7, #16]
 c00164c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001650:	697b      	ldr	r3, [r7, #20]
 c001652:	3301      	adds	r3, #1
 c001654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001656:	683b      	ldr	r3, [r7, #0]
 c001658:	681a      	ldr	r2, [r3, #0]
 c00165a:	697b      	ldr	r3, [r7, #20]
 c00165c:	fa22 f303 	lsr.w	r3, r2, r3
 c001660:	2b00      	cmp	r3, #0
 c001662:	f47f ae9f 	bne.w	c0013a4 <HAL_GPIO_Init+0x10>
  }
}
 c001666:	bf00      	nop
 c001668:	bf00      	nop
 c00166a:	371c      	adds	r7, #28
 c00166c:	46bd      	mov	sp, r7
 c00166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001672:	4770      	bx	lr
 c001674:	5002f400 	.word	0x5002f400
 c001678:	52020000 	.word	0x52020000
 c00167c:	52020400 	.word	0x52020400
 c001680:	52020800 	.word	0x52020800
 c001684:	52020c00 	.word	0x52020c00
 c001688:	52021000 	.word	0x52021000
 c00168c:	52021400 	.word	0x52021400
 c001690:	52021800 	.word	0x52021800

0c001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001694:	b480      	push	{r7}
 c001696:	b083      	sub	sp, #12
 c001698:	af00      	add	r7, sp, #0
 c00169a:	6078      	str	r0, [r7, #4]
 c00169c:	460b      	mov	r3, r1
 c00169e:	807b      	strh	r3, [r7, #2]
 c0016a0:	4613      	mov	r3, r2
 c0016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c0016a4:	787b      	ldrb	r3, [r7, #1]
 c0016a6:	2b00      	cmp	r3, #0
 c0016a8:	d003      	beq.n	c0016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c0016aa:	887a      	ldrh	r2, [r7, #2]
 c0016ac:	687b      	ldr	r3, [r7, #4]
 c0016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c0016b0:	e002      	b.n	c0016b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c0016b2:	887a      	ldrh	r2, [r7, #2]
 c0016b4:	687b      	ldr	r3, [r7, #4]
 c0016b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 c0016b8:	bf00      	nop
 c0016ba:	370c      	adds	r7, #12
 c0016bc:	46bd      	mov	sp, r7
 c0016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016c2:	4770      	bx	lr

0c0016c4 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0016c4:	b480      	push	{r7}
 c0016c6:	b089      	sub	sp, #36	; 0x24
 c0016c8:	af00      	add	r7, sp, #0
 c0016ca:	60f8      	str	r0, [r7, #12]
 c0016cc:	460b      	mov	r3, r1
 c0016ce:	607a      	str	r2, [r7, #4]
 c0016d0:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0016d2:	2300      	movs	r3, #0
 c0016d4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0016d6:	68fb      	ldr	r3, [r7, #12]
 c0016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0016da:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0016dc:	e01b      	b.n	c001716 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0016de:	897a      	ldrh	r2, [r7, #10]
 c0016e0:	2101      	movs	r1, #1
 c0016e2:	69fb      	ldr	r3, [r7, #28]
 c0016e4:	fa01 f303 	lsl.w	r3, r1, r3
 c0016e8:	4013      	ands	r3, r2
 c0016ea:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c0016ec:	697b      	ldr	r3, [r7, #20]
 c0016ee:	2b00      	cmp	r3, #0
 c0016f0:	d00e      	beq.n	c001710 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0016f2:	2201      	movs	r2, #1
 c0016f4:	69fb      	ldr	r3, [r7, #28]
 c0016f6:	fa02 f303 	lsl.w	r3, r2, r3
 c0016fa:	43db      	mvns	r3, r3
 c0016fc:	69ba      	ldr	r2, [r7, #24]
 c0016fe:	4013      	ands	r3, r2
 c001700:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001702:	687a      	ldr	r2, [r7, #4]
 c001704:	69fb      	ldr	r3, [r7, #28]
 c001706:	fa02 f303 	lsl.w	r3, r2, r3
 c00170a:	69ba      	ldr	r2, [r7, #24]
 c00170c:	4313      	orrs	r3, r2
 c00170e:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001710:	69fb      	ldr	r3, [r7, #28]
 c001712:	3301      	adds	r3, #1
 c001714:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001716:	897a      	ldrh	r2, [r7, #10]
 c001718:	69fb      	ldr	r3, [r7, #28]
 c00171a:	fa42 f303 	asr.w	r3, r2, r3
 c00171e:	2b00      	cmp	r3, #0
 c001720:	d1dd      	bne.n	c0016de <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001722:	68fb      	ldr	r3, [r7, #12]
 c001724:	69ba      	ldr	r2, [r7, #24]
 c001726:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001728:	bf00      	nop
 c00172a:	3724      	adds	r7, #36	; 0x24
 c00172c:	46bd      	mov	sp, r7
 c00172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001732:	4770      	bx	lr

0c001734 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001734:	b480      	push	{r7}
 c001736:	b089      	sub	sp, #36	; 0x24
 c001738:	af00      	add	r7, sp, #0
 c00173a:	6078      	str	r0, [r7, #4]
 c00173c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00173e:	687b      	ldr	r3, [r7, #4]
 c001740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001744:	d00b      	beq.n	c00175e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001746:	687b      	ldr	r3, [r7, #4]
 c001748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00174c:	d007      	beq.n	c00175e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00174e:	687b      	ldr	r3, [r7, #4]
 c001750:	4a36      	ldr	r2, [pc, #216]	; (c00182c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001752:	4293      	cmp	r3, r2
 c001754:	d003      	beq.n	c00175e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001756:	687b      	ldr	r3, [r7, #4]
 c001758:	4a35      	ldr	r2, [pc, #212]	; (c001830 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00175a:	4293      	cmp	r3, r2
 c00175c:	d111      	bne.n	c001782 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00175e:	683b      	ldr	r3, [r7, #0]
 c001760:	681b      	ldr	r3, [r3, #0]
 c001762:	2b00      	cmp	r3, #0
 c001764:	d004      	beq.n	c001770 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001766:	683b      	ldr	r3, [r7, #0]
 c001768:	681b      	ldr	r3, [r3, #0]
 c00176a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00176e:	d108      	bne.n	c001782 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001770:	683b      	ldr	r3, [r7, #0]
 c001772:	685b      	ldr	r3, [r3, #4]
 c001774:	2b00      	cmp	r3, #0
 c001776:	d006      	beq.n	c001786 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001778:	683b      	ldr	r3, [r7, #0]
 c00177a:	685b      	ldr	r3, [r3, #4]
 c00177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001780:	d001      	beq.n	c001786 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c001782:	2301      	movs	r3, #1
 c001784:	e04b      	b.n	c00181e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001786:	683b      	ldr	r3, [r7, #0]
 c001788:	685b      	ldr	r3, [r3, #4]
 c00178a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00178c:	683b      	ldr	r3, [r7, #0]
 c00178e:	681b      	ldr	r3, [r3, #0]
 c001790:	693a      	ldr	r2, [r7, #16]
 c001792:	4313      	orrs	r3, r2
 c001794:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001796:	687b      	ldr	r3, [r7, #4]
 c001798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00179c:	d003      	beq.n	c0017a6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00179e:	687b      	ldr	r3, [r7, #4]
 c0017a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0017a4:	d105      	bne.n	c0017b2 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0017a6:	4b23      	ldr	r3, [pc, #140]	; (c001834 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0017a8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0017aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0017ae:	61bb      	str	r3, [r7, #24]
 c0017b0:	e004      	b.n	c0017bc <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0017b2:	4b21      	ldr	r3, [pc, #132]	; (c001838 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0017b4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0017ba:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0017bc:	69bb      	ldr	r3, [r7, #24]
 c0017be:	0b5b      	lsrs	r3, r3, #13
 c0017c0:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c0017c2:	2300      	movs	r3, #0
 c0017c4:	617b      	str	r3, [r7, #20]
 c0017c6:	e00c      	b.n	c0017e2 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0017c8:	683b      	ldr	r3, [r7, #0]
 c0017ca:	697a      	ldr	r2, [r7, #20]
 c0017cc:	3202      	adds	r2, #2
 c0017ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0017d2:	69fb      	ldr	r3, [r7, #28]
 c0017d4:	697a      	ldr	r2, [r7, #20]
 c0017d6:	3240      	adds	r2, #64	; 0x40
 c0017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0017dc:	697b      	ldr	r3, [r7, #20]
 c0017de:	3301      	adds	r3, #1
 c0017e0:	617b      	str	r3, [r7, #20]
 c0017e2:	697a      	ldr	r2, [r7, #20]
 c0017e4:	68fb      	ldr	r3, [r7, #12]
 c0017e6:	429a      	cmp	r2, r3
 c0017e8:	d3ee      	bcc.n	c0017c8 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0017ea:	69fb      	ldr	r3, [r7, #28]
 c0017ec:	681b      	ldr	r3, [r3, #0]
 c0017ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0017f2:	693b      	ldr	r3, [r7, #16]
 c0017f4:	431a      	orrs	r2, r3
 c0017f6:	69fb      	ldr	r3, [r7, #28]
 c0017f8:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0017fa:	69bb      	ldr	r3, [r7, #24]
 c0017fc:	0b5b      	lsrs	r3, r3, #13
 c0017fe:	2201      	movs	r2, #1
 c001800:	fa02 f303 	lsl.w	r3, r2, r3
 c001804:	3b01      	subs	r3, #1
 c001806:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001808:	69fb      	ldr	r3, [r7, #28]
 c00180a:	691a      	ldr	r2, [r3, #16]
 c00180c:	68bb      	ldr	r3, [r7, #8]
 c00180e:	43db      	mvns	r3, r3
 c001810:	401a      	ands	r2, r3
 c001812:	683b      	ldr	r3, [r7, #0]
 c001814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001816:	431a      	orrs	r2, r3
 c001818:	69fb      	ldr	r3, [r7, #28]
 c00181a:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c00181c:	2300      	movs	r3, #0
}
 c00181e:	4618      	mov	r0, r3
 c001820:	3724      	adds	r7, #36	; 0x24
 c001822:	46bd      	mov	sp, r7
 c001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001828:	4770      	bx	lr
 c00182a:	bf00      	nop
 c00182c:	20030000 	.word	0x20030000
 c001830:	30030000 	.word	0x30030000
 c001834:	50032c00 	.word	0x50032c00
 c001838:	50033000 	.word	0x50033000

0c00183c <malloc>:
 c00183c:	4b02      	ldr	r3, [pc, #8]	; (c001848 <malloc+0xc>)
 c00183e:	4601      	mov	r1, r0
 c001840:	6818      	ldr	r0, [r3, #0]
 c001842:	f000 b823 	b.w	c00188c <_malloc_r>
 c001846:	bf00      	nop
 c001848:	30000064 	.word	0x30000064

0c00184c <sbrk_aligned>:
 c00184c:	b570      	push	{r4, r5, r6, lr}
 c00184e:	4e0e      	ldr	r6, [pc, #56]	; (c001888 <sbrk_aligned+0x3c>)
 c001850:	460c      	mov	r4, r1
 c001852:	4605      	mov	r5, r0
 c001854:	6831      	ldr	r1, [r6, #0]
 c001856:	b911      	cbnz	r1, c00185e <sbrk_aligned+0x12>
 c001858:	f000 f9ca 	bl	c001bf0 <_sbrk_r>
 c00185c:	6030      	str	r0, [r6, #0]
 c00185e:	4621      	mov	r1, r4
 c001860:	4628      	mov	r0, r5
 c001862:	f000 f9c5 	bl	c001bf0 <_sbrk_r>
 c001866:	1c43      	adds	r3, r0, #1
 c001868:	d00a      	beq.n	c001880 <sbrk_aligned+0x34>
 c00186a:	1cc4      	adds	r4, r0, #3
 c00186c:	f024 0403 	bic.w	r4, r4, #3
 c001870:	42a0      	cmp	r0, r4
 c001872:	d007      	beq.n	c001884 <sbrk_aligned+0x38>
 c001874:	1a21      	subs	r1, r4, r0
 c001876:	4628      	mov	r0, r5
 c001878:	f000 f9ba 	bl	c001bf0 <_sbrk_r>
 c00187c:	3001      	adds	r0, #1
 c00187e:	d101      	bne.n	c001884 <sbrk_aligned+0x38>
 c001880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 c001884:	4620      	mov	r0, r4
 c001886:	bd70      	pop	{r4, r5, r6, pc}
 c001888:	300000dc 	.word	0x300000dc

0c00188c <_malloc_r>:
 c00188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001890:	1ccd      	adds	r5, r1, #3
 c001892:	4607      	mov	r7, r0
 c001894:	f025 0503 	bic.w	r5, r5, #3
 c001898:	3508      	adds	r5, #8
 c00189a:	2d0c      	cmp	r5, #12
 c00189c:	bf38      	it	cc
 c00189e:	250c      	movcc	r5, #12
 c0018a0:	2d00      	cmp	r5, #0
 c0018a2:	db01      	blt.n	c0018a8 <_malloc_r+0x1c>
 c0018a4:	42a9      	cmp	r1, r5
 c0018a6:	d905      	bls.n	c0018b4 <_malloc_r+0x28>
 c0018a8:	230c      	movs	r3, #12
 c0018aa:	2600      	movs	r6, #0
 c0018ac:	603b      	str	r3, [r7, #0]
 c0018ae:	4630      	mov	r0, r6
 c0018b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0018b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; c001988 <_malloc_r+0xfc>
 c0018b8:	f000 f868 	bl	c00198c <__malloc_lock>
 c0018bc:	f8d8 3000 	ldr.w	r3, [r8]
 c0018c0:	461c      	mov	r4, r3
 c0018c2:	bb5c      	cbnz	r4, c00191c <_malloc_r+0x90>
 c0018c4:	4629      	mov	r1, r5
 c0018c6:	4638      	mov	r0, r7
 c0018c8:	f7ff ffc0 	bl	c00184c <sbrk_aligned>
 c0018cc:	1c43      	adds	r3, r0, #1
 c0018ce:	4604      	mov	r4, r0
 c0018d0:	d155      	bne.n	c00197e <_malloc_r+0xf2>
 c0018d2:	f8d8 4000 	ldr.w	r4, [r8]
 c0018d6:	4626      	mov	r6, r4
 c0018d8:	2e00      	cmp	r6, #0
 c0018da:	d145      	bne.n	c001968 <_malloc_r+0xdc>
 c0018dc:	2c00      	cmp	r4, #0
 c0018de:	d048      	beq.n	c001972 <_malloc_r+0xe6>
 c0018e0:	6823      	ldr	r3, [r4, #0]
 c0018e2:	4631      	mov	r1, r6
 c0018e4:	4638      	mov	r0, r7
 c0018e6:	eb04 0903 	add.w	r9, r4, r3
 c0018ea:	f000 f981 	bl	c001bf0 <_sbrk_r>
 c0018ee:	4581      	cmp	r9, r0
 c0018f0:	d13f      	bne.n	c001972 <_malloc_r+0xe6>
 c0018f2:	6821      	ldr	r1, [r4, #0]
 c0018f4:	4638      	mov	r0, r7
 c0018f6:	1a6d      	subs	r5, r5, r1
 c0018f8:	4629      	mov	r1, r5
 c0018fa:	f7ff ffa7 	bl	c00184c <sbrk_aligned>
 c0018fe:	3001      	adds	r0, #1
 c001900:	d037      	beq.n	c001972 <_malloc_r+0xe6>
 c001902:	6823      	ldr	r3, [r4, #0]
 c001904:	442b      	add	r3, r5
 c001906:	6023      	str	r3, [r4, #0]
 c001908:	f8d8 3000 	ldr.w	r3, [r8]
 c00190c:	2b00      	cmp	r3, #0
 c00190e:	d038      	beq.n	c001982 <_malloc_r+0xf6>
 c001910:	685a      	ldr	r2, [r3, #4]
 c001912:	42a2      	cmp	r2, r4
 c001914:	d12b      	bne.n	c00196e <_malloc_r+0xe2>
 c001916:	2200      	movs	r2, #0
 c001918:	605a      	str	r2, [r3, #4]
 c00191a:	e00f      	b.n	c00193c <_malloc_r+0xb0>
 c00191c:	6822      	ldr	r2, [r4, #0]
 c00191e:	1b52      	subs	r2, r2, r5
 c001920:	d41f      	bmi.n	c001962 <_malloc_r+0xd6>
 c001922:	2a0b      	cmp	r2, #11
 c001924:	d917      	bls.n	c001956 <_malloc_r+0xca>
 c001926:	1961      	adds	r1, r4, r5
 c001928:	42a3      	cmp	r3, r4
 c00192a:	6025      	str	r5, [r4, #0]
 c00192c:	bf18      	it	ne
 c00192e:	6059      	strne	r1, [r3, #4]
 c001930:	6863      	ldr	r3, [r4, #4]
 c001932:	bf08      	it	eq
 c001934:	f8c8 1000 	streq.w	r1, [r8]
 c001938:	5162      	str	r2, [r4, r5]
 c00193a:	604b      	str	r3, [r1, #4]
 c00193c:	f104 060b 	add.w	r6, r4, #11
 c001940:	4638      	mov	r0, r7
 c001942:	f000 f829 	bl	c001998 <__malloc_unlock>
 c001946:	1d23      	adds	r3, r4, #4
 c001948:	f026 0607 	bic.w	r6, r6, #7
 c00194c:	1af2      	subs	r2, r6, r3
 c00194e:	d0ae      	beq.n	c0018ae <_malloc_r+0x22>
 c001950:	1b9b      	subs	r3, r3, r6
 c001952:	50a3      	str	r3, [r4, r2]
 c001954:	e7ab      	b.n	c0018ae <_malloc_r+0x22>
 c001956:	42a3      	cmp	r3, r4
 c001958:	6862      	ldr	r2, [r4, #4]
 c00195a:	d1dd      	bne.n	c001918 <_malloc_r+0x8c>
 c00195c:	f8c8 2000 	str.w	r2, [r8]
 c001960:	e7ec      	b.n	c00193c <_malloc_r+0xb0>
 c001962:	4623      	mov	r3, r4
 c001964:	6864      	ldr	r4, [r4, #4]
 c001966:	e7ac      	b.n	c0018c2 <_malloc_r+0x36>
 c001968:	4634      	mov	r4, r6
 c00196a:	6876      	ldr	r6, [r6, #4]
 c00196c:	e7b4      	b.n	c0018d8 <_malloc_r+0x4c>
 c00196e:	4613      	mov	r3, r2
 c001970:	e7cc      	b.n	c00190c <_malloc_r+0x80>
 c001972:	230c      	movs	r3, #12
 c001974:	4638      	mov	r0, r7
 c001976:	603b      	str	r3, [r7, #0]
 c001978:	f000 f80e 	bl	c001998 <__malloc_unlock>
 c00197c:	e797      	b.n	c0018ae <_malloc_r+0x22>
 c00197e:	6025      	str	r5, [r4, #0]
 c001980:	e7dc      	b.n	c00193c <_malloc_r+0xb0>
 c001982:	605b      	str	r3, [r3, #4]
 c001984:	deff      	udf	#255	; 0xff
 c001986:	bf00      	nop
 c001988:	300000d8 	.word	0x300000d8

0c00198c <__malloc_lock>:
 c00198c:	4801      	ldr	r0, [pc, #4]	; (c001994 <__malloc_lock+0x8>)
 c00198e:	f000 b96a 	b.w	c001c66 <__retarget_lock_acquire_recursive>
 c001992:	bf00      	nop
 c001994:	3000021c 	.word	0x3000021c

0c001998 <__malloc_unlock>:
 c001998:	4801      	ldr	r0, [pc, #4]	; (c0019a0 <__malloc_unlock+0x8>)
 c00199a:	f000 b965 	b.w	c001c68 <__retarget_lock_release_recursive>
 c00199e:	bf00      	nop
 c0019a0:	3000021c 	.word	0x3000021c

0c0019a4 <std>:
 c0019a4:	2300      	movs	r3, #0
 c0019a6:	b510      	push	{r4, lr}
 c0019a8:	4604      	mov	r4, r0
 c0019aa:	6083      	str	r3, [r0, #8]
 c0019ac:	8181      	strh	r1, [r0, #12]
 c0019ae:	4619      	mov	r1, r3
 c0019b0:	6643      	str	r3, [r0, #100]	; 0x64
 c0019b2:	81c2      	strh	r2, [r0, #14]
 c0019b4:	2208      	movs	r2, #8
 c0019b6:	6183      	str	r3, [r0, #24]
 c0019b8:	e9c0 3300 	strd	r3, r3, [r0]
 c0019bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c0019c0:	305c      	adds	r0, #92	; 0x5c
 c0019c2:	f000 f90d 	bl	c001be0 <memset>
 c0019c6:	4b0d      	ldr	r3, [pc, #52]	; (c0019fc <std+0x58>)
 c0019c8:	6224      	str	r4, [r4, #32]
 c0019ca:	6263      	str	r3, [r4, #36]	; 0x24
 c0019cc:	4b0c      	ldr	r3, [pc, #48]	; (c001a00 <std+0x5c>)
 c0019ce:	62a3      	str	r3, [r4, #40]	; 0x28
 c0019d0:	4b0c      	ldr	r3, [pc, #48]	; (c001a04 <std+0x60>)
 c0019d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 c0019d4:	4b0c      	ldr	r3, [pc, #48]	; (c001a08 <std+0x64>)
 c0019d6:	6323      	str	r3, [r4, #48]	; 0x30
 c0019d8:	4b0c      	ldr	r3, [pc, #48]	; (c001a0c <std+0x68>)
 c0019da:	429c      	cmp	r4, r3
 c0019dc:	d006      	beq.n	c0019ec <std+0x48>
 c0019de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 c0019e2:	4294      	cmp	r4, r2
 c0019e4:	d002      	beq.n	c0019ec <std+0x48>
 c0019e6:	33d0      	adds	r3, #208	; 0xd0
 c0019e8:	429c      	cmp	r4, r3
 c0019ea:	d105      	bne.n	c0019f8 <std+0x54>
 c0019ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0019f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0019f4:	f000 b936 	b.w	c001c64 <__retarget_lock_init_recursive>
 c0019f8:	bd10      	pop	{r4, pc}
 c0019fa:	bf00      	nop
 c0019fc:	0c001e5d 	.word	0x0c001e5d
 c001a00:	0c001e7f 	.word	0x0c001e7f
 c001a04:	0c001eb7 	.word	0x0c001eb7
 c001a08:	0c001edb 	.word	0x0c001edb
 c001a0c:	300000e0 	.word	0x300000e0

0c001a10 <stdio_exit_handler>:
 c001a10:	4a02      	ldr	r2, [pc, #8]	; (c001a1c <stdio_exit_handler+0xc>)
 c001a12:	4903      	ldr	r1, [pc, #12]	; (c001a20 <stdio_exit_handler+0x10>)
 c001a14:	4803      	ldr	r0, [pc, #12]	; (c001a24 <stdio_exit_handler+0x14>)
 c001a16:	f000 b869 	b.w	c001aec <_fwalk_sglue>
 c001a1a:	bf00      	nop
 c001a1c:	3000000c 	.word	0x3000000c
 c001a20:	0c001e0d 	.word	0x0c001e0d
 c001a24:	30000018 	.word	0x30000018

0c001a28 <cleanup_stdio>:
 c001a28:	6841      	ldr	r1, [r0, #4]
 c001a2a:	4b0c      	ldr	r3, [pc, #48]	; (c001a5c <cleanup_stdio+0x34>)
 c001a2c:	4299      	cmp	r1, r3
 c001a2e:	b510      	push	{r4, lr}
 c001a30:	4604      	mov	r4, r0
 c001a32:	d001      	beq.n	c001a38 <cleanup_stdio+0x10>
 c001a34:	f000 f9ea 	bl	c001e0c <_fflush_r>
 c001a38:	68a1      	ldr	r1, [r4, #8]
 c001a3a:	4b09      	ldr	r3, [pc, #36]	; (c001a60 <cleanup_stdio+0x38>)
 c001a3c:	4299      	cmp	r1, r3
 c001a3e:	d002      	beq.n	c001a46 <cleanup_stdio+0x1e>
 c001a40:	4620      	mov	r0, r4
 c001a42:	f000 f9e3 	bl	c001e0c <_fflush_r>
 c001a46:	68e1      	ldr	r1, [r4, #12]
 c001a48:	4b06      	ldr	r3, [pc, #24]	; (c001a64 <cleanup_stdio+0x3c>)
 c001a4a:	4299      	cmp	r1, r3
 c001a4c:	d004      	beq.n	c001a58 <cleanup_stdio+0x30>
 c001a4e:	4620      	mov	r0, r4
 c001a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001a54:	f000 b9da 	b.w	c001e0c <_fflush_r>
 c001a58:	bd10      	pop	{r4, pc}
 c001a5a:	bf00      	nop
 c001a5c:	300000e0 	.word	0x300000e0
 c001a60:	30000148 	.word	0x30000148
 c001a64:	300001b0 	.word	0x300001b0

0c001a68 <global_stdio_init.part.0>:
 c001a68:	b510      	push	{r4, lr}
 c001a6a:	4b0b      	ldr	r3, [pc, #44]	; (c001a98 <global_stdio_init.part.0+0x30>)
 c001a6c:	2104      	movs	r1, #4
 c001a6e:	4c0b      	ldr	r4, [pc, #44]	; (c001a9c <global_stdio_init.part.0+0x34>)
 c001a70:	4a0b      	ldr	r2, [pc, #44]	; (c001aa0 <global_stdio_init.part.0+0x38>)
 c001a72:	4620      	mov	r0, r4
 c001a74:	601a      	str	r2, [r3, #0]
 c001a76:	2200      	movs	r2, #0
 c001a78:	f7ff ff94 	bl	c0019a4 <std>
 c001a7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 c001a80:	2201      	movs	r2, #1
 c001a82:	2109      	movs	r1, #9
 c001a84:	f7ff ff8e 	bl	c0019a4 <std>
 c001a88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 c001a8c:	2202      	movs	r2, #2
 c001a8e:	2112      	movs	r1, #18
 c001a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001a94:	f7ff bf86 	b.w	c0019a4 <std>
 c001a98:	30000218 	.word	0x30000218
 c001a9c:	300000e0 	.word	0x300000e0
 c001aa0:	0c001a11 	.word	0x0c001a11

0c001aa4 <__sfp_lock_acquire>:
 c001aa4:	4801      	ldr	r0, [pc, #4]	; (c001aac <__sfp_lock_acquire+0x8>)
 c001aa6:	f000 b8de 	b.w	c001c66 <__retarget_lock_acquire_recursive>
 c001aaa:	bf00      	nop
 c001aac:	3000021d 	.word	0x3000021d

0c001ab0 <__sfp_lock_release>:
 c001ab0:	4801      	ldr	r0, [pc, #4]	; (c001ab8 <__sfp_lock_release+0x8>)
 c001ab2:	f000 b8d9 	b.w	c001c68 <__retarget_lock_release_recursive>
 c001ab6:	bf00      	nop
 c001ab8:	3000021d 	.word	0x3000021d

0c001abc <__sinit>:
 c001abc:	b510      	push	{r4, lr}
 c001abe:	4604      	mov	r4, r0
 c001ac0:	f7ff fff0 	bl	c001aa4 <__sfp_lock_acquire>
 c001ac4:	6a23      	ldr	r3, [r4, #32]
 c001ac6:	b11b      	cbz	r3, c001ad0 <__sinit+0x14>
 c001ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001acc:	f7ff bff0 	b.w	c001ab0 <__sfp_lock_release>
 c001ad0:	4b04      	ldr	r3, [pc, #16]	; (c001ae4 <__sinit+0x28>)
 c001ad2:	6223      	str	r3, [r4, #32]
 c001ad4:	4b04      	ldr	r3, [pc, #16]	; (c001ae8 <__sinit+0x2c>)
 c001ad6:	681b      	ldr	r3, [r3, #0]
 c001ad8:	2b00      	cmp	r3, #0
 c001ada:	d1f5      	bne.n	c001ac8 <__sinit+0xc>
 c001adc:	f7ff ffc4 	bl	c001a68 <global_stdio_init.part.0>
 c001ae0:	e7f2      	b.n	c001ac8 <__sinit+0xc>
 c001ae2:	bf00      	nop
 c001ae4:	0c001a29 	.word	0x0c001a29
 c001ae8:	30000218 	.word	0x30000218

0c001aec <_fwalk_sglue>:
 c001aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001af0:	4607      	mov	r7, r0
 c001af2:	4688      	mov	r8, r1
 c001af4:	4614      	mov	r4, r2
 c001af6:	2600      	movs	r6, #0
 c001af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c001afc:	f1b9 0901 	subs.w	r9, r9, #1
 c001b00:	d505      	bpl.n	c001b0e <_fwalk_sglue+0x22>
 c001b02:	6824      	ldr	r4, [r4, #0]
 c001b04:	2c00      	cmp	r4, #0
 c001b06:	d1f7      	bne.n	c001af8 <_fwalk_sglue+0xc>
 c001b08:	4630      	mov	r0, r6
 c001b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c001b0e:	89ab      	ldrh	r3, [r5, #12]
 c001b10:	2b01      	cmp	r3, #1
 c001b12:	d907      	bls.n	c001b24 <_fwalk_sglue+0x38>
 c001b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c001b18:	3301      	adds	r3, #1
 c001b1a:	d003      	beq.n	c001b24 <_fwalk_sglue+0x38>
 c001b1c:	4629      	mov	r1, r5
 c001b1e:	4638      	mov	r0, r7
 c001b20:	47c0      	blx	r8
 c001b22:	4306      	orrs	r6, r0
 c001b24:	3568      	adds	r5, #104	; 0x68
 c001b26:	e7e9      	b.n	c001afc <_fwalk_sglue+0x10>

0c001b28 <_puts_r>:
 c001b28:	6a03      	ldr	r3, [r0, #32]
 c001b2a:	b570      	push	{r4, r5, r6, lr}
 c001b2c:	4605      	mov	r5, r0
 c001b2e:	460e      	mov	r6, r1
 c001b30:	6884      	ldr	r4, [r0, #8]
 c001b32:	b90b      	cbnz	r3, c001b38 <_puts_r+0x10>
 c001b34:	f7ff ffc2 	bl	c001abc <__sinit>
 c001b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001b3a:	07db      	lsls	r3, r3, #31
 c001b3c:	d405      	bmi.n	c001b4a <_puts_r+0x22>
 c001b3e:	89a3      	ldrh	r3, [r4, #12]
 c001b40:	0598      	lsls	r0, r3, #22
 c001b42:	d402      	bmi.n	c001b4a <_puts_r+0x22>
 c001b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001b46:	f000 f88e 	bl	c001c66 <__retarget_lock_acquire_recursive>
 c001b4a:	89a3      	ldrh	r3, [r4, #12]
 c001b4c:	0719      	lsls	r1, r3, #28
 c001b4e:	d513      	bpl.n	c001b78 <_puts_r+0x50>
 c001b50:	6923      	ldr	r3, [r4, #16]
 c001b52:	b18b      	cbz	r3, c001b78 <_puts_r+0x50>
 c001b54:	3e01      	subs	r6, #1
 c001b56:	68a3      	ldr	r3, [r4, #8]
 c001b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c001b5c:	3b01      	subs	r3, #1
 c001b5e:	60a3      	str	r3, [r4, #8]
 c001b60:	b9e9      	cbnz	r1, c001b9e <_puts_r+0x76>
 c001b62:	2b00      	cmp	r3, #0
 c001b64:	da2e      	bge.n	c001bc4 <_puts_r+0x9c>
 c001b66:	4622      	mov	r2, r4
 c001b68:	210a      	movs	r1, #10
 c001b6a:	4628      	mov	r0, r5
 c001b6c:	f000 f9b9 	bl	c001ee2 <__swbuf_r>
 c001b70:	3001      	adds	r0, #1
 c001b72:	d007      	beq.n	c001b84 <_puts_r+0x5c>
 c001b74:	250a      	movs	r5, #10
 c001b76:	e007      	b.n	c001b88 <_puts_r+0x60>
 c001b78:	4621      	mov	r1, r4
 c001b7a:	4628      	mov	r0, r5
 c001b7c:	f000 f9ee 	bl	c001f5c <__swsetup_r>
 c001b80:	2800      	cmp	r0, #0
 c001b82:	d0e7      	beq.n	c001b54 <_puts_r+0x2c>
 c001b84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 c001b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001b8a:	07da      	lsls	r2, r3, #31
 c001b8c:	d405      	bmi.n	c001b9a <_puts_r+0x72>
 c001b8e:	89a3      	ldrh	r3, [r4, #12]
 c001b90:	059b      	lsls	r3, r3, #22
 c001b92:	d402      	bmi.n	c001b9a <_puts_r+0x72>
 c001b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001b96:	f000 f867 	bl	c001c68 <__retarget_lock_release_recursive>
 c001b9a:	4628      	mov	r0, r5
 c001b9c:	bd70      	pop	{r4, r5, r6, pc}
 c001b9e:	2b00      	cmp	r3, #0
 c001ba0:	da04      	bge.n	c001bac <_puts_r+0x84>
 c001ba2:	69a2      	ldr	r2, [r4, #24]
 c001ba4:	429a      	cmp	r2, r3
 c001ba6:	dc06      	bgt.n	c001bb6 <_puts_r+0x8e>
 c001ba8:	290a      	cmp	r1, #10
 c001baa:	d004      	beq.n	c001bb6 <_puts_r+0x8e>
 c001bac:	6823      	ldr	r3, [r4, #0]
 c001bae:	1c5a      	adds	r2, r3, #1
 c001bb0:	6022      	str	r2, [r4, #0]
 c001bb2:	7019      	strb	r1, [r3, #0]
 c001bb4:	e7cf      	b.n	c001b56 <_puts_r+0x2e>
 c001bb6:	4622      	mov	r2, r4
 c001bb8:	4628      	mov	r0, r5
 c001bba:	f000 f992 	bl	c001ee2 <__swbuf_r>
 c001bbe:	3001      	adds	r0, #1
 c001bc0:	d1c9      	bne.n	c001b56 <_puts_r+0x2e>
 c001bc2:	e7df      	b.n	c001b84 <_puts_r+0x5c>
 c001bc4:	6823      	ldr	r3, [r4, #0]
 c001bc6:	250a      	movs	r5, #10
 c001bc8:	1c5a      	adds	r2, r3, #1
 c001bca:	6022      	str	r2, [r4, #0]
 c001bcc:	701d      	strb	r5, [r3, #0]
 c001bce:	e7db      	b.n	c001b88 <_puts_r+0x60>

0c001bd0 <puts>:
 c001bd0:	4b02      	ldr	r3, [pc, #8]	; (c001bdc <puts+0xc>)
 c001bd2:	4601      	mov	r1, r0
 c001bd4:	6818      	ldr	r0, [r3, #0]
 c001bd6:	f7ff bfa7 	b.w	c001b28 <_puts_r>
 c001bda:	bf00      	nop
 c001bdc:	30000064 	.word	0x30000064

0c001be0 <memset>:
 c001be0:	4402      	add	r2, r0
 c001be2:	4603      	mov	r3, r0
 c001be4:	4293      	cmp	r3, r2
 c001be6:	d100      	bne.n	c001bea <memset+0xa>
 c001be8:	4770      	bx	lr
 c001bea:	f803 1b01 	strb.w	r1, [r3], #1
 c001bee:	e7f9      	b.n	c001be4 <memset+0x4>

0c001bf0 <_sbrk_r>:
 c001bf0:	b538      	push	{r3, r4, r5, lr}
 c001bf2:	2300      	movs	r3, #0
 c001bf4:	4d05      	ldr	r5, [pc, #20]	; (c001c0c <_sbrk_r+0x1c>)
 c001bf6:	4604      	mov	r4, r0
 c001bf8:	4608      	mov	r0, r1
 c001bfa:	602b      	str	r3, [r5, #0]
 c001bfc:	f7fe fe98 	bl	c000930 <_sbrk>
 c001c00:	1c43      	adds	r3, r0, #1
 c001c02:	d102      	bne.n	c001c0a <_sbrk_r+0x1a>
 c001c04:	682b      	ldr	r3, [r5, #0]
 c001c06:	b103      	cbz	r3, c001c0a <_sbrk_r+0x1a>
 c001c08:	6023      	str	r3, [r4, #0]
 c001c0a:	bd38      	pop	{r3, r4, r5, pc}
 c001c0c:	30000220 	.word	0x30000220

0c001c10 <__errno>:
 c001c10:	4b01      	ldr	r3, [pc, #4]	; (c001c18 <__errno+0x8>)
 c001c12:	6818      	ldr	r0, [r3, #0]
 c001c14:	4770      	bx	lr
 c001c16:	bf00      	nop
 c001c18:	30000064 	.word	0x30000064

0c001c1c <__libc_init_array>:
 c001c1c:	b570      	push	{r4, r5, r6, lr}
 c001c1e:	4d0d      	ldr	r5, [pc, #52]	; (c001c54 <__libc_init_array+0x38>)
 c001c20:	2600      	movs	r6, #0
 c001c22:	4c0d      	ldr	r4, [pc, #52]	; (c001c58 <__libc_init_array+0x3c>)
 c001c24:	1b64      	subs	r4, r4, r5
 c001c26:	10a4      	asrs	r4, r4, #2
 c001c28:	42a6      	cmp	r6, r4
 c001c2a:	d109      	bne.n	c001c40 <__libc_init_array+0x24>
 c001c2c:	4d0b      	ldr	r5, [pc, #44]	; (c001c5c <__libc_init_array+0x40>)
 c001c2e:	2600      	movs	r6, #0
 c001c30:	4c0b      	ldr	r4, [pc, #44]	; (c001c60 <__libc_init_array+0x44>)
 c001c32:	f000 fab5 	bl	c0021a0 <_init>
 c001c36:	1b64      	subs	r4, r4, r5
 c001c38:	10a4      	asrs	r4, r4, #2
 c001c3a:	42a6      	cmp	r6, r4
 c001c3c:	d105      	bne.n	c001c4a <__libc_init_array+0x2e>
 c001c3e:	bd70      	pop	{r4, r5, r6, pc}
 c001c40:	f855 3b04 	ldr.w	r3, [r5], #4
 c001c44:	3601      	adds	r6, #1
 c001c46:	4798      	blx	r3
 c001c48:	e7ee      	b.n	c001c28 <__libc_init_array+0xc>
 c001c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 c001c4e:	3601      	adds	r6, #1
 c001c50:	4798      	blx	r3
 c001c52:	e7f2      	b.n	c001c3a <__libc_init_array+0x1e>
 c001c54:	0c00222c 	.word	0x0c00222c
 c001c58:	0c00222c 	.word	0x0c00222c
 c001c5c:	0c00222c 	.word	0x0c00222c
 c001c60:	0c002230 	.word	0x0c002230

0c001c64 <__retarget_lock_init_recursive>:
 c001c64:	4770      	bx	lr

0c001c66 <__retarget_lock_acquire_recursive>:
 c001c66:	4770      	bx	lr

0c001c68 <__retarget_lock_release_recursive>:
 c001c68:	4770      	bx	lr
	...

0c001c6c <_free_r>:
 c001c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c001c6e:	2900      	cmp	r1, #0
 c001c70:	d043      	beq.n	c001cfa <_free_r+0x8e>
 c001c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c001c76:	1f0c      	subs	r4, r1, #4
 c001c78:	9001      	str	r0, [sp, #4]
 c001c7a:	2b00      	cmp	r3, #0
 c001c7c:	bfb8      	it	lt
 c001c7e:	18e4      	addlt	r4, r4, r3
 c001c80:	f7ff fe84 	bl	c00198c <__malloc_lock>
 c001c84:	4a1e      	ldr	r2, [pc, #120]	; (c001d00 <_free_r+0x94>)
 c001c86:	9801      	ldr	r0, [sp, #4]
 c001c88:	6813      	ldr	r3, [r2, #0]
 c001c8a:	b933      	cbnz	r3, c001c9a <_free_r+0x2e>
 c001c8c:	6063      	str	r3, [r4, #4]
 c001c8e:	6014      	str	r4, [r2, #0]
 c001c90:	b003      	add	sp, #12
 c001c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c001c96:	f7ff be7f 	b.w	c001998 <__malloc_unlock>
 c001c9a:	42a3      	cmp	r3, r4
 c001c9c:	d908      	bls.n	c001cb0 <_free_r+0x44>
 c001c9e:	6825      	ldr	r5, [r4, #0]
 c001ca0:	1961      	adds	r1, r4, r5
 c001ca2:	428b      	cmp	r3, r1
 c001ca4:	bf01      	itttt	eq
 c001ca6:	6819      	ldreq	r1, [r3, #0]
 c001ca8:	685b      	ldreq	r3, [r3, #4]
 c001caa:	1949      	addeq	r1, r1, r5
 c001cac:	6021      	streq	r1, [r4, #0]
 c001cae:	e7ed      	b.n	c001c8c <_free_r+0x20>
 c001cb0:	461a      	mov	r2, r3
 c001cb2:	685b      	ldr	r3, [r3, #4]
 c001cb4:	b10b      	cbz	r3, c001cba <_free_r+0x4e>
 c001cb6:	42a3      	cmp	r3, r4
 c001cb8:	d9fa      	bls.n	c001cb0 <_free_r+0x44>
 c001cba:	6811      	ldr	r1, [r2, #0]
 c001cbc:	1855      	adds	r5, r2, r1
 c001cbe:	42a5      	cmp	r5, r4
 c001cc0:	d10b      	bne.n	c001cda <_free_r+0x6e>
 c001cc2:	6824      	ldr	r4, [r4, #0]
 c001cc4:	4421      	add	r1, r4
 c001cc6:	1854      	adds	r4, r2, r1
 c001cc8:	6011      	str	r1, [r2, #0]
 c001cca:	42a3      	cmp	r3, r4
 c001ccc:	d1e0      	bne.n	c001c90 <_free_r+0x24>
 c001cce:	681c      	ldr	r4, [r3, #0]
 c001cd0:	685b      	ldr	r3, [r3, #4]
 c001cd2:	440c      	add	r4, r1
 c001cd4:	6053      	str	r3, [r2, #4]
 c001cd6:	6014      	str	r4, [r2, #0]
 c001cd8:	e7da      	b.n	c001c90 <_free_r+0x24>
 c001cda:	d902      	bls.n	c001ce2 <_free_r+0x76>
 c001cdc:	230c      	movs	r3, #12
 c001cde:	6003      	str	r3, [r0, #0]
 c001ce0:	e7d6      	b.n	c001c90 <_free_r+0x24>
 c001ce2:	6825      	ldr	r5, [r4, #0]
 c001ce4:	1961      	adds	r1, r4, r5
 c001ce6:	428b      	cmp	r3, r1
 c001ce8:	bf02      	ittt	eq
 c001cea:	6819      	ldreq	r1, [r3, #0]
 c001cec:	685b      	ldreq	r3, [r3, #4]
 c001cee:	1949      	addeq	r1, r1, r5
 c001cf0:	6063      	str	r3, [r4, #4]
 c001cf2:	bf08      	it	eq
 c001cf4:	6021      	streq	r1, [r4, #0]
 c001cf6:	6054      	str	r4, [r2, #4]
 c001cf8:	e7ca      	b.n	c001c90 <_free_r+0x24>
 c001cfa:	b003      	add	sp, #12
 c001cfc:	bd30      	pop	{r4, r5, pc}
 c001cfe:	bf00      	nop
 c001d00:	300000d8 	.word	0x300000d8

0c001d04 <__sflush_r>:
 c001d04:	898a      	ldrh	r2, [r1, #12]
 c001d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c001d0a:	4605      	mov	r5, r0
 c001d0c:	0710      	lsls	r0, r2, #28
 c001d0e:	460c      	mov	r4, r1
 c001d10:	d458      	bmi.n	c001dc4 <__sflush_r+0xc0>
 c001d12:	684b      	ldr	r3, [r1, #4]
 c001d14:	2b00      	cmp	r3, #0
 c001d16:	dc05      	bgt.n	c001d24 <__sflush_r+0x20>
 c001d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c001d1a:	2b00      	cmp	r3, #0
 c001d1c:	dc02      	bgt.n	c001d24 <__sflush_r+0x20>
 c001d1e:	2000      	movs	r0, #0
 c001d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c001d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c001d26:	2e00      	cmp	r6, #0
 c001d28:	d0f9      	beq.n	c001d1e <__sflush_r+0x1a>
 c001d2a:	2300      	movs	r3, #0
 c001d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c001d30:	682f      	ldr	r7, [r5, #0]
 c001d32:	6a21      	ldr	r1, [r4, #32]
 c001d34:	602b      	str	r3, [r5, #0]
 c001d36:	d032      	beq.n	c001d9e <__sflush_r+0x9a>
 c001d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c001d3a:	89a3      	ldrh	r3, [r4, #12]
 c001d3c:	075a      	lsls	r2, r3, #29
 c001d3e:	d505      	bpl.n	c001d4c <__sflush_r+0x48>
 c001d40:	6863      	ldr	r3, [r4, #4]
 c001d42:	1ac0      	subs	r0, r0, r3
 c001d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c001d46:	b10b      	cbz	r3, c001d4c <__sflush_r+0x48>
 c001d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c001d4a:	1ac0      	subs	r0, r0, r3
 c001d4c:	2300      	movs	r3, #0
 c001d4e:	4602      	mov	r2, r0
 c001d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c001d52:	4628      	mov	r0, r5
 c001d54:	6a21      	ldr	r1, [r4, #32]
 c001d56:	47b0      	blx	r6
 c001d58:	1c43      	adds	r3, r0, #1
 c001d5a:	89a3      	ldrh	r3, [r4, #12]
 c001d5c:	d106      	bne.n	c001d6c <__sflush_r+0x68>
 c001d5e:	6829      	ldr	r1, [r5, #0]
 c001d60:	291d      	cmp	r1, #29
 c001d62:	d82b      	bhi.n	c001dbc <__sflush_r+0xb8>
 c001d64:	4a28      	ldr	r2, [pc, #160]	; (c001e08 <__sflush_r+0x104>)
 c001d66:	410a      	asrs	r2, r1
 c001d68:	07d6      	lsls	r6, r2, #31
 c001d6a:	d427      	bmi.n	c001dbc <__sflush_r+0xb8>
 c001d6c:	2200      	movs	r2, #0
 c001d6e:	04d9      	lsls	r1, r3, #19
 c001d70:	6062      	str	r2, [r4, #4]
 c001d72:	6922      	ldr	r2, [r4, #16]
 c001d74:	6022      	str	r2, [r4, #0]
 c001d76:	d504      	bpl.n	c001d82 <__sflush_r+0x7e>
 c001d78:	1c42      	adds	r2, r0, #1
 c001d7a:	d101      	bne.n	c001d80 <__sflush_r+0x7c>
 c001d7c:	682b      	ldr	r3, [r5, #0]
 c001d7e:	b903      	cbnz	r3, c001d82 <__sflush_r+0x7e>
 c001d80:	6560      	str	r0, [r4, #84]	; 0x54
 c001d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c001d84:	602f      	str	r7, [r5, #0]
 c001d86:	2900      	cmp	r1, #0
 c001d88:	d0c9      	beq.n	c001d1e <__sflush_r+0x1a>
 c001d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c001d8e:	4299      	cmp	r1, r3
 c001d90:	d002      	beq.n	c001d98 <__sflush_r+0x94>
 c001d92:	4628      	mov	r0, r5
 c001d94:	f7ff ff6a 	bl	c001c6c <_free_r>
 c001d98:	2000      	movs	r0, #0
 c001d9a:	6360      	str	r0, [r4, #52]	; 0x34
 c001d9c:	e7c0      	b.n	c001d20 <__sflush_r+0x1c>
 c001d9e:	2301      	movs	r3, #1
 c001da0:	4628      	mov	r0, r5
 c001da2:	47b0      	blx	r6
 c001da4:	1c41      	adds	r1, r0, #1
 c001da6:	d1c8      	bne.n	c001d3a <__sflush_r+0x36>
 c001da8:	682b      	ldr	r3, [r5, #0]
 c001daa:	2b00      	cmp	r3, #0
 c001dac:	d0c5      	beq.n	c001d3a <__sflush_r+0x36>
 c001dae:	2b1d      	cmp	r3, #29
 c001db0:	d001      	beq.n	c001db6 <__sflush_r+0xb2>
 c001db2:	2b16      	cmp	r3, #22
 c001db4:	d101      	bne.n	c001dba <__sflush_r+0xb6>
 c001db6:	602f      	str	r7, [r5, #0]
 c001db8:	e7b1      	b.n	c001d1e <__sflush_r+0x1a>
 c001dba:	89a3      	ldrh	r3, [r4, #12]
 c001dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001dc0:	81a3      	strh	r3, [r4, #12]
 c001dc2:	e7ad      	b.n	c001d20 <__sflush_r+0x1c>
 c001dc4:	690f      	ldr	r7, [r1, #16]
 c001dc6:	2f00      	cmp	r7, #0
 c001dc8:	d0a9      	beq.n	c001d1e <__sflush_r+0x1a>
 c001dca:	0793      	lsls	r3, r2, #30
 c001dcc:	680e      	ldr	r6, [r1, #0]
 c001dce:	600f      	str	r7, [r1, #0]
 c001dd0:	bf0c      	ite	eq
 c001dd2:	694b      	ldreq	r3, [r1, #20]
 c001dd4:	2300      	movne	r3, #0
 c001dd6:	eba6 0807 	sub.w	r8, r6, r7
 c001dda:	608b      	str	r3, [r1, #8]
 c001ddc:	f1b8 0f00 	cmp.w	r8, #0
 c001de0:	dd9d      	ble.n	c001d1e <__sflush_r+0x1a>
 c001de2:	4643      	mov	r3, r8
 c001de4:	463a      	mov	r2, r7
 c001de6:	6a21      	ldr	r1, [r4, #32]
 c001de8:	4628      	mov	r0, r5
 c001dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c001dec:	47b0      	blx	r6
 c001dee:	2800      	cmp	r0, #0
 c001df0:	dc06      	bgt.n	c001e00 <__sflush_r+0xfc>
 c001df2:	89a3      	ldrh	r3, [r4, #12]
 c001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001dfc:	81a3      	strh	r3, [r4, #12]
 c001dfe:	e78f      	b.n	c001d20 <__sflush_r+0x1c>
 c001e00:	4407      	add	r7, r0
 c001e02:	eba8 0800 	sub.w	r8, r8, r0
 c001e06:	e7e9      	b.n	c001ddc <__sflush_r+0xd8>
 c001e08:	dfbffffe 	.word	0xdfbffffe

0c001e0c <_fflush_r>:
 c001e0c:	b538      	push	{r3, r4, r5, lr}
 c001e0e:	690b      	ldr	r3, [r1, #16]
 c001e10:	4605      	mov	r5, r0
 c001e12:	460c      	mov	r4, r1
 c001e14:	b913      	cbnz	r3, c001e1c <_fflush_r+0x10>
 c001e16:	2500      	movs	r5, #0
 c001e18:	4628      	mov	r0, r5
 c001e1a:	bd38      	pop	{r3, r4, r5, pc}
 c001e1c:	b118      	cbz	r0, c001e26 <_fflush_r+0x1a>
 c001e1e:	6a03      	ldr	r3, [r0, #32]
 c001e20:	b90b      	cbnz	r3, c001e26 <_fflush_r+0x1a>
 c001e22:	f7ff fe4b 	bl	c001abc <__sinit>
 c001e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c001e2a:	2b00      	cmp	r3, #0
 c001e2c:	d0f3      	beq.n	c001e16 <_fflush_r+0xa>
 c001e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c001e30:	07d0      	lsls	r0, r2, #31
 c001e32:	d404      	bmi.n	c001e3e <_fflush_r+0x32>
 c001e34:	0599      	lsls	r1, r3, #22
 c001e36:	d402      	bmi.n	c001e3e <_fflush_r+0x32>
 c001e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001e3a:	f7ff ff14 	bl	c001c66 <__retarget_lock_acquire_recursive>
 c001e3e:	4628      	mov	r0, r5
 c001e40:	4621      	mov	r1, r4
 c001e42:	f7ff ff5f 	bl	c001d04 <__sflush_r>
 c001e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c001e48:	4605      	mov	r5, r0
 c001e4a:	07da      	lsls	r2, r3, #31
 c001e4c:	d4e4      	bmi.n	c001e18 <_fflush_r+0xc>
 c001e4e:	89a3      	ldrh	r3, [r4, #12]
 c001e50:	059b      	lsls	r3, r3, #22
 c001e52:	d4e1      	bmi.n	c001e18 <_fflush_r+0xc>
 c001e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c001e56:	f7ff ff07 	bl	c001c68 <__retarget_lock_release_recursive>
 c001e5a:	e7dd      	b.n	c001e18 <_fflush_r+0xc>

0c001e5c <__sread>:
 c001e5c:	b510      	push	{r4, lr}
 c001e5e:	460c      	mov	r4, r1
 c001e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e64:	f000 f978 	bl	c002158 <_read_r>
 c001e68:	2800      	cmp	r0, #0
 c001e6a:	bfab      	itete	ge
 c001e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c001e6e:	89a3      	ldrhlt	r3, [r4, #12]
 c001e70:	181b      	addge	r3, r3, r0
 c001e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c001e76:	bfac      	ite	ge
 c001e78:	6563      	strge	r3, [r4, #84]	; 0x54
 c001e7a:	81a3      	strhlt	r3, [r4, #12]
 c001e7c:	bd10      	pop	{r4, pc}

0c001e7e <__swrite>:
 c001e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c001e82:	461f      	mov	r7, r3
 c001e84:	898b      	ldrh	r3, [r1, #12]
 c001e86:	4605      	mov	r5, r0
 c001e88:	460c      	mov	r4, r1
 c001e8a:	05db      	lsls	r3, r3, #23
 c001e8c:	4616      	mov	r6, r2
 c001e8e:	d505      	bpl.n	c001e9c <__swrite+0x1e>
 c001e90:	2302      	movs	r3, #2
 c001e92:	2200      	movs	r2, #0
 c001e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001e98:	f000 f94c 	bl	c002134 <_lseek_r>
 c001e9c:	89a3      	ldrh	r3, [r4, #12]
 c001e9e:	4632      	mov	r2, r6
 c001ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c001ea4:	4628      	mov	r0, r5
 c001ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c001eaa:	81a3      	strh	r3, [r4, #12]
 c001eac:	463b      	mov	r3, r7
 c001eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c001eb2:	f000 b963 	b.w	c00217c <_write_r>

0c001eb6 <__sseek>:
 c001eb6:	b510      	push	{r4, lr}
 c001eb8:	460c      	mov	r4, r1
 c001eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001ebe:	f000 f939 	bl	c002134 <_lseek_r>
 c001ec2:	1c43      	adds	r3, r0, #1
 c001ec4:	89a3      	ldrh	r3, [r4, #12]
 c001ec6:	bf15      	itete	ne
 c001ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 c001eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c001ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c001ed2:	81a3      	strheq	r3, [r4, #12]
 c001ed4:	bf18      	it	ne
 c001ed6:	81a3      	strhne	r3, [r4, #12]
 c001ed8:	bd10      	pop	{r4, pc}

0c001eda <__sclose>:
 c001eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c001ede:	f000 b8f7 	b.w	c0020d0 <_close_r>

0c001ee2 <__swbuf_r>:
 c001ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001ee4:	460e      	mov	r6, r1
 c001ee6:	4614      	mov	r4, r2
 c001ee8:	4605      	mov	r5, r0
 c001eea:	b118      	cbz	r0, c001ef4 <__swbuf_r+0x12>
 c001eec:	6a03      	ldr	r3, [r0, #32]
 c001eee:	b90b      	cbnz	r3, c001ef4 <__swbuf_r+0x12>
 c001ef0:	f7ff fde4 	bl	c001abc <__sinit>
 c001ef4:	69a3      	ldr	r3, [r4, #24]
 c001ef6:	60a3      	str	r3, [r4, #8]
 c001ef8:	89a3      	ldrh	r3, [r4, #12]
 c001efa:	071a      	lsls	r2, r3, #28
 c001efc:	d525      	bpl.n	c001f4a <__swbuf_r+0x68>
 c001efe:	6923      	ldr	r3, [r4, #16]
 c001f00:	b31b      	cbz	r3, c001f4a <__swbuf_r+0x68>
 c001f02:	6823      	ldr	r3, [r4, #0]
 c001f04:	b2f6      	uxtb	r6, r6
 c001f06:	6922      	ldr	r2, [r4, #16]
 c001f08:	4637      	mov	r7, r6
 c001f0a:	1a98      	subs	r0, r3, r2
 c001f0c:	6963      	ldr	r3, [r4, #20]
 c001f0e:	4283      	cmp	r3, r0
 c001f10:	dc04      	bgt.n	c001f1c <__swbuf_r+0x3a>
 c001f12:	4621      	mov	r1, r4
 c001f14:	4628      	mov	r0, r5
 c001f16:	f7ff ff79 	bl	c001e0c <_fflush_r>
 c001f1a:	b9e0      	cbnz	r0, c001f56 <__swbuf_r+0x74>
 c001f1c:	68a3      	ldr	r3, [r4, #8]
 c001f1e:	3b01      	subs	r3, #1
 c001f20:	60a3      	str	r3, [r4, #8]
 c001f22:	6823      	ldr	r3, [r4, #0]
 c001f24:	1c5a      	adds	r2, r3, #1
 c001f26:	6022      	str	r2, [r4, #0]
 c001f28:	701e      	strb	r6, [r3, #0]
 c001f2a:	1c43      	adds	r3, r0, #1
 c001f2c:	6962      	ldr	r2, [r4, #20]
 c001f2e:	429a      	cmp	r2, r3
 c001f30:	d004      	beq.n	c001f3c <__swbuf_r+0x5a>
 c001f32:	89a3      	ldrh	r3, [r4, #12]
 c001f34:	07db      	lsls	r3, r3, #31
 c001f36:	d506      	bpl.n	c001f46 <__swbuf_r+0x64>
 c001f38:	2e0a      	cmp	r6, #10
 c001f3a:	d104      	bne.n	c001f46 <__swbuf_r+0x64>
 c001f3c:	4621      	mov	r1, r4
 c001f3e:	4628      	mov	r0, r5
 c001f40:	f7ff ff64 	bl	c001e0c <_fflush_r>
 c001f44:	b938      	cbnz	r0, c001f56 <__swbuf_r+0x74>
 c001f46:	4638      	mov	r0, r7
 c001f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c001f4a:	4621      	mov	r1, r4
 c001f4c:	4628      	mov	r0, r5
 c001f4e:	f000 f805 	bl	c001f5c <__swsetup_r>
 c001f52:	2800      	cmp	r0, #0
 c001f54:	d0d5      	beq.n	c001f02 <__swbuf_r+0x20>
 c001f56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 c001f5a:	e7f4      	b.n	c001f46 <__swbuf_r+0x64>

0c001f5c <__swsetup_r>:
 c001f5c:	b538      	push	{r3, r4, r5, lr}
 c001f5e:	4b2a      	ldr	r3, [pc, #168]	; (c002008 <__swsetup_r+0xac>)
 c001f60:	4605      	mov	r5, r0
 c001f62:	460c      	mov	r4, r1
 c001f64:	6818      	ldr	r0, [r3, #0]
 c001f66:	b118      	cbz	r0, c001f70 <__swsetup_r+0x14>
 c001f68:	6a03      	ldr	r3, [r0, #32]
 c001f6a:	b90b      	cbnz	r3, c001f70 <__swsetup_r+0x14>
 c001f6c:	f7ff fda6 	bl	c001abc <__sinit>
 c001f70:	89a3      	ldrh	r3, [r4, #12]
 c001f72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c001f76:	0718      	lsls	r0, r3, #28
 c001f78:	d422      	bmi.n	c001fc0 <__swsetup_r+0x64>
 c001f7a:	06d9      	lsls	r1, r3, #27
 c001f7c:	d407      	bmi.n	c001f8e <__swsetup_r+0x32>
 c001f7e:	2309      	movs	r3, #9
 c001f80:	602b      	str	r3, [r5, #0]
 c001f82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c001f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001f8a:	81a3      	strh	r3, [r4, #12]
 c001f8c:	e034      	b.n	c001ff8 <__swsetup_r+0x9c>
 c001f8e:	0758      	lsls	r0, r3, #29
 c001f90:	d512      	bpl.n	c001fb8 <__swsetup_r+0x5c>
 c001f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c001f94:	b141      	cbz	r1, c001fa8 <__swsetup_r+0x4c>
 c001f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c001f9a:	4299      	cmp	r1, r3
 c001f9c:	d002      	beq.n	c001fa4 <__swsetup_r+0x48>
 c001f9e:	4628      	mov	r0, r5
 c001fa0:	f7ff fe64 	bl	c001c6c <_free_r>
 c001fa4:	2300      	movs	r3, #0
 c001fa6:	6363      	str	r3, [r4, #52]	; 0x34
 c001fa8:	89a3      	ldrh	r3, [r4, #12]
 c001faa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c001fae:	81a3      	strh	r3, [r4, #12]
 c001fb0:	2300      	movs	r3, #0
 c001fb2:	6063      	str	r3, [r4, #4]
 c001fb4:	6923      	ldr	r3, [r4, #16]
 c001fb6:	6023      	str	r3, [r4, #0]
 c001fb8:	89a3      	ldrh	r3, [r4, #12]
 c001fba:	f043 0308 	orr.w	r3, r3, #8
 c001fbe:	81a3      	strh	r3, [r4, #12]
 c001fc0:	6923      	ldr	r3, [r4, #16]
 c001fc2:	b94b      	cbnz	r3, c001fd8 <__swsetup_r+0x7c>
 c001fc4:	89a3      	ldrh	r3, [r4, #12]
 c001fc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c001fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c001fce:	d003      	beq.n	c001fd8 <__swsetup_r+0x7c>
 c001fd0:	4621      	mov	r1, r4
 c001fd2:	4628      	mov	r0, r5
 c001fd4:	f000 f83f 	bl	c002056 <__smakebuf_r>
 c001fd8:	89a0      	ldrh	r0, [r4, #12]
 c001fda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c001fde:	f010 0301 	ands.w	r3, r0, #1
 c001fe2:	d00a      	beq.n	c001ffa <__swsetup_r+0x9e>
 c001fe4:	2300      	movs	r3, #0
 c001fe6:	60a3      	str	r3, [r4, #8]
 c001fe8:	6963      	ldr	r3, [r4, #20]
 c001fea:	425b      	negs	r3, r3
 c001fec:	61a3      	str	r3, [r4, #24]
 c001fee:	6923      	ldr	r3, [r4, #16]
 c001ff0:	b943      	cbnz	r3, c002004 <__swsetup_r+0xa8>
 c001ff2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c001ff6:	d1c4      	bne.n	c001f82 <__swsetup_r+0x26>
 c001ff8:	bd38      	pop	{r3, r4, r5, pc}
 c001ffa:	0781      	lsls	r1, r0, #30
 c001ffc:	bf58      	it	pl
 c001ffe:	6963      	ldrpl	r3, [r4, #20]
 c002000:	60a3      	str	r3, [r4, #8]
 c002002:	e7f4      	b.n	c001fee <__swsetup_r+0x92>
 c002004:	2000      	movs	r0, #0
 c002006:	e7f7      	b.n	c001ff8 <__swsetup_r+0x9c>
 c002008:	30000064 	.word	0x30000064

0c00200c <__swhatbuf_r>:
 c00200c:	b570      	push	{r4, r5, r6, lr}
 c00200e:	460c      	mov	r4, r1
 c002010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c002014:	b096      	sub	sp, #88	; 0x58
 c002016:	4615      	mov	r5, r2
 c002018:	2900      	cmp	r1, #0
 c00201a:	461e      	mov	r6, r3
 c00201c:	da0c      	bge.n	c002038 <__swhatbuf_r+0x2c>
 c00201e:	89a3      	ldrh	r3, [r4, #12]
 c002020:	2100      	movs	r1, #0
 c002022:	f013 0f80 	tst.w	r3, #128	; 0x80
 c002026:	bf0c      	ite	eq
 c002028:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 c00202c:	2340      	movne	r3, #64	; 0x40
 c00202e:	2000      	movs	r0, #0
 c002030:	6031      	str	r1, [r6, #0]
 c002032:	602b      	str	r3, [r5, #0]
 c002034:	b016      	add	sp, #88	; 0x58
 c002036:	bd70      	pop	{r4, r5, r6, pc}
 c002038:	466a      	mov	r2, sp
 c00203a:	f000 f859 	bl	c0020f0 <_fstat_r>
 c00203e:	2800      	cmp	r0, #0
 c002040:	dbed      	blt.n	c00201e <__swhatbuf_r+0x12>
 c002042:	9901      	ldr	r1, [sp, #4]
 c002044:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 c002048:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 c00204c:	4259      	negs	r1, r3
 c00204e:	4159      	adcs	r1, r3
 c002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c002054:	e7eb      	b.n	c00202e <__swhatbuf_r+0x22>

0c002056 <__smakebuf_r>:
 c002056:	898b      	ldrh	r3, [r1, #12]
 c002058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c00205a:	079d      	lsls	r5, r3, #30
 c00205c:	4606      	mov	r6, r0
 c00205e:	460c      	mov	r4, r1
 c002060:	d507      	bpl.n	c002072 <__smakebuf_r+0x1c>
 c002062:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c002066:	6023      	str	r3, [r4, #0]
 c002068:	6123      	str	r3, [r4, #16]
 c00206a:	2301      	movs	r3, #1
 c00206c:	6163      	str	r3, [r4, #20]
 c00206e:	b002      	add	sp, #8
 c002070:	bd70      	pop	{r4, r5, r6, pc}
 c002072:	ab01      	add	r3, sp, #4
 c002074:	466a      	mov	r2, sp
 c002076:	f7ff ffc9 	bl	c00200c <__swhatbuf_r>
 c00207a:	9900      	ldr	r1, [sp, #0]
 c00207c:	4605      	mov	r5, r0
 c00207e:	4630      	mov	r0, r6
 c002080:	f7ff fc04 	bl	c00188c <_malloc_r>
 c002084:	b948      	cbnz	r0, c00209a <__smakebuf_r+0x44>
 c002086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00208a:	059a      	lsls	r2, r3, #22
 c00208c:	d4ef      	bmi.n	c00206e <__smakebuf_r+0x18>
 c00208e:	f023 0303 	bic.w	r3, r3, #3
 c002092:	f043 0302 	orr.w	r3, r3, #2
 c002096:	81a3      	strh	r3, [r4, #12]
 c002098:	e7e3      	b.n	c002062 <__smakebuf_r+0xc>
 c00209a:	89a3      	ldrh	r3, [r4, #12]
 c00209c:	6020      	str	r0, [r4, #0]
 c00209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0020a2:	6120      	str	r0, [r4, #16]
 c0020a4:	81a3      	strh	r3, [r4, #12]
 c0020a6:	9b00      	ldr	r3, [sp, #0]
 c0020a8:	6163      	str	r3, [r4, #20]
 c0020aa:	9b01      	ldr	r3, [sp, #4]
 c0020ac:	b15b      	cbz	r3, c0020c6 <__smakebuf_r+0x70>
 c0020ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0020b2:	4630      	mov	r0, r6
 c0020b4:	f000 f82e 	bl	c002114 <_isatty_r>
 c0020b8:	b128      	cbz	r0, c0020c6 <__smakebuf_r+0x70>
 c0020ba:	89a3      	ldrh	r3, [r4, #12]
 c0020bc:	f023 0303 	bic.w	r3, r3, #3
 c0020c0:	f043 0301 	orr.w	r3, r3, #1
 c0020c4:	81a3      	strh	r3, [r4, #12]
 c0020c6:	89a3      	ldrh	r3, [r4, #12]
 c0020c8:	431d      	orrs	r5, r3
 c0020ca:	81a5      	strh	r5, [r4, #12]
 c0020cc:	e7cf      	b.n	c00206e <__smakebuf_r+0x18>
	...

0c0020d0 <_close_r>:
 c0020d0:	b538      	push	{r3, r4, r5, lr}
 c0020d2:	2300      	movs	r3, #0
 c0020d4:	4d05      	ldr	r5, [pc, #20]	; (c0020ec <_close_r+0x1c>)
 c0020d6:	4604      	mov	r4, r0
 c0020d8:	4608      	mov	r0, r1
 c0020da:	602b      	str	r3, [r5, #0]
 c0020dc:	f7fe fbf4 	bl	c0008c8 <_close>
 c0020e0:	1c43      	adds	r3, r0, #1
 c0020e2:	d102      	bne.n	c0020ea <_close_r+0x1a>
 c0020e4:	682b      	ldr	r3, [r5, #0]
 c0020e6:	b103      	cbz	r3, c0020ea <_close_r+0x1a>
 c0020e8:	6023      	str	r3, [r4, #0]
 c0020ea:	bd38      	pop	{r3, r4, r5, pc}
 c0020ec:	30000220 	.word	0x30000220

0c0020f0 <_fstat_r>:
 c0020f0:	b538      	push	{r3, r4, r5, lr}
 c0020f2:	2300      	movs	r3, #0
 c0020f4:	4d06      	ldr	r5, [pc, #24]	; (c002110 <_fstat_r+0x20>)
 c0020f6:	4604      	mov	r4, r0
 c0020f8:	4608      	mov	r0, r1
 c0020fa:	4611      	mov	r1, r2
 c0020fc:	602b      	str	r3, [r5, #0]
 c0020fe:	f7fe fbef 	bl	c0008e0 <_fstat>
 c002102:	1c43      	adds	r3, r0, #1
 c002104:	d102      	bne.n	c00210c <_fstat_r+0x1c>
 c002106:	682b      	ldr	r3, [r5, #0]
 c002108:	b103      	cbz	r3, c00210c <_fstat_r+0x1c>
 c00210a:	6023      	str	r3, [r4, #0]
 c00210c:	bd38      	pop	{r3, r4, r5, pc}
 c00210e:	bf00      	nop
 c002110:	30000220 	.word	0x30000220

0c002114 <_isatty_r>:
 c002114:	b538      	push	{r3, r4, r5, lr}
 c002116:	2300      	movs	r3, #0
 c002118:	4d05      	ldr	r5, [pc, #20]	; (c002130 <_isatty_r+0x1c>)
 c00211a:	4604      	mov	r4, r0
 c00211c:	4608      	mov	r0, r1
 c00211e:	602b      	str	r3, [r5, #0]
 c002120:	f7fe fbee 	bl	c000900 <_isatty>
 c002124:	1c43      	adds	r3, r0, #1
 c002126:	d102      	bne.n	c00212e <_isatty_r+0x1a>
 c002128:	682b      	ldr	r3, [r5, #0]
 c00212a:	b103      	cbz	r3, c00212e <_isatty_r+0x1a>
 c00212c:	6023      	str	r3, [r4, #0]
 c00212e:	bd38      	pop	{r3, r4, r5, pc}
 c002130:	30000220 	.word	0x30000220

0c002134 <_lseek_r>:
 c002134:	b538      	push	{r3, r4, r5, lr}
 c002136:	4604      	mov	r4, r0
 c002138:	4d06      	ldr	r5, [pc, #24]	; (c002154 <_lseek_r+0x20>)
 c00213a:	4608      	mov	r0, r1
 c00213c:	4611      	mov	r1, r2
 c00213e:	2200      	movs	r2, #0
 c002140:	602a      	str	r2, [r5, #0]
 c002142:	461a      	mov	r2, r3
 c002144:	f7fe fbe7 	bl	c000916 <_lseek>
 c002148:	1c43      	adds	r3, r0, #1
 c00214a:	d102      	bne.n	c002152 <_lseek_r+0x1e>
 c00214c:	682b      	ldr	r3, [r5, #0]
 c00214e:	b103      	cbz	r3, c002152 <_lseek_r+0x1e>
 c002150:	6023      	str	r3, [r4, #0]
 c002152:	bd38      	pop	{r3, r4, r5, pc}
 c002154:	30000220 	.word	0x30000220

0c002158 <_read_r>:
 c002158:	b538      	push	{r3, r4, r5, lr}
 c00215a:	4604      	mov	r4, r0
 c00215c:	4d06      	ldr	r5, [pc, #24]	; (c002178 <_read_r+0x20>)
 c00215e:	4608      	mov	r0, r1
 c002160:	4611      	mov	r1, r2
 c002162:	2200      	movs	r2, #0
 c002164:	602a      	str	r2, [r5, #0]
 c002166:	461a      	mov	r2, r3
 c002168:	f7fe fb75 	bl	c000856 <_read>
 c00216c:	1c43      	adds	r3, r0, #1
 c00216e:	d102      	bne.n	c002176 <_read_r+0x1e>
 c002170:	682b      	ldr	r3, [r5, #0]
 c002172:	b103      	cbz	r3, c002176 <_read_r+0x1e>
 c002174:	6023      	str	r3, [r4, #0]
 c002176:	bd38      	pop	{r3, r4, r5, pc}
 c002178:	30000220 	.word	0x30000220

0c00217c <_write_r>:
 c00217c:	b538      	push	{r3, r4, r5, lr}
 c00217e:	4604      	mov	r4, r0
 c002180:	4d06      	ldr	r5, [pc, #24]	; (c00219c <_write_r+0x20>)
 c002182:	4608      	mov	r0, r1
 c002184:	4611      	mov	r1, r2
 c002186:	2200      	movs	r2, #0
 c002188:	602a      	str	r2, [r5, #0]
 c00218a:	461a      	mov	r2, r3
 c00218c:	f7fe fb80 	bl	c000890 <_write>
 c002190:	1c43      	adds	r3, r0, #1
 c002192:	d102      	bne.n	c00219a <_write_r+0x1e>
 c002194:	682b      	ldr	r3, [r5, #0]
 c002196:	b103      	cbz	r3, c00219a <_write_r+0x1e>
 c002198:	6023      	str	r3, [r4, #0]
 c00219a:	bd38      	pop	{r3, r4, r5, pc}
 c00219c:	30000220 	.word	0x30000220

0c0021a0 <_init>:
 c0021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0021a2:	bf00      	nop
 c0021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0021a6:	bc08      	pop	{r3}
 c0021a8:	469e      	mov	lr, r3
 c0021aa:	4770      	bx	lr

0c0021ac <_fini>:
 c0021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0021ae:	bf00      	nop
 c0021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0021b2:	bc08      	pop	{r3}
 c0021b4:	469e      	mov	lr, r3
 c0021b6:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <decrypt>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bb74 	b.w	c0006f0 <__acle_se_decrypt>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 be0a 	b.w	c000c24 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <encrypt>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bb16 	b.w	c000644 <__acle_se_encrypt>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 ba60 	b.w	c0004e0 <__acle_se_SECURE_RegisterCallback>

0c03e020 <key_stream>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c2 bab0 	b.w	c000588 <__acle_se_key_stream>
	...
